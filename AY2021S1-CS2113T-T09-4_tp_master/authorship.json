[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Trakcal\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    archiveBaseName \u003d \"trakCAL\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "1-Karthigeyan-1": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Rani Karthigeyan Rajendrakumar| [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Poon Chuan An | [Github](https://github.com/poonchuanan) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jenny Lin | [Github](https://github.com/jlifah) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Owen Chew | [Github](https://github.com/chewyang) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Puah Siew Wen | [Github](https://github.com/e0425705) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "jlifah": 1,
      "chewyang": 1,
      "e0425705": 1,
      "-": 4,
      "1-Karthigeyan-1": 1,
      "poonchuanan": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "# Developer Guide for trakCAL"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The purpose of this developer guide is as reference for future collaborators of **trakCAL**."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "By: CS2113-T09-4    Since: September 2020   Licence: MIT"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "## 1.0 Setting up"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 1.1 Prerequisites"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " * Java 11 (can be download from [here](https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " * Intellij IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 1.2 Setting up:    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Download the latest **traKCAL** jar file ([here](https://github.com/AY2021S1-CS2113T-T09-4/tp/releases))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Copy jar file into an empty folder in a convenient location (eg. Desktop)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Open terminal and navigate directory to the folder containing jar file "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* Enter the following command line to run program: ```java -jar traKCAL.jar```   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* Look through the user guide for a full detailed explanation on the functionality of **traKCAL**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "## 2.0 Design "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 2.1 Architecture"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "![Architecture](diagrams/Architecture.png)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "*Figure 1. Diagram for Model component*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The Architecture Diagram shown above explains the high-level design of **traKCAL**."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**traKCAL** is made up of mainly 6 components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "`trakCAL`: tracKCAL starts here"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "`Ui`: Displays any message that the user can see and interact with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": "`Logic`: Interprets what the user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jlifah"
        },
        "content": "`Command`: Executes specific command according to interpretation by `Logic`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jlifah"
        },
        "content": "`Storage`: Saves required data into the hard disk or retrieves data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "`Model`: Visualize data into graph"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 2.2 Logic component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "![Logic Component](diagrams/LogicComponent.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "*Figure 2. Diagram for logic component*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The main bulk of data processing takes place in the logic component. In this component, "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "the data from the userinput is checked for its validity and parsed down futher to its respective command blocks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "These blocks of command are derived from the abstract Command class. Each different command block deals with the "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "proposed functionality which can be associated with `Ui`,`storage` or `model` components. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* **traKCAL** uses the parser class to filter based on command words by user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Description that comes after is further parsed down by the Parser."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* Respective Command object is created and is executed by **traKCAL**."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Respective execution methods can be further associated with `UI`, `Storage` and `Model` components."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 2.3 Model component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "![Model_Component](diagrams/model.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "*Figure 3. Diagram for Model component*"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "**API**: Model.java "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "In the Model component, "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* Stores a DayMap object that holds the data for each date."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* Stores an ActivityList that holds the list of Activities, Food or Exercise for each day "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* Does not depend on any of the other components."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "## 3.0 Implementation"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jlifah"
        },
        "content": "### 3.1 Create User Profile"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jlifah"
        },
        "content": "The sequence diagram below shows how the components will react to a new user or for a returning user. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jlifah"
        },
        "content": "![CreateNewUser](diagrams/CreateNewUser.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jlifah"
        },
        "content": "*Figure 4. Components interactions for tracKCAL checks for new or existing user*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 3.2 Add activity feature"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0425705"
        },
        "content": "#### 3.2.1 Current Implementation"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The adding mechanism is used by `AddFoodCommand` and `AddExerciseCommand` to add to the list of date stated in user input."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The following Sequence Diagram shows how `AddFoodCommand` is carried out when the user issues add command, in this case, `add f/ food c/ 170 d/ 2020-10-22`:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0425705"
        },
        "content": "![Add Activity](diagrams/AddFoodFeature.jpg)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "*Figure 5. Component interactions for add food command*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e `AddExerciseCommand` diagram has a similar logic."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "#### 3.2.2 Design Considerations"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Aspect: How to add activity"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eAlternative 1(current choice): Using single letter words as tags for input commands. (e.g. add f/ XXX c/ XXX d/ XXX)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Pros: Faster and shorter input keys for user."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Cons: Have to ensure that user is clear on what tags to input."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eAlternative 2: Using full words as tags for input commands. (e.g. add food/ XXX calorie/ XXX date/ XXX)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Pros: Tags are obvious in what input is expected."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Cons: More wordy input needed from user."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 3.3 Listing feature for find and list commands"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The listing mechanism used by `ListCommand` and `FindCommand` to display the required list of activities is facilitated by the lastSeenList of class `ActivityList`. "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The following operations could be applied to the lastSeenList which would change the actual data in the database:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0425705"
        },
        "content": "- delete"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0425705"
        },
        "content": "- move"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0425705"
        },
        "content": "- edit (note: edit only modifies entries in the database after list command)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The details of those operations can be found further down."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "#### 3.3.1 List"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "This feature is used to list the entries of a specified date where the extracted activityList would be used as the lastSeenList itself. "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The following sequence diagram shows how the lastSeenList is set after a “list date\" command where date is of YYYY-MM-DD or after a “list” command where the date is the current date."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "![Listing feature for find and list commands](diagrams/setLastSeenList.png)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "*Figure 6. Sequence diagram of setting the lastSeenList after a `list` command*"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### 3.3.2 Find"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The editing mechanism is used by the basic find features: `FindDescriptionCommand`, `FindCalorieCommand`, "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0425705"
        },
        "content": "as well as the advanced find features: `FindAllCommand` and `FindEitherCommand` to look for keywords in the list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The following sequence diagram shows how the lastSeenList is set after a find command."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0425705"
        },
        "content": "![Find Sequence Diagram](diagrams/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0425705"
        },
        "content": "*Figure 7. Sequence diagram of setting the lastSeenList after a find command*"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chewyang"
        },
        "content": "### 3.4 Displaying the list after `find` or `list` commands"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### 3.4.1 Current implementation"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chewyang"
        },
        "content": "The mechanism used to display the lastSeenList invoked by the list or find commands is facilitated by the listDrawer and findDrawer class respectively. They both work the same way but the list produced by findDrawer has an extra column which contains the dates of the respective entries."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The following sequence diagram shows how the listDrawer class is used to display the lastSeenList."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chewyang"
        },
        "content": "![list_Drawer](diagrams/listDrawer.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chewyang"
        },
        "content": "*Figure 8. Sequence diagram of the usage of listDrawer to display the list*"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chewyang"
        },
        "content": "### 3.5 Edit activity in list feature"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### 3.5.1 Current Implementation"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The editing mechanism is used by `EditFoodCommand` and `EditExerciseCommand` to amend the current list of activities."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The following Sequence Diagram shows how `EditFoodCommand` is carried out when the user issues edit command, in this case, `edit 1 f/ egg c/ 10`:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0425705"
        },
        "content": "![Edit Activity](diagrams/EditActivityFeature.jpg)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "*Figure 9. Sequence diagram of edit food feature*"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e `EditExerciseCommand` diagram has a similar logic."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### 3.5.2 Design Considerations"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Aspect: How to edit activity"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eAlternative 1 (current choice): Same command able to edit both activities, food and exercise in list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Pros: Able to guarantee that no abnormal behaviour will happen."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Cons: Have to ensure that the different type of editing is implemented correctly."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eAlternative 2: Have separate commands for editing the different activity type."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Pros: Clear distinction of the classes."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Cons: Increase in number of lines. Separate methods with similar logic will be created."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chewyang"
        },
        "content": "### 3.6 Chaining feature"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### 3.6.1 Current Implementation"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The chaining mechanism can be used by the various commands available The following are the types of command that can be chained:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0425705"
        },
        "content": "- list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0425705"
        },
        "content": "- add"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0425705"
        },
        "content": "- edit"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The following sequence diagram shows how the chaining works after command is entered:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0425705"
        },
        "content": "![ChainCommandFeature](diagrams/ChainCommandFeature.jpg)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "*Figure 10. Sequence diagram of chaining feature*"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### 3.6.2 Design Considerations"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Aspect: Which features to chain"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eAlternative 1 (current choice): Allow only certain commands to be chained."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Pros: Able to guarantee that no abnormal behaviour will happen."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Cons: User must know which commands can be chained."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003eAlternative 2: Allow all commands to be chained."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Pros: Easy to implement."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Cons: May give abnormal behaviour."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "chewyang"
        },
        "content": "### 3.7 Move feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "This feature allows the user to manually `move` activities from one position to another position "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The following sequence diagram shows how the `move` command is executed, where index1 is the position to be moved from and index 2 is the position to be moved below. "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "chewyang"
        },
        "content": "![Move_command](diagrams/moveCommand.png)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "*Figure 11. Sequence diagram of move feature*"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chewyang"
        },
        "content": "### 3.8 Graph feature"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The graph implementation shows the progress of the daily net "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "calories over the period of 7 days. The GraphProperty class extracts the available days from the "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "hashmap."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The days are sorted accordingly and the latest 7 days are chosen from the sorted list. "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The properties of the graph such as axis range are also calculated. The GraphDrawing class makes use of these properties"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "to draw the graph."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "![Graph_Sequence_Diagram](diagrams/GraphSequenceDiagram.png)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "*Figure 12. Sequence diagram of move feature*"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "As shown above, when the execute command of GraphCommand is called, the GraphProperty object "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "is created, the properties of the graph are then stored and calculated in setProperty function."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Next, the graphDrawing object is created and uses the properties calculated earlier to print out the graph."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003e In the case where there are less than 7  days stored, all the days will be displayed."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "## 4.0 Appendix: Requirements"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 4.1 Product scope"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "#### 4.1.1 Target user profile"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* Tech savvy university students that have knowledge on the exercise and calories or know where to get the information before inputting it in the application."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    - Can type fast"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    - Prefers desktop applications"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    - Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    - Conscious about daily calorie intake"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    - Conscious about weight"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    - Is reasonably comfortable using CLI applications"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "#### 4.1.2 Value proposition"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Functionality"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    - Provides greater flexibility of use."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    - Can be used to do things that are difficult or impossible to do with a GUI."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Speed"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    - GUI required additional system resource to load the graphical part, thus slower than CLI"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    - Less memory usage"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Scripting \u0026 automation"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    - Have greater control over system functions"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    - Commands can be given via a line command and then code does the work whereas in GUI, more than one action have to be repeated to perform a command"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 4.2 User Stories"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|user|add food consumed/exercise done|keep track of my daily activities|"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|user|list out the activities done for the day|track it and amend it if any errors occur|"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|user|delete entries entered|remove erroneous entries|"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|forgetful user|find activities via keyword|pull out the entries that I want|"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|beginner in working out|track the calories intake|feel assured that my workout is on the right track|"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|student who is a health enthusiast|keep track of my daily intake of calories|better manage my health|"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|gym user|upload the amount of calories consumed or lost|track the surplus or deficit of calories|"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|overweight student|calculate the estimated amount of calories lost|facilitate my weight loss regime|"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|underweight student|calculate the estimated amount of calories gained|facilitate my weight gain regime|"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|weight conscious person|track the amount of calories gained or lost|maintain my weight|"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|careless student|go back and edit entries entered earlier|correct the errors I have made|"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|frequent user|have pre-set repetitive actions entered by me|save time when inputting data|"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 4.3 Non-Functional Requirements"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 4.4 Glossary"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* *GUI* - Graphics User Interface"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* *CLI* - Command Line Interface"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* *OS* - Operating System"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* *mainstream OS* - Windows, Linus, MacOS, OS-X, Unix"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* *API* - Application Programming Interface"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* *MSS* - Main Success Scenario"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "### 4.5 Instructions for manual testing"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eThese instructions only provide a starting point for testers to work on; testers are expected to do more exploratory testing."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0425705"
        },
        "content": "*To be implemented soon*"
      }
    ],
    "authorContributionMap": {
      "jlifah": 18,
      "chewyang": 23,
      "e0425705": 170,
      "-": 26,
      "1-Karthigeyan-1": 132
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "# trakCAL"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**traKCAL** is a desktop application for managing calories\u0027 intake, optimized for use via Command Line Interface (CLI) whilst retaining the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": "If you type fast, **traKCAL** can manage your activities faster than traditional GUI applications, and is perfect for you!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "So what are you waiting for? Download **traKCAL** now!"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "e0425705": 5,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "# User Guide for traKCAL"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The purpose of this user guide is to guide the users on the commands available in this application, their respective uses and the expected inputs."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "By: CS2113-T09-4     Since: September 2020    Licence: MIT"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "# Introduction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**traKCAL** is a desktop application for managing and visualizing your calorie intake, optimized for use via Command Line Interface (CLI) whilst retaining the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "If you are a fast typer, **traKCAL** is perfect for you!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "# Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "This section gives the steps you need to get started quickly."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jlifah"
        },
        "content": "1. Ensure that you have Java 11 or above installed, if not, it can be found [here](https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "2. Down the latest version of `trakCAL` from [here](https://github.com/AY2021S1-CS2113T-T09-4/tp/releases)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3. Create an empty folder in a convenient location eg. Desktop and copy jar file there"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": "4. Open command window/terminal in that window and run the command `java -jar {filename}.jar` e.g., `java -jar traKCAL.jar`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": "5. Upon successful run, you will get the following greeting message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| Hello from                                                                       |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  _                  _  __   ___     _     _                                      |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| | |_   _ _   __ _  | |/ /  / __|   /_\\   | |                                     |"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| |  _| | \u0027_| / _` | | \u0027 \u003c  | (__   / _ \\  | |__                                   |"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  \\__| |_|   \\__,_| |_|\\_\\  \\___| /_/ \\_\\ |____|                                  |"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|                                                                                  |"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| Hello! I\u0027m traKCAL.                                                              |"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "| Please do input \u0027help\u0027 for the commands and their respective input format.       |"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "   * Tip: "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     Increase your windows length if the greeting message appears congested like this:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     ![Congested opening message](diagrams/openingMessageError.png)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "6. Type a command in the command box and press Enter to execute it. e.g. typing `help` and pressing Enter will open the help window"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    * `list`: Lists all activities for today"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * `add f/ rice with eggs c/ 200 d/ 2020-10-31`: Adds a food entry named `rice with eggs`, of calories `200` and on date of `2020-10-31` to **trakCAL**."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    * `delete 3`: Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * `bye`: Exits the application."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "7. Refer to the [Features](#features) below for details of each command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "# Features "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0425705"
        },
        "content": "This section gives you a detailed description of each feature available in **traKCAL**."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jlifah"
        },
        "content": "\u003eSome things to take note of:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jlifah"
        },
        "content": "\u003e* Inputs that look like `**this**` are compulsory parameters to be supplied by user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jlifah"
        },
        "content": "\u003e* Inputs that look like `\u003cTHIS\u003e` are optional parameters and do not need to be supplied by user if not needed.  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jlifah"
        },
        "content": "\u003e* Input format should adhere to the one in the help list or in this user guide."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jlifah"
        },
        "content": "\u003e* Commands such as `add`, `edit`, `list`, etc. are not case-sensitive, but it is recommended for you to follow the format stated in help list or this user guide."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 1.0 Viewing help"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Do you need help with the function and their respective input format? Well this section solves it for you!"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0425705"
        },
        "content": "This section displays the commands available and their respective input format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e Words in CAPS are parameters to be filled in by you!"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Viewing help:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0425705"
        },
        "content": "help                   - Prints out commands available and their input format"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Creating:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": "create new user        - Creates a new user profile"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Shortcut:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0425705"
        },
        "content": "createSet SHORTCUT_NAME f/ FOOD_DESCRIPTION c/ CALORIE_COUNT +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0425705"
        },
        "content": "e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT + ..."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                       - Creates shortcut for adding food(s) and/or exercise(s) depending on the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                         format entered"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0425705"
        },
        "content": "addSet SHORTCUT_NAME   - Adds SHORTCUT_NAME into current date list"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Adding:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0425705"
        },
        "content": "add f/ FOOD_DESCRIPTION c/ CALORIE_COUNT d/ DATE"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                       - Adds food consumed, FOOD_DESCRIPTION calories gained, CALORIE_COUNT"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                         and date(YYYY-MM-DD), DATE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0425705"
        },
        "content": "add e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT d/ DATE"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                       - Adds exercise done, EXERCISE_DESCRIPTION, calories lost, CALORIE_COUNT"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                         and date(YYYY-MM-DD), DATE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Listing:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0425705"
        },
        "content": "list                   - Prints out the list of entries."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0425705"
        },
        "content": "list DATE              - Prints out the list of entries for the date(YYYY-MM-DD), DATE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Editing:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "edit n/ NAME, g/ GENDER, w/ WEIGHT, h/ HEIGHT, a/ AGE, af/ ACTIVITY_FACTOR, goal/ WEIGHT_GOALS"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                       - Edits your name, NAME, your gender(male/female), GENDER,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                         your weight in kg, WEIGHT, your height, HEIGHT in cm, your age, AGE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                         activity factor(1-5) with 1 being the most active, ACTIVITY_FACTOR,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                         your weight goals(lose/maintain/gain), WEIGHT_GOALS"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": "edita LIST_INDEX f/ FOOD_DESCRIPTION c/ CALORIE_COUNT"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                       - Edits activity at index LIST_INDEX of latest list printed out"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                         to food consumed, FOOD_DESCRIPTION, calories gained, CALORIE_COUNT"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0425705"
        },
        "content": "edita LIST_INDEX e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                       - Edits activity at index LIST_INDEX of latest list printed out"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                         to exercise done, EXERCISE_DESCRIPTION, calories lost, CALORIE_COUNT"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Finding:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "find d/ DESCRIPTION    - Searches for all activities description with the DESCRIPTION keyword"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "find c/ CALORIE_COUNT  - Searches for all activities with calories of CALORIE_COUNT"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0425705"
        },
        "content": "find a/ DESCRIPTION1 / DESCRIPTION2 .../ DESCRIPTION"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                        - Searches for all activities with ALL matching keywords from"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                          DESCRIPTION1 to DESCRIPTION"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0425705"
        },
        "content": "find e/ DESCRIPTION1 / DESCRIPTION2 .../ DESCRIPTION"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                        - Searches for all activities with AT LEAST one matching keyword from"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                          DESCRIPTION1 to DESCRIPTION"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Moving:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "move from/ INDEX1 below/ INDEX2"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                       - Moves the activity at index INDEX1 to the index below INDEX2"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Deleting:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0425705"
        },
        "content": "delete LIST_INDEX      - Deletes activity located at index LIST_INDEX of latest list printed out"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0425705"
        },
        "content": "delete all/            - Deletes all activities in current date list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Graphing:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0425705"
        },
        "content": "graph                  - Generates a graph of target calorie and net calorie obtained up to"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                         last 7 days"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Exiting:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0425705"
        },
        "content": "bye                    - Terminates the application"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 2.0 Create"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 2.1.1 Creating a new user profile"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0425705"
        },
        "content": "If this is your first time using **traKCAL**, you will be automatically prompted to create a user profile and there is no need for you to input any command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**traKCAL** will then use these details from your user profile to calculate the following: "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* BMI"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Recommended daily calorie"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Calorie goal to reach weight goal"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jlifah"
        },
        "content": "\u003eHowever, if you want to create a new profile for an existing user, you will need to use this command"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Format: `create new user`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Hey there! We do not have a record of your profile. Please create one now! :)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your name?"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**Sam**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your gender (male/female)?"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**female**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your weight in kg?"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**50**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your height in cm?"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**100**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your age?"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**10**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jlifah"
        },
        "content": "How active are you on a scale of 1-5? With 1 being least active and 5 being most active."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**4**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Do you want to lose/maintain/gain weight?"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**gain**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Your BMI is 50.0"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Your recommend daily calories intake is 1576.65 calories."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jlifah"
        },
        "content": "To gain weight, you should consume 2076.65 calories instead."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jlifah"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 2.1.2 Possible errors when creating new profile"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Tips: "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* There is no restriction on the type of name you can supply.  `X Æ A-Xii` and `Tammy` will both be accepted."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Please input you gender as female or male only. If not the following error message will be shown."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    Please input female or male as gender only!"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Please input your weight as a number between 20 to 650kg. If not, the following error messages will be shown. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    Please enter a valid weight format!"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    Please enter a weight range from 20kg to 650kg"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Please input your height as a number between 10 to 300cm. If not, the following error message will be shown. "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    Please enter a valid height format!"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    Please enter a height range from 10cm to 300cm"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Please input your age as an integer between 1 to 120 years old. If not, the following error message will be shown. "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    Please enter a valid age!"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jlifah"
        },
        "content": "      \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jlifah"
        },
        "content": "      Please enter an age range from 1 to 120 years old"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jlifah"
        },
        "content": "      \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Please input your activity level as an integer between 1 to 5. If not, the following error message will be shown. "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    Please integer for activity level only!"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jlifah"
        },
        "content": "      \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jlifah"
        },
        "content": "      Please enter an age range from 1 to 5"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jlifah"
        },
        "content": "      \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Please input lose, maintain or gain as weight goal only. If not, the following error message will be shown. "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jlifah"
        },
        "content": "  * ```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    Please input lsoe/maintain/gain as weight goal only!"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jlifah"
        },
        "content": " "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 3.0 Shortcut"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 3.1.1 Creating a shortcut for a set of entries "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jlifah"
        },
        "content": "This command creates a shortcut for a set of commonly called exercise and/or food entries, reducing the amount of time needed for you to add in multiple common entries. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Format: `createSet **SHORTCUT_NAME** f/**FOOD_DESCRIPTION** c/**CALORIE_COUNT** + f/**EXERCISE_DESCRIPTION** c/**CALORIE_COUNT** + ...`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**FOOD_DESCRIPTION**`: Description of food consumed."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: Amount of calories lost."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**EXERCISE_DESCRIPTION**`: Description of exercise done."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**SHORTCUT_NAME**`: Name of shortcut/set."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jlifah"
        },
        "content": "*  `createSet bfast f/ice cream c/78 + e/jumping jacks c/100`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jlifah"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jlifah"
        },
        "content": "You have created a shortcut containing:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jlifah"
        },
        "content": "1. Food: ice cream, Calories: 78"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jlifah"
        },
        "content": "2. Exercise: jumping jacks, Calories: 100"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jlifah"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jlifah"
        },
        "content": "```"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 3.1.2 Possible errors when creating shortcut"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 3.2.1 Adding a set of entries"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Adds a set of repeated entries at once."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `addSet **SHORTCUT_NAME**`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**SHORTCUT_NAME**`: Name of shortcut."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `addSet bfast`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Noted! The following has been added into list:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[F] | ice cream | 78"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[E] | jumping jacks | 100"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 3.2.2 Possible errors when adding set"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 4.0 Add"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 4.1.1 Adding a food entry"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Adds a food entry with its respective calories to the list."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `add f/ **FOOD_DESCRIPTION** c/ **CALORIE_COUNT** d/ **DATE**`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**FOOD_DESCRIPTION**`: Description of food consumed."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: Amount of calories consumed."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DATE**`: Date in the format YYYY-MM-DD, where YYYY \u003d year, MM \u003d month, DD \u003d day."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` before adding *current date is 2020-10-28*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: 30 kcal  |"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           apple_____________________________________________________30"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `add f/ mushroom soup c/ 77 d/ 2020-10-28`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Noted! The following has been added into list:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[F] | mushroom soup | 77"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` after adding"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: 107 kcal  |"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           apple_____________________________________________________30"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2          Food           mushroom soup_____________________________________________77"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 4.1.2 Possible errors when adding food"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 4.2.1 Adding an exercise entry"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Adds an exercise entry with its respective calories to the list."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `add e/ **EXERCISE_DESCRIPTION** c/ **CALORIE_COUNT** d/ **DATE**`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**EXERCISE_DESCRIPTION**`: Description of exercise done."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: Amount of calories lost."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DATE**`: Date in the format YYYY-MM-DD, where YYYY \u003d year, MM \u003d month, DD \u003d day."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` before adding"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: 107 kcal  |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           apple_____________________________________________________30"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2          Food           mushroom soup_____________________________________________77"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `add e/ jumping c/ 65 d/ 2020-10-28`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Noted! The following has been added into list:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[E] | jumping | 65"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` after adding"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: 42 kcal  |"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           apple_____________________________________________________30"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2          Food           mushroom soup_____________________________________________77"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "e0425705"
        },
        "content": "3        Exercise         jumping___________________________________________________65"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 4.2.2 Possible errors when adding exercise"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jlifah"
        },
        "content": "```"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 5.0 List"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 5.1.1 Listing entries for the specified day"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Displays the list of activities for the given day."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Format: `list` or `list **DATE**`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `**DATE**`: Date in the format YYYY-MM-DD, where YYYY \u003d year, MM \u003d month, DD \u003d day."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eNOTE: Typing list without any parameters displays the list of activities for the current date."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `list` OR"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `list 2020-10-11`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "chewyang"
        },
        "content": "|  2020-10-11  |  Net Calorie: 270 kcal  |"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "chewyang"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1        Exercise         morning run_______________________________________________100"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2          Food           rice with veg_____________________________________________200"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3          Food           dinner____________________________________________________150"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "chewyang"
        },
        "content": "4        Exercise         Gym_______________________________________________________200"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "chewyang"
        },
        "content": "5          Food           Supper____________________________________________________200"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chewyang"
        },
        "content": "6          Food           Biscuit___________________________________________________20"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 5.1.2 Possible errors when listing"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### Accessing a list with no entries"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chewyang"
        },
        "content": "If you are trying to access a list that does not have any entries \u003cbr\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chewyang"
        },
        "content": "For example if there are no entries for 2020-10-31, the following error message will be shown: \u003cbr\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chewyang"
        },
        "content": "There is no data for 2020-10-31"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### Using an invalid date format for list **DATE**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chewyang"
        },
        "content": "If the **DATE** format is not of YYYY-MM-DD, the following error message will be shown: \u003cbr\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Wrong format of date entered!"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chewyang"
        },
        "content": "The accepted format is YYYY-MM-DD!"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Also, ensure that the date input actually exists!Please do input \u0027help\u0027 for the commands and their respective input format."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 6.0 Edit"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.1.1 Editing user profile"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edits user profile of an existing user."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Format: `edit \u003cn/**NAME**\u003e,\u003cg/**GENDER**\u003e,\u003cw/**WEIGHT**\u003e,\u003ch/**HEIGHT**\u003e,\u003cage/**AGE**\u003e\u003cal/**ACTIVITY_FACTOR**\u003e,\u003cgoal/**WEIGHT_GOALS**\u003e`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Parameters: "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**NAME**`: Name of user."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**GENDER**`: Gender of user."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**WEIGHT_KG**`: Weight of user in kg."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**HEIGHT_CM**`: Height of user in cm."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**AGE**`: Age of user."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**ACTIVITY_FACTOR**`: How active user is, with 1 being most active and 5 being least active."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**WEIGHT_GOALS**`: Whether user wants to lose/maintain/gain weight."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* `edit n/Tom,w/90`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Your name has been updated to Tom."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Your weight has been updated to 90."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Tip:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* The parameters should conform to the same style used in `create new user`. Explanations to possible error messages can be found [here](#21-creating-a-new-user-profile)."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.1.2 Possible errors when editing user profile"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.2.1 Editing an entry in list from food to food "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edits a particular food activity in list."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eThings you should take note of:"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* In addition, this feature allows the changing of a food activity to exercise activity in the list. Vice versa."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* The list in which you want to edit to have to be pulled out first before being able to edit on it."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* This commands edits the latest list pulled out. Thus, if `list 2020-10-21` is the latest list to be pulled out, then edita will edit index stated in date 2020-10-21\u0027s list."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `edita **LIST_INDEX** f/ **FOOD_DESCRIPTION** c/ **CALORIE_COUNT**`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**LIST_INDEX**`: Index of activity to be edited in list."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**FOOD_DESCRIPTION**`: New description of food consumed."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: New amount of calories consumed."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` before editing"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: 42 kcal  |"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           apple_____________________________________________________30"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2          Food           mushroom soup_____________________________________________77"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "e0425705"
        },
        "content": "3        Exercise         jumping___________________________________________________65"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `edita 1 f/ orange c/ 35`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Noted! The following has been edited:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[F] | orange | 35"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` after editing"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: 77 kcal  |"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           orange____________________________________________________35"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2          Food           mushroom soup_____________________________________________77"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "e0425705"
        },
        "content": "3        Exercise         jumping___________________________________________________65"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.2.2 Possible errors when editing from food to food"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.3.1 Editing an entry in list from food to exercise"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edits a particular food activity in list from food to exercise."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eThings you should take note of:"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* In addition, this feature allows the changing of a food activity to exercise activity in the list. Vice versa."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* The list in which you want to edit to have to be pulled out first before being able to edit on it."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* This commands edits the latest list pulled out. Thus, if `list 2020-10-21` is the latest list to be pulled out, then edita will edit index stated in date 2020-10-21\u0027s list."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `edita **LIST_INDEX** e/ **EXERCISE_DESCRIPTION** c/ **CALORIE_COUNT**`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**LIST_INDEX**`: Index of activity to be edited in list."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**EXERCISE_DESCRIPTION**`: New description of exercise done."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: New amount of calories lost."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` before editing"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: 42 kcal  |"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           apple_____________________________________________________30"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2          Food           mushroom soup_____________________________________________77"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "e0425705"
        },
        "content": "3        Exercise         jumping___________________________________________________65"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `edita 2 e/ running c/ 99`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Noted! The following has been edited:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[E] | running | 99"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` after editing"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: -52 kcal  |"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           orange____________________________________________________35"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2        Exercise         running___________________________________________________99"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "e0425705"
        },
        "content": "3        Exercise         jumping___________________________________________________65"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.3.2 Possible errors when editing from food to exercise"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.4.1 Editing an entry in list from exercise to exercise "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edits a particular exercise activity in list. "
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eThings you should take note of:"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* In addition, this feature allows the changing of a food activity to exercise activity in the list. Vice versa."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* The list in which you want to edit to have to be pulled out first before being able to edit on it."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* This commands edits the latest list pulled out. Thus, if `list 2020-10-21` is the latest list to be pulled out, then edita will edit index stated in date 2020-10-21\u0027s list."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `edita **LIST_INDEX** e/ **EXERCISE_DESCRIPTION** c/ **CALORIE_COUNT**`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**LIST_INDEX**`: Index of activity to be edited in list."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**EXERCISE_DESCRIPTION**`: New description of exercise done."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: New amount of calories lost."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` before editing"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "e0425705"
        },
        "content": "list"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: -52 kcal  |"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           orange____________________________________________________35"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2        Exercise         running___________________________________________________99"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "e0425705"
        },
        "content": "3        Exercise         jumping___________________________________________________65"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `edita 3 e/ strolling c/ 10`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Noted! The following has been edited:"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[E] | strolling | 10"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` after editing"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: -62 kcal  |"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           orange____________________________________________________35"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2        Exercise         running___________________________________________________99"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "e0425705"
        },
        "content": "3        Exercise         strolling_________________________________________________10"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.4.2 Possible errors when editing from exercise to exercise"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.5.1 Editing an entry in list from exercise to food "
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edits a particular exercise activity in list from exercise to food.  "
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eThings you should take note of:"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* In addition, this feature allows the changing of a food activity to exercise activity in the list. Vice versa."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* The list in which you want to edit to have to be pulled out first before being able to edit on it."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* This commands edits the latest list pulled out. Thus, if `list 2020-10-21` is the latest list to be pulled out, then edita will edit index stated in date 2020-10-21\u0027s list."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `edita **LIST_INDEX** f/ **FOOD_DESCRIPTION** c/ **CALORIE_COUNT**`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**LIST_INDEX**`: Index of activity to be edited in list."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**FOOD_DESCRIPTION**`: New description of food consumed."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: New amount of calories consumed."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` before editing"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  2020-10-28  |  Net Calorie: -62 kcal  |"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "e0425705"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           orange____________________________________________________35"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2        Exercise         running___________________________________________________99"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "e0425705"
        },
        "content": "3        Exercise         strolling_________________________________________________10"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `edita 3 f/ chicken rice c/ 150`"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Noted! The following has been edited:"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[F] | chicken rice | 150"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` after editing"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "chewyang"
        },
        "content": "|  2020-10-28  |  Net Calorie: 86 kcal  |"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "e0425705"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1          Food           orange____________________________________________________35"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "e0425705"
        },
        "content": "2        Exercise         running___________________________________________________99"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "e0425705"
        },
        "content": "3          Food           chicken rice______________________________________________150"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 6.5.2 Possible errors when editing from exercise to food"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 7.0 Find"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 7.1.1 Finding entries via keyword - basic"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Finds activity based on keywords entered and list them out. Allows user to search by activity description or calorie count."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eAdditionally, you can use the advanced find commands to find all matching keywords or just one matching keyword."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Format for find by description: `find d/ **DESCRIPTION**`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DESCRIPTION**`: Keyword to look for from description list."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `find d/ rice with veg`"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Date                Type                                Description                        Calories gain or lost"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "chewyang"
        },
        "content": "---------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1        2020-10-11            Food              rice with veg________________________________________________200"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2        2020-10-09            Food              rice with veg________________________________________________200"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Format for find by calorie: `find c/ **CALORIE**`"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "* `find c/ 100` "
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Date                Type                                Description                        Calories gain or lost"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "chewyang"
        },
        "content": "---------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1        2020-10-11          Exercise              morning run__________________________________________________100"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 7.1.2 Possible errors when finding entries via keyword"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 7.2.1 Finding entries via keywords - advanced"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Format for find by all descriptions: `find a/ **DESCRIPTION1** / **DESCRIPTION2** / **DESCRIPTION3** ...`"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "\u003e This command will search of entries matching ALL description keywords typed. There is no limit to the number of descriptions allowed."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DESCRIPTION1**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "* `**DESCRIPTION2**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* so on..."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " * `find a/running / 10km / 5pm`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " "
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Date                Type                                Description                        Calories gain or lost"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "chewyang"
        },
        "content": "---------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1        2020-10-11          Exercise              running at stadium for 10km at 5pm evening_________________100"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Format for find by just one matching description: `find e/ **DESCRIPTION1** / **DESCRIPTION2** / **DESCRIPTION3** ...`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "\u003e As long as just one of the description keywords matches in the entry, the activity will be listed. There is no limit to the number of descriptions allowed."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DESCRIPTION1**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "* `**DESCRIPTION2**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* so on..."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "* `find e/ sleeping / 5pm` "
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Date                Type                                Description                        Calories gain or lost"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "chewyang"
        },
        "content": "---------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1        2020-10-11          Exercise              running at stadium for 10km at 5pm evening_________________100"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 7.2.2 Possible error messages when finding entries - advanced"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 8.0 Move"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 8.1.1 Moving an activity to another position"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Moves an activity to another position in the last shown list."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `move from/ **INDEX1** below/ **INDEX2**`"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**INDEX1**`: Index of the activity to be moved from."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**INDEX2**`: Index of the activity to be inserted below."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* After a `list 2020-10-11` command, \u003c\\br\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "e0425705"
        },
        "content": " `move from/ 3 below/ 1` moves the 3rd entry in the list for below the 1st entry as shown below."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `move from/ 5 below/ 2`"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "e0425705"
        },
        "content": "*`list 2020-10-11` before moving"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "chewyang"
        },
        "content": "|  2020-10-11  |  Net Calorie: 450 kcal  |"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "chewyang"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1          Food           breakfast_______________________________________________100"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2          Food           second breakfast________________________________________200"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3          Food           tea break_______________________________________________150"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "e0425705"
        },
        "content": "*`list 2020-10-11` after `move from/ 3 below/ 1`"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "chewyang"
        },
        "content": "|  2020-10-11  |  Net Calorie: 450 kcal  |"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "chewyang"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1          Food           breakfast_______________________________________________100"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2          Food           tea break_______________________________________________150"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3          Food           second breakfast________________________________________200"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 8.1.2 Possible errors when moving"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### Missing keywords"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* If the appropriate keywords \u0027from/\u0027 and \u0027below/\u0027 are missing, the following error message will be shown"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u0027from/\u0027 and \u0027below/\u0027 keyword is missing!"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* If only appropriate keywords \u0027from/\u0027 is missing the following error message will be shown"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u0027from/\u0027 keyword is missing!"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* If only appropriate keywords \u0027below/\u0027 is missing the following error message will be shown"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u0027below/\u0027 keyword is missing!"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "chewyang"
        },
        "content": "#### Invalid index used"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* If the index entered for the respective keywords are not of valid range, the following error message will be shown"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "chewyang"
        },
        "content": "The index entered is not within the range!Please do input \u0027help\u0027 for the commands and their respective input format."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 9.0 Delete"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 9.1.1 Deleting an entry in list"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Deletes an entry via index in the last shown list."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Format: `delete **INDEX**`"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `**INDEX**`: Index of activity to be deleted in the last shown list."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` before deleting"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "chewyang"
        },
        "content": "|  2020-10-11  |  Net Calorie: 650 kcal  |"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "chewyang"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1          Food           apple___________________________________________________100"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2          Food           melon___________________________________________________200"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3          Food           banana__________________________________________________150"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "chewyang"
        },
        "content": "4          Food           orange__________________________________________________200"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* `delete 2`"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Activity removed!"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` after deleting"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "chewyang"
        },
        "content": "|  2020-10-11  |  Net Calorie: 450 kcal  |"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "chewyang"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1          Food           apple___________________________________________________100"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2          Food           banana__________________________________________________150"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3          Food           orange__________________________________________________200"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 9.1.2 Possible errors when deleting an entry in list"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 9.2.1 Deleting all entries in list"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Deletes all entry in list."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format : `delete all/`"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` before deleting"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "chewyang"
        },
        "content": "|  2020-10-11  |  Net Calorie: 450 kcal  |"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "chewyang"
        },
        "content": "------------------------------------------"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "chewyang"
        },
        "content": "No.        Type                        Description                        Calories gain or lost"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "chewyang"
        },
        "content": "-----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1          Food           apple___________________________________________________100"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2          Food           banana__________________________________________________150"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3          Food           orange__________________________________________________200"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* `delete all/`"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list` after deleting"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Nothing was added!"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 9.2.2 Possible errors when deleting all entries from  list"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 10.0 Graph"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 10.1.1 Showing past net calories"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Shows a graph of target calorie and net calorie obtained upto last 7 days."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Format: `graph`"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* `graph`"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "2100|      |-|                           "
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    |      | |                           "
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    |      | |                           "
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "1886|******|*|***************************"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    |      | |         |-|               "
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    ||-|   | |         | |               "
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    || |   | |   |-|   | |               "
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    || |   | |   | |   | |               "
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    || |   | |   | |   | |               "
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    || |   | |   | |   | |   |-|         "
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "1210|| |   | |   | |   | |   | |   |-|   "
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    |-+-----+-----+-----+-----+-----+--"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    21/10 22/10 23/10 24/10 25/10 26/10 "
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "\u003e `***` shows the target calories."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e If less than 7 days are stored in storage file, all the days will be displayed"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "e0425705"
        },
        "content": "### 10.1.2 Possible errors when graphing"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## 11.0 Exiting the program"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Saves the current list to file and exits program."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `bye`"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| Thank you for using traKCAL. See you again!                                                       |"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "e0425705"
        },
        "content": "# Frequently asked questions"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "e0425705"
        },
        "content": "This section answers questions you may have."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous **traKCAL** folder."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**Q**: How do I know if the data I have input is saved?"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**A**: **traKCAL** autosaves data. Unless an error message is printed out, the data entered is saved."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**Q**: Is traKCAL optimized for all OS?"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**A**: **traKCAL** is available for the download on all major Operating Systems(OS) such as Windows, Mac and Linux."
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**Q**: How do I raise an issue if I have doubts or have issues to raise?"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**A**: We can be reached either via email(e0425705@u.nus.edu) or by raising a github issue[here](https://github.com/AY2021S1-CS2113T-T09-4/tp/issues)."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "e0425705"
        },
        "content": "# Command Summary"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "e0425705"
        },
        "content": "This section gives you a cheat sheet of commands available."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eThings you should take note of:"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Input that look like THIS are parameters to be supplied by user."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Action         | Format | Example"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-------------- | ---------- | --------"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Help | `help` | "
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Create User Profile | `create new user` | "
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Create Set | `createSet SET_NAME f/FOOD_DESCRIPTION c/CALORIE COUNT + e/EXERCISE_DESCRIPTION c/CALORIE COUNT + ...` | `createSet morning routine f/oatmeal c/200 + e/yoga c/200`"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Add Set | `addSet SET_NAME` | `addSet morning routine`"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Add Food | `add e/ FOOD_DESCRIPTION c/ CALORIE_COUNT d/ DATE` | `add e/ ice cream c/ 78 d/ 2020-10-19`"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Add Exercise | `add e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT d/ DATE` | `add e/ jumping c/ 65 d/ 2020-10-19`"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Add Set |   `addSet SET_NAME`  |    `addset morning routine`"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "e0425705"
        },
        "content": "List | `list` OR `list DATE` | `list` OR `list 2020-10-24` "
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edit Profile | `edit n/ NAME, g/ GENDER, w/ WEIGHT, h/HEIGHT, a/ AGE, af/ ACTIVITY_FACTOR, goal/ WEIGHT_GOALS` | `edit n/ Sam g/ female w/ 50 h/ 165 a/ 10 af/ 4 goal/ gain`"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edit Activity to Food | `edita LIST_INDEX f/ FOOD_DESCRIPTION c/ CALORIE_COUNT` | `edita 1 f/ ice kacang c/150`"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edit Activity to Exercise | `edita LIST_INDEX e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT` | `edita 1 e/ running c/100`"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Find Description | `find d/ DESCRIPTION` | `find d/ apple`"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Find Calorie | `find c/ CALORIE` | `find c/ 55`"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Find Either | `find e/ DESCRIPTION1 / DESCRIPTION2 / DESCRIPTION3 ...` | `find e/ apple / orange / grape ...`"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Find All | `find a/ DESCRIPTION1 / DESCRIPTION2 / DESCRIPTION3 ...` | `find a/ running / jumping / cake ...`"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Move Activity | `move from/ INDEX1 below/ INDEX2` | `move from/ 5 below/ 2`"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Delete Entry | `delete INDEX` | `delete 2`"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Delete All for Today| `delete all/` | "
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Graph | `graph` | "
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Exit | `bye` | "
      }
    ],
    "authorContributionMap": {
      "jlifah": 150,
      "chewyang": 162,
      "e0425705": 767,
      "-": 26,
      "1-Karthigeyan-1": 48,
      "poonchuanan": 42
    }
  },
  {
    "path": "src/main/java/seedu/duke/Trakcal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.logic.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.DayMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.AskUserProfileQns;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.InitialiseUserProfile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.CheckNewUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.logic.Parser.CHAIN_SEPARATOR;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.logic.Parser.SPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displayNotSavedMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displayWelcomeMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayParserNullPointerExceptionMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Entry point of the traKCAL application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Initialises the application and starts the interaction with the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class Trakcal {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static DayMap calList \u003d new DayMap();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static InitialiseUserProfile profile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static Storage storage \u003d new Storage(getJarFilePath() + \"/tpdata/tpcsv.csv\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Main function."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param args args"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displayWelcomeMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            storage.loadData(calList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(\"here\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (CheckNewUser.isNewUser()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            profile \u003d AskUserProfileQns.createNewProfile();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            Ui.displayReturningUserMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            profile \u003d AskUserProfileQns.loadProfile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Trakcal.run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Main running loop."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static void run()  {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            Parser parser \u003d new Parser(userInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                Command command;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                if (userInput.contains(CHAIN_SEPARATOR)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    parser.prepareChaining(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    command \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    executeCmd(command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    storage.updateFile(calList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayParserNullPointerExceptionMessage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayNotSavedMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Sets the data for each command and executes the command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param command command to execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws NullPointerException if invalid command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static void executeCmd(Command command) throws NullPointerException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command.setData(calList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Gets the file path of the jar file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return string of the file path"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private static String getJarFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return new File(Trakcal.class.getProtectionDomain().getCodeSource().getLocation().getPath())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                .getParent().replace(\"%20\", SPACE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 16,
      "chewyang": 45,
      "e0425705": 16,
      "-": 6,
      "1-Karthigeyan-1": 12,
      "poonchuanan": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.Ui.drawDivider;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Add exercise."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class AddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected Exercise exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds exercise and it\u0027s respective calories."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description exercise description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories lost"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param isFromFile if data is from csv file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public AddExerciseCommand(String description, int calories, boolean isFromFile) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.exercise \u003d new Exercise(description, calories, LocalDate.now(), isFromFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds exercise, it\u0027s respective calories and date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description exercise description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories lost"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param isFromFile if data is from csv file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param date date of activity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public AddExerciseCommand(String description, int calories, boolean isFromFile, LocalDate date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.exercise \u003d new Exercise(description, calories, date, isFromFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dayMap.addActivity(date.atStartOfDay(), exercise);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displaySavedMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 29,
      "e0425705": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.Ui.drawDivider;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Add activity food."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected Food food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds food and it\u0027s respective calories."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description food description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories gained"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param isFromFile if data is from csv file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public AddFoodCommand(String description, int calories, boolean isFromFile) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.food \u003d new Food(description, calories, LocalDate.now(),isFromFile);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds food, it\u0027s respective calories and date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description food description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories gained"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param isFromFile if data is from csv file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param date date of activity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public AddFoodCommand(String description, int calories, boolean isFromFile, LocalDate date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.food \u003d new Food(description, calories, date, isFromFile);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dayMap.addActivity(date.atStartOfDay(), food);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displaySavedMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 29,
      "e0425705": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddSetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class AddSetCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displayByeMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Bye command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        displayByeMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 1,
      "e0425705": 3,
      "1-Karthigeyan-1": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.DayMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Execute command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected DayMap dayMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected boolean canBeChained \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected  static Logger commandLogger \u003d Logger.getLogger(\"Command\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * This method is to be override by the specific commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Sets data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param dayMap date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void setData(DayMap dayMap) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.dayMap \u003d dayMap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Checks if command can be chained."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public boolean getCanBeChained() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return canBeChained;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 23,
      "e0425705": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CreateNewRepeatedSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.storage.UserSetStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Creates new shortcut command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class CreateNewRepeatedSet extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected String trimmedInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Creates new repeated set."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param trimmedUserInput user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public CreateNewRepeatedSet(String trimmedUserInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.trimmedInput \u003d trimmedUserInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        UserSetStorage.prepareNewSet(trimmedInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 17,
      "e0425705": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CreateNewUserCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.AskUserProfileQns;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Creates new user profile."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class CreateNewUserCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public CreateNewUserCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        AskUserProfileQns.createNewProfile();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 2,
      "chewyang": 11,
      "e0425705": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.Trakcal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static seedu.duke.ui.Ui.displayMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " * Initialises Command to delete activities."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Deletes Command Constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param index index of the activities"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Deletes Command Constructor."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.index \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Executes the correct delete command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if ((index \u003d\u003d -1) \u0026\u0026 (isDeleteConfirmed())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.getLastSeenList().clearList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            dayMap.getHashMap().remove(this.date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            displayMessage(\"All activities have been deleted\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            displaySavedMessage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dayMap.deleteActivity(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                displaySavedMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                displayMessage(\"Invalid Index\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Gets input from the user to confirm the delete command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return true if the user says yes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public boolean isDeleteConfirmed() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        System.out.println(\"Are you sure you want to delete all activities in today\u0027s list? [yes/no]\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String userInput \u003d Trakcal.in.nextLine().trim().toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (userInput.equals(\"yes\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else if (userInput.equals(\"no\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            System.out.println(\"Delete command aborted.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            System.out.println(\"Invalid input....aborting delete command.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 13,
      "e0425705": 6,
      "1-Karthigeyan-1": 64
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayEditIndexOutOfBoundsExceptionMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.Ui.drawDivider;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Edits exercise and its attributes at the indicated index."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class EditExerciseCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected Exercise exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected int calories;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Edits exercise and it\u0027s respective calories."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description exercise description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories lost"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public EditExerciseCommand(int index, String description, int calories) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            LocalDate dateOfActivityToBeEdited \u003d dayMap.getDateFromLastSeenListAtIndex(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            this.exercise \u003d new Exercise(description, calories,dateOfActivityToBeEdited, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.insertActivity(index, exercise);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displaySavedMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEditIndexOutOfBoundsExceptionMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 14,
      "e0425705": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayEditIndexOutOfBoundsExceptionMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.Ui.drawDivider;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Edits food and its attributes at the indicated index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class EditFoodCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected Food food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected int calories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Edits food and it\u0027s respective calories."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description food description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories gained"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public EditFoodCommand(int index, String description, int calories) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            ActivityList lastSeenList \u003d dayMap.getLastSeenList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            LocalDate dateOfActivityToBeEdited \u003d lastSeenList.getDateOfActivityAtIndex(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            this.food \u003d new Food(description, calories, dateOfActivityToBeEdited, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.insertActivity(index, food);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displaySavedMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEditIndexOutOfBoundsExceptionMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 17,
      "e0425705": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditUserProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class EditUserProfileCommand extends Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.FindDrawer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " * Initialises Command to find all description tags."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class FindAllCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Find matching results based on input tags."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param userInput keywords to be matched"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public FindAllCommand(String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            dayMap.listActivitiesContainingAll(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.drawListAfterFindCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        } catch (KeywordNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            System.out.println(\"No results were found!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 2,
      "e0425705": 1,
      "poonchuanan": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindCalorieCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Initialises Command to find calorie count."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class  FindCalorieCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected String calorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Find matching results based on calorie input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param calorie calories to search"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public FindCalorieCommand(String calorie) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            dayMap.listActivitiesContainingCalorie(calorie);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.drawListAfterFindCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        } catch (KeywordNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            System.out.println(\"No results were found!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chewyang": 3,
      "e0425705": 3,
      "poonchuanan": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindDescriptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.FindDrawer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Initialises Command to find activity description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class FindDescriptionCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Find matching results based on description input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param description description to search"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public FindDescriptionCommand(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            dayMap.listActivitiesContainingDescription(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.drawListAfterFindCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (KeywordNotFoundException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            System.out.println(\"No results were found!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 9,
      "e0425705": 4,
      "poonchuanan": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindEitherCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.FindDrawer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " * Initialises Command to find all description tags."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class FindEitherCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Find matching results based on input tags."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param userInput keywords to be matched"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public FindEitherCommand(String userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            dayMap.listActivitiesContainingEither(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.drawListAfterFindCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        } catch (KeywordNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            System.out.println(\"No results were found!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 2,
      "e0425705": 1,
      "poonchuanan": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/GraphCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.DayMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.Trakcal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.GraphDrawing;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.GraphProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Displays the graph of illustrating the net calorie gain/loss throughout the period."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class GraphCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static final int MAXIMUM_DAYS \u003d 7;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public GraphCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    boolean isMapValid(DayMap dayMap) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return dayMap !\u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        GraphProperty graphProperties \u003d new GraphProperty(dayMap, (int) Trakcal.profile.getCalories());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        graphProperties.setProperties();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        System.out.println(new GraphDrawing(graphProperties).drawGraph());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 8,
      "e0425705": 4,
      "1-Karthigeyan-1": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displayHelpMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Help command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displayHelpMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 1,
      "e0425705": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/InvalidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidInputErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.print;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Represents an invalid command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    String invalidCommandMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public InvalidCommand(String invalidCommandMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.invalidCommandMessage \u003d invalidCommandMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(invalidCommandMessage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 12,
      "1-Karthigeyan-1": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.ListDrawer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Prints the list of activities for the given day."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * If no date attribute was given by the user, prints the list of activities for today."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Prints error message if there is no activities for the given day."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ListCommand(LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.setLastSeenList(dayMap.getActivityList(date.atStartOfDay()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.drawListAfterListCommand(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(\"There is no data for \" + date.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            commandLogger.log(Level.WARNING,\"Accessing a list without any data\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 41,
      "e0425705": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListUserProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.Trakcal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.AskUserProfileQns;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.InitialiseUserProfile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.Ui.displayHelpMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class ListUserProfileCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Trakcal.profile.printList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/MoveActivityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.ListNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayListNotFoundExceptionMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayStringIndexOutOfBoundsExceptionMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.print;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * This command moves an activity from one index to another."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class MoveActivityCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private int indexToBeMovedFrom;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private int indexToBeInsertedBelow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public MoveActivityCommand(int indexToBeChanged, int indexToBeInsertedBelow) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.indexToBeMovedFrom \u003d indexToBeChanged;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.indexToBeInsertedBelow \u003d indexToBeInsertedBelow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.move(indexToBeMovedFrom, indexToBeInsertedBelow);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            print(\"Activity has been successfully moved!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayStringIndexOutOfBoundsExceptionMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            commandLogger.log(Level.WARNING, \"Accessing an index that is out of bounds\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (ListNotFoundException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayListNotFoundExceptionMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            commandLogger.log(Level.WARNING, \"Accessing a list that does not exist\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/CalorieCountException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Exception when calorie count too big."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class CalorieCountException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyDescriptionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class EmptyDescriptionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/KeywordNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Exception when a keyword is not found during a find command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class KeywordNotFoundException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/ListNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Exception to be thrown when a list is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class ListNotFoundException extends Throwable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/logic/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.Trakcal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.AddExerciseCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.AddFoodCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.AddSetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.CreateNewRepeatedSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.CreateNewUserCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.EditExerciseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.EditFoodCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.EditUserProfileCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.command.FindAllCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.command.FindCalorieCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.command.FindDescriptionCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.command.FindEitherCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.GraphCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.ListUserProfileCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.MoveActivityCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.exception.CalorieCountException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.ui.ExceptionMessages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.AskUserProfileQns;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.Trakcal.calList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.Trakcal.executeCmd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.Trakcal.storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayAddActivityExceptionMessage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayAddCommandErrorMessage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayCalorieCountOutOfBound;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayDateTimeExceptionMessage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayDeleteCommandNullPointerExceptionMessage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayDeleteCommandNumberFormatExceptionMessage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayDeleteCommandStringOutOfBoundExceptionMessage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayEditActivityExceptionMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayEmptyAddActivityErrorMessage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayEmptyEditActivityErrorMessage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayEmptyDescriptionMessage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayFindErrorMessage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidInputErrorMessage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayIoExceptionMessage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayStringIndexOutOfBoundsExceptionMessage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayIncorrectDateTimeFormatEnteredMessage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.Ui.displayAddMessage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ui.Ui.displayEditMessage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " * Initialises parser class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected static final int ALPHABET_WITH_SLASH_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static final String CHAIN_SEPARATOR \u003d \"\u0026\u0026\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected static final int CHAIN_SEPARATOR_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected static final String FOOD_TAG \u003d \"f/\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected static final String EXERCISE_TAG \u003d \"e/\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected static final String CALORIE_TAG \u003d \"c/\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected static final String DATE_TAG \u003d \"d/\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected static final int INDEX_NOT_FOUND \u003d -1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected static final boolean FALSE \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Store details in the class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput user from the user"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public Parser(String userInput) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        this.userInput \u003d userInput.trim().replaceAll(\" +\", SPACE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.date \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Parses commands input by user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return Command type"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Command parseCommand() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String[] arguments \u003d userInput.split(SPACE, 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            switch (arguments[0].toLowerCase()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            case \"create\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return new CreateNewUserCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            case \"createset\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                return new CreateNewRepeatedSet(arguments[1]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"add\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return prepareAddCommand(userInput);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            case \"addset\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                return prepareAddSet(arguments[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return prepareFindCommand(userInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                return prepareEditUserProfile(arguments[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            case \"edita\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return prepareEditActivityCommand(arguments[1]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return prepareDeleteCommand(arguments[1]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return prepareListCommand(userInput);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            case \"listup\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                return prepareUserProfileListCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            case \"move\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return prepareMoveIndexCommand(userInput);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"graph\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return prepareGraphCommand(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new InvalidCommand(displayInvalidInputErrorMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayStringIndexOutOfBoundsExceptionMessage();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayIoExceptionMessage();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares file to be read from and added into the current list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param fileName file to be read from"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return Command"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    private Command prepareAddSet(String fileName) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String strDate \u003d formatter.format(date);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            String initialPath \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            String filePath \u003d initialPath + \"/\" + fileName + \".txt\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                while (line !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    Parser parser \u003d new Parser(\"add \" + line + \" d/ \" + strDate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    Command cmd \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    executeCmd(cmd);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    storage.updateFile(calList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    line \u003d reader.readLine();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            return new AddSetCommand();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayShortcutDoesNotExistMessage();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayIoExceptionMessage();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return new AddSetCommand();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private Command prepareEditUserProfile(String userInput) throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        AskUserProfileQns.edit(userInput);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return new EditUserProfileCommand();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares chained input by user into their respective commands to be read."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput input given by user"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public Command prepareChaining(String userInput) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        while (userInput.contains(CHAIN_SEPARATOR)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            if (!(userInput.endsWith(CHAIN_SEPARATOR))) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                userInput \u003d userInput + SPACE + CHAIN_SEPARATOR;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            int chainIndex \u003d userInput.indexOf(CHAIN_SEPARATOR);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            String firstString \u003d userInput.substring(0, chainIndex).trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Parser parser \u003d new Parser(firstString);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Command cmd \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (cmd.getCanBeChained()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                executeCmd(cmd);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                System.out.println(\"\u0027\" + firstString + \"\u0027 cannot be chained!\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            storage.updateFile(calList);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            userInput \u003d userInput.substring(chainIndex + CHAIN_SEPARATOR_LENGTH).trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares the edit command by checking the userInput."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput description of the edit command"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return EditFoodCommand or EditExerciseCommand"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    private Command prepareEditActivityCommand(String userInput) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String[] arguments \u003d userInput.split(SPACE, 2);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        int index \u003d Integer.parseInt(arguments[0]) - 1;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        userInput \u003d arguments[1];"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            if (userInput.startsWith(FOOD_TAG)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calorieIndex \u003d userInput.indexOf(CALORIE_TAG);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                String foodDescription;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calorieIndex \u003d\u003d INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    foodDescription \u003d userInput.substring(ALPHABET_WITH_SLASH_LENGTH, calorieIndex - 1).trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                checkDescription(foodDescription);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calories \u003d Integer.parseInt(userInput.substring(calorieIndex + ALPHABET_WITH_SLASH_LENGTH).trim());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                checkCalories(calories);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayEditMessage();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new EditFoodCommand(index, foodDescription, calories);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else if (userInput.startsWith(EXERCISE_TAG)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calorieIndex \u003d userInput.indexOf(CALORIE_TAG);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                String exerciseDescription;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calorieIndex \u003d\u003d INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    exerciseDescription \u003d userInput.substring(ALPHABET_WITH_SLASH_LENGTH, calorieIndex - 1).trim();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                checkDescription(exerciseDescription);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calories \u003d Integer.parseInt(userInput.substring(calorieIndex + ALPHABET_WITH_SLASH_LENGTH).trim());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                checkCalories(calories);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayEditMessage();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new EditExerciseCommand(index, exerciseDescription, calories);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayEmptyEditActivityErrorMessage();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (CalorieCountException e) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayCalorieCountOutOfBound();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEmptyDescriptionMessage();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEditActivityExceptionMessage();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (NumberFormatException e) {         // catch index not string"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEditActivityExceptionMessage();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEditActivityExceptionMessage();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public boolean checkCalories(int calories) throws CalorieCountException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        if (calories \u003c\u003d 0 || calories \u003e 3000) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            throw new CalorieCountException();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public boolean checkDescription(String description) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        if (description.equals(\" \") || description.equals(\"\")) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares the add command by checking the userInput."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput description of the add command"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return AddFoodCommand or AddExerciseCommand"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private Command prepareAddCommand(String userInput) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            String[] arguments \u003d userInput.split(SPACE, 2);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            if (arguments[1].startsWith(FOOD_TAG)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calorieIndex \u003d arguments[1].indexOf(CALORIE_TAG);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int dateIndex \u003d arguments[1].indexOf(DATE_TAG);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                String foodDescription;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calorieIndex \u003d\u003d INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    foodDescription \u003d arguments[1].substring(ALPHABET_WITH_SLASH_LENGTH, calorieIndex - 1).trim();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                boolean descriptionCheck;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                descriptionCheck \u003d checkDescription(foodDescription);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calories;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (dateIndex \u003d\u003d INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    calories \u003d Integer.parseInt(arguments[1].substring(calorieIndex + ALPHABET_WITH_SLASH_LENGTH)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                            .trim());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    calories \u003d Integer.parseInt(arguments[1].substring(calorieIndex + ALPHABET_WITH_SLASH_LENGTH,"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                            dateIndex).trim());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                boolean calorieCheck;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                calorieCheck \u003d checkCalories(calories);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                LocalDate date;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calorieCheck \u0026\u0026 descriptionCheck \u0026\u0026 dateIndex \u003d\u003d INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    date \u003d processDate(arguments[1].substring(dateIndex + ALPHABET_WITH_SLASH_LENGTH).trim());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayAddMessage();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new AddFoodCommand(foodDescription, calories, FALSE, date);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else if (arguments[1].startsWith(EXERCISE_TAG)) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calorieIndex \u003d arguments[1].indexOf(CALORIE_TAG);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int dateIndex \u003d arguments[1].indexOf(DATE_TAG);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                String exerciseDescription;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calorieIndex \u003d\u003d INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    exerciseDescription \u003d arguments[1].substring(ALPHABET_WITH_SLASH_LENGTH, calorieIndex - 1).trim();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                boolean descriptionCheck;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                descriptionCheck \u003d checkDescription(exerciseDescription);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calories;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (dateIndex \u003d\u003d INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    calories \u003d Integer.parseInt(arguments[1].substring(calorieIndex + ALPHABET_WITH_SLASH_LENGTH)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                            .trim());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    calories \u003d Integer.parseInt(arguments[1].substring(calorieIndex + ALPHABET_WITH_SLASH_LENGTH,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                            dateIndex).trim());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                boolean calorieCheck;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                calorieCheck \u003d checkCalories(calories);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                LocalDate date;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calorieCheck \u0026\u0026 descriptionCheck \u0026\u0026 dateIndex \u003d\u003d INDEX_NOT_FOUND) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    date \u003d processDate(arguments[1].substring(dateIndex + ALPHABET_WITH_SLASH_LENGTH).trim());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayAddMessage();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new AddExerciseCommand(exerciseDescription, calories, FALSE, date);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayEmptyAddActivityErrorMessage();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayAddActivityExceptionMessage();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayIncorrectDateTimeFormatEnteredMessage();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (CalorieCountException e) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayCalorieCountOutOfBound();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayDateTimeExceptionMessage();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEmptyDescriptionMessage();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (NullPointerException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayAddCommandErrorMessage();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayAddActivityExceptionMessage();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prepares the arguments needed for moving an activity from one index to another."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param userInput description of the move command"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return the moveCommand"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is not valid"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private Command prepareMoveIndexCommand(String userInput) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        //Removing additional spaces in the user\u0027s input"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String after \u003d userInput.trim().replaceAll(\" +\", \" \");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String firstIndexKey \u003d \"from/\";"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String secondIndexKey \u003d \"below/\";"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int firstIndex \u003d after.indexOf(firstIndexKey) + firstIndexKey.length(); //index after first keyword"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int secondIndex \u003d after.indexOf(secondIndexKey) + secondIndexKey.length(); //index after second keyword"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (!after.contains(firstIndexKey) \u0026\u0026 !after.contains(secondIndexKey)) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return new InvalidCommand(\"\u0027from/\u0027 and \u0027below/\u0027 keyword is missing!\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else if (!after.contains(firstIndexKey)) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return new InvalidCommand(\"\u0027from/\u0027 keyword is missing!\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else if (!after.contains(secondIndexKey)) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return new InvalidCommand(\"\u0027below/\u0027 keyword is missing!\");"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String firstIndexString \u003d after.substring(firstIndex).trim().split(SPACE)[0];"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String secondIndexString \u003d after.substring(secondIndex).trim().split(SPACE)[0];"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int indexToBeChanged \u003d 0;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int indexToBeInsertedBelow \u003d 0;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            indexToBeChanged \u003d Integer.parseInt(firstIndexString);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            indexToBeInsertedBelow \u003d Integer.parseInt(secondIndexString);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return new MoveActivityCommand(indexToBeChanged, indexToBeInsertedBelow);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(\"Please enter a valid index!\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Process date input by user."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param dateInput date input by user"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws DateTimeParseException if the string is in the incorrect format"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private LocalDate processDate(String dateInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.parse(dateInput);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Returns current date."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return current date"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    private LocalDate currentDate() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares the list command by checking the userInput."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput description of the list command"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return ListCommand"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private Command prepareListCommand(String userInput) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (userInput.toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            String dateString \u003d userInput.split(SPACE)[1];"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                LocalDate date \u003d processDate(dateString);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return new ListCommand(date);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                displayIncorrectDateTimeFormatEnteredMessage();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Prepares the delete command by checking the userInput."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput description of the delete command"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return DeleteCommand"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private Command prepareDeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            if (userInput.equals(\"all/\")) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return new DeleteCommand();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                int index \u003d Integer.parseInt(userInput) - 1;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                checkIndex(index);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayDeleteCommandNumberFormatExceptionMessage();"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayDeleteCommandNullPointerExceptionMessage();"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            displayDeleteCommandStringOutOfBoundExceptionMessage();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /** Checks for index of the delete command."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param index index of the delete command"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return true if index is valid"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @throws IndexOutOfBoundsException if index is below 0"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private void checkIndex(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares the find command by checking the userInput."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * If the keyword contains activity description, returns FindDescriptionCommand."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Else if the keyword contains calories count, returns FindCalorieCommand."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput description of the find command"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return FindCalorieCommand"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private Command prepareFindCommand(String userInput) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            String[] arguments \u003d userInput.split(SPACE, 2);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (arguments[1].startsWith(\"d/\")) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                String description \u003d arguments[1].substring(2).trim();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return new FindDescriptionCommand(description);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else if (arguments[1].startsWith(CALORIE_TAG)) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                String calorie \u003d arguments[1].substring(2).trim();"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return new FindCalorieCommand(calorie);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            } else if (arguments[1].startsWith(\"a/\")) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return new FindAllCommand(arguments[1]);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            } else if (arguments[1].startsWith(\"e/\")) {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return new FindEitherCommand(arguments[1]);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                displayFindErrorMessage();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        } catch (NullPointerException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            displayFindErrorMessage();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prepares the arguments needed for the graph command."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param userInput description of the graph command"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return graphCommand"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws Exception if no records are found"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private Command prepareGraphCommand(String[] userInput) throws Exception {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (userInput.length !\u003d 1) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            throw new Exception(\"Graph has no description\");"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (Trakcal.calList.getHashMap().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            throw new Exception(\"No records found!\");"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return new GraphCommand();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private Command prepareUserProfileListCommand() {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return new ListUserProfileCommand();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 40,
      "chewyang": 122,
      "e0425705": 309,
      "1-Karthigeyan-1": 90,
      "poonchuanan": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Store activities attributes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class Activity {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected int calories;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected boolean isFromFile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Constructor of class Activity."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description activity description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories activity calories count"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Activity(String description, int calories, LocalDate date, boolean isFromFile) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.isFromFile \u003d isFromFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        // If the activity added is not from decoding the file, print confirmation message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (!isFromFile) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Gets activity description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return activity description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public String getActivityDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Gets activity calories."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return activity calories"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public int getActivityCalories() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return this.calories;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Gets activity date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return activity date"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public LocalDate getActivityDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Returns String to be printed out."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return description + \" | \" + calories;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 25,
      "e0425705": 42
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.Trakcal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displayEmptyActivityCounterMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * List of activities for any day."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class ActivityList extends Trakcal {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    private ArrayList\u003cActivity\u003e activities;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private int activityCounter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private int netCalorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Constructor of class ActivityList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ActivityList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activityCounter \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        netCalorie \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Returns the current number of activities in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return current number of activities in the list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public int getNumberOfActivities() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return activities.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ArrayList getArrayList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return activities;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds new activity to the list and updates the netCalorie accordingly to the activity type added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param activity new activity that will be added to the current activity"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @throws IndexOutOfBoundsException if the calories is not within the limits"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void addActivity(Activity activity) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activities.add(activity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activityCounter++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (activity instanceof Food) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            netCalorie +\u003d activity.calories;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else if (activity instanceof Exercise) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            netCalorie -\u003d activity.calories;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        //displaySavedMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * This method replaces the current activity at index with a new activity."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * To change the description of the current activity."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param index    is the index of the current activity to be replaced"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param activity is the new activity that will be replacing the current activity"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void insertActivity(int index, Activity activity) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (isValidIndex(index)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            activities.set(index, activity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            if (activity instanceof Food) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                netCalorie +\u003d activity.calories;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else if (activity instanceof Exercise) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                netCalorie -\u003d activity.calories;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //displaySavedMessage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * This method moves a activity from a given index and to a place below a given index."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param indexToBeMovedFrom     this is the index at which the activity will be moved from"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param indexToBeInsertedBelow this is the index at which the activity will be moved to below"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is not within the limits"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void moveActivity(int indexToBeMovedFrom, int indexToBeInsertedBelow) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (isValidIndex(indexToBeMovedFrom) \u0026\u0026 isValidIndex(indexToBeInsertedBelow)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (indexToBeMovedFrom \u003e indexToBeInsertedBelow) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                Activity activity \u003d getActivity(indexToBeMovedFrom);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                activities.remove(indexToBeMovedFrom);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                activities.add(indexToBeInsertedBelow, activity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                Activity activity \u003d getActivity(indexToBeMovedFrom);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                activities.remove(indexToBeMovedFrom);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                activities.add(indexToBeInsertedBelow - 1, activity);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public int getNetCalorie() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return netCalorie;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Activity getActivity(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (isValidIndex(index)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return activities.get(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Removes an activity from the list via index."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param index index of activity in list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void removeActivity(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (isValidIndex(index)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Activity activityToRemove \u003d activities.get(index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (activityToRemove instanceof Food) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                netCalorie -\u003d activityToRemove.calories;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } else if (activityToRemove instanceof Exercise) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                netCalorie +\u003d activityToRemove.calories;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            activities.remove(index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            activityCounter--;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            System.out.print(\"Activity removed!\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            System.out.println(\"Please make sure index is within range\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints the list of activities."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (activityCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayEmptyActivityCounterMessage();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                System.out.println((i + 1) + \". \" + getActivity(i).toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Checks if the index is valid."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param index index of acitvity in list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return true if index is within range, else false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public boolean isValidIndex(int index) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if ((index \u003e\u003d 0) \u0026\u0026 (index \u003c activityCounter)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Clears the list of activities."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        activities.clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        activityCounter \u003d 0;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        netCalorie \u003d 0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Sets the activities as a string."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * For e.g, [F] | apple | 50, [F] | banana | 100, [E] | pushup | 10, [E] | jogging | 60"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return activities as a string"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String activitiesString \u003d Arrays.toString(activities.toArray());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activitiesString \u003d activitiesString.substring(1, activitiesString.length() - 1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return (activitiesString);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Returns the date of activity."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param index index of activity"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public LocalDate getDateOfActivityAtIndex(int index) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return getActivity(index).getActivityDate();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 126,
      "e0425705": 35,
      "1-Karthigeyan-1": 35,
      "poonchuanan": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/DayMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.ListNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displayEmptyActivityCounterMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Use hashmap of to store all the data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * The key of the hashmap would be the date and the value would be the activityList for that day."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class DayMap {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private HashMap\u003cLocalDate, ActivityList\u003e dayMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private ActivityList lastSeenList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public DayMap() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.dayMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.lastSeenList \u003d new ActivityList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Sets the last seen list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param activityList is the list to be passed into the lastSeenList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void setLastSeenList(ActivityList activityList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.lastSeenList \u003d new ActivityList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.lastSeenList \u003d activityList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Gets the date from the specified index of the lastSeenList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param index index of the lastSeenList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return localDate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public LocalDate getDateFromLastSeenListAtIndex(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return lastSeenList.getActivity(index).getActivityDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Returns the last seen list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return the lastSeenList"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ActivityList getLastSeenList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return this.lastSeenList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Displays the list using the listDrawer class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param date is the date of the list to be drawn."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void drawListAfterListCommand(LocalDate date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ListDrawer listDrawer \u003d new ListDrawer(date, lastSeenList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listDrawer.printList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Displays the list using the findDrawer class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void drawListAfterFindCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        FindDrawer findDrawer \u003d new FindDrawer(lastSeenList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        findDrawer.printList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Adds activity into activityList under the corresponding dateTime."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Creates a new activityList if there are none under the specified date."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param dateTime Specified date to extract activitylist from the dayMap."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param activity Description of the activity, the userinput"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void addActivity(LocalDateTime dateTime, Activity activity) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ActivityList alist \u003d this.getActivityList(dateTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (alist \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.put(dateTime.toLocalDate(), new ActivityList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            alist \u003d this.getActivityList(dateTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        alist.addActivity(activity);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        //System.out.println(\"Total calorie count for \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        // + dateTime.toLocalDate().toString() + \" \u003d \" + alist.getNetCalorie());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * This function removes an activity and replaces it with a new one, to work with edit command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param index the index of the activity to be deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param activity the activity to replace the old one."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void insertActivity(int index, Activity activity) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        lastSeenList.insertActivity(index, activity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Returns the activityList of the specified date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param dateTime is the date specified to extract the list from"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return activityList"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ActivityList getActivityList(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return dayMap.get(dateTime.toLocalDate());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Returns the size of the specified activity list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param dateTime the date of which the activitylist should be extracted from"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return the size of the list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public int getSizeOfActivityList(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ActivityList alist \u003d this.getActivityList(dateTime);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (alist \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return alist.getNumberOfActivities();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Returns the net calorie."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param date is the date of which to extract the activitylist from"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return the net calorie"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public int getNetCalorieOfDay(LocalDate date) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ActivityList alist \u003d getActivityList(date.atStartOfDay());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return alist.getNetCalorie();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public HashMap\u003cLocalDate, ActivityList\u003e getHashMap() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return dayMap;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints the activities for the given date."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param date specified date to print the list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void printActivityList(LocalDate date) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayEmptyActivityCounterMessage();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            getActivityList(date.atStartOfDay()).printList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Finds the activities containing a keyword."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param description is the keyword where the activity should contain"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws KeywordNotFoundException when the keyword is not found in any activity"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void listActivitiesContainingDescription(String description) throws KeywordNotFoundException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        setLastSeenList(new ActivityList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Iterator it \u003d dayMap.entrySet().iterator();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int activityFindCounter \u003d 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            String date \u003d pair.getKey().toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            ActivityList activities \u003d (ActivityList) pair.getValue();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (activityCounter \u003e 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    String currentLine \u003d activities.getActivity(i).toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    String descriptionToCheck \u003d currentLine.substring(currentLine.indexOf(\"|\") + 1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    descriptionToCheck \u003d descriptionToCheck.substring(0, descriptionToCheck.indexOf(\"|\")).trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    if (descriptionToCheck.contains(description)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        //System.out.println((activityFindCounter + 1) + \". \" + date + \" \" + currentLine);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        lastSeenList.addActivity(activities.getActivity(i));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        activityFindCounter++;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (activityFindCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new KeywordNotFoundException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Finds the activities containing a keyword."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param calorie is the calorie to be matched"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @throws KeywordNotFoundException when the keyword is not found in any activity"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void listActivitiesContainingCalorie(String calorie) throws KeywordNotFoundException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        setLastSeenList(new ActivityList());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        Iterator it \u003d dayMap.entrySet().iterator();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int activityFindCounter \u003d 0;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String date \u003d pair.getKey().toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            ActivityList activities \u003d (ActivityList) pair.getValue();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (activityCounter \u003e 0) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    String currentLine \u003d activities.getActivity(i).toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    int calorieStartIndex \u003d currentLine.lastIndexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    String calorieToCheck \u003d currentLine.substring(calorieStartIndex).trim();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    if (calorieToCheck.equals(calorie)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                        lastSeenList.addActivity(activities.getActivity(i));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                        activityFindCounter++;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        if (activityFindCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            throw new KeywordNotFoundException();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Finds the activities containing all keywords."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param userInput is the unparsed activity description"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @throws KeywordNotFoundException when the keyword is not found in any activity"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void listActivitiesContainingAll(String userInput) throws KeywordNotFoundException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        setLastSeenList(new ActivityList());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        Iterator it \u003d dayMap.entrySet().iterator();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int activityFindCounter \u003d 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String date \u003d pair.getKey().toString();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            ActivityList activities \u003d (ActivityList) pair.getValue();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (activityCounter \u003e 0) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    boolean hasAllWords;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    String currentLine \u003d activities.getActivity(i).toString();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    hasAllWords \u003d checkAllWords(currentLine, userInput);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    if (hasAllWords) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                        lastSeenList.addActivity(activities.getActivity(i));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                        activityFindCounter++;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        if (activityFindCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            throw new KeywordNotFoundException();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Finds the activities containing at least one of the keywords inputted."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param userInput is the unparsed activity description"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @throws KeywordNotFoundException when the keyword is not found in any activity"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void listActivitiesContainingEither(String userInput) throws KeywordNotFoundException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        setLastSeenList(new ActivityList());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        Iterator it \u003d dayMap.entrySet().iterator();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int activityFindCounter \u003d 0;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String date \u003d pair.getKey().toString();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            ActivityList activities \u003d (ActivityList) pair.getValue();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (activityCounter \u003e 0) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    boolean hasOneWord;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    String currentLine \u003d activities.getActivity(i).toString();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    hasOneWord \u003d checkEitherWords(currentLine, userInput);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    if (hasOneWord) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                        lastSeenList.addActivity(activities.getActivity(i));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                        activityFindCounter++;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        if (activityFindCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            throw new KeywordNotFoundException();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Checks if all keywords inputted by user is present in entry."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param currentLine current entry to be checked"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @return true if all words are present, false otherwise"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private boolean checkAllWords(String currentLine, String userInput) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ArrayList\u003cString\u003e wordsToCheck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        wordsToCheck \u003d getAllTags(userInput);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        for (String word : wordsToCheck) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (!currentLine.contains(word)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Checks if one of the keywords inputted by user is present in entry."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param currentLine current entry to be checked"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @return  hasOneWord true if just one word is present, false otherwise"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private boolean checkEitherWords(String currentLine, String userInput) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ArrayList\u003cString\u003e wordsToCheck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        wordsToCheck \u003d getAllTags(userInput);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        for (String word : wordsToCheck) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (currentLine.contains(word)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Parses all keywords inputted by user into an arraylist."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param userInput String user typed into CLI"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private ArrayList\u003cString\u003e getAllTags(String userInput) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        while (userInput.indexOf(\"/\") !\u003d userInput.lastIndexOf(\"/\")) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            int firstIndex \u003d userInput.indexOf(\"/\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            int secondIndex \u003d userInput.indexOf(\"/\", userInput.indexOf(\"/\") + 1);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String firstWord \u003d userInput.substring(firstIndex + 1, secondIndex).trim();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            userInput \u003d userInput.substring(secondIndex);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            tags.add(firstWord);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        userInput \u003d userInput.substring(userInput.indexOf(\"/\") + 1).trim();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        tags.add(userInput);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Deletes the activity with a given index."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param index is the index of the activity to be deleted"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index provided is out of range"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void deleteActivity(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (lastSeenList.isValidIndex(index)) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Activity activityToMatch \u003d lastSeenList.getActivity(index);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            //if previous command was the list command then this will straight away delete the activity"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            // from the list in the daymap"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lastSeenList.removeActivity(index);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            //if all the activities in a date is deleted, this is the key to be removed from the daymap"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            LocalDate keyToDelete \u003d null;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            //iterating through the entire daymap to find the activity to delete"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Iterator it \u003d dayMap.entrySet().iterator();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                ActivityList activities \u003d (ActivityList) pair.getValue();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                if (activityCounter \u003e 0) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        if (activityToMatch.equals(activities.getActivity(i))) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            activities.removeActivity(i);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            //if deleted the last item in the ActivityList then obtain the key to be deleted from daymap"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            if (activities.getNumberOfActivities() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                                keyToDelete \u003d (LocalDate) pair.getKey();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    //If encountered a activitylist with a count of 0,"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    // which will be resulted if deleted the last item of ActivityList from a list command"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                } else if (activityCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    keyToDelete \u003d (LocalDate)pair.getKey();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            //removes key from the daymap"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.remove(keyToDelete);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            //displaySavedMessage();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Moves an activity from one index to another."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param indexToBeMovedFrom the index to be moved from"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param indexToBeInsertedBelow the index to be moved to"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws IndexOutOfBoundsException when index is not within the bounds"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws ListNotFoundException when the list is not found"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void move(int indexToBeMovedFrom, int indexToBeInsertedBelow)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throws IndexOutOfBoundsException, ListNotFoundException {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (lastSeenList.getNumberOfActivities() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new ListNotFoundException();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lastSeenList.moveActivity(indexToBeMovedFrom - 1, indexToBeInsertedBelow);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Sets the activities at a given date as a string."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * For e.g, 2020-10-11: [F] | apple | 50, [F] | banana | 100, [E] | pushup | 10, [E] | jogging | 60."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param dateTime is the specified date"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return activities as a string for the given date"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public String toString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ActivityList alist \u003d this.getActivityList(dateTime);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return dateTime.toLocalDate().toString() + \", \" + alist.toString();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints the primitive list of activities for the given date."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param date is the date specified to extract the activitylist from"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void printList(LocalDate date) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        System.out.println(date.toString());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        getActivityList(date.atStartOfDay()).printList();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 266,
      "e0425705": 1,
      "poonchuanan": 144
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Sub-class of Activity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class Exercise extends Activity {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Constructor of class Exercise."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description exercise description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories burnt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Exercise(String description, int calories, LocalDate date, boolean isFromFile) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        super(description, calories, date, isFromFile);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Get exercise string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return exercise string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String getString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return \"[E] | \" + super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 6,
      "e0425705": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/FindDrawer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * This class is used to create a responsive interface for the listing feature after a list command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class FindDrawer extends ListDrawer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int START_INDEX_FOR_DESCRIPTION \u003d 49;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int START_INDEX_FOR_CALORIES \u003d 100;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int MAX_STRING_FOR_DESCRIPTION \u003d 36 + DESCRIPTION.length();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int START_INDEX_FOR_EXERCISE_TYPE \u003d 19;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int START_INDEX_FOR_FOOD_TYPE \u003d 21;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private static final int START_INDEX_FOR_ACTIVITY_DATE \u003d 9;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Constructor for the findDrawer class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param lastSeenList list to be drawn"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public FindDrawer(ActivityList lastSeenList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        super(lastSeenList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints the list of activities."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        System.out.println(listHeaderString()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(DIVIDER, listHeaderString().length())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + allActivityString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Generates the string for a single activity."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param index index of the activity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return string of single activity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String singleActivityString(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ArrayList\u003cString\u003e descriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String restOfDescription \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String indexString \u003d Integer.toString(index + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthOfIndex \u003d indexString.length();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String descriptionString \u003d activityList.getActivity(index).getActivityDescription();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthOfDescription \u003d descriptionString.length();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String dateString \u003d activityList.getActivity(index).getActivityDate().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthOfDateString \u003d dateString.length();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String typeString;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthOfType;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthLeftForWhiteSpaceDate \u003d START_INDEX_FOR_ACTIVITY_DATE - lengthOfIndex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthLeftForWhiteSpaceType;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthLeftForWhiteSpace;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (activityList.getActivity(index) instanceof Food) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            typeString \u003d FOOD_TYPE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthOfType \u003d FOOD_TYPE.length();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthLeftForWhiteSpaceType \u003d START_INDEX_FOR_FOOD_TYPE - lengthOfIndex - lengthLeftForWhiteSpaceDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            typeString \u003d EXERCISE_TYPE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthOfType \u003d EXERCISE_TYPE.length();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthLeftForWhiteSpaceType \u003d START_INDEX_FOR_EXERCISE_TYPE - lengthOfIndex - lengthLeftForWhiteSpaceDate;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthLeftForWhiteSpaceDescription \u003d START_INDEX_FOR_DESCRIPTION - lengthOfIndex"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                - lengthLeftForWhiteSpaceType - lengthOfType - lengthLeftForWhiteSpaceDate - lengthOfDateString;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (lengthOfDescription \u003e MAX_STRING_FOR_DESCRIPTION) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthLeftForWhiteSpace \u003d START_INDEX_FOR_CALORIES - lengthOfIndex - lengthOfType"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    - lengthLeftForWhiteSpaceType - lengthLeftForWhiteSpaceDescription - lengthLeftForWhiteSpaceDate"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    - MAX_STRING_FOR_DESCRIPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthLeftForWhiteSpace \u003d START_INDEX_FOR_CALORIES - lengthOfIndex - lengthOfType"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    - lengthLeftForWhiteSpaceType  - lengthLeftForWhiteSpaceDescription - lengthLeftForWhiteSpaceDate"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    - lengthOfDescription;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        //Extract the rest of the string if the description length exceeds the maximum length"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        while (lengthOfDescription \u003e MAX_STRING_FOR_DESCRIPTION) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            String description \u003d descriptionString.substring(0, MAX_STRING_FOR_DESCRIPTION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            descriptions.add(description);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(Arrays.toString(descriptions.toArray()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            descriptionString \u003d descriptionString.substring(MAX_STRING_FOR_DESCRIPTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthOfDescription \u003d descriptionString.length();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        descriptions.add(descriptionString);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (descriptions.size() \u003e 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            for (int i \u003d 1; i \u003c descriptions.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                restOfDescription \u003d restOfDescription"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        + increaseStringLength(\" \", START_INDEX_FOR_DESCRIPTION)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        + descriptions.get(i) + NEWLINE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String calorieString \u003d Integer.toString(activityList.getActivity(index).getActivityCalories());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return indexString"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(\" \", lengthLeftForWhiteSpaceDate) + dateString"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(\" \", lengthLeftForWhiteSpaceType) + typeString"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(\" \", lengthLeftForWhiteSpaceDescription) + descriptions.get(0)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(\"_\", lengthLeftForWhiteSpace) + calorieString"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + restOfDescription;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Generates the header for the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return string of header"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String listHeaderString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String header \u003d NUMBERS"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + INDENT + DATE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(INDENT, 2) + ACTIVITY_TYPE"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(INDENT, 4) + DESCRIPTION"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(INDENT,3) + CALORIES_GAIN_OR_LOST;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return header;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 143
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Sub-class of Activity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class Food extends Activity {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Constructor of class Food."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description food description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories consumed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Food(String description, int calories, LocalDate date, boolean isFromFile) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        super(description, calories, date, isFromFile);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Gets food string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return food string"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String getString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return \"[F] | \" + super.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 6,
      "e0425705": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/GraphDrawing.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Displays the graph of the net calorie gain/loss throughout the period."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class GraphDrawing {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public GraphProperty graphProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String BLANK_WIDTH \u003d \"   \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String TARGET_WIDTH \u003d \"***\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String BAR_WIDTH \u003d \"| |\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String targetBarWidth \u003d \"|*|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String TOP_BAR_WIDTH \u003d \"|-|\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String VERTICAL_LINE \u003d \"|\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private String targetCaloriesString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private String maxCaloriesString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private String minCaloriesString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param graphProperty properties of graph"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public GraphDrawing(GraphProperty graphProperty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.graphProperty \u003d graphProperty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        setCalorieString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private void setCalorieString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.targetCaloriesString \u003d Integer.toString(graphProperty.targetCalories);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.maxCaloriesString \u003d Integer.toString(graphProperty.maxCalories);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.minCaloriesString \u003d Integer.toString(graphProperty.minCalories);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Repeats character back to back."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param character character"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param size number of times to repeat"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return concatenated string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String repeatCharacter(String character, int size) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert size \u003e\u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String characterText \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            characterText +\u003d character;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return characterText;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Generates the x_axis."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return x_axis String"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String generate_x_axis(int maxCalorieSize, int column) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String horizontalLine \u003d \"|-+\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d 0; i \u003c column - 1; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            horizontalLine +\u003d repeatCharacter(\"-\", 5) + \"+\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        horizontalLine \u003d repeatCharacter(SPACE, maxCalorieSize) + horizontalLine + \"--\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return horizontalLine;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Generates date labels for the x-axis."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param maxCalorieSize Character length of maxCalorieSize"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return date labels"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String generateDateLabels(int maxCalorieSize,  ArrayList\u003cLocalDate\u003e keys) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert keys !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert maxCalorieSize \u003e\u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return repeatCharacter(SPACE, maxCalorieSize - 1) + SPACE + graphProperty.parseDate(keys);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Generate vertical axis label."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param columnNumber column number"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param maxColumn maximum column"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param maxSize maximum size of labels in vertical axis"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return vertical axis label"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private String generateVerticalAxisLabel(int columnNumber, int maxColumn, int maxSize) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String label \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (columnNumber \u003d\u003d maxColumn - 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            label \u003d this.maxCaloriesString + repeatCharacter(SPACE, maxSize - this.maxCaloriesString.length());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else if (columnNumber \u003d\u003d graphProperty.targetRow) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            label \u003d this.targetCaloriesString"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    + repeatCharacter(SPACE, maxSize - this.targetCaloriesString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else if (columnNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            label \u003d this.minCaloriesString"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    + repeatCharacter(SPACE, maxSize - this.minCaloriesString.length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            label \u003d repeatCharacter(SPACE, maxSize);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Calculate difference in string size."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param firstString first string"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param secondString second string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return string length differemnce"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int calculateMaxSize(String firstString, String secondString) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (firstString.length() \u003e secondString.length()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return firstString.length();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return secondString.length();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds width based on the row type."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param number row number"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return width"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String addWidth(int number) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String width \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (number \u003d\u003d graphProperty.targetRow) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            width +\u003d TARGET_WIDTH;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            width +\u003d BLANK_WIDTH;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return width;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Draws the graph."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return drawing"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String drawGraph() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int[][] table \u003d graphProperty.table;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cLocalDate\u003e keys \u003d graphProperty.keys;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert table !\u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert keys !\u003d null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int maxSize \u003d calculateMaxSize(maxCaloriesString, minCaloriesString);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String drawing \u003d \"\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d GraphProperty.COLUMN - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            drawing +\u003d generateVerticalAxisLabel(i, GraphProperty.COLUMN, maxSize) + VERTICAL_LINE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            for (int j \u003d 0; j \u003c graphProperty.row; j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                drawing +\u003d generateHorizontalLine(table, i, j);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            drawing +\u003d \"\\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        drawing +\u003d generate_x_axis(maxSize, graphProperty.row);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        drawing +\u003d generateDateLabels(maxSize, keys);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return drawing;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Generates horizontal line."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param table table for graph"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param column current column number"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param row current rpw number"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return horizontl line"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private String generateHorizontalLine(int[][] table, int column, int row) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String drawing \u003d \"\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        switch (table[column][row]) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            drawing +\u003d BLANK_WIDTH;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            drawing +\u003d BAR_WIDTH;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            drawing +\u003d TARGET_WIDTH;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            drawing +\u003d targetBarWidth;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            drawing +\u003d TOP_BAR_WIDTH;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            //does nothing"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        drawing +\u003d addWidth(column);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return drawing;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 4,
      "e0425705": 9,
      "1-Karthigeyan-1": 186
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/GraphProperty.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.command.GraphCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class GraphProperty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static final int COLUMN \u003d 11;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static String DATE_FORMAT \u003d \"dd/MM\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static int TARGET_TYPE \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static int LIMIT_TYPE \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static int DIVISOR \u003d 10;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static int EMPTY \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int targetRow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int row;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public final DayMap dayMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    ArrayList\u003cLocalDate\u003e keys;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int targetCalories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int maxCalories;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int minCalories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int[][] table;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Constructor for the graph."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param dayMap hashmap containing dates"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param targetCalories tagret calories from userprofile"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public GraphProperty(DayMap dayMap, int targetCalories) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert dayMap !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.dayMap \u003d dayMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.targetCalories \u003d targetCalories;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Maximum days in graph is 7 or lower."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return number of days to be shown in graph"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private int checkSize() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int size \u003d dayMap.getHashMap().size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert size !\u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (size \u003c GraphCommand.MAXIMUM_DAYS) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return size;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return GraphCommand.MAXIMUM_DAYS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Set other properties by calculation."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void setProperties() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.row \u003d checkSize();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.keys \u003d sortKeys();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cInteger\u003e calories \u003d getCalories();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.table \u003d initiateTable(calories);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Initiates a 2 dimension table and fills the table with 0."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int[][] setEmptyTable(int[][] table) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int[] row : table) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            Arrays.fill(row, EMPTY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return table;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Get and sort keys from hashmap."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return sorted keys in arraylist"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public ArrayList\u003cLocalDate\u003e sortKeys() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cLocalDate\u003e keys \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (LocalDate key : dayMap.getHashMap().keySet()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            keys.add(key);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        //sort the keys by date"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        keys.sort(LocalDate::compareTo);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cLocalDate\u003e newKeys \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d keys.size() - row; i \u003c keys.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            newKeys.add(keys.get(i));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return newKeys;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Get calories from the dates."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return array of calories"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public ArrayList\u003cInteger\u003e getCalories() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int currentCalories;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int minCalories \u003d targetCalories;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int maxCalories \u003d targetCalories;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cInteger\u003e calories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (LocalDate date : keys) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            currentCalories \u003d dayMap.getNetCalorieOfDay(date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            calories.add(currentCalories);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            maxCalories \u003d findMaximum(maxCalories, currentCalories);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            minCalories \u003d findMinimum(minCalories, currentCalories);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        checkBoundaries(minCalories, maxCalories);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void checkBoundaries(int minCalories, int maxCalories) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert maxCalories !\u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (maxCalories - minCalories \u003c DIVISOR) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            minCalories -\u003d DIVISOR / 2;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            maxCalories +\u003d DIVISOR / 2;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.minCalories \u003d minCalories;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.maxCalories \u003d maxCalories;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Compares and finds the minimum between 2 numbers."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param firstNumber first number to compare"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param secondNumber second number to compare"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return the lesser number"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int findMinimum(int firstNumber, int secondNumber) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (firstNumber \u003c secondNumber) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return firstNumber;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return secondNumber;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Compares and finds the maximum between 2 numbers."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param firstNumber first number to compare"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param secondNumber second number to compare"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return the greater number"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int findMaximum(int firstNumber, int secondNumber) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (firstNumber \u003c secondNumber) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return secondNumber;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return firstNumber;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Calculates interval of the graph."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return interval value"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int calculateInterval() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert maxCalories - minCalories !\u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return (maxCalories - minCalories) / DIVISOR;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Fills up the table with appropriate values."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 0 -\u003e empty spaces."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 1 -\u003e middle portion of the bar."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 2 -\u003e target row."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 3 -\u003e target row  + middle portion of the bar."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 4 -\u003e top symbol of the bar."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param table representation of graph in 2d array."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param calories calories list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void fillTable(int[][] table, ArrayList\u003cInteger\u003e calories) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert table !\u003d null;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert calories !\u003d null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.targetRow \u003d calculateRowNumber(targetCalories);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int limitNumber;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d COLUMN - 1; i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            for (int j \u003d 0; j \u003c row; j++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                limitNumber \u003d calculateRowNumber(calories.get(j));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                setTable(table, limitNumber, i, j);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * sets graph in table format."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param table table"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param limitNumber top limit for the calories"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param column current column number"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param row cuttent row number"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private void setTable(int[][] table, int limitNumber, int column, int row) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (limitNumber \u003d\u003d column) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            table[column][row] \u003d LIMIT_TYPE;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else if (targetRow \u003d\u003d column) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            table[column][row] \u003d TARGET_TYPE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (limitNumber \u003e column) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            table[column][row]++;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Parses the date into string."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return date in dd/MM format"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String parseDate(ArrayList\u003cLocalDate\u003e keys) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert keys !\u003d null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String formattedDate \u003d \"\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (LocalDate key : keys) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            formattedDate +\u003d key.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            formattedDate +\u003d \" \";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return formattedDate;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Initiates a table."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return table"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int[][] initiateTable(ArrayList\u003cInteger\u003e calories) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert calories !\u003d null;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int [][]table \u003d new int[COLUMN][row];"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        setEmptyTable(table);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        fillTable(table, calories);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return table;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Find the row number corresponding to the calories."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int calculateRowNumber(int calories) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert calories \u003e\u003d minCalories;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int interval \u003d calculateInterval();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assert interval !\u003d 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return (calories - minCalories) / interval;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 1,
      "e0425705": 16,
      "1-Karthigeyan-1": 228
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ListDrawer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * This class is used to create a responsive interface for the listing feature after a list command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class ListDrawer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected ActivityList activityList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String INDENT \u003d \"        \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String DIVIDER \u003d \"-\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String DELIMITER \u003d \",\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String DESCRIPTION \u003d \"Description\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String DATE \u003d \"Date\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String NUMBERS \u003d \"No.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String NEWLINE \u003d \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String ACTIVITY_TYPE \u003d \"Type\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String FOOD_TYPE \u003d \"Food\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String EXERCISE_TYPE \u003d \"Exercise\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final String CALORIES_GAIN_OR_LOST \u003d \"Calories gain or lost\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int START_INDEX_FOR_DESCRIPTION \u003d 14 + INDENT.length() + ACTIVITY_TYPE.length();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int START_INDEX_FOR_CALORIES \u003d 72 + INDENT.length() + ACTIVITY_TYPE.length();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int MAX_STRING_FOR_DESCRIPTION \u003d 36 + DESCRIPTION.length();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int START_INDEX_FOR_EXERCISE_TYPE \u003d 9;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected static final int START_INDEX_FOR_FOOD_TYPE \u003d 11;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Sets the date and activity list to be printed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param date date which activity list to be used"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param activityList is the list to be used when creating the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ListDrawer(LocalDate date, ActivityList activityList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d date.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.activityList \u003d activityList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Constructor for the listDrawer class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param lastSeenList list to be drawn."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ListDrawer(ActivityList lastSeenList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.activityList \u003d lastSeenList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints the list of activities."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        System.out.print(headerBox()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + listHeaderString()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(DIVIDER, listHeaderString().length())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + allActivityString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Multiplies the length of a string by a given length."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param stringToIncrease string to multiply in length"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param length length to increase by"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return a string of the increased length"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String increaseStringLength(String stringToIncrease, int length) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return String.join(\"\", Collections.nCopies(length, stringToIncrease));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Generates the header for the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return string of header"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String listHeaderString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String header \u003d NUMBERS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(INDENT, 1) + ACTIVITY_TYPE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(INDENT, 3) + DESCRIPTION"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(INDENT,3) + CALORIES_GAIN_OR_LOST;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return header;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Generates the header as a box with the net calorie and date information."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return string for the header box"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String headerBox() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String headerString \u003d \"|  \" + date + \"  \" + netCalorieString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String dividerString \u003d increaseStringLength(DIVIDER, headerString.length());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return dividerString + NEWLINE + headerString + NEWLINE + dividerString + NEWLINE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String netCalorieString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return \"|  \" + \"Net Calorie: \" + activityList.getNetCalorie() + \" kcal  |\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Generates the string for a single activity."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param index index of the activity"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return string of single activity"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String singleActivityString(int index) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ArrayList\u003cString\u003e descriptions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String restOfDescription \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String indexString \u003d Integer.toString(index + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthOfIndex \u003d indexString.length();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String descriptionString \u003d activityList.getActivity(index).getActivityDescription();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthOfDescription \u003d descriptionString.length();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String typeString;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthOfType;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthLeftForWhiteSpaceType;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthLeftForWhiteSpaceDescription;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int lengthLeftForWhiteSpace;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (activityList.getActivity(index) instanceof Food) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            typeString \u003d FOOD_TYPE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthOfType \u003d FOOD_TYPE.length();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthLeftForWhiteSpaceType \u003d START_INDEX_FOR_FOOD_TYPE - lengthOfIndex;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            typeString \u003d EXERCISE_TYPE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthOfType \u003d EXERCISE_TYPE.length();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthLeftForWhiteSpaceType \u003d START_INDEX_FOR_EXERCISE_TYPE - lengthOfIndex;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        lengthLeftForWhiteSpaceDescription \u003d START_INDEX_FOR_DESCRIPTION"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                - lengthOfIndex - lengthLeftForWhiteSpaceType - lengthOfType;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (lengthOfDescription \u003e MAX_STRING_FOR_DESCRIPTION) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthLeftForWhiteSpace \u003d START_INDEX_FOR_CALORIES - lengthOfIndex - lengthOfType"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    - lengthLeftForWhiteSpaceType - lengthLeftForWhiteSpaceDescription - MAX_STRING_FOR_DESCRIPTION;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthLeftForWhiteSpace \u003d START_INDEX_FOR_CALORIES - lengthOfIndex - lengthOfType"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    - lengthLeftForWhiteSpaceType  - lengthLeftForWhiteSpaceDescription - lengthOfDescription;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        //if the length of the description exceeds the maximum length, extract the rest of the description"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        while (lengthOfDescription \u003e MAX_STRING_FOR_DESCRIPTION) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            String description \u003d descriptionString.substring(0, MAX_STRING_FOR_DESCRIPTION);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            descriptions.add(description);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            descriptionString \u003d descriptionString.substring(MAX_STRING_FOR_DESCRIPTION);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lengthOfDescription \u003d descriptionString.length();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        descriptions.add(descriptionString);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (descriptions.size() \u003e 1) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            for (int i \u003d 1; i \u003c descriptions.size(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                restOfDescription \u003d restOfDescription"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        + increaseStringLength(\" \", START_INDEX_FOR_DESCRIPTION)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        + descriptions.get(i)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        + NEWLINE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        //    ----------------------------------------"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String calorieString \u003d Integer.toString(activityList.getActivity(index).getActivityCalories());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return indexString"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(\" \", lengthLeftForWhiteSpaceType) + typeString"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(\" \", lengthLeftForWhiteSpaceDescription) + descriptions.get(0)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + increaseStringLength(\"_\", lengthLeftForWhiteSpace) + calorieString"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + NEWLINE"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + restOfDescription;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Generates the content for the list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return string of the content"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected String allActivityString() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String allActivityString \u003d \"\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        for (int i \u003d 0; i \u003c activityList.getNumberOfActivities(); i++) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            allActivityString \u003d allActivityString + singleActivityString(i) + NEWLINE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return allActivityString;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 196,
      "e0425705": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.DayMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.displayNotSavedMessage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Storage class to decode and encode the .csv file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    File dataFile;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Constructor for the storage class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param filePath path of file to be stored into"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Creates the file hierarchy if not present."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws IOException if there is an issue"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private void createFileHierarchy() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (dataFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (dataFile.exists()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dataFile.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dataFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Appends to the file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param textToAdd string to append the file with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private void appendToFile(String textToAdd) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(bw);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            pw.println(textToAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            pw.flush();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //System.out.println(\"record saved\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //displaySavedMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //System.out.println(\"record not saved\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayNotSavedMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Overwrites the file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param textToAdd string to override the file with"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private void writeToFile(String textToAdd) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        FileWriter fw \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            fw.write(textToAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(\"Unable to write to file!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Updates the file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param dayMap dayMap to update the file with"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void updateFile(DayMap dayMap) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        HashMap\u003cLocalDate, ActivityList\u003e dayHashMap;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dayHashMap \u003d dayMap.getHashMap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Iterator it \u003d dayHashMap.entrySet().iterator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        writeToFile(\"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            String activities \u003d pair.getValue().toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            appendToFile(pair.getKey().toString() + \", \" + activities);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        //displaySaveMessage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Loads saved CSV data into the list when the program starts."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param calList used to store the current activities"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void loadData(DayMap calList) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            createFileHierarchy();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            //Read from CSV- reads the file line by line and stores the lines in an array list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                lines.add(line);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            //Read line by line"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            for (int i \u003d 0; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                processData(calList, lines.get(i));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(\"Unable to load data\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Splits the current line of CSV data into date and activity, then processes the activity."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param calList used to store the current activities"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param data line of CSV data"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private void processData(DayMap calList, String data) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String dateString \u003d data.substring(0, data.indexOf(\u0027,\u0027));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        //If the date is the same as today, append it to our list for the day"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        //if (date.compareTo(LocalDate.now()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String activities \u003d data.substring(data.indexOf(\",\") + 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String firstActivityString \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        while (activities.contains(\",\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            firstActivityString \u003d activities.substring(0, activities.indexOf(\u0027,\u0027));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            processActivity(calList, firstActivityString, date.atStartOfDay());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            activities \u003d activities.substring(activities.indexOf(\",\") + 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        processActivity(calList, activities, date.atStartOfDay());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Splits the activity data into food or exercise, then adds the activity to calList."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param calList used to store the current activities"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param activity activity data in to format of type, description and calories"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param date date the activity was conducted"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private void processActivity(DayMap calList, String activity, LocalDateTime date) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        char typeOfActivity \u003d activity.charAt(2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String description \u003d activity.substring(activity.indexOf(\"|\") + 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        description \u003d description.substring(0, description.indexOf(\"|\")).trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int calorieStartIndex \u003d activity.lastIndexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String calorieString \u003d activity.substring(calorieStartIndex).trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int calories \u003d Integer.parseInt(calorieString);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        switch (typeOfActivity) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        case \u0027F\u0027:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Food food \u003d new Food(description, calories,date.toLocalDate(), true);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            calList.addActivity(date, food);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Exercise exercise \u003d new Exercise(description, calories, date.toLocalDate(), true);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            calList.addActivity(date, exercise);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            System.out.println(\"Corrupted data. Activity should be either exercise or food\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 112,
      "e0425705": 6,
      "poonchuanan": 67
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/UserSetStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "//import java.io.;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.FileSystemAlreadyExistsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "//import static seedu.duke.ui.ExceptionMessages.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayIoExceptionMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayShortcutDoesNotExistMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidCalorieEntryMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayExistingFileMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class UserSetStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static final String PATH \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void prepareNewSet(String userInput) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String fileName \u003d userInput.substring(0, userInput.indexOf(\"/\") - 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        createNewTextFile(\"/\" + fileName + \".txt\", userInput.substring(userInput.indexOf(\"/\") - 1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void createNewTextFile(String fileName, String toTrim) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String filePath \u003d PATH + fileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            boolean isFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            if (!isFileCreated) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayIoExceptionMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        updateTextFile(filePath, toTrim);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void updateTextFile(String path, String toTrim) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(path);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new OutputStreamWriter(fos));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            String[] activity \u003d toTrim.split(\"\\\\+\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            for (String s : activity) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                if (s.startsWith(\" \")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    s \u003d s.substring(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                if (s.endsWith(\" \")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    s \u003d s.substring(0, s.length() - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                bw.write(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                String calories \u003d s.substring(s.indexOf(\"c/\") + 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                Integer.parseInt(calories);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    Ui.drawDivider();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    System.out.println(\"You have created a shortcut containing:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                if (s.startsWith(\"f/\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    System.out.println(index + \". \" + \"Food: \" + s.substring(2,s.indexOf(\"c/\") - 1)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                            + \", Calories: \" + calories);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                } else if (s.startsWith(\"e/\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    System.out.println(index + \". \" + \"Exercise: \" + s.substring(2,s.indexOf(\"c/\") - 1)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                            + \", Calories: \" + calories);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            Ui.drawDivider();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (FileNotFoundException fileNotFoundException) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(\"There is no such set! Please create a new one first.\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayExistingFileMessage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidCalorieEntryMessage();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 91
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Userinfotextfilestorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class Userinfotextfilestorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static final String PATH \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static final String FILE_PATH \u003d PATH + \"/tp.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static ArrayList\u003cString\u003e update() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (Files.exists(Path.of(PATH))) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                while (s.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    String dataString \u003d s.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                s.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            return data;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                createDataFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                System.out.println(\"IO Exception found\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void createDataFile() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        File file \u003d new File(Userinfotextfilestorage.PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        boolean isDirCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (isDirCreated) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            file \u003d new File(Userinfotextfilestorage.PATH + \"/tp.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public void save(String test) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String[] parts \u003d test.split(\",\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Files.write(Path.of(FILE_PATH), Arrays.asList(parts));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 58,
      "1-Karthigeyan-1": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/ExceptionMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.DIVIDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.Ui.PROMPTUSEROFHELPMESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Deals with error/exception messages."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class ExceptionMessages {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when StringIndexOutOfBoundsException occurs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayStringIndexOutOfBoundsExceptionMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"The index entered is not within the range!\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + PROMPTUSEROFHELPMESSAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when IOException occurs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayIoExceptionMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"IO Exception has occurred!\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + PROMPTUSEROFHELPMESSAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when NumberFormatException occurs in delete command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayDeleteCommandNumberFormatExceptionMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Index is not a number!\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + PROMPTUSEROFHELPMESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when NullPointerException occurs in delete command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayDeleteCommandNullPointerExceptionMessage() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"There is not index to remove\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + PROMPTUSEROFHELPMESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints error message when attempting to access an empty list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static void displayListNotFoundExceptionMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        print(\"The list to work on is empty!\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Try entering a list command first.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + PROMPTUSEROFHELPMESSAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when NullPointerException occurs in Parser."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayParserNullPointerExceptionMessage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Invalid command!\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + PROMPTUSEROFHELPMESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when error occurs in add command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static String displayAddCommandErrorMessage() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return (\"Invalid input given!\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"The input format for adding food activity is \u0027add f/ X c/ Y d/ Z\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \" - where food is X, calories lost is Y and date(YYYY-MM-DD) is Z\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"The input format for adding exercise activity is \u0027add e/ X c/ Y d/ Z\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \" - where exercise done is X, calories lost is Y and date(YYYY-MM-DD) is Z\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"If this is still too confusing for you, please do input \u0027help\u0027 for more information.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when input of user is not understood."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static String displayInvalidInputErrorMessage() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String invalidMessage \u003d \"Sorry I do not understand the input given!\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Perhaps pulling out help list via input \u0027help\u0027 may help.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return invalidMessage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when error occurs in find command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayFindErrorMessage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"I do not understand what you mean!\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"The input format for finding food or exercise activity via keyword is \u0027find d/ X\u0027\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \" - where keyword is X\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"The input format for finding calorie count via keyword is \u0027find c/ X\u0027\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \" - where calories count is X\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"Please do input \u0027help\u0027 for more information.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when date and time format entered is wrong."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static void displayIncorrectDateTimeFormatEnteredMessage() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Wrong format of date entered!\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"The accepted format is YYYY-MM-DD!\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"Also, ensure that the date input actually exists!\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + PROMPTUSEROFHELPMESSAGE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid input for add activity given."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayAddActivityExceptionMessage() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Sorry I do not understand what you mean!\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"One of the following has been violated:\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t1. Description or calories input cannot be empty\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t2. Calories count input must be an integer \u003e 0!\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t3. Wrong input format\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t\\tInput format is:\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t\\tadd f/ FOOD_DESCRIPTION c/ CALORIES d/ YYYY-MM-DD\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t\\tadd e/ EXERCISE_DESCRIPTION c/ CALORIES d/ YYYY-MM-DD\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid input for add activity given."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEditActivityExceptionMessage() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Sorry I do not understand what you mean!\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"One of the following has been violated:\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t1. Description or calories input cannot be empty\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t2. Calories count input must be an integer \u003e 0!\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t3. Wrong input format\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t\\tInput format is:\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t\\tedita INDEX f/ FOOD_DESCRIPTION c/ CALORIES\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\t\\tedita INDEX e/ EXERCISE_DESCRIPTION c/ CALORIES\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when attributes input by user is empty."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEmptyAddActivityErrorMessage() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Sorry! There is missing input!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid activity factor input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidActivityFactorMessage() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Sorry this is an invalid activity factor!\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"Please enter an integer from 1 to 5, with 1 being the least \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"active and 5 being the most active\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when DateTimeException occurs."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayDateTimeExceptionMessage() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        print(\"Sorry, I do not understand!\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"The input format of date is YYYY-MM-DD!\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when attributes input by user is empty."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEmptyEditActivityErrorMessage() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Sorry! There is missing input!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints message when there is a presence of a duplicated naming for file."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayExistingFileMessage() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Sorry! There is an existing set with this name, please use another name!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid gender input."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidGenderMessage() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please input female or male as gender only!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid weight goal input."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidWeightGoalMessage() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please input lose or maintain or gain as weight goal only!\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid weight input."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidWeightMessage() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please enter a valid weight format!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid height input."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidHeightMessage() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please enter a valid height format!\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid age input."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidAgeMessage() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please enter a valid age!\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid activity level input."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidActivityLevelMessage() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please integer for activity level only!\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when IndexOutOfBoundsException occurs in edit command."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEditIndexOutOfBoundsExceptionMessage() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Index entered is not within the range!\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Please pull out the list for the day before editing on it!\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * Prints out error message when a shortcut has not been created in addSet command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayShortcutDoesNotExistMessage() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"This shortcut does not exists, please create a shortcut before adding it!\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * Prints out error message when calorie has not been input as integer."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidCalorieEntryMessage() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please enter calories as an integer\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * Prints out error message when weight range is not between 20 to 650kg."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidWeightRangeMessage() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please enter a weight range from 20kg to 650kg\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * Prints out error message when age is not between 0 to 120 years old."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidAgeRangeMessage() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please enter an age range from 1 to 120 years old\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * Prints out error message when height is not between 10 to 300cm."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidHeightRangeMessage() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please enter a height range from 10cm to 300cm\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * Prints out error message when activity level from 1 to 5."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidActivityLevelRangeMessage() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Please enter an activity level from 1 to 5 only\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when calorie count is out of the accepted bound of this application."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayCalorieCountOutOfBound() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String calorieOutOfBoundMessage \u003d \"Calorie count should be \u003e 0 and \u003c\u003d 3000!\\n\""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Please input a valid calorie count that is within the range!\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        print(calorieOutOfBoundMessage);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when description input by user is empty."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEmptyDescriptionMessage() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String emptyDescriptionMessage \u003d \"Sorry the current description is empty!\\n\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Please input a valid description that is not empty!\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        print(emptyDescriptionMessage);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Prints out error message for invalid number for delete command."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static void displayDeleteCommandStringOutOfBoundExceptionMessage() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        print(\"Invalid Index!\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints a message in a specified format."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param message is the message to be printed out"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static void print(String message) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayEmptyStringMessage() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Please do not enter an empty input\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 61,
      "chewyang": 86,
      "e0425705": 148,
      "1-Karthigeyan-1": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.InitialiseUserProfile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.print;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prompts user to seek help if needed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static final String PROMPTUSEROFHELPMESSAGE \u003d \"Please do input \u0027help\u0027 for the commands \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            + \"and their respective input format.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Divider."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * logo of application and the welcoming message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    private static final String LOGO \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            \"| Hello from                                                                       |\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            + \"|  _                  _  __   ___     _     _                                      |\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            + \"| | |_   _ _   __ _  | |/ /  / __|   /_\\\\   | |                                     |\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            + \"| |  _| | \u0027_| / _` | | \u0027 \u003c  | (__   / _ \\\\  | |__                                   |\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            + \"|  \\\\__| |_|   \\\\__,_| |_|\\\\_\\\\  \\\\___| /_/ \\\\_\\\\ |____|                                  |\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            + \"|                                                                                  |\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            + \"| Hello! I\u0027m traKCAL.                                                              |\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            + \"| \" + PROMPTUSEROFHELPMESSAGE + \"       |\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out welcome message to user when program is run."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(LOGO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out the divider."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void drawDivider() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        System.out.println(DIVIDER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out help list showing the commands available."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayHelpMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String helpList \u003d \"This section displays the commands available and their respective input format.\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\u003e Words in CAPS are parameters to be filled in by you!\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Viewing help:\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"help                   - Prints out commands available and their input format\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Creating:\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"create new user        - Creates a new user profile\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Shortcut:\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"--createSet is not extensive[TO BE EDITED]--\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"createSet SHORTCUT_NAME f/ FOOD_DESCRIPTION c/ CALORIE_COUNT +\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT + ...\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                       - Creates shortcut for adding food(s) and/or exercise(s) depending on the\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                         format entered\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"addSet SHORTCUT_NAME   - Adds SHORTCUT_NAME into current date list\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Adding:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"add f/ FOOD_DESCRIPTION c/ CALORIE_COUNT d/ DATE\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                       - Adds food consumed, FOOD_DESCRIPTION calories gained, CALORIE_COUNT\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                         and date(YYYY-MM-DD), DATE\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"add e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT d/ DATE\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                       - Adds exercise done, EXERCISE_DESCRIPTION, calories lost, CALORIE_COUNT\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                         and date(YYYY-MM-DD), DATE\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Listing:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"list                   - Prints out the list of entries.\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"list DATE              - Prints out the list of entries for the date(YYYY-MM-DD), DATE\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Editing:\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"edit n/ NAME, g/ GENDER, w/ WEIGHT, h/ HEIGHT, a/ AGE, af/ ACTIVITY_FACTOR, goal/ WEIGHT_GOALS\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                       - Edits your name, NAME, your gender(male/female), GENDER,\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                         your weight in kg, WEIGHT, your height, HEIGHT in cm, your age, AGE,\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                         activity factor(1-5) with 1 being the most active, ACTIVITY_FACTOR,\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                         your weight goals(lose/maintain/gain), WEIGHT_GOALS\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"edita LIST_INDEX f/ FOOD_DESCRIPTION c/ CALORIE_COUNT\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                       - Edits activity at index LIST_INDEX of latest list printed out\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                         to food consumed, FOOD_DESCRIPTION, calories gained, CALORIE_COUNT\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"edita LIST_INDEX e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                       - Edits activity at index LIST_INDEX of latest list printed out\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                         to exercise done, EXERCISE_DESCRIPTION, calories lost, CALORIE_COUNT\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Finding:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"find d/ DESCRIPTION    - Searches for all activities description with the DESCRIPTION keyword\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"find c/ CALORIE_COUNT  - Searches for all activities with calories of CALORIE_COUNT\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"find a/ DESCRIPTION1 / DESCRIPTION2 .../ DESCRIPTION\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                        - Searches for all activities with ALL matching keywords from\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                          DESCRIPTION1 to DESCRIPTION\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"find e/ DESCRIPTION1 / DESCRIPTION2 .../ DESCRIPTION\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                        - Searches for all activities with AT LEAST one matching keyword from\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                          DESCRIPTION1 to DESCRIPTION\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Moving:\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"move from/ INDEX1 below/ INDEX2\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                       - Moves the activity at index INDEX1 to the index below INDEX2\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Deleting:\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"delete LIST_INDEX      - Deletes activity located at index LIST_INDEX of latest list printed out\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"delete all/            - Deletes all activities in current date list\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Graphing:\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"graph                  - Generates a graph of target calorie and net calorie obtained up to\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                         last 7 days\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"Exiting:\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"bye                    - Terminates the application\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(helpList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message when editing activity successful."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEditMessage() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        print(\"Noted! The following has been edited:\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message when adding activity successful."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayAddMessage() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        print(\"Noted! The following has been added into list:\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out acknowledgement of saving current activity list in file."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displaySavedMessage() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"The current activity list has been saved.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error in saving current activity list in file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayNotSavedMessage() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"The current activity list has not been saved.\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"An error has occurred!\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + PROMPTUSEROFHELPMESSAGE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out bye message and let the user know that the current list has been saved to file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayByeMessage() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"| Thank you for using traKCAL. See you again!\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"                                      |\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message when list command given but activity list is empty."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEmptyActivityCounterMessage() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Nothing was added!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message asking for gender."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayAskUserGenderMessage() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"What is your gender (male/female)?\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message asking for weight goal."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayAskUserWeightGoalMessage() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Do you wish to lose/maintain/gain weight?\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message asking for weight."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayAskUserWeightMessage() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"What is your weight in kg?\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message asking for height."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayAskUserHeightMessage() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"What is your height in cm?\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message asking for age."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayAskUserAgeMessage() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"What is your age?\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message asking for activity level."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayAskUserActivityLevelMessage() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"How active are you on a scale of 1-5? With 1 being least active and 5 being most active.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static void displayMessage(String message) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        print(\"Noted! The following has been added into list:\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out edited name."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayEditNameMessage() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.print(\"Your name has been updated to \");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out edited gender."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayEditGenderMessage() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.print(\"Your gender has been updated to \");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out edited weight."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayEditWeightMessage() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.print(\"Your weight has been updated to \");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out the edited height."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayEditHeightMessage() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.print(\"Your height has been updated to \");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out the edited age."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayEditAgeMessage() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.print(\"Your age has been updated to \");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out edited activity level."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayEditActivityLevelMessage() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.print(\"Your activity level has been updated to \");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Printed updated goal."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayEditGoalMessage() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.print(\"Your weight goal has been updated to \");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out welcoming message to the user."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayReturningUserMessage() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Welcome! What would you like to do today?\\n\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayAskUserNameMessage() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void test() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 65,
      "chewyang": 23,
      "e0425705": 191,
      "1-Karthigeyan-1": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/userprofile/AskUserProfileQns.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.userprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.Trakcal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.storage.Userinfotextfilestorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.Ui.displayEditWeightMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.Ui.displayEditHeightMessage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.Ui.displayEditAgeMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.Ui.displayEditActivityLevelMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.Ui.displayEditGoalMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.Ui.displayEditGenderMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.Ui.displayEditNameMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidActivityLevelMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidActivityLevelRangeMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidAgeMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidAgeRangeMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidHeightMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidHeightRangeMessage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidWeightMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.ui.ExceptionMessages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidWeightGoalMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidGenderMessage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayIoExceptionMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidWeightRangeMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": " * Initialises user profile after asking for user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jlifah"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class AskUserProfileQns {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static String[] data \u003d new String[7];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * Reading user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * @return user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static String input() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return Trakcal.in.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static InitialiseUserProfile createNewProfile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        InitialiseUserProfile profile \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        gatherData();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            profile \u003d enterNewUserInfo();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            profile.printList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayIoExceptionMessage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void gatherData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        name();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        gender();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        weight();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        height();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        age();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        activityLevel();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        weightGoal();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void edit(String info) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        ArrayList\u003cString\u003e previous \u003d Userinfotextfilestorage.update();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[i] \u003d previous.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String[] arguments \u003d info.split(\",\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        for (String argument : arguments) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            if (argument.startsWith(\"n/\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                editName(argument.substring(2));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } else if (argument.startsWith(\"g/\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                editGender(argument.substring(2));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } else if (argument.startsWith(\"w/\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                editWeight(argument.substring(2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } else if (argument.startsWith(\"h/\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                editHeight(argument.substring(2));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } else if (argument.startsWith(\"age/\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                editAge(argument.substring(4));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } else if (argument.startsWith(\"al/\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                editAl(argument.substring(3));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } else if (argument.startsWith(\"goal/\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                editGoal(argument.substring(5));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        InitialiseUserProfile profile \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                new InitialiseUserProfile(data[0],data[1],data[2],data[3],data[4],data[5],data[6]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        AskUserProfileQns.save(profile);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void editName(String name) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[0] \u003d name;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayEditNameMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(data[0] + \".\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void editGender(String gender) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(gender);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkGender(gender);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[1] \u003d gender;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayEditGenderMessage();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(data[1] + \".\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidGenderMessage();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void editWeight(String weight) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(weight);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkInputIsDouble(weight);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkWeightIsWithinRange(weight);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[2] \u003d weight;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayEditWeightMessage();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(data[2] + \"kg.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidWeightMessage();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidWeightRangeMessage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void editHeight(String height) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(height);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkInputIsDouble(height);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkHeightIsWithinRange(height);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[3] \u003d height;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayEditHeightMessage();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(data[3] + \"cm.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidHeightMessage();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidHeightRangeMessage();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void editAge(String age) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(age);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkInputIsInt(age);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkAgeIsWithinRange(age);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[4] \u003d age;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayEditAgeMessage();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(data[4] + \"years old.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidAgeMessage();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidAgeRangeMessage();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void editAl(String al) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(al);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkInputIsInt(al);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkAcLeIsWithinRange(al);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[5] \u003d al;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayEditActivityLevelMessage();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(data[5] + \".\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidActivityLevelMessage();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidActivityLevelRangeMessage();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void editGoal(String goal) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(goal);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkWeightGoal(goal);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[6] \u003d goal;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayEditGoalMessage();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(data[6] + \".\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidWeightGoalMessage();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * ask user for name and save in an array entry."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void name()  {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Ui.displayAskUserNameMessage();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String name \u003d input();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(name);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[0] \u003d name;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            name();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * user gender restricted to what is stated in enum."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private enum GenderEnum {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        male, female"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * ask user for gender and save in an array entry."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void gender() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Ui.displayAskUserGenderMessage();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String gender \u003d input();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(gender);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkGender(gender);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[1] \u003d gender;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidGenderMessage();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            gender();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            gender();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * ask user for weight and save in an array entry."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * must be between 20 to 650kg and type double."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void weight() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Ui.displayAskUserWeightMessage();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String weight \u003d input();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(weight);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkInputIsDouble(weight);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkWeightIsWithinRange(weight);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[2] \u003d weight;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidWeightMessage();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            weight();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidWeightRangeMessage();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            weight();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            weight();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * ask user for height and save in an array entry."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * must be between 10 to 300cm and type double."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void height() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Ui.displayAskUserHeightMessage();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String height \u003d input();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(height);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkInputIsDouble(height);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkHeightIsWithinRange(height);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[3] \u003d height;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidHeightMessage();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            height();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidHeightRangeMessage();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            height();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            height();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * ask user for age and save in an array entry."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * must be between 1 to 120 years old."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void age() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Ui.displayAskUserAgeMessage();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String age \u003d input();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(age);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkInputIsInt(age);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkAgeIsWithinRange(age);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[4] \u003d age;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidAgeMessage();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            age();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidAgeRangeMessage();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            age();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            age();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * ask user for activity level and save in an array entry."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void activityLevel() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Ui.displayAskUserActivityLevelMessage();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String activityLevel \u003d input();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(activityLevel);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkInputIsInt(activityLevel);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkAcLeIsWithinRange(activityLevel);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[5] \u003d activityLevel;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidActivityLevelMessage();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityLevel();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidActivityLevelRangeMessage();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityLevel();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityLevel();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * user weight goal restricted to what is stated in enum."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private enum WeightGoalEnum {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        lose, maintain, gain"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * ask user for weight goal and save in an array entry."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void weightGoal() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Ui.displayAskUserWeightGoalMessage();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String weightGoal \u003d input();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkEmptyInput(weightGoal);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            checkWeightGoal(weightGoal);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            data[6] \u003d weightGoal;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidWeightGoalMessage();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            weightGoal();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (EmptyDescriptionException e) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ExceptionMessages.displayEmptyStringMessage();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            weightGoal();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void checkGender(String gender) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        for (GenderEnum validGender : GenderEnum.values()) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            if (validGender.name().equals(gender)) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void checkInputIsDouble(String userInput) throws NumberFormatException {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Double.parseDouble(userInput);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void checkWeightIsWithinRange(String weight) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (Double.parseDouble(weight) \u003c 20 || Double.parseDouble(weight) \u003e 650) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void checkHeightIsWithinRange(String height) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (Double.parseDouble(height) \u003c 10 || Double.parseDouble(height) \u003e 300) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void checkAgeIsWithinRange(String age) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (Integer.parseInt(age) \u003c 1 || Integer.parseInt(age) \u003e 120) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void checkInputIsInt(String userInput) throws NumberFormatException {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Integer.parseInt(userInput);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void checkAcLeIsWithinRange(String al) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (Integer.parseInt(al) \u003c 1 || Integer.parseInt(al) \u003e 5) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void checkWeightGoal(String wg) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        for (WeightGoalEnum validWg : WeightGoalEnum.values()) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            if (validWg.name().equals(wg)) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void checkEmptyInput(String userInput) throws EmptyDescriptionException {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (userInput.equals(\" \") || userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            throw new EmptyDescriptionException();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static InitialiseUserProfile enterNewUserInfo() throws IOException {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        InitialiseUserProfile profile \u003d"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                new InitialiseUserProfile(data[0],data[1],data[2],data[3],data[4],data[5],data[6]);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        System.out.println(profile.calculateNewUserDetails());"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        AskUserProfileQns.save(profile);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * override and save user details in text file."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * @param profile to be saved in text file"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void saveExistingUserInfo(InitialiseUserProfile profile) throws IOException {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        AskUserProfileQns.save(profile);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * create a new text file and save user input into the text file."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * @param profile question to be printed"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void save(InitialiseUserProfile profile) throws IOException {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Userinfotextfilestorage storage \u003d new Userinfotextfilestorage();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        storage.save(profile.toString());"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * Reading user input from existing text file and save a profile type."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * @return Storage type"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static InitialiseUserProfile loadProfile() {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String[] data \u003d new String[7];"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ArrayList\u003cString\u003e previous \u003d Userinfotextfilestorage.update();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            data[i] \u003d previous.get(i);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        InitialiseUserProfile profile \u003d"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                new InitialiseUserProfile(data[0], data[1], data[2], data[3], data[4], data[5], data[6]);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        profile.calculateNewUserDetails();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            AskUserProfileQns.saveExistingUserInfo(profile);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayIoExceptionMessage();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 472,
      "chewyang": 15,
      "1-Karthigeyan-1": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/userprofile/CheckNewUser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.userprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class CheckNewUser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static final String PATH \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static final String FILE_PATH \u003d PATH + \"/tp.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * Check if it is a new user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     * @return boolean for new user outcome"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static boolean isNewUser() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (!Files.exists(Path.of(FILE_PATH))) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(\"Hey there! We do not have a record of your profile. Please create one now! :)\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/userprofile/InitialiseUserProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.userprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ui.ExceptionMessages.displayInvalidActivityFactorMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class InitialiseUserProfile {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected String gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected String weight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected String height;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected String age;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected String activityLevel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected String weightGoal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected double calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public InitialiseUserProfile() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public InitialiseUserProfile(String name, String gender, String weight, String height,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                                 String age, String activityLevel, String weightGoal) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.weightGoal \u003d weightGoal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getWeight() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getAge() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getActivityLevel() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return activityLevel;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getWeightGoal() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return weightGoal;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public double getCalories() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static DecimalFormat df2 \u003d new DecimalFormat(\"#.00\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String calculateNewUserDetails() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        double activityMultiple \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        switch (Integer.parseInt(this.getActivityLevel())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.2;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.375;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.55;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.725;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.9;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidActivityFactorMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String details \u003d \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        double bmi;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        double calories \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        bmi \u003d (Double.parseDouble(this.getWeight())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                / (Double.parseDouble(this.getHeight()) * Double.parseDouble(this.getHeight())))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                * 10000;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        assert bmi \u003e 0 : \"bmi should be more than 0\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        details +\u003d \"\\nYour BMI is \" + df2.format(bmi) + \"\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (this.getGender().equals(\"female\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            calories \u003d ((10 * Double.parseDouble(this.getWeight()))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    + (6.25 * Double.parseDouble(this.getHeight()))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    - (5 * Double.parseDouble(this.getAge())) - 161)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    * activityMultiple;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            calories \u003d ((10 * Double.parseDouble(this.getWeight()))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    + (6.25 * Double.parseDouble(this.getHeight()))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    - (5 * Double.parseDouble(this.getAge())) + 5)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    * activityMultiple;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        details +\u003d \"Your recommend daily calories intake is \" + calories + \" calories.\" + \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (this.getWeightGoal().equals(\"lose\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            calories -\u003d 500;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            details +\u003d \"To \" + this.getWeightGoal() + \" weight, you should consume \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    + calories + \" calories instead.\\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } else if (this.getWeightGoal().equals(\"gain\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            calories +\u003d 500;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            details +\u003d \"To \" + this.getWeightGoal() + \" weight, you should consume \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    + calories + \" calories instead.\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Here is your user profile:\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Name : \" + getName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Gender : \" + getGender());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Weight : \" + getWeight());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Height : \" + getHeight());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Age : \" + getAge());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Activity Level : \" + getActivityLevel());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Weight Goal : \" + getWeightGoal());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return getName() + \",\" + getGender() + \",\" + getWeight() + \",\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                + getHeight() + \",\" + getAge() + \",\" + getActivityLevel() + \",\" + getWeightGoal();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jlifah": 121,
      "chewyang": 1,
      "1-Karthigeyan-1": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityAddTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.command.AddExerciseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.command.AddFoodCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.ActivityList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class ActivityAddTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private final LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void createObjects(ActivityList dummyList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple\", 50, date, false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Banana\", 100, date, false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple pie\", 55, date, false));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Exercise(\"Juggle Apples\", 100, date, false));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void addActivityFood_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Food food \u003d new Food(\"Apple\", 50, date, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String output \u003d food.getString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[F] | Apple | 50\", output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void addActivityFood2_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        AddFoodCommand food \u003d new AddFoodCommand(\"Apple\", 50, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            food.execute();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void addActivityExercise_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Exercise exercise \u003d new Exercise(\"Running\", 450, date, false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String output \u003d exercise.getString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[E] | Running | 450\", output);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void addActivityExercise2_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        AddExerciseCommand exercise \u003d new AddExerciseCommand(\"Running\", 450, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            exercise.execute();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 14,
      "e0425705": 48
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityChainTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class ActivityChainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 12
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityEditTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.command.EditExerciseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.command.EditFoodCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.ActivityList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.DayMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class ActivityEditTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    LocalDate date \u003d LocalDate.of(2020, Month.OCTOBER, 25);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    LocalDate date2 \u003d LocalDate.of(2020, Month.NOVEMBER, 10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    LocalDate date3 \u003d LocalDate.of(2020, Month.DECEMBER, 11);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void createObjects(ActivityList dummyList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple\", 50, date, false));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Banana\", 100, date, false));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple pie\", 55, date, false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Exercise(\"Juggle Apples\", 100, date, false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void createObjects2(DayMap dummyMap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"rice with eggs\", 50, date, false));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Exercise(\"run 2km\", 100, date, false));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Exercise(\"run 10km\", 51, date2, false));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"rice with tofu\", 101, date2, false));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date3.atStartOfDay(), new Food(\"rice with shit\", 51, date3, false));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date3.atStartOfDay(), new Food(\"rice with pork\", 101, date3, false));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityFoodToExercise_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Activity activity \u003d new Exercise(\"jumping\", 900, date, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.insertActivity(0, activity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[E] | jumping | 900, [F] | Banana | 100, [F] | Apple pie | 55, \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"[E] | Juggle Apples | 100\", dummyList.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityFoodToExercise2_success() throws NullPointerException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects2(dummyMap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            EditExerciseCommand exercise \u003d new EditExerciseCommand(0, \"jumping\", 900);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            exercise.execute();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityExerciseToFood_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Activity activity \u003d new Food(\"Pineapple\", 77, date,false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.insertActivity(3, activity);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[F] | Apple | 50, [F] | Banana | 100, [F] | Apple pie | 55, \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"[F] | Pineapple | 77\", dummyList.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityExerciseToFood2_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects2(dummyMap);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            EditFoodCommand food \u003d new EditFoodCommand(3, \"Pineapple\", 77);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            food.execute();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityExerciseToExercise_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Activity activity \u003d new Exercise(\"jumping\", 900, date,false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.insertActivity(3, activity);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[F] | Apple | 50, [F] | Banana | 100, [F] | Apple pie | 55, \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"[E] | jumping | 900\", dummyList.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityExerciseToExercise2_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects2(dummyMap);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            EditExerciseCommand exercise \u003d new EditExerciseCommand(3, \"jumping\", 900);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            exercise.execute();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityFoodToFood_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Activity activity \u003d new Food(\"Pineapple\", 77,  date,false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.insertActivity(2, activity);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[F] | Apple | 50, [F] | Banana | 100, [F] | Pineapple | 77, \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"[E] | Juggle Apples | 100\", dummyList.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityFoodToFood2_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects2(dummyMap);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            EditFoodCommand food \u003d new EditFoodCommand(2, \"Pineapple\", 77);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            food.execute();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivity_success() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String userInput0 \u003d \"list 2020-10-25\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Parser parser \u003d new Parser(userInput0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        parser.parseCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String userInput1 \u003d \"edita a f/ Pineapple c/ 77\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Parser parser1 \u003d new Parser(userInput1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Command command \u003d parser1.parseCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 30,
      "e0425705": 140
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityFindTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Exercise;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class ActivityFindTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private final LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    void createObjects(ActivityList dummyList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple\", 50, date,false));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Banana\", 100, date, false));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple pie\", 55, date, false));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Exercise(\"Juggle Apples\", 100, date, false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    void findActivityDescription_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        for (int i \u003d 0; i \u003c dummyList.getNumberOfActivities(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String currentLine \u003d dummyList.getActivity(i).toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String descriptionToCheck \u003d currentLine.substring(currentLine.indexOf(\"|\") + 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            descriptionToCheck \u003d descriptionToCheck.substring(0, descriptionToCheck.indexOf(\"|\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (descriptionToCheck.contains(\"Apple\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                output +\u003d currentLine + \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        assertEquals(\"[F] | Apple | 50 [F] | Apple pie | 55 [E] | Juggle Apples | 100 \", output);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    void findActivityCalorie_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        for (int i \u003d 0; i \u003c dummyList.getNumberOfActivities(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String currentLine \u003d dummyList.getActivity(i).toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            int calorieStartIndex \u003d currentLine.lastIndexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String calorieToCheck \u003d currentLine.substring(calorieStartIndex).trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (calorieToCheck.equals(\"100\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                output +\u003d currentLine + \" \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        assertEquals(\"[F] | Banana | 100 [E] | Juggle Apples | 100 \", output);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 11,
      "poonchuanan": 42
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "class ActivityListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    void createObjects(ActivityList dummyList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple\", 50, date, false));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Banana\", 100, date, false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Orange\", 25, date, false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    void removeActivity_validIndex_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyList.removeActivity(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"[F] | Apple | 50, [F] | Orange | 25\", dummyList.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    void clearList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyList.clearList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(0, dummyList.getNumberOfActivities());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 9,
      "1-Karthigeyan-1": 27
    }
  },
  {
    "path": "src/test/java/seedu/duke/AdvancedListingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.FindDescriptionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.DayMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "class AdvancedListingTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date \u003d LocalDate.of(2020, Month.OCTOBER, 9);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date2 \u003d LocalDate.of(2020, Month.NOVEMBER, 10);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date3 \u003d LocalDate.of(2020, Month.DECEMBER, 11);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void createObjects(DayMap dummyMap) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"rice with eggs\", 50, date, false));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Exercise(\"run 2km\", 100, date, false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Exercise(\"run 10km\", 51,  date2,false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"rice with tofu\", 101, date2, false));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date3.atStartOfDay(), new Food(\"rice with vegs\", 51, date3, false));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date3.atStartOfDay(), new Food(\"rice with pork\", 101, date3, false));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void listDate_andDeleteFromActivityListShown_successfully() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command listCommand \u003d new ListCommand(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-10-09, [F] | rice with eggs | 50, [E] | run 2km | 100\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-10-09, [E] | run 2km | 100\", dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void deleteAllTasks_andExpect_NullPointerException_fromListCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command listCommand \u003d new ListCommand(date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-10-09, [E] | run 2km | 100\", dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dummyMap.getActivityList(date.atStartOfDay()).getActivity(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void findDescription_andDeleteFromActivityListShown_successfully() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command findCommand \u003d new FindDescriptionCommand(\"rice\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        findCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        findCommand.execute();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"[F] | rice with vegs | 51, [F] | rice with pork | 101, [F] | rice with tofu | 101, \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"[F] | rice with eggs | 50\", dummyMap.getLastSeenList().toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command deleteCommand \u003d new DeleteCommand(2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"[F] | rice with vegs | 51, [F] | rice with pork | 101, [F] | rice with eggs | 50\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.getLastSeenList().toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void deleteAllTasks_andExpect_KeywordNotFoundExceptions_fromFindCommand() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command findCommand \u003d new FindDescriptionCommand(\"run\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        findCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        findCommand.execute();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"[E] | run 2km | 100\", dummyMap.getLastSeenList().toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"\", dummyMap.getLastSeenList().toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(KeywordNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dummyMap.listActivitiesContainingDescription(\"run\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 120
    }
  },
  {
    "path": "src/test/java/seedu/duke/DayMapTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.DayMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "class DayMapTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date \u003d LocalDate.of(2020, Month.AUGUST, 9);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date2 \u003d LocalDate.of(2020, Month.AUGUST, 10);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void createObjects(DayMap dummyMap) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Apple\", 50, date, false));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Banana\", 100, date, false));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Orange\", 25, date, false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Apple2\", 51, date2, false));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Banana2\", 101, date2, false));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Orange2\", 26, date2, false));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void listingCorrectKeyValueMatch() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09, [F] | Apple | 50, [F] | Banana | 100, [F] | Orange | 25\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-10, [F] | Apple2 | 51, [F] | Banana2 | 101, [F] | Orange2 | 26\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date2.atStartOfDay()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 35
    }
  },
  {
    "path": "src/test/java/seedu/duke/GraphPropertyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.DayMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.model.GraphProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "class GraphPropertyTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private LocalDate date1 \u003d LocalDate.of(2020, Month.AUGUST, 9);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private LocalDate date2 \u003d LocalDate.of(2020, Month.MARCH, 12);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public DayMap setDummyMap() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dayMap \u003d new DayMap();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return dayMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void setProperty_TargetCalorieAsMiddle_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date1.atStartOfDay(), new Food(\"apple\", 1000, date1, false));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"banana\", 2000, date2, false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        GraphProperty graphProperty \u003d new GraphProperty(dummyMap, 1500);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        graphProperty.setProperties();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(2, graphProperty.row);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(2000, graphProperty.maxCalories);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(1000, graphProperty.minCalories);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void setProperty_TargetCalorieInLower_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date1.atStartOfDay(), new Food(\"apple\", 1000, date1, false));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"banana\", 2000, date2, false));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        GraphProperty graphProperty \u003d new GraphProperty(dummyMap, 500);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        graphProperty.setProperties();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(2, graphProperty.row);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(2000, graphProperty.maxCalories);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(500, graphProperty.minCalories);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void setProperty_TargetCalorieInHigher_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date1.atStartOfDay(), new Food(\"apple\", 1000, date1, false));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"banana\", 2000, date2, false));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        GraphProperty graphProperty \u003d new GraphProperty(dummyMap, 3000);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        graphProperty.setProperties();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(2, graphProperty.row);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(3000, graphProperty.maxCalories);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(1000, graphProperty.minCalories);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void setProperty_EmptyList_Exception() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        Assertions.assertThrows(AssertionError.class, () -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            GraphProperty graphProperty \u003d new GraphProperty(dummyMap, 3000);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            graphProperty.setProperties();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void setProperty_NegativeCalories_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date1.atStartOfDay(), new Food(\"apple\", -1000, date1, false));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"banana\", 2000, date2, false));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        GraphProperty graphProperty \u003d new GraphProperty(dummyMap, 1000);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        graphProperty.setProperties();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(2, graphProperty.row);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(2000, graphProperty.maxCalories);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(-1000, graphProperty.minCalories);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void setProperty_sameCalories_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date1.atStartOfDay(), new Food(\"apple\", 1000, date1, false));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"banana\", 1000, date2, false));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        GraphProperty graphProperty \u003d new GraphProperty(dummyMap, 1000);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        graphProperty.setProperties();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(2, graphProperty.row);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(1005, graphProperty.maxCalories);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(995, graphProperty.minCalories);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 2,
      "1-Karthigeyan-1": 92
    }
  },
  {
    "path": "src/test/java/seedu/duke/MoveActivityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.MoveActivityCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.ListNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.logic.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.DayMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.model.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class MoveActivityCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date \u003d LocalDate.of(2020, Month.AUGUST, 9);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date2 \u003d LocalDate.of(2020, Month.AUGUST, 10);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void createObjects(DayMap dummyMap) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Apple\", 50, date, false));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Banana\", 100, date, false));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Orange\", 25, date, false));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Apple2\", 51, date2, false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Banana2\", 101, date2, false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Orange2\", 26, date2, false));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void whiteSpace_parsingTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command listCommand \u003d new ListCommand(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09, [F] | Apple | 50, [F] | Banana | 100, [F] | Orange | 25\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Parser parser \u003d new Parser(\"move from/   3 below/ 1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command command \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command.setData(dummyMap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09, [F] | Apple | 50, [F] | Orange | 25, [F] | Banana | 100\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Parser parser2 \u003d new Parser(\"move from/3 below/  1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command command2 \u003d parser2.parseCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command2.setData(dummyMap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command2.execute();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09, [F] | Apple | 50, [F] | Banana | 100, [F] | Orange | 25\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void numberFormatExceptionThrown_ifIndexEnteredIsNotANumber() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command listCommand \u003d new ListCommand(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09, [F] | Apple | 50, [F] | Banana | 100, [F] | Orange | 25\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Parser parser \u003d new Parser(\"move from/a below/2\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            parser.parseCommand().execute();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void indexOutOfBoundsExceptionThrown_ifIndexEnteredIsWrong() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.setLastSeenList(dummyMap.getActivityList(date.atStartOfDay()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dummyMap.move(3,5);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dummyMap.move(5,2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void listNotFoundException_IfTryToAccessEmptyLastSeenList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(ListNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dummyMap.move(1,2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 109
    }
  },
  {
    "path": "src/test/java/seedu/duke/NewUserAddTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.InitialiseUserProfile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class NewUserAddTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    void addNewUserTest_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        InitialiseUserProfile userinfo \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                new InitialiseUserProfile(\"Sam\",\"Female\",\"50\",\"130\",\"20\",\"2\",\"maintain\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String output \u003d userinfo.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        assertEquals(output, \"Sam,Female,50,130,20,2,maintain\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 16
    }
  },
  {
    "path": "src/test/java/seedu/duke/TrakcalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "class TrakcalTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/duke/logic/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void deleteAll_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        Parser parser \u003d new Parser(\"delete all/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        Command cmd \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertTrue(cmd instanceof DeleteCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void deleteIndex_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        Parser parser \u003d new Parser(\"delete 2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        Command cmd \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertTrue(cmd instanceof DeleteCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1-Karthigeyan-1": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "create new user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": "test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "female"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "63"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "167"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "30"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "maintain"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "add f/ apple c/ 50"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "add f/ banana c/ 100"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "add e/ pushup c/ 10"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "add e/ jogging c/ 60"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "delete /all"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jlifah": 7,
      "1-Karthigeyan-1": 12
    }
  }
]
