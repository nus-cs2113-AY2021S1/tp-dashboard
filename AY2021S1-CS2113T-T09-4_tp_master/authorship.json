[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "1-Karthigeyan-1": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Rani Karthigeyan Rajendrakumar| [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Poon Chuan An | [Github](https://github.com/poonchuanan) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jenny Lin | [Github](https://github.com/jlifah) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Owen Chew | [Github](https://github.com/chewyang) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Puah Siew Wen | [Github](https://github.com/e0425705) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "jlifah": 1,
      "chewyang": 1,
      "e0425705": 1,
      "-": 4,
      "1-Karthigeyan-1": 1,
      "poonchuanan": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the target user profile}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eTech savvy university students that have knowledge on the exercise and calories or know where to get the information before inputting it in the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003etraKCAL is fast and simple, removing the need to navigate GUI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003etraKCAL enables user to input custom exercises and/or food."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003etraKCAL removes the need for manual calculation of the intake and loss of calories."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003etraKCAL allows user to pre-set repetitive actions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003etraKCAL allows user to import and export data to excel for daily use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003etraKCAL checks recommended calorie intake per day based on user’s input of age, gender and weight, and able to tell whether there is a calorie deficit/surplus at the end of the day."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|user|add food consumed/exercise done|keep track of my daily activities|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|user|list out the activities done for the day|track it and amend it if any errors occur|"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|user|delete entries entered|remove erroneous entries|"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|forgetful user|find activities via keyword|pull out the entries that I want|"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|beginner in working out|track the calories intake|feel assured that my workout is on the right track|"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v1.0|student who is a health enthusiast|keep track of my daily intake of calories|better manage my health|"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|gym user|upload the amount of calories consumed or lost|track the surplus or deficit of calories|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|overweight student|calculate the estimated amount of calories lost|facilitate my weight loss regime|"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|underweight student|calculate the estimated amount of calories gained|facilitate my weight gain regime|"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|weight conscious person|track the amount of calories gained or lost|maintain my weight|"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|careless student|go back and edit entries entered earlier|correct the errors I have made|"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|v2.0|frequent user|have pre-set repetitive actions entered by me|save time when inputting data|"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "{Give non-functional requirements}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* *GUI* - Graphics User Interface"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 20,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "# User Guide for traKCAL"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "By: CS2113-T09-4    Since: September 2020   Licence: MIT"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**traKCAL** is a desktop application for managing calories\u0027 intake, optimized for use via Command Line Interface (CLI) whilst retaining the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "If you type fast, **traKCAL** can manage your activities faster than traditional GUI applications, and is perfect for you."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The purpose of this user guide is to guide the users on the commands available in this application, their respective uses and the expected inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**traKCAL** is available for the download on all major Operating Systems(OS) such as Windows, Mac and Linux."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The section displays the table of contents showing all the available features in **trakCAL**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Viewing help](#viewing-help): `help`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    * [Creating a profile for new user](#creating-a-profile-for-new-user): `create new user`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    * [Creating a set of entries](#creating-a-set-of-entries): `createSet`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Adding a target calorie](#adding-a-target-calorie): `target`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Editing user profile](#editing-user-profile): `edit`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Adding a food entry](#adding-a-food-entry): `add`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Adding an exercise entry](#adding-an-exercise-entry): `add`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    * [Adding a set of entries](#adding-a-set-of-entries): `addSet`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Listing entries for the day](#listing-entries-for-the-day): `list`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Moving an entry to another position](#moving-an-activity-to-another-position): `move`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Editing an entry in list](#editing-an-entry-in-list): `edita`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Finding entries via keyword](#finding-entries-via-keyword): `find`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Deleting an entry in list](#deleting-an-entry-in-list): `delete`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Deleting all entries in list](#deleting-all-entries-in-list): `deleteALL`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * [Exiting the program](#exiting-the-program): `bye`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* [Frequently asked questions](#frequently-asked-questions)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "This section gives the steps you need to get started quickly."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": "1. Ensure that you have Java 11 or above installed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2. Down the latest version of `Duke` from [here](http://link.to/duke)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3. Create an empty folder in a convenient location eg. Desktop and copy jar file there"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "4. Open command window/terminal in that window and run the command `java -jar {filename}.jar` e.g., `java -jar tp.jar`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "5. Upon successful run, the following greeting message will be shown"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| Hello from                                                                            |"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  _                  _  __   ___     _     _                                           |"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| | |_   _ _   __ _  | |/ /  / __|   /_\\   | |                                          |"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| |  _| | \u0027_| / _` | | \u0027 \u003c  | (__   / _ \\  | |__                                        |"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|  \\__| |_|   \\__,_| |_|\\_\\  \\___| /_/ \\_\\ |____|                                       |"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "|                                                                                       |"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| Hello! I\u0027m traKCAL.                                                                   |"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Please do input \u0027help\u0027 for the commands and their respective input format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "6. Type the command in the command box and press Enter to execute it. e.g. typing `help` and pressing Enter will open the help window\u003cbr/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    * `list`: Lists all activities for today"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * `add f/ rice with eggs c/ 200`: Adds a food entry named `rice with eggs` to **traKCAL**."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    * `delete 3`: Deletes the 3rd contact shown in the current list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    * `bye`: Exits the application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": "7. Refer to the [Features](#features) below for details of each command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "This section gives a detailed description of each feature available in **trakCAL**."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e **traKCAL** has many commands available. Such as \u0027create new user\u0027, \u0027add\u0027, \u0027edit\u0027, \u0027delete\u0027, \u0027list\u0027, \u0027find\u0027."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eThings to take note of:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Input that look like `**this**` are parameters to be supplied by user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Input format should STRICTLY adhere to the one in the help list or in this user guide."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* Input commands such as `add`, `edit`, `list`, etc. are not case-sensitive, but it is RECOMMENDED to follow format stated in help list or this user guide."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Viewing help"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Prints out the commands available, and their respective input format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `help`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Commands available: create new user, list, help, add, delete, find, bye"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The expected format of input values:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tcreate new user         - Adds a new user profile"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\ttarget X                - Adds a target calorie, X"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\thelp                    - Prints out commands available and their input format"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tadd f/ X c/ Y d/ Z      - Adds food consumed, X, calories gained, Y"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\t                          and date(YYYY-MM-DD), Z"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tadd e/ X c/ Y d/ Z      - Adds exercise done, X, calories lost, Y"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\t                          and date(YYYY-MM-DD), Z"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tlist                    - Prints out the list of entries."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tedit n/U, g/V, w/W, h/X, a/Y, af/Z"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\t                        - Edit user profile to name, U, gender, V, weight, W,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\t                          height, X, age, Y, activity factor(1-5), Z"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tedita W f/ X c/ Y       - Edits activity at index W of list to food consumed, X,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\t                          calories gained, Y"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tedita W e/ X c/ Y       - Edits activity at index W of list to exercise done, X,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\t                          calories lost, Y"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tfind d/ X               - Searches for exercise/food description with X included"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tfind c/ X               - Searches for activity description with calories of X"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tmove index/ X below/ Y  - Moves the activity at X to the index below Y"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tdelete X                - Deletes activity located at index X of the list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\tbye                     - Terminates the program"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Creating a profile for new user"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**traKCAL** will check for first time user automatically. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eHowever, if you want to create a totally new profile, this command allows you to do so"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Format: `create new user`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `create new user`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Hey there! We do not have a record of your profile. Please create one now! :)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your name?"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**Sam**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your gender (male/female)?"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**female**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your weight in kg?"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**50**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your height in cm?"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**100**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jlifah"
        },
        "content": "What is your age?"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**10**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jlifah"
        },
        "content": "How active are you on a scale of 1-5? With 1 being least active and 5 being most active."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**4**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Do you want to lose/maintain/gain weight?"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jlifah"
        },
        "content": "**gain**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Creating a set of entries "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Creates a shortcut for commonly called exercise and/or food entries."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Format: `createSet **SHORTCUT_NAME** f/ **FOOD_DESCRIPTION** c/ **CALORIE_COUNT** \u0026\u0026 f/ **EXERCISE_DESCRIPTION** c/ **CALORIE_COUNT**`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**FOOD_DESCRIPTION**`: Description of food consumed."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: Amount of calories lost."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**EXERCISE_DESCRIPTION**`: Description of exercise done."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**SHORTCUT_NAME**`: Name of shortcut/set."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jlifah"
        },
        "content": "*  `createSet bfast f/ ice cream c/ 78 \u0026\u0026 e/ jumping jacks c/ 100`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jlifah"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jlifah"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Adding a target calorie"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Interprets the answers from the user profile questionnaire to calculate health profile."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jlifah"
        },
        "content": "tracKCAL calculates: "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* BMI"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Recommended daily calorie"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* Calorie goal to reach weight goal"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Example of calculated health profile: "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Your BMI is 20."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Your recommend daily calories intake is 1576.65 calories."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jlifah"
        },
        "content": "To gain weight, you should consume 2076.65 calories instead."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Editing user profile"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edits user profile of an existing user."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Format: `edit n/**NAME** g/**GENDER** w/**WEIGHT** h/**HEIGHT** a/**AGE** af/**ACTIVITY_FACTOR** goal/**WEIGHT_GOALS**`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Parameters: "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**NAME**`: Name of user."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**GENDER**`: Gender of user."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**WEIGHT_KG**`: Weight of user in kg."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**HEIGHT_CM**`: Height of user in cm."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**AGE**`: Age of user."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**ACTIVITY_FACTOR**`: How active user is, with 1 being most active and 5 being least active."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**WEIGHT_GOALS**`: Whether user wants to lose/maintain/gain weight."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `edit n/Sam g/female w/50 h/100 a/10 af/4 goal/gain`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Noted, I have edited your user profile. Here are your new details: "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Name: Sam"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Gender: female"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Weight: 50"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Height: 100"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Age: 10"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Activity: 4"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Weight Goal: gain"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Your BMI is 50"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Your recommend daily calories intake is 1576.65 calories."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chewyang"
        },
        "content": "To gain weight, you should consume 2076.65 calories instead."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chewyang"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Adding a food entry"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Adds a food entry with its respective calories to the list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `add f/ **FOOD_DESCRIPTION** c/ **CALORIE_COUNT** d/ **DATE**`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**FOOD_DESCRIPTION**`: Description of food consumed."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: Amount of calories consumed."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DATE**`: Date in the format YYYY-MM-DD, where YYYY \u003d year, MM \u003d month, DD \u003d day."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `add f/ ice cream c/ 78 d/ 2020-10-19`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[F] | ice cream | 78"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Adding an exercise entry"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Adds an exercise entry with its respective calories to the list."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `add e/ **EXERCISE_DESCRIPTION** c/ **CALORIE_COUNT** d/ **DATE**`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**EXERCISE_DESCRIPTION**`: Description of exercise done."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: Amount of calories lost."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DATE**`: Date in the format YYYY-MM-DD, where YYYY \u003d year, MM \u003d month, DD \u003d day."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `add e/ jumping c/ 65 d/ 2020-10-19`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[E] | jumping | 65"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Adding a set of entries"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Adds a set of repeated entries at once."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Format: `addSet **SHORTCUT_NAME**`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**SHORTCUT_NAME**`: Name of shortcut."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jlifah"
        },
        "content": "* `addSet bfast`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jlifah"
        },
        "content": "[F] | ice cream | 78"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jlifah"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jlifah"
        },
        "content": "[E] | jumping jacks | 100"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jlifah"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jlifah"
        },
        "content": "```"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Listing entries for the specified day"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Displays the list of activities for the given day."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Format: `list` or `list **DATE**`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `**DATE**`: Date in the format YYYY-MM-DD, where YYYY \u003d year, MM \u003d month, DD \u003d day."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eNOTE: Typing list without any parameters displays the list of activities for the current date."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1. [E] | running | 100"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list 2020-10-24`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1. [F] | burger | 90"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Moving an activity to another position"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Moves an activity to another position in the last shown list."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Format: `move from/ **INDEX1** below/ **INDEX2**`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**INDEX1**`: Index of the activity to be moved from."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**INDEX2**`: Index of the activity to be inserted below."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* After a `list 2020-10-11` command, \u003c\\br\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chewyang"
        },
        "content": " `move from/ 3 below/ 1` moves the 3rd entry in the list for below the 1st entry as shown below."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Examples of usage: "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `move from/ 5 below/ 2`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chewyang"
        },
        "content": "*`list 2020-10-11` before moving"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1. [F] | breakfast | 100"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2. [F] | second breakfast | 100"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3. [F] | tea break | 200"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chewyang"
        },
        "content": "*`list 2020-10-11` after `move from/ 3 below/ 1`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "chewyang"
        },
        "content": "1. [F] | breakfast | 100"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "chewyang"
        },
        "content": "2. [F] | tea break | 200"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "chewyang"
        },
        "content": "3. [F] | second breakfast | 100"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Editing an entry in list"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Edits activity, food or exercise at the stated index in the list.  "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eThings to take note of:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* In addition, this feature allows the changing of a food activity to exercise activity in the list. Vice versa."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* The list in which you want to edit to have to be pulled out first before being able to edit on it."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003e* This commands edits the latest list pulled out. Thus, if `list 2020-10-21` is the latest list to be pulled out, then edita will edit index stated in date 2020-10-21\u0027s list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Format: `edita **LIST_INDEX** f/ **FOOD_DESCRIPTION** c/ **CALORIE_COUNT**` OR `edita **LIST_INDEX** e/ **EXERCISE_DESCRIPTION** c/ **CALORIE_COUNT**`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**LIST_INDEX**`: Index of activity to be edited in list."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**FOOD_DESCRIPTION**`: Description of food consumed."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**EXERCISE_DESCRIPTION**`: Description of exercise done."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE_COUNT**`: Amount of calories consumed."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0425705"
        },
        "content": "1. [F] | pudding | 66"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "chewyang"
        },
        "content": "```"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `edita 1 e/ running c/100`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0425705"
        },
        "content": "[E] | running | 100"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "e0425705"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Finding entries via keyword"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Finds activity based on keywords entered and list them out. Allows user to search by activity description or calorie count."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003eAdditionally, you can use the advanced find commands to find all matching keywords or just one matching keyword."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Format for find by description: `find d/**DESCRIPTION**`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DESCRIPTION**`: Keyword to look for from description list."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "* `find d/running`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "1. 2020-10-19 [E] | running | 100"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Format for find by calorie: `find c/**CALORIE**`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**CALORIE**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "* `find c/100` "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "1. 2020-10-19 [E] | running | 100"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Format for find by all descriptions: `find a/**DESCRIPTION1** a/**DESCRIPTION2** a/**DESCRIPTION3** ...`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "\u003e This command will search of entries matching ALL description keywords typed. There is no limit to the number of descriptions allowed."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DESCRIPTION**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DESCRIPTION1**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* so on..."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " * `find a/running a/10km a/5pm`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "1. 2020-10-19 [E] | running at stadium for 10km at 5pm evening| 100"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Format for find by just one matching description: `find e/**DESCRIPTION1** e/**DESCRIPTION2** e/**DESCRIPTION3** ...`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "\u003e As long as just one of the description keywords matches in the entry, the activity will be listed. There is no limit to the number of descriptions allowed."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DESCRIPTION**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `**DESCRIPTION1**`: Keyword to look for from calorie list."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* so on..."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "* `find e/sleeping e/5pm` "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "1. 2020-10-19 [E] | running at stadium for 10km at 5pm evening| 100"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "```"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Deleting an entry in list"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Deletes an entry via index in the last shown list."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Format: `delete **INDEX**`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "chewyang"
        },
        "content": "* `**INDEX**`: Index of activity to be deleted in the last shown list."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* `list` before deletion"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "1. [F] | apple | 200"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "2. [F] | melon | 300"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "3. [F] | banana | 150"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "4. [F] | orange | 100"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* `delete 2`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Activity removed!"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* `list` after deletion"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "1. [F] | apple | 200"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "2. [F] | banana | 150"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "3. [F] | orange | 100"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Deleting all entries in list"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Deletes all entry in list."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Format : `delete /all`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* `list` before deletion"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "1. [F] | apple | 200"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "2. [F] | banana | 150"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "3. [F] | orange | 100"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* `delete /all`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "The current activity list has been saved."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "* `list` after deletion"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Nothing was added!"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "```"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Exiting the program"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Saves the current list to file and exits program."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "e0425705"
        },
        "content": "* `bye`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "e0425705"
        },
        "content": "| Thank you for using traKCAL. See you again!                                           |"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "e0425705"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "e0425705"
        },
        "content": "```"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "e0425705"
        },
        "content": "## Frequently asked questions"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "e0425705"
        },
        "content": "This section answers questions you may have."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "e0425705"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous **traKCAL** folder."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "e0425705"
        },
        "content": "This section gives you a cheat sheet of commands available."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jlifah"
        },
        "content": "Action         | Format | Example"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "e0425705"
        },
        "content": "-------------- | ---------- | --------"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Add food | `add e/ FOOD_DESCRIPTION c/ CALORIE_COUNT d/ DATE` | `add e/ ice cream c/ 78 d/ 2020-10-19`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Add exercise | `add e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT d/ DATE` | `add e/ jumping c/ 65 d/ 2020-10-19`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Edit activity | `edita LIST_INDEX f/ FOOD_DESCRIPTION c/ CALORIE_COUNT` | `edita 1 f/ ice kacang c/150`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Edit activity | `edita LIST_INDEX e/ EXERCISE_DESCRIPTION c/ CALORIE_COUNT` | `edita 1 e/ running c/100`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "e0425705"
        },
        "content": "List | `list` OR `list DATE` | `list` OR `list 2020-10-24` "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "chewyang"
        },
        "content": "Move activity | `move from/ INDEX1 below/ INDEX2` | `move from/ 5 below/ 2`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Delete entry | `delete INDEX` | `delete 2`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "Delete all | `delete /all` | `delete /all`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Help | `help` | `help`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "e0425705"
        },
        "content": "Exit | `bye` | `bye`"
      }
    ],
    "authorContributionMap": {
      "jlifah": 60,
      "chewyang": 69,
      "e0425705": 303,
      "-": 29,
      "poonchuanan": 43,
      "1-Karthigeyan-1": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Store activities attributes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class Activity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected int calories;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected boolean isFromFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Activity class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description activity description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories activity calories count"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Activity(String description, int calories, boolean isFromFile) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.isFromFile \u003d isFromFile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        // If the activity added is not from decoding the file, print confirmation message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (!isFromFile) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Returns String to be printed out."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return String to be printed out."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return description + \" | \" + calories;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 8,
      "e0425705": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/ActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.Ui.displayEmptyActivityCounterMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displayNotSavedMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * List of activities for any day."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class ActivityList extends Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    private ArrayList\u003cActivity\u003e activities;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private int activityCounter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private int netCalorie;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ActivityList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activityCounter \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        netCalorie \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Returns the current number of activities in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return current number of activities in the list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public int getNumberOfActivities() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return activities.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ArrayList getArrayList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return activities;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds new activity to the list and updates the netCalorie accordingly to the activity type added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param activity new activity that will be added to the current activity"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @throws IndexOutOfBoundsException if the calories is not within the limits"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void addActivity(Activity activity) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activities.add(activity);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activityCounter++;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (activity instanceof Food) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            netCalorie +\u003d activity.calories;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else if (activity instanceof Exercise) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            netCalorie -\u003d activity.calories;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        //displaySavedMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * This method replaces the current activity at index with a new activity."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * To change the description of the current activity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param index    is the index of the current activity to be replaced"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param activity is the new activity that will be replacing the current activity"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void insertActivity(int index, Activity activity) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (isValidIndex(index)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            activities.set(index, activity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            if (activity instanceof Food) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                netCalorie +\u003d activity.calories;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else if (activity instanceof Exercise) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                netCalorie -\u003d activity.calories;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //displaySavedMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * This method moves a activity from a given index and to a place below a given index."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param indexToBeMovedFrom     this is the index at which the activity will be moved from"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param indexToBeInsertedBelow this is the index at which the activity will be moved to below"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is not within the limits"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void moveActivity(int indexToBeMovedFrom, int indexToBeInsertedBelow) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (isValidIndex(indexToBeMovedFrom) \u0026\u0026 isValidIndex(indexToBeInsertedBelow)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Activity activity \u003d getActivity(indexToBeMovedFrom);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            activities.remove(indexToBeMovedFrom);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            activities.add(indexToBeInsertedBelow, activity);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //displaySavedMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public int getNetCalorie() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return netCalorie;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Activity getActivity(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (isValidIndex(index)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return activities.get(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Removes an activity from the list via index."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param index index of activity in list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void removeActivity(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (isValidIndex(index)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Activity activityToRemove \u003d activities.get(index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (activityToRemove instanceof Food) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                netCalorie -\u003d activityToRemove.calories;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } else if (activityToRemove instanceof Exercise) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                netCalorie +\u003d activityToRemove.calories;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            activities.remove(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            activityCounter--;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            System.out.print(\"Activity removed!\\n\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            System.out.println(\"Please make sure index is within range\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints the list of activities."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (activityCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayEmptyActivityCounterMessage();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                System.out.println((i + 1) + \". \" + getActivity(i).toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Checks if the index is valid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param index index of acitvity in list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return true if index is within range, else false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public boolean isValidIndex(int index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if ((index \u003e\u003d 0) \u0026\u0026 (index \u003c activityCounter)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Clears the list of activities."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void clearList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        activities.clear();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        activityCounter \u003d 0;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        netCalorie \u003d 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Sets the activities as a string."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * For e.g, [F] | apple | 50, [F] | banana | 100, [E] | pushup | 10, [E] | jogging | 60"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return activities as a string"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String activitiesString \u003d Arrays.toString(activities.toArray());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        activitiesString \u003d activitiesString.substring(1, activitiesString.length() - 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return (activitiesString);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 106,
      "e0425705": 36,
      "1-Karthigeyan-1": 35,
      "poonchuanan": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/DayMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.Ui.displayEmptyActivityCounterMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * Use hashmap of to store all the data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": " * The key of the hashmap would be the date and the value would be the activityList for that day."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class DayMap {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private HashMap\u003cLocalDate, ActivityList\u003e dayMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private ActivityList lastSeenList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public DayMap() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.dayMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.lastSeenList \u003d new ActivityList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void setLastSeenList(ActivityList activityList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.lastSeenList \u003d new ActivityList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.lastSeenList \u003d activityList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ActivityList getLastSeenList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return this.lastSeenList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Adds activity into activityList under the corresponding dateTime."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Creates a new activityList if there are none under the specified date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param dateTime Specified date to extract activitylist from the dayMap."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param activity Description of the activity, the userinput"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void addActivity(LocalDateTime dateTime, Activity activity) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ActivityList alist \u003d this.getActivityList(dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (alist \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.put(dateTime.toLocalDate(), new ActivityList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            alist \u003d this.getActivityList(dateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        alist.addActivity(activity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        //System.out.println(\"Total calorie count for \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        // + dateTime.toLocalDate().toString() + \" \u003d \" + alist.getNetCalorie());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void insertActivity(int index, Activity activity) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        lastSeenList.insertActivity(index, activity);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ArrayList getArrayList(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return getActivityList(dateTime).getArrayList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    //returns the activityList for the given dateTime"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ActivityList getActivityList(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return dayMap.get(dateTime.toLocalDate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    //returns the number of activities for the given day"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public int getSizeOfActivityList(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ActivityList alist \u003d this.getActivityList(dateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (alist \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return alist.getNumberOfActivities();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public int getNetCalorieOfDay(LocalDate date) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ActivityList alist \u003d getActivityList(date.atStartOfDay());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return alist.getNetCalorie();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public HashMap\u003cLocalDate, ActivityList\u003e getHashMap() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return dayMap;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints the activities for the given date."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param date specified date to print the list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void printActivityList(LocalDate date) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (!dayMap.containsKey(date)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayEmptyActivityCounterMessage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            getActivityList(date.atStartOfDay()).printList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Finds the activities containing a keyword."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param description is the keyword where the activity should contain"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws KeywordNotFoundException when the keyword is not found in any activity"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void listActivitiesContaining(String description) throws KeywordNotFoundException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        setLastSeenList(new ActivityList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Iterator it \u003d dayMap.entrySet().iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int activityFindCounter \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            String date \u003d pair.getKey().toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            ActivityList activities \u003d (ActivityList) pair.getValue();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (activityCounter \u003e 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    String currentLine \u003d activities.getActivity(i).toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    String descriptionToCheck \u003d currentLine.substring(currentLine.indexOf(\"|\") + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    descriptionToCheck \u003d descriptionToCheck.substring(0, descriptionToCheck.indexOf(\"|\")).trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    if (descriptionToCheck.contains(description)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        System.out.println((activityFindCounter + 1) + \". \" + date + \" \" + currentLine);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        lastSeenList.addActivity(activities.getActivity(i));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        activityFindCounter++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (activityFindCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new KeywordNotFoundException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        //displaySavedMessage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Deletes the activity with a given index."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param index is the index of the activity to be deleted"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index provided is out of range"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void deleteActivity(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (lastSeenList.isValidIndex(index)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Activity activityToMatch \u003d lastSeenList.getActivity(index);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            //if previous command was the list command then this will straight away delete the activity"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            // from the list in the daymap"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            lastSeenList.removeActivity(index);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            //if all the activities in a date is deleted, this is the key to be removed from the daymap"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            LocalDate keyToDelete \u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            //iterating through the entire daymap to find the activity to delete"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Iterator it \u003d dayMap.entrySet().iterator();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                ActivityList activities \u003d (ActivityList) pair.getValue();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                if (activityCounter \u003e 0) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        if (activityToMatch.equals(activities.getActivity(i))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            activities.removeActivity(i);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            //if deleted the last item in the ActivityList then obtain the key to be deleted from daymap"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            if (activities.getNumberOfActivities() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                                keyToDelete \u003d (LocalDate) pair.getKey();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    //If encountered a activitylist with a count of 0,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    // which will be resulted if deleted the last item of ActivityList from a list command"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                } else if (activityCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    keyToDelete \u003d (LocalDate)pair.getKey();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            //removes key from the daymap"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.remove(keyToDelete);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //displaySavedMessage();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void move(int indexToBeMovedFrom, int indexToBeInsertedBelow) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        lastSeenList.moveActivity(indexToBeMovedFrom - 1, indexToBeInsertedBelow);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Sets the activities at a given date as a string."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * For e.g, 2020-10-11: [F] | apple | 50, [F] | banana | 100, [E] | pushup | 10, [E] | jogging | 60."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @param dateTime is the specified date"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @return activities as a string for the given date"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public String toString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ActivityList alist \u003d this.getActivityList(dateTime);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return dateTime.toLocalDate().toString() + \": \" + alist.toString();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 198,
      "e0425705": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.storage.Userinfotextfilestorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.Initialiseuser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.Userinfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.CheckNewUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displayNotSavedMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displayWelcomeMessage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayIoExceptionMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayParserNullPointerExceptionMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Entry point of the traKCAL application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Initialises the application and starts the interaction with the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static DayMap calList \u003d new DayMap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static Userinfo profile;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static Storage storage \u003d new Storage(getJarFilePath() + \"/tpdata/tpcsv.csv\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displayWelcomeMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            storage.loadData(calList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(\"here\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (CheckNewUser.isNewUser()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Initialiseuser.createNewProfile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Initialiseuser.loadProfile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        Duke.run();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static void run()  {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            Parser parser \u003d new Parser(userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                Command cmd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                if (userInput.contains(\"\u0026\u0026\") \u0026\u0026 userInput.charAt(userInput.indexOf(\"\u0026\u0026\") + 4) !\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    parser.prepareChaining(userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    cmd \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    executeCmd(cmd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                    storage.updateFile(calList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                System.out.println();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayParserNullPointerExceptionMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayNotSavedMessage();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static void executeCmd(Command cmd) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        cmd.setData(calList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        cmd.execute();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private static String getJarFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return new File(Duke.class.getProtectionDomain().getCodeSource().getLocation().getPath())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                .getParent().replace(\"%20\", \" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 10,
      "chewyang": 26,
      "e0425705": 21,
      "-": 9,
      "1-Karthigeyan-1": 12,
      "poonchuanan": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/ExceptionMessages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.drawDivider;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.promptUserOfHelpMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Deals with error/exception messages."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class ExceptionMessages {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when StringIndexOutOfBoundsException occurs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayStringIndexOutOfBoundsExceptionMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String exceptionMessage \u003d \"Something went wrong!! I do not understand what you mean.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"There could be an error in the way of input.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(exceptionMessage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        promptUserOfHelpMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when IOException occurs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayIoExceptionMessage() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"IO Exception has occurred!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        promptUserOfHelpMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when NumberFormatException occurs in delete command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayDeleteCommandNumberFormatExceptionMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Index is not a number!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        promptUserOfHelpMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when NullPointerException occurs in delete command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayDeleteCommandNullPointerExceptionMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"There is not index to remove\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        promptUserOfHelpMessage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when NullPointerException occurs in Parser."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayParserNullPointerExceptionMessage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Invalid command!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        promptUserOfHelpMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when error occurs in add command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayAddCommandErrorMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Invalid input given!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"The input format for adding food activity is \u0027add f/ X c/ Y d/ Z\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \" - where food is X, calories lost is Y and date(YYYY-MM-DD) is Z\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"The input format for adding exercise activity is \u0027add e/ X c/ Y d/ Z\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \" - where exercise done is X, calories lost is Y and date(YYYY-MM-DD) is Z\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Please do input \u0027help\u0027 for more information.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints error message when error occurs in find command."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayFindErrorMessage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"I do not understand what you mean!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"The input format for finding food or exercise activity via keyword is \u0027find d/ X\u0027\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \" - where keyword is X\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"The input format for finding calorie count via keyword is \u0027find c/ X\u0027\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \" - where calories count is X\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Please do input \u0027help\u0027 for more information.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when date and time format entered is wrong."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static void displayIncorrectDateTimeFormatEnteredMessage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        System.out.println(\"Wrong format of date entered!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"The accepted format is YYYY-MM-DD!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Also, ensure that the date input actually exists!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        promptUserOfHelpMessage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid input for add activity given."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayAddActivityNumberFormatExceptionMessage() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Sorry I do not understand what you mean!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"One of the following has been violated:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t1. Description or calories input cannot be empty\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t2. Calories count input must be an integer \u003e 0!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t3. Wrong input format\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t\\tInput format is:\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t\\tadd f/ FOOD_DESCRIPTION c/ CALORIES d/ YYYY-MM-DD\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t\\tadd e/ EXERCISE_DESCRIPTION c/ CALORIES d/ YYYY-MM-DD\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid input for add activity given."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEditActivityExceptionMessage() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Sorry I do not understand what you mean!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"One of the following has been violated:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t1. Description or calories input cannot be empty\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t2. Calories count input must be an integer \u003e 0!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t3. Wrong input format\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t\\tInput format is:\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t\\tedita INDEX f/ FOOD_DESCRIPTION c/ CALORIES d/ YYYY-MM-DD\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"\\t\\tedita INDEX e/ EXERCISE_DESCRIPTION c/ CALORIES d/ YYYY-MM-DD\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when attributes input by user is empty."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEmptyAddActivityErrorMessage() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Sorry! There is missing input!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when input of user is not understood."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayInvalidInputErrorMessage() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Sorry I do not understand the input given!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Perhaps pulling out help list via input \u0027help\u0027 may help.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when invalid activity factor input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayInvalidActivityFactorMessage() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Sorry this is an invalid activity factor!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Please enter an integer from 1 to 5, with 1 being the least \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"active and 5 being the most active\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when DateTimeException occurs."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayDateTimeExceptionMessage() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Sorry, I do not understand!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"The input format of date is YYYY-MM-DD.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error message when attributes input by user is empty."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEmptyEditActivityErrorMessage() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Sorry! There is missing input!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints message when there is a presence of a duplicated naming for file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void displayExistingFileMessage() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Sorry! There is an existing set with this name, please use another name!\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints message when there is a presence of a duplicated naming for file."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayNegativeCalorieInputExceptionMessage() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Calorie input must be an integer and positive!\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 12,
      "chewyang": 8,
      "e0425705": 179
    }
  },
  {
    "path": "src/main/java/seedu/duke/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Sub-class of Activity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class Exercise extends Activity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Subclass of class Activity."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description exercise description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories burnt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Exercise(String description, int calories, boolean isFromFile) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        super(description, calories, isFromFile);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String getString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return \"[E] | \" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 3,
      "e0425705": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Sub-class of Activity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class Food extends Activity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Subclass of class Activity."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description food description"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories consumed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Food(String description, int calories, boolean isFromFile) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        super(description, calories, isFromFile);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String getString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return \"[F] | \" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 3,
      "e0425705": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/GraphDrawing.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class GraphDrawing {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public GraphProperty graphProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private final int row;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private final int column;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private final int targetRow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private final int maxCalories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private final int minCalories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private final int targetCalories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String BLANK_WIDTH \u003d \"   \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String TARGET_WIDTH \u003d \"***\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String BAR_WIDTH \u003d \"| |\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String targetBarWidth \u003d \"|*|\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static final String TOP_BAR_WIDTH \u003d \"|-|\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param dayMap Hashmap"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param targetCalories target calories set by user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public GraphDrawing(DayMap dayMap, int targetCalories) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.graphProperty \u003d new GraphProperty(dayMap, targetCalories);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.row \u003d graphProperty.row;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.column \u003d graphProperty.column;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.targetRow \u003d graphProperty.targetRow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.maxCalories \u003d graphProperty.maxCalories;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.minCalories \u003d graphProperty.minCalories;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.targetCalories \u003d graphProperty.maxCalories;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Repeats character back to back."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param character character"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param size number of times to repeat"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return concatenated string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String repeatCharacter(String character, int size) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String characterText \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            characterText +\u003d character;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return characterText;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Generates the x_axis."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return x_axis String"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String generate_x_axis(int maxCalorieSize) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String horizontalLine \u003d \"|-+\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d 0; i \u003c column - 1; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            horizontalLine +\u003d repeatCharacter(\"-\", 5) + \"+\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        horizontalLine \u003d repeatCharacter(\" \", maxCalorieSize) + horizontalLine + \"--\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return horizontalLine;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * generate date labels for the x-axis."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param maxCalorieSize Character length of maxCalorieSize"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return date labels"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String generateDateLabels(int maxCalorieSize) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cLocalDate\u003e keys \u003d graphProperty.keys;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return repeatCharacter(\" \", maxCalorieSize - 1) + \" \" + graphProperty.parseDate(keys);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * generates the y axis."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param space space width set by number of characters in maximum calories."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param columnNumber column number"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return y_axis string for that row"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private String generateVerticalAxis(String space, int columnNumber) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String targetCaloriesString \u003d Integer.toString(targetCalories);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String maxCaloriesString \u003d Integer.toString(maxCalories);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String minCaloriesString \u003d Integer.toString(minCalories);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String label \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (columnNumber \u003d\u003d row - 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            label \u003d maxCaloriesString;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else if (columnNumber \u003d\u003d targetRow) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            label \u003d targetCaloriesString"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    + repeatCharacter(\" \", calculateSizeDifference(maxCaloriesString, targetCaloriesString));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else if (columnNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            label \u003d minCaloriesString"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    + repeatCharacter(\" \", calculateSizeDifference(maxCaloriesString, minCaloriesString));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            label \u003d space;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Calculate difference in string size."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param firstString first string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param secondString second string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return string length differemnce"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int calculateSizeDifference(String firstString, String secondString) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (firstString.length() \u003e secondString.length()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return firstString.length() - secondString.length();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return firstString.length() - secondString.length();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * adds width based on the row type."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param number row number"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return width"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String addWidth(int number) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String width \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (number \u003d\u003d targetRow) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            width +\u003d TARGET_WIDTH;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            width +\u003d BLANK_WIDTH;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return width;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * draws the graph."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void drawGraph() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int[][] table \u003d graphProperty.table;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cLocalDate\u003e keys \u003d graphProperty.keys;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int maxCalorieSize \u003d Integer.toString(maxCalories).length();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String space \u003d repeatCharacter(\" \", maxCalorieSize);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String drawing \u003d \"\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d row - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            drawing +\u003d generateVerticalAxis(space, i) + \"|\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            for (int j \u003d 0; j \u003c column; j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                switch (table[i][j]) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                case 0:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    drawing +\u003d BLANK_WIDTH;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    drawing +\u003d BAR_WIDTH;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    drawing +\u003d TARGET_WIDTH;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    drawing +\u003d targetBarWidth;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                case 4:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    drawing +\u003d TOP_BAR_WIDTH;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    //does nothing"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                drawing +\u003d addWidth(i);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            drawing +\u003d \"\\n\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        drawing +\u003d generate_x_axis(maxCalorieSize);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        drawing +\u003d generateDateLabels(maxCalorieSize);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        System.out.println(drawing);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1-Karthigeyan-1": 173
    }
  },
  {
    "path": "src/main/java/seedu/duke/GraphProperty.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.command.GraphCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class GraphProperty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public final int row \u003d 11;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static String DATE_FORMAT \u003d \"dd/MM\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static int TARGET_TYPE \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static int LIMIT_TYPE \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private static int DIVISOR \u003d 10;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int targetRow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public final int column;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public final DayMap dayMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    ArrayList\u003cLocalDate\u003e keys;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int targetCalories;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int maxCalories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int minCalories;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int[][] table;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Constructor for the graph."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param dayMap hashmap containing dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param targetCalories tagret calories from userprofile"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public GraphProperty(DayMap dayMap, int targetCalories) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.dayMap \u003d dayMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.targetCalories \u003d targetCalories;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.column \u003d checkSize();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        setProperties();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private int checkSize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int size \u003d dayMap.getHashMap().size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (size \u003c GraphCommand.MAXIMUM_DAYS) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return size;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return GraphCommand.MAXIMUM_DAYS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * set othere properties by calculation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void setProperties() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.keys \u003d sortKeys();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cInteger\u003e calories \u003d getCalories();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.table \u003d initiateTable(calories);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Initiates a 2 dimension table and fills the table with 0."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int[][] setEmptyTable(int[][] table) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int[] row : table) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            Arrays.fill(row, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return table;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * get and sort keys from hashmap."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return sorted keys in arraylist"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public ArrayList\u003cLocalDate\u003e sortKeys() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cLocalDate\u003e keys \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (LocalDate key : dayMap.getHashMap().keySet()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            keys.add(key);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        //sort the keys by date"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        keys.sort(LocalDate::compareTo);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cLocalDate\u003e newKeys \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d keys.size() - column; i \u003c keys.size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            newKeys.add(keys.get(i));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return newKeys;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * get calories from the dates."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return array of calories"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public ArrayList\u003cInteger\u003e getCalories() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int currentCalories;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int minCalories \u003d targetCalories;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int maxCalories \u003d targetCalories;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        ArrayList\u003cInteger\u003e calories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (LocalDate date : keys) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            currentCalories \u003d dayMap.getNetCalorieOfDay(date);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            calories.add(currentCalories);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            maxCalories \u003d findMaximum(maxCalories, currentCalories);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            minCalories \u003d findMinimum(minCalories, currentCalories);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.minCalories \u003d minCalories;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.maxCalories \u003d maxCalories;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Compares and finds the minimum between 2 numbers."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param firstNumber first number to compare"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param secondNumber second number to compare"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return the lesser number"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int findMinimum(int firstNumber, int secondNumber) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (firstNumber \u003c secondNumber) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return firstNumber;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return secondNumber;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Compares and finds the maximum between 2 numbers."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param firstNumber first number to compare"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param secondNumber second number to compare"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return the greater number"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int findMaximum(int firstNumber, int secondNumber) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        if (firstNumber \u003c secondNumber) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            return secondNumber;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return firstNumber;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Calculates interval of the graph."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return interval value"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int calculateInterval() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return (maxCalories - minCalories) / DIVISOR;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * fills up the table with appropriate values."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 0 -\u003e empty spaces."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 1 -\u003e middle portion of the bar."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 2 -\u003e target row."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 3 -\u003e target row  + middle portion of the bar."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * 4 -\u003e top symbol of the bar."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param table representation of graph in 2d array."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param calories calories list"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void fillTable(int[][] table, ArrayList\u003cInteger\u003e calories) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.targetRow \u003d calculateRowNumber(targetCalories);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int rowNumber;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d row - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            for (int j \u003d 0; j \u003c column; j++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                rowNumber \u003d calculateRowNumber(calories.get(j));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                if (rowNumber \u003d\u003d i) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    table[i][j] \u003d LIMIT_TYPE;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                } else if (targetRow \u003d\u003d i) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    table[i][j] \u003d TARGET_TYPE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                if (rowNumber \u003e i) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                    table[i][j]++;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Parses the date into string."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return date in dd/MM formate"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public String parseDate(ArrayList\u003cLocalDate\u003e keys) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String formattedDate \u003d \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (LocalDate key : keys) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            formattedDate +\u003d key.format(DateTimeFormatter.ofPattern(DATE_FORMAT));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            formattedDate +\u003d \" \";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return formattedDate;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Initiates a table."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return table"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int[][] initiateTable(ArrayList\u003cInteger\u003e calories) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int [][]table \u003d new int[row][column];"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        setEmptyTable(table);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        fillTable(table, calories);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return table;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * find the row number corresponding to the calories."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public int calculateRowNumber(int calories) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int interval \u003d calculateInterval();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return (calories - minCalories) / interval;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1-Karthigeyan-1": 199
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.AddExerciseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.command.CreateNewRepeatedSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.AddFoodCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.CreateNewUserCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.EditFoodCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.EditExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.command.FindAllCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.command.FindCalorieCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.command.FindDescriptionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.command.FindEitherCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.MoveActivityCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.command.InvalidCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.command.GraphCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.userprofile.Initialiseuser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.userprofile.Userinfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Duke.calList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Duke.executeCmd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Duke.storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayAddActivityNumberFormatExceptionMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayAddCommandErrorMessage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayDeleteCommandNullPointerExceptionMessage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayDeleteCommandNumberFormatExceptionMessage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayEditActivityExceptionMessage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayEmptyAddActivityErrorMessage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayEmptyEditActivityErrorMessage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayFindErrorMessage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayIoExceptionMessage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayNegativeCalorieInputExceptionMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayStringIndexOutOfBoundsExceptionMessage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayIncorrectDateTimeFormatEnteredMessage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " * Initialises parser class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected LocalDateTime date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Store details in the class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param userInput user from the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public Parser(String userInput) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.userInput \u003d userInput.trim().replaceAll(\" +\", \" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.date \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Parses commands input by user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return Command type"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Command parseCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        String[] arguments \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            switch (arguments[0].toLowerCase()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            case \"create\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return new CreateNewUserCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            case \"createset\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                return new CreateNewRepeatedSet(arguments[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"add\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return prepareAddCommand(userInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            case \"addset\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                return prepareAddSet(arguments[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return prepareFindCommand(userInput);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"edit\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                Userinfo store \u003d new Userinfo();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                store.editUserInfo(arguments[1]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                Initialiseuser.save(store);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            case \"edita\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return prepareEditActivityCommand(arguments[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return prepareDeleteCommand(arguments[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return prepareListCommand(userInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            case \"move\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return prepareMoveIndexCommand(userInput);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            case \"graph\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return new GraphCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return new InvalidCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayStringIndexOutOfBoundsExceptionMessage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayIoExceptionMessage();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares chained input by user into their respective commands to be read."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput input given by user"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public Command prepareChaining(String userInput) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        while (userInput.contains(\"\u0026\u0026\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            userInput \u003d userInput + \" \u0026\u0026\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            int chainIndex \u003d userInput.indexOf(\"\u0026\u0026\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            if (chainIndex \u003c 5) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            String firstString \u003d userInput.substring(0, chainIndex).trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Parser parser \u003d new Parser(firstString);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Command cmd \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (cmd.getCanBeChained()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                executeCmd(cmd);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                System.out.println(\"The commands entered cannot be chained together!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            storage.updateFile(calList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            userInput \u003d userInput.substring(chainIndex + 2).trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares the edit command by checking the userInput."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput description of the edit command"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return EditFoodCommand or EditExerciseCommand"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    private Command prepareEditActivityCommand(String userInput) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String[] arguments \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        int index \u003d Integer.parseInt(arguments[0]) - 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        userInput \u003d arguments[1];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            if (userInput.startsWith(\"f/\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calorieIndex \u003d userInput.indexOf(\"c/\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                int calories \u003d Integer.parseInt(userInput.substring(calorieIndex + 2).trim());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calories \u003c 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                String foodDescription \u003d userInput.substring(2, calorieIndex - 1).trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new EditFoodCommand(index, foodDescription, calories);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else if (userInput.startsWith(\"e/\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calorieIndex \u003d userInput.indexOf(\"c/\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                int calories \u003d Integer.parseInt(userInput.substring(calorieIndex + 2).trim());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calories \u003c 0) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                String exerciseDescription \u003d userInput.substring(2, calorieIndex - 1).trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new EditExerciseCommand(index, exerciseDescription, calories);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayEmptyEditActivityErrorMessage();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEditActivityExceptionMessage();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEditActivityExceptionMessage();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayEditActivityExceptionMessage();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares file to be read from and added into the current list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param fileName file to be read from"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return Command"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private Command prepareAddSet(String fileName) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String strDate \u003d formatter.format(date);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            String initialPath \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            String filePath \u003d initialPath + \"/\" + fileName + \".txt\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                Parser parser \u003d new Parser(\"add \" + line + \" d/ \" + strDate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                Command cmd \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                executeCmd(cmd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                storage.updateFile(calList);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                line \u003d reader.readLine();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayIoExceptionMessage();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares the add command by checking the userInput."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput description of the add command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return AddFoodCommand or AddExerciseCommand"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private Command prepareAddCommand(String userInput) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            String[] arguments \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (arguments[1].startsWith(\"f/\")) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                int calorieIndex \u003d arguments[1].indexOf(\"c/\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int dateIndex \u003d arguments[1].indexOf(\"d/\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calories \u003d Integer.parseInt(arguments[1].substring(calorieIndex + 2, dateIndex).trim());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calories \u003c 0) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                LocalDate date \u003d processDate(arguments[1].substring(dateIndex + 2).trim());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                String foodDescription \u003d arguments[1].substring(2, calorieIndex - 1).trim();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new AddFoodCommand(foodDescription, calories, false, date);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } else if (arguments[1].startsWith(\"e/\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                int calorieIndex \u003d arguments[1].indexOf(\"c/\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int dateIndex \u003d arguments[1].indexOf(\"d/\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                int calories \u003d Integer.parseInt(arguments[1].substring(calorieIndex + 2, dateIndex).trim());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                if (calories \u003c 0) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    throw new Exception();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                LocalDate date \u003d processDate(arguments[1].substring(dateIndex + 2).trim());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                String exerciseDescription \u003d arguments[1].substring(2, calorieIndex - 1).trim();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                return new AddExerciseCommand(exerciseDescription, calories, false, date);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                displayEmptyAddActivityErrorMessage();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (NullPointerException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayAddCommandErrorMessage();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayAddActivityNumberFormatExceptionMessage();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayIncorrectDateTimeFormatEnteredMessage();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayAddActivityNumberFormatExceptionMessage();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private Command prepareMoveIndexCommand(String userInput) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        //Removing additional spaces in the user\u0027s input"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String after \u003d userInput.trim().replaceAll(\" +\", \" \");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String firstIndexKey \u003d \"from/\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String secondIndexKey \u003d \"below/\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int firstIndex \u003d after.indexOf(firstIndexKey) + firstIndexKey.length(); //index after first keyword"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int secondIndex \u003d after.indexOf(secondIndexKey) + secondIndexKey.length(); //index after second keyword"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String firstIndexString \u003d after.substring(firstIndex).trim().split(\" \")[0];"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String secondIndexString \u003d after.substring(secondIndex).trim().split(\" \")[0];"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int indexToBeChanged \u003d Integer.parseInt(firstIndexString);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        int indexToBeInsertedBelow \u003d Integer.parseInt(secondIndexString);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return new MoveActivityCommand(indexToBeChanged, indexToBeInsertedBelow);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Process date input by user."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param dateInput date input by user."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * @throws DateTimeParseException if the string is in the incorrect format"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private LocalDate processDate(String dateInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        LocalDate dateTime \u003d LocalDate.parse(dateInput);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Returns current date."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return current date"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    private LocalDate currentDate() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares the list command by checking the userInput."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput description of the list command."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return ListCommand"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private Command prepareListCommand(String userInput) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (userInput.toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            String dateString \u003d userInput.split(\" \")[1];"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                LocalDate date \u003d processDate(dateString);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return new ListCommand(date);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                displayIncorrectDateTimeFormatEnteredMessage();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Prepares the delete command by checking the userInput."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param userInput description of the delete command."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @return DeleteCommand"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private Command prepareDeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            if (userInput.equals(\"/all\")) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return new DeleteCommand();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                int index \u003d Integer.parseInt(userInput) - 1;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayDeleteCommandNumberFormatExceptionMessage();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayDeleteCommandNullPointerExceptionMessage();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prepares the find command by checking the userInput."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * If the keyword contains activity description, returns FindDescriptionCommand."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Else if the keyword contains calories count, returns FindCalorieCommand."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param userInput description of the find command."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return FindCalorieCommand"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private Command prepareFindCommand(String userInput) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String[] arguments \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (arguments[1].startsWith(\"d/\")) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                String description \u003d arguments[1].substring(2).trim();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return new FindDescriptionCommand(description);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            } else if (arguments[1].startsWith(\"c/\")) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                String calorie \u003d arguments[1].substring(2).trim();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return new FindCalorieCommand(calorie);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            } else if (arguments[1].startsWith(\"a/\")) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return new FindAllCommand(arguments[1]);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            } else if (arguments[1].startsWith(\"e/\")) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return new FindEitherCommand(arguments[1]);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                displayFindErrorMessage();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        } catch (NullPointerException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            displayFindErrorMessage();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 34,
      "chewyang": 93,
      "e0425705": 166,
      "1-Karthigeyan-1": 72,
      "poonchuanan": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displayNotSavedMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    File dataFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    //ICsvMapWriter writer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private void createFileHierarchy() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (dataFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            if (dataFile.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dataFile.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dataFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private void appendToFile(String textToAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(bw);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            pw.println(textToAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            pw.flush();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //System.out.println(\"record saved\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //displaySavedMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            //System.out.println(\"record not saved\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displayNotSavedMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private void writeToFile(String textToAdd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        FileWriter fw \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            fw.write(textToAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(\"Unable to write to file!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void updateFile(DayMap dayMap) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        HashMap\u003cLocalDate, ActivityList\u003e dayHashMap;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dayHashMap \u003d dayMap.getHashMap();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Iterator it \u003d dayHashMap.entrySet().iterator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        writeToFile(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Map.Entry pair \u003d (Map.Entry) it.next();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            String activities \u003d pair.getValue().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            appendToFile(pair.getKey().toString() + \", \" + activities);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        //displaySaveMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Loads saved CSV data into the list when the program starts."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param calList used to store the current activities"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void loadData(DayMap calList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            createFileHierarchy();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            //Read from CSV- reads the file line by line and stores the lines in an array list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                lines.add(line);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            //Read line by line"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            for (int i \u003d 0; i \u003c lines.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                processData(calList, lines.get(i));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(\"Unable to load data\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Splits the current line of CSV data into date and activity, then processes the activity."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param calList used to store the current activities"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param data line of CSV data"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private void processData(DayMap calList, String data) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String dateString \u003d data.substring(0, data.indexOf(\u0027,\u0027));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(dateString);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        //If the date is the same as today, append it to our list for the day"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        //if (date.compareTo(LocalDate.now()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String activities \u003d data.substring(data.indexOf(\",\") + 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String firstActivityString \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        while (activities.contains(\",\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            firstActivityString \u003d activities.substring(0, activities.indexOf(\u0027,\u0027));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            processActivity(calList, firstActivityString, date.atStartOfDay());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            activities \u003d activities.substring(activities.indexOf(\",\") + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        processActivity(calList, activities, date.atStartOfDay());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Splits the activity data into food or exercise, then adds the activity to calList."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param calList used to store the current activities"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param activity activity data in to format of type, description and calories"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param date date the activity was conducted"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private void processActivity(DayMap calList, String activity, LocalDateTime date) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        char typeOfActivity \u003d activity.charAt(2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String description \u003d activity.substring(activity.indexOf(\"|\") + 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        description \u003d description.substring(0, description.indexOf(\"|\")).trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int calorieStartIndex \u003d activity.lastIndexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String calorieString \u003d activity.substring(calorieStartIndex).trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int calories \u003d Integer.parseInt(calorieString);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        switch (typeOfActivity) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        case \u0027F\u0027:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Food food \u003d new Food(description, calories, true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            calList.addActivity(date, food);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        case \u0027E\u0027:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Exercise exercise \u003d new Exercise(description, calories, true);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            calList.addActivity(date, exercise);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            System.out.println(\"Corrupted data. Activity should be either exercise or food\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 84,
      "e0425705": 8,
      "poonchuanan": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Deals with interactions with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out welcome message to user when program is run."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displayDuke();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        helloMessage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        promptUserOfHelpMessage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out traKCAL logo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayDuke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String logo \u003d \"|  _                  _  __   ___     _     _                                           |\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"| | |_   _ _   __ _  | |/ /  / __|   /_\\\\   | |                                          |\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"| |  _| | \u0027_| / _` | | \u0027 \u003c  | (__   / _ \\\\  | |__                                        |\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"|  \\\\__| |_|   \\\\__,_| |_|\\\\_\\\\  \\\\___| /_/ \\\\_\\\\ |____|                                       |\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"|                                                                                       |\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"| Hello from                                                                            |\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + logo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out a line divider."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void drawDivider() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String divider \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out hello message."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void helloMessage() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"| Hello! I\u0027m traKCAL.                                                                   |\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out help list showing the commands available."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayHelpMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String helpList \u003d \"Commands available: create new user, list, help, add, delete, find, bye\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"The expected format of input values:\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tcreate new user         - Adds a new user profile\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\ttarget X                - Adds a target calorie, X\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\thelp                    - Prints out commands available and their input format\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tadd f/ X c/ Y d/ Z      - Adds food consumed, X, calories gained, Y\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\t                          and date(YYYY-MM-DD), Z\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tadd e/ X c/ Y d/ Z      - Adds exercise done, X, calories lost, Y\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\t                          and date(YYYY-MM-DD), Z\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tlist                    - Prints out the list of entries.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tedit n/U, g/V, w/W, h/X, a/Y, af/Z\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\t                        - Edit user profile to name, U, gender, V, weight, W,\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\t                          height, X, age, Y, activity factor(1-5), Z\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tedita W f/ X c/ Y       - Edits activity at index W of list to food consumed, X,\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\t                          calories gained, Y\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tedita W e/ X c/ Y       - Edits activity at index W of list to exercise done, X,\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\t                          calories lost, Y\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tfind d/ X               - Searches for exercise/food description with X included\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tfind c/ X               - Searches for activity description with calories of X\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"\\tmove index/ X below/ Y  - Moves the activity at X to the index below Y\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tdelete X                - Deletes activity located at index X of the list\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"\\tbye                     - Terminates the program\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(helpList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out acknowledgement of saving current activity list in file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displaySavedMessage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"The current activity list has been saved.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out error in saving current activity list in file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayNotSavedMessage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"The current activity list has not been saved.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"An error has occurred!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        promptUserOfHelpMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayDefaultMessage() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Invalid command. Please type \u0027help\u0027 for more information.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out bye message and let the user know that the current list has been saved to file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayByeMessage() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"| Thank you for using traKCAL. See you again!                                           |\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        drawDivider();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message to recommend user to print out help list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void promptUserOfHelpMessage() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Please do input \u0027help\u0027 for the commands and their respective input format.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Prints out message when list command given but activity list is empty."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public static void displayEmptyActivityCounterMessage() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        System.out.println(\"Nothing was added!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 1,
      "e0425705": 123
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Add exercise."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class AddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected Exercise exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds exercise and it\u0027s respective calories."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description exercise description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories burnt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public AddExerciseCommand(String description, int calories, boolean isFromFile) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.exercise \u003d new Exercise(description, calories, isFromFile);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds exercise, it\u0027s respective calories and date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description exercise description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories lost."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param isFromFile if data is from csv file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param date date of activity."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public AddExerciseCommand(String description, int calories, boolean isFromFile, LocalDate date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.exercise \u003d new Exercise(description, calories, isFromFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dayMap.addActivity(date.atStartOfDay(), exercise);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displaySavedMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 28,
      "e0425705": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Add food."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class AddFoodCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected Food food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds food and it\u0027s respective calories."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description food description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories gained."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public AddFoodCommand(String description, int calories, boolean isFromFile) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.food \u003d new Food(description, calories, isFromFile);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Adds food, it\u0027s respective calories and date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description food description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories gained."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param isFromFile if data is from csv file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param date date of activity."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public AddFoodCommand(String description, int calories, boolean isFromFile, LocalDate date) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.food \u003d new Food(description, calories, isFromFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dayMap.addActivity(date.atStartOfDay(), food);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displaySavedMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 28,
      "e0425705": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static seedu.duke.Ui.displayByeMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Bye command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        displayByeMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 3,
      "1-Karthigeyan-1": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.DayMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Execute command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected DayMap dayMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected boolean canBeChained \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * This method is to be override by the specific commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Sets data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param dayMap date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void setData(DayMap dayMap) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.dayMap \u003d dayMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Checks if command can be chained."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public boolean getCanBeChained() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        return canBeChained;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 22,
      "e0425705": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CreateNewRepeatedSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.storage.UserSetStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class CreateNewRepeatedSet extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected String trimmedInput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public CreateNewRepeatedSet(String trimmedUserInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.trimmedInput \u003d trimmedUserInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        UserSetStorage.prepareNewSet(trimmedInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CreateNewUserCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.userprofile.Initialiseuser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class CreateNewUserCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public CreateNewUserCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Initialiseuser.createNewProfile();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.ActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " * Initialises Command to delete activities."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Deletes Command Constructor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * @param index index of the activities."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Deletes Command Constructor."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.index \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     * Executes the correct delete command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.getLastSeenList().clearList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            dayMap.getHashMap().remove(this.date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dayMap.deleteActivity(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                System.out.println(\"Invalid index!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displaySavedMessage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 20,
      "e0425705": 6,
      "1-Karthigeyan-1": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.Exercise;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Edits exercise and its attributes at the indicated index."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class EditExerciseCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected Exercise exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Edits exercise and it\u0027s respective calories."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description exercise description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories lost."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public EditExerciseCommand(int index, String description, int calories) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.exercise \u003d new Exercise(description, calories, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.insertActivity(index, exercise);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displaySavedMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            System.out.println(\"Index entered is not within the range!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    + \"Please pull out the list for the day before editing on it!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 7,
      "e0425705": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/EditFoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Edits food and its attributes at the indicated index."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class EditFoodCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected Food food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * Edits food and it\u0027s respective calories."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param description food description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     * @param calories calories gained."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public EditFoodCommand(int index, String description, int calories) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.food \u003d new Food(description, calories, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.insertActivity(index, food);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            displaySavedMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            System.out.println(\"Index entered is not within the range!\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                    + \"Please pull out the list for the day before editing on it!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 8,
      "e0425705": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindAllCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import static seedu.duke.Ui.displayEmptyActivityCounterMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " * Initialises Command to find all description tags."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class FindAllCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Find matching results based on input tags."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param userInput keywords to be matched"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public FindAllCommand(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ActivityList activities \u003d dayMap.getActivityList(date.atStartOfDay());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        if (activityCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            displayEmptyActivityCounterMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            System.out.println(\"Here are the matching results based on all keywords typed:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            boolean hasAllWords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                String currentLine \u003d activities.getActivity(i).toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                hasAllWords \u003d checkAllWords(currentLine);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                if (hasAllWords) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    System.out.println(currentLine);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displaySavedMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Checks if all keywords inputted by user is present in entry."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param currentLine current entry to be checked"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @return true if all words are present, false otherwise"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private boolean checkAllWords(String currentLine) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ArrayList\u003cString\u003e wordsToCheck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        wordsToCheck \u003d getAllTags(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        for (String word : wordsToCheck) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (!currentLine.contains(word)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Parses all keywords inputted by user into an arraylist."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param userInput String user typed into CLI"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private ArrayList\u003cString\u003e getAllTags(String userInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        while (userInput.contains(\"a/\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (!userInput.contains(\" \")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                userInput \u003d userInput.substring(2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                tags.add(userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            int spaceIndex \u003d userInput.indexOf(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String firstWord \u003d userInput.substring(0, spaceIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            userInput \u003d userInput.substring(spaceIndex).trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            firstWord \u003d firstWord.substring(2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            tags.add(firstWord);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 2,
      "poonchuanan": 81
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindCalorieCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import static seedu.duke.Ui.displayEmptyActivityCounterMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Initialises Command to find calorie count."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class  FindCalorieCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected String calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Find matching results based on calorie input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param calorie calories to search"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public FindCalorieCommand(String calorie) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ActivityList activities \u003d dayMap.getActivityList(date.atStartOfDay());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        if (activityCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            displayEmptyActivityCounterMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            System.out.println(\"Here are the matching results based on calories:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                String currentLine \u003d activities.getActivity(i).toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                int calorieStartIndex \u003d currentLine.lastIndexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                String calorieToCheck \u003d currentLine.substring(calorieStartIndex).trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                if (calorieToCheck.equals(calorie)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    System.out.println((i + 1) + \". \" + currentLine);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displaySavedMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 2,
      "e0425705": 5,
      "poonchuanan": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindDescriptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Initialises Command to find activity description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class FindDescriptionCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Find matching results based on description input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param description description to search"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public FindDescriptionCommand(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.listActivitiesContaining(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (KeywordNotFoundException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(\"Invalid keyword!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 12,
      "e0425705": 3,
      "poonchuanan": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindEitherCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import seedu.duke.ActivityList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import static seedu.duke.Ui.displayEmptyActivityCounterMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " * Initialises Command to find all description tags."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class FindEitherCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Find matching results based on input tags."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param userInput keywords to be matched"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public FindEitherCommand(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ActivityList activities \u003d dayMap.getActivityList(date.atStartOfDay());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        int activityCounter \u003d activities.getNumberOfActivities();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        if (activityCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            displayEmptyActivityCounterMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            System.out.println(\"Here are the matching results based on keywords typed (either):\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            boolean hasOneWord;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            for (int i \u003d 0; i \u003c activityCounter; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                String currentLine \u003d activities.getActivity(i).toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                hasOneWord \u003d checkEitherWords(currentLine);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                if (hasOneWord) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                    System.out.println(currentLine);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displaySavedMessage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Checks if one of the keywords inputted by user is present in entry."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param currentLine current entry to be checked"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @return  hasOneWord true if just one word is present, false otherwise"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private boolean checkEitherWords(String currentLine) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ArrayList\u003cString\u003e wordsToCheck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        wordsToCheck \u003d getAllTags(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        for (String word : wordsToCheck) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (currentLine.contains(word)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * Parses all keywords inputted by user into an arraylist."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     * @param userInput String user typed into CLI"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    private ArrayList\u003cString\u003e getAllTags(String userInput) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        while (userInput.contains(\"e/\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (!userInput.contains(\" \")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                userInput \u003d userInput.substring(2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                tags.add(userInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            int spaceIndex \u003d userInput.indexOf(\" \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String firstWord \u003d userInput.substring(0, spaceIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            userInput \u003d userInput.substring(spaceIndex).trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            firstWord \u003d firstWord.substring(2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            tags.add(firstWord);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 2,
      "poonchuanan": 81
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/GraphCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.DayMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.GraphDrawing;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class GraphCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static final int MAXIMUM_DAYS \u003d 7;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private DayMap dayMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public GraphCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        this.dayMap \u003d super.dayMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        new GraphDrawing(dayMap, 2500).drawGraph();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 1,
      "1-Karthigeyan-1": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displayHelpMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * Help command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displayHelpMessage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/InvalidCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayInvalidInputErrorMessage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public InvalidCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        displayInvalidInputErrorMessage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1-Karthigeyan-1": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayIncorrectDateTimeFormatEnteredMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": " * List command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ListCommand(LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.date \u003d LocalDateTime.now().toLocalDate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints the list of activities for the given day."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * If no date attribute was given by the user, prints the list of activities for today."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Prints error message if there is no activities for the given day."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.setLastSeenList(dayMap.getActivityList(date.atStartOfDay()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.getLastSeenList().printList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            System.out.println(\"There is no data for \" + date.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        //displaySavedMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 39,
      "e0425705": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/MoveActivityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayDeleteCommandNumberFormatExceptionMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayStringIndexOutOfBoundsExceptionMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static seedu.duke.Ui.displaySavedMessage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class MoveActivityCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private int indexToBeMovedFrom;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    private int indexToBeInsertedBelow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static String indexNotANumberMessage \u003d \"The index given is not a number!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static String indexOutOfBoundsMessage \u003d \"The index given is out of bounds!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public MoveActivityCommand(int indexToBeChanged, int indexToBeInsertedBelow) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.indexToBeMovedFrom \u003d indexToBeChanged;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.indexToBeInsertedBelow \u003d indexToBeInsertedBelow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        this.canBeChained \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dayMap.move(indexToBeMovedFrom, indexToBeInsertedBelow);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayDeleteCommandNumberFormatExceptionMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayStringIndexOutOfBoundsExceptionMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        displaySavedMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 30,
      "e0425705": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/KeywordNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class KeywordNotFoundException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/UserSetStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "//import java.io.;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.OutputStreamWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayExistingFileMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class UserSetStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static final String PATH \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void prepareNewSet(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String fileName \u003d userInput.substring(0, userInput.indexOf(\"/\") - 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        createNewTextFile(\"/\" + fileName + \".txt\", userInput.substring(userInput.indexOf(\"/\") - 1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void createNewTextFile(String fileName, String toTrim) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String filePath \u003d PATH + fileName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            boolean isFileCreated \u003d file.createNewFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            if (!isFileCreated) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayExistingFileMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        updateTextFile(filePath, toTrim);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void updateTextFile(String path, String toTrim) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            FileOutputStream fos \u003d new FileOutputStream(path);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(new OutputStreamWriter(fos));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            String[] activity \u003d toTrim.split(\"\u0026\u0026\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            for (String s : activity) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                if (s.startsWith(\" \")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    s \u003d s.substring(1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                if (s.endsWith(\" \")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    s \u003d s.substring(0, s.length() - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                bw.write(s);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (FileNotFoundException fileNotFoundException) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(\"There is no such set! Please create a new one first.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayExistingFileMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 65
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Userinfotextfilestorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class Userinfotextfilestorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static final String PATH \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static final String FILE_PATH \u003d PATH + \"/tp.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static ArrayList\u003cString\u003e update() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (Files.exists(Path.of(PATH))) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            File file \u003d new File(FILE_PATH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                while (s.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    String dataString \u003d s.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                s.close();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            return data;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                createDataFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                System.out.println(\"IO Exception found\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static void createDataFile() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        File file \u003d new File(Userinfotextfilestorage.PATH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        boolean isDirCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (isDirCreated) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            file \u003d new File(Userinfotextfilestorage.PATH + \"/tp.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public void save(String test) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String[] parts \u003d test.split(\",\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Files.write(Path.of(FILE_PATH), Arrays.asList(parts));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 58,
      "1-Karthigeyan-1": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/userprofile/CheckNewUser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.userprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class CheckNewUser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static final String PATH \u003d new File(\"\").getAbsolutePath();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static final String FILE_PATH \u003d PATH + \"/tp.txt\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static boolean isNewUser() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (!Files.exists(Path.of(FILE_PATH))) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(\"Hey there! We do not have a record of your profile. Please create one now! :)\\n\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/userprofile/Initialiseuser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.userprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.storage.Userinfotextfilestorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayIoExceptionMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class Initialiseuser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static Userinfo userInfo \u003d new Userinfo();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static String[] data \u003d new String[7];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static String input(String text) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.print(text);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return Duke.in.nextLine();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void createNewProfile() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        sendname();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            gender();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayIoExceptionMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static void sendname()  {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        data[0] \u003d input(\"What is your name?\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void gender() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        data[1] \u003d input(\"What is your gender (male/female)?\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        weight();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void weight() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        data[2] \u003d input(\"What is your weight in kg?\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        height();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void height() throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        data[3] \u003d input(\"What is your height in cm?\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        age();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void age() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        data[4] \u003d input(\"What is your age?\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        activityfactor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void activityfactor() throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        data[5] \u003d input(\"How active are you on a scale of 1-5? With 1 being least active and 5 being most active.\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        weightGoal();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void weightGoal() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        data[6] \u003d input(\"Do you want to lose/maintain/gain weight?\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        enterNewUserInfo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public static void enterNewUserInfo() throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Userinfo profile \u003d new Userinfo(data[0],data[1],data[2],data[3],data[4],data[5],data[6]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        profile.printNewUserCalculatedDetails();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        Initialiseuser.save(profile);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static void saveExistingUserInfo(Userinfo profile) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        Initialiseuser.save(profile);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public static void save(Userinfo profile) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Userinfotextfilestorage storage \u003d new Userinfotextfilestorage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        storage.save(profile.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    public static void loadProfile() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        String[] data \u003d new String[7];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        ArrayList\u003cString\u003e previous \u003d Userinfotextfilestorage.update();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            data[i] \u003d previous.get(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        userInfo \u003d new Userinfo(data[0], data[1], data[2], data[3], data[4], data[5], data[6]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            Initialiseuser.saveExistingUserInfo(userInfo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            displayIoExceptionMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 64,
      "chewyang": 16,
      "1-Karthigeyan-1": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/userprofile/Userinfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke.userprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static seedu.duke.ExceptionMessages.displayInvalidActivityFactorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class Userinfo {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected static String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected static String gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected static String weight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected static String height;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected static String age;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected static String activityfactor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    protected static String weightGoal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public Userinfo() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public Userinfo(String name, String gender, String weight, String height,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    String age, String activityfactor, String weightGoal) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.activityfactor \u003d activityfactor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        this.weightGoal \u003d weightGoal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getWeight() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getAge() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getactivityfactor() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return activityfactor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String getWeightGoal() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return weightGoal;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    private static DecimalFormat df2 \u003d new DecimalFormat(\"##.##\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public void printNewUserCalculatedDetails() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        double activityMultiple;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        switch (Integer.parseInt(this.getactivityfactor())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.2;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.375;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.55;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.725;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            activityMultiple \u003d 1.9;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            displayInvalidActivityFactorMessage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        double bmi;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        bmi \u003d (Double.parseDouble(this.getWeight())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                / (Double.parseDouble(this.getHeight()) * Double.parseDouble(this.getHeight())))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                * 10000;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        assert bmi \u003e 0 : \"bmi should be more than 0\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Your BMI is \" + df2.format(bmi));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        double calories;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (this.getGender().equals(\"female\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            calories \u003d ((10 * Double.parseDouble(this.getWeight()))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    + (6.25 * Double.parseDouble(this.getHeight()))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    - (5 * Double.parseDouble(this.getAge())) - 161)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    * activityMultiple;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            calories \u003d ((10 * Double.parseDouble(this.getWeight()))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    + (6.25 * Double.parseDouble(this.getHeight()))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    - (5 * Double.parseDouble(this.getAge())) + 5)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    * activityMultiple;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        assert calories \u003e 0 : \"calories should be greater than 0\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Your recommend daily calories intake is \" + calories + \" calories.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        if (this.getWeightGoal().equals(\"lose\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(\"To \" + this.getWeightGoal() + \" weight, you should consume \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    + (calories - 500) + \" calories instead.\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } else if (this.getWeightGoal().equals(\"gain\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(\"To \" + this.getWeightGoal() + \" weight, you should consume \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                    + (calories + 500) + \" calories instead.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jlifah"
        },
        "content": "            System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public void editUserInfo(String userInput) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        new Userinfo((userInput.substring(userInput.indexOf(\"n/\") + 2, userInput.indexOf(\"g/\") - 1)),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                (userInput.substring(userInput.indexOf(\"g/\") + 2, userInput.indexOf(\"w/\") - 1)),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                (userInput.substring(userInput.indexOf(\"w/\") + 2, userInput.indexOf(\"h/\") - 1)),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                (userInput.substring(userInput.indexOf(\"h/\") + 2, userInput.indexOf(\"a/\") - 1)),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                (userInput.substring(userInput.indexOf(\"a/\") + 2, userInput.indexOf(\"af/\") - 1)),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                (userInput.substring(userInput.indexOf(\"af/\") + 3, userInput.indexOf(\"goal/\") - 1)),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                userInput.substring(userInput.indexOf(\"goal/\") + 5));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Ui.drawDivider();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Noted, I have edited your user profile. Here are your new details: \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Name: \" + this.getName());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Gender: \" + this.getGender());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Weight: \" + this.getWeight());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Height: \" + this.getHeight());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Age: \" + this.getAge());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Activity: \" + this.getactivityfactor());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        System.out.println(\"Weight Goal: \" + this.getWeightGoal());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        printNewUserCalculatedDetails();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        return getName() + \",\" + getGender() + \",\" + getWeight() + \",\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jlifah"
        },
        "content": "                + getHeight() + \",\" + getAge() + \",\" + getactivityfactor() + \",\" + getWeightGoal();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jlifah": 149
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityAddTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.command.AddExerciseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.command.AddFoodCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class ActivityAddTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void createObjects(ActivityList dummyList) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple\", 50, false));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.addActivity(new Food(\"Banana\", 100, false));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple pie\", 55, false));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.addActivity(new Exercise(\"Juggle Apples\", 100, false));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void addActivityFood_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Food food \u003d new Food(\"Apple\", 50, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String output \u003d food.getString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[F] | Apple | 50\", output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void addActivityFood2_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        AddFoodCommand food \u003d new AddFoodCommand(\"Apple\", 50, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            food.execute();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void addActivityExercise_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Exercise exercise \u003d new Exercise(\"Running\", 450, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String output \u003d exercise.getString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[E] | Running | 450\", output);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void addActivityExercise2_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        AddExerciseCommand exercise \u003d new AddExerciseCommand(\"Running\", 450, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            exercise.execute();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 2,
      "e0425705": 53
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityChainTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class ActivityChainTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 12
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityEditTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0425705"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.command.EditExerciseCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import seedu.duke.command.EditFoodCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0425705"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0425705"
        },
        "content": "public class ActivityEditTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void createObjects(ActivityList dummyList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple\", 50, false));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.addActivity(new Food(\"Banana\", 100, false));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple pie\", 55, false));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.addActivity(new Exercise(\"Juggle Apples\", 100, false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    LocalDate date \u003d LocalDate.of(2020, Month.OCTOBER, 25);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    LocalDate date2 \u003d LocalDate.of(2020, Month.NOVEMBER, 10);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    LocalDate date3 \u003d LocalDate.of(2020, Month.DECEMBER, 11);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void createObjects2(DayMap dummyMap) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"rice with eggs\", 50, false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Exercise(\"run 2km\", 100, false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Exercise(\"run 10km\", 51, false));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"rice with tofu\", 101, false));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyMap.addActivity(date3.atStartOfDay(), new Food(\"rice with shit\", 51, false));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyMap.addActivity(date3.atStartOfDay(), new Food(\"rice with pork\", 101, false));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityFoodToExercise_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Activity activity \u003d new Exercise(\"jumping\", 900, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.insertActivity(0, activity);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[E] | jumping | 900, [F] | Banana | 100, [F] | Apple pie | 55, \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"[E] | Juggle Apples | 100\", dummyList.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityFoodToExercise2_success() throws NullPointerException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects2(dummyMap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        EditExerciseCommand exercise \u003d new EditExerciseCommand(0, \"jumping\", 900);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            exercise.execute();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityExerciseToFood_success() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Activity activity \u003d new Food(\"Pineapple\", 77, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.insertActivity(3, activity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[F] | Apple | 50, [F] | Banana | 100, [F] | Apple pie | 55, \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"[F] | Pineapple | 77\", dummyList.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityExerciseToFood2_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects2(dummyMap);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        EditFoodCommand food \u003d new EditFoodCommand(3, \"Pineapple\", 77);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            food.execute();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityExerciseToExercise_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Activity activity \u003d new Exercise(\"jumping\", 900, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.insertActivity(3, activity);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[F] | Apple | 50, [F] | Banana | 100, [F] | Apple pie | 55, \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"[E] | jumping | 900\", dummyList.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityExerciseToExercise2_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects2(dummyMap);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        EditExerciseCommand exercise \u003d new EditExerciseCommand(3, \"jumping\", 900);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            exercise.execute();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityFoodToFood_success() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Activity activity \u003d new Food(\"Pineapple\", 77, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        dummyList.insertActivity(2, activity);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        assertEquals(\"[F] | Apple | 50, [F] | Banana | 100, [F] | Pineapple | 77, \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0425705"
        },
        "content": "                + \"[E] | Juggle Apples | 100\", dummyList.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivityFoodToFood2_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        createObjects2(dummyMap);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        EditFoodCommand food \u003d new EditFoodCommand(2, \"Pineapple\", 77);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            food.execute();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    void editActivity_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String userInput0 \u003d \"list 2020-10-25\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Parser parser \u003d new Parser(userInput0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        parser.parseCommand();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        String userInput1 \u003d \"edita a f/ Pineapple c/ 77\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Parser parser1 \u003d new Parser(userInput1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Command command \u003d parser1.parseCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0425705"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        Assertions.assertThrows(NumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0425705"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0425705"
        },
        "content": "        });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0425705"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0425705"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0425705": 161
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityFindTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "public class ActivityFindTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    void createObjects(ActivityList dummyList) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple\", 50, false));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Banana\", 100, false));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple pie\", 55, false));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Exercise(\"Juggle Apples\", 100, false));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    void findActivityDescription_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        for (int i \u003d 0; i \u003c dummyList.getNumberOfActivities(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String currentLine \u003d dummyList.getActivity(i).toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String descriptionToCheck \u003d currentLine.substring(currentLine.indexOf(\"|\") + 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            descriptionToCheck \u003d descriptionToCheck.substring(0, descriptionToCheck.indexOf(\"|\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (descriptionToCheck.contains(\"Apple\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                output +\u003d currentLine + \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        assertEquals(\"[F] | Apple | 50 [F] | Apple pie | 55 [E] | Juggle Apples | 100 \", output);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    void findActivityCalorie_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        for (int i \u003d 0; i \u003c dummyList.getNumberOfActivities(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String currentLine \u003d dummyList.getActivity(i).toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            int calorieStartIndex \u003d currentLine.lastIndexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            String calorieToCheck \u003d currentLine.substring(calorieStartIndex).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            if (calorieToCheck.equals(\"100\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "                output +\u003d currentLine + \" \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "        assertEquals(\"[F] | Banana | 100 [E] | Juggle Apples | 100 \", output);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "poonchuanan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 4,
      "poonchuanan": 42
    }
  },
  {
    "path": "src/test/java/seedu/duke/ActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "class ActivityListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    protected ActivityList dummyList \u003d new ActivityList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    void createObjects(ActivityList dummyList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Apple\", 50, false));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Banana\", 100, false));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyList.addActivity(new Food(\"Orange\", 25, false));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    void removeActivity_validIndex_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyList.removeActivity(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"[F] | Apple | 50, [F] | Orange | 25\", dummyList.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    void clearList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        createObjects(dummyList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        dummyList.clearList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        assertEquals(0, dummyList.getNumberOfActivities());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 4,
      "1-Karthigeyan-1": 27
    }
  },
  {
    "path": "src/test/java/seedu/duke/AdvancedListingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.FindDescriptionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.exception.KeywordNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "class AdvancedListingTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date \u003d LocalDate.of(2020, Month.OCTOBER, 9);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date2 \u003d LocalDate.of(2020, Month.NOVEMBER, 10);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date3 \u003d LocalDate.of(2020, Month.DECEMBER, 11);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void createObjects(DayMap dummyMap) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"rice with eggs\", 50, false));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Exercise(\"run 2km\", 100, false));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Exercise(\"run 10km\", 51, false));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"rice with tofu\", 101, false));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date3.atStartOfDay(), new Food(\"rice with shit\", 51, false));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date3.atStartOfDay(), new Food(\"rice with pork\", 101, false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void listDate_andDeleteFromActivityListShown_successfully() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command listCommand \u003d new ListCommand(date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-10-09: [F] | rice with eggs | 50, [E] | run 2km | 100\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-10-09: [E] | run 2km | 100\", dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void deleteAllTasks_andExpect_NullPointerException_fromListCommand() throws KeywordNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command listCommand \u003d new ListCommand(date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-10-09: [E] | run 2km | 100\", dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dummyMap.getActivityList(date.atStartOfDay()).getActivity(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void findDescription_andDeleteFromActivityListShown_successfully() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command findCommand \u003d new FindDescriptionCommand(\"rice\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        findCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        findCommand.execute();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"[F] | rice with shit | 51, [F] | rice with pork | 101, [F] | rice with tofu | 101, \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                + \"[F] | rice with eggs | 50\", dummyMap.getLastSeenList().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command deleteCommand \u003d new DeleteCommand(2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"[F] | rice with shit | 51, [F] | rice with pork | 101, [F] | rice with eggs | 50\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.getLastSeenList().toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void deleteAllTasks_andExpect_NullPointerException_fromFindCommand() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command findCommand \u003d new FindDescriptionCommand(\"run\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        findCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        findCommand.execute();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"[E] | run 2km | 100\", dummyMap.getLastSeenList().toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        deleteCommand.execute();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(KeywordNotFoundException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            dummyMap.listActivitiesContaining(\"run\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 108
    }
  },
  {
    "path": "src/test/java/seedu/duke/DayMapTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": "class DayMapTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date \u003d LocalDate.of(2020, Month.AUGUST, 9);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date2 \u003d LocalDate.of(2020, Month.AUGUST, 10);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void createObjects(DayMap dummyMap) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Apple\", 50, false));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Banana\", 100, false));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Orange\", 25, false));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Apple2\", 51, false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Banana2\", 101, false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Orange2\", 26, false));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void listingCorrectKeyValueMatch() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09: [F] | Apple | 50, [F] | Banana | 100, [F] | Orange | 25\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-10: [F] | Apple2 | 51, [F] | Banana2 | 101, [F] | Orange2 | 26\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date2.atStartOfDay()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/GraphPropertyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "class GraphPropertyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private LocalDate date1 \u003d LocalDate.of(2020, Month.AUGUST, 9);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private LocalDate date2 \u003d LocalDate.of(2020, Month.MARCH, 12);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public DayMap setDummyMap(int days, int startCalories, LocalDate date, int divisor) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        int calories \u003d startCalories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dayMap \u003d new DayMap();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        generateDays(days, date, calories, dayMap, divisor);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        return dayMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    private void generateDays(int days, LocalDate date, int calories, DayMap dayMap, int divisor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        for (int i \u003d 0; i \u003c days; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            if ((i % divisor !\u003d 0) || (i \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                dayMap.addActivity(date.atStartOfDay(), new Food(\"Apple\", calories, false));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                date \u003d date.plusDays(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                calories +\u003d 100;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                dayMap.addActivity(date.atStartOfDay(), new Food(\"Apple\", calories - 500, false));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "                date \u003d date.plusDays(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void plotgraph_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap(10, 1800, date1, 4);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        GraphProperty hello \u003d new GraphProperty(dummyMap, 2000);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void plotgraph2_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap(7, 2200, date2, 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        GraphDrawing hello \u003d new GraphDrawing(dummyMap, 2300);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        hello.drawGraph();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void plotgraph3_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap(7, 2200, date2, 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        GraphDrawing hello \u003d new GraphDrawing(dummyMap, 3500);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        hello.drawGraph();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    public void plotgraph4_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        DayMap dummyMap \u003d setDummyMap(5, 2200, date2, 3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        GraphDrawing hello \u003d new GraphDrawing(dummyMap, 2000);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "        hello.drawGraph();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "1-Karthigeyan-1": 61
    }
  },
  {
    "path": "src/test/java/seedu/duke/MoveActivityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chewyang"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chewyang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chewyang"
        },
        "content": "public class MoveActivityCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date \u003d LocalDate.of(2020, Month.AUGUST, 9);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    LocalDate date2 \u003d LocalDate.of(2020, Month.AUGUST, 10);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void createObjects(DayMap dummyMap) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Apple\", 50, false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Banana\", 100, false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date.atStartOfDay(), new Food(\"Orange\", 25, false));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Apple2\", 51, false));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Banana2\", 101, false));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        dummyMap.addActivity(date2.atStartOfDay(), new Food(\"Orange2\", 26, false));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Tests if the result will be the same even if there are different white spaces."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void whiteSpace_parsingTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command listCommand \u003d new ListCommand(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09: [F] | Apple | 50, [F] | Banana | 100, [F] | Orange | 25\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Parser parser \u003d new Parser(\"move from/   3 below/ 1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command command \u003d parser.parseCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command.setData(dummyMap);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09: [F] | Apple | 50, [F] | Orange | 25, [F] | Banana | 100\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Parser parser2 \u003d new Parser(\"move from/3 below/  1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command command2 \u003d parser2.parseCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command2.setData(dummyMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        command2.execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09: [F] | Apple | 50, [F] | Banana | 100, [F] | Orange | 25\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Tests if a NumberFormatException will be thrown if the user enters wrong command format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void numberFormatExceptionThrown_ifIndexEnteredIsNotANumber() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command listCommand \u003d new ListCommand(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09: [F] | Apple | 50, [F] | Banana | 100, [F] | Orange | 25\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Parser parser \u003d new Parser(\"move from/a below/2\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(NumberFormatException.class, parser::parseCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     * Tests if both the index is within the boundaries."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chewyang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    void invalidCommand_ifIndexEnteredIsOutOfBounds() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        DayMap dummyMap \u003d new DayMap();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        createObjects(dummyMap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Command listCommand \u003d new ListCommand(date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.setData(dummyMap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        listCommand.execute();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        assertEquals(\"2020-08-09: [F] | Apple | 50, [F] | Banana | 100, [F] | Orange | 25\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chewyang"
        },
        "content": "                dummyMap.toString(date.atStartOfDay()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Parser parser \u003d new Parser(\"move from/3 below/5\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        parser.parseCommand().setData(dummyMap);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            parser.parseCommand().execute();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Parser parser2 \u003d new Parser(\"move from/5 below/2\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        parser2.parseCommand().setData(dummyMap);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        Assertions.assertThrows(NullPointerException.class, () -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chewyang"
        },
        "content": "            parser2.parseCommand().execute();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chewyang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chewyang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chewyang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chewyang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chewyang": 101
    }
  },
  {
    "path": "src/test/java/seedu/duke/NewUserAddTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jlifah"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import seedu.duke.userprofile.Userinfo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "public class NewUserAddTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    void addNewUserTest_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        Userinfo userinfo \u003d new Userinfo(\"Sam\",\"Female\",\"50\",\"130\",\"20\",\"2\",\"maintain\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        String output \u003d userinfo.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jlifah"
        },
        "content": "        assertEquals(output, \"Sam,Female,50,130,20,2,maintain\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jlifah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jlifah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jlifah": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "create new user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jlifah"
        },
        "content": "test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jlifah"
        },
        "content": "female"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jlifah"
        },
        "content": "63"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jlifah"
        },
        "content": "167"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jlifah"
        },
        "content": "30"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jlifah"
        },
        "content": "1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jlifah"
        },
        "content": "maintain"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "add f/ apple c/ 50"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "add f/ banana c/ 100"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "add e/ pushup c/ 10"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "add e/ jogging c/ 60"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "delete /all"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "1-Karthigeyan-1"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jlifah": 7,
      "1-Karthigeyan-1": 12
    }
  }
]
