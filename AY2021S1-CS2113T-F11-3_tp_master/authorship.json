[
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jia Ern | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhu Zeyu | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jane Ng | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jiayi Zhang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Yan An | [Github](https://github.com/Darticune) | [Portfolio](docs/team/yanAn.md)"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 1,
      "-": 7,
      "neojiaern": 1,
      "Jane-Ng": 1,
      "Darticune": 1
    }
  },
  {
    "path": "questions.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "[Q] da | [A] da"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1
    }
  },
  {
    "path": "src/main/java/Kaji.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Kaji {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private CardList cards;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Kaji() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards \u003d new CardList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showHelpList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        Storage.getFileContents(cards);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                c.execute(cards, ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.printEmptyLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                Storage.writeToFile(cards);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            } catch (InvalidInputException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                System.out.println(\"Invalid input given.\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                System.out.println(\"     Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        new Kaji().run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 8,
      "neojiaern": 2,
      "Jane-Ng": 33
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard to the schedule manager. \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Parameters: q:QUESTION | a:ANSWER\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String QUESTION_ANSWER_PREFIX \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String QUESTION_PREFIX \u003d \"q:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String ANSWER_PREFIX \u003d \"a:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final Card card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public AddCommand(String question, String answer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(CardList cards, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.addCard(card);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int cardCount \u003d cards.getCardCount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showCardAdded(cards.getCard(cardCount - 1), cardCount);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 4,
      "Jane-Ng": 31
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(CardList cards, Ui ui);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 10
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program. \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(CardList cards, Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 3,
      "Jane-Ng": 18
    }
  },
  {
    "path": "src/main/java/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of commands available. \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(CardList cards, Ui ui) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showHelpList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 21
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of flashcards available. \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(CardList cards, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d cards.getAllCards();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int cardCount \u003d cards.getCardCount();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showCardList(allCards, cardCount);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 3,
      "Jane-Ng": 23
    }
  },
  {
    "path": "src/main/java/commands/ReviseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " * Starts revision for a particular chapter."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class ReviseCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"revise\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Starts revision based on a particular chapter. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: CHAPTER_NAME\\n\" + \"Example: \" + COMMAND_WORD + \" Polymorphism\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed revision for %1$s.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_NO_CARDS_IN_CHAPTER \u003d \"You currently have no cards in %1$s.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_NO_CARDS_DUE \u003d \"You have no cards due for revision in %1$s today.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_ANSWER_PROMPT \u003d \"\\n[enter s to show answer]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_RATING_PROMPT \u003d \"How well did you do for this card?\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"[enter e(easy), m(medium), h(hard), c(cannot answer)]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String EASY \u003d \"e\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MEDIUM \u003d \"m\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String HARD \u003d \"h\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CANNOT_ANSWER \u003d \"c\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final Chapter toRevise;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public ReviseCommand(String toRevise) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.toRevise \u003d new Chapter(toRevise);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute(CardList cards, Ui ui) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d cards.getAllCards();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e repeatCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int cardCount \u003d cards.getCardCount();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_NO_CARDS_IN_CHAPTER, toRevise));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(\"The revision for \" + toRevise + \" will start now:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (Scheduler.isDeadlineDue(c.getDueBy())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.showToUser(\"\\nQuestion \" + count + \":\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.showCard(c);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                repeatCards \u003d rateCard(ui, repeatCards, c);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_NO_CARDS_DUE, toRevise));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        repeatRevision(ui, repeatCards, count);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SUCCESS, toRevise));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private ArrayList\u003cCard\u003e rateCard(Ui ui, ArrayList\u003cCard\u003e repeatCards, Card c) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d ui.getRating();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        boolean isInvalid \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (isInvalid) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            switch (input.toLowerCase()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case EASY:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                c.setDueBy(Scheduler.computeEasyDeadline(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case MEDIUM:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                c.setDueBy(Scheduler.computeMediumDeadline(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case HARD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                c.setDueBy(Scheduler.computeHardDeadline(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case CANNOT_ANSWER:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                repeatCards.add(c);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.showToUser(\"You have entered an invalid input, please try again.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                input \u003d ui.getRating();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return repeatCards;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private void repeatRevision(Ui ui, ArrayList\u003cCard\u003e cards, int count) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (cards.size() !\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            System.out.println(cards.size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cCard\u003e repeatCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            for (Card c : cards) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.showToUser(\"\\nQuestion \" + count + \":\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.showCard(c);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                repeatCards \u003d rateCard(ui, repeatCards, c);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            cards \u003d new ArrayList\u003c\u003e(repeatCards);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 112,
      "Darticune": 1
    }
  },
  {
    "path": "src/main/java/exception/InvalidFileFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class InvalidFileFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 4
    }
  },
  {
    "path": "src/main/java/exception/InvalidInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/manager/card/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package manager.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private int previousInterval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private LocalDate dueBy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Card(String question, String answer) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.dueBy \u003d LocalDate.now();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.previousInterval \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return \"[Q] \" + question;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return \"[A] \" + answer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public LocalDate getDueBy() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public int getPreviousInterval() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return previousInterval;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setDueBy(LocalDate newDueBy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueBy \u003d newDueBy;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return \"[Q] \" + question + \" | [A] \" + answer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 18,
      "Jane-Ng": 15,
      "Darticune": 8
    }
  },
  {
    "path": "src/main/java/manager/chapter/CardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class CardList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ArrayList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public CardList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public int getCardCount() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Card getCard(int cardIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards.get(cardIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public ArrayList\u003cCard\u003e getAllCards() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 29
    }
  },
  {
    "path": "src/main/java/manager/chapter/Chapter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class Chapter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String chapterName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Chapter(String chapterName) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return \"\u003c\" + chapterName + \"\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 14
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidInputException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String[] commandTypeAndArgs \u003d splitCommandTypeAndArgs(fullCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String commandType \u003d commandTypeAndArgs[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String commandArgs \u003d commandTypeAndArgs[1].trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareList(commandArgs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareAdd(commandArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case ReviseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareRevise(commandArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareExit(commandArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return prepareHelp(commandArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String[] splitCommandTypeAndArgs(String userCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String[] commandTypeAndParams \u003d userCommand.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (commandTypeAndParams.length !\u003d 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            commandTypeAndParams \u003d new String[]{commandTypeAndParams[0], \"\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return commandTypeAndParams;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareList(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareAdd(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(AddCommand.QUESTION_ANSWER_PREFIX, 2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String question \u003d parseQuestion(args[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String answer \u003d parseAnswer(args[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new AddCommand(question, answer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | InvalidInputException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String parseQuestion(String arg) throws InvalidInputException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!(arg.trim().toLowerCase().startsWith(AddCommand.QUESTION_PREFIX))) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String question \u003d arg.substring(2).trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (question.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String parseAnswer(String arg) throws InvalidInputException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!(arg.trim().toLowerCase().startsWith(AddCommand.ANSWER_PREFIX))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answer \u003d arg.substring(2).trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (answer.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Command prepareRevise(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return new ReviseCommand(commandArgs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareExit(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private static Command prepareHelp(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidInputException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parseQuestioninFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.QUESTION_PREFIX))) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String question \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (question.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parseAnswerinFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.ANSWER_PREFIX))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String answer \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (answer.isEmpty()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 38,
      "neojiaern": 11,
      "Jane-Ng": 86
    }
  },
  {
    "path": "src/main/java/scheduler/Scheduler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.lang.Math;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class Scheduler {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double EASY_MULTIPLIER \u003d 1.1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double MEDIUM_MULTIPLIER \u003d 2.2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double HARD_MULTIPLIER \u003d 4.4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final int MAX_INTERVAL \u003d 365;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean isDeadlineDue(LocalDate dueBy) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy.isBefore(getCurrentDate()) || dueBy.isEqual(getCurrentDate());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeEasyInterval(int previousInterval) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * EASY_MULTIPLIER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate computeEasyDeadline(int previousInterval) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeEasyInterval(previousInterval);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeMediumInterval(int previousInterval) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * MEDIUM_MULTIPLIER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate computeMediumDeadline(int previousInterval) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeMediumInterval(previousInterval);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeHardInterval(int previousInterval) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * HARD_MULTIPLIER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate computeHardDeadline(int previousInterval) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeHardInterval(previousInterval);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeDeckInterval(double totalMultiplier, int cardCount, int previousInterval) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        double averageMultiplier \u003d (totalMultiplier / cardCount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(averageMultiplier * previousInterval);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate computeDeckDeadline(double totalMultiplier, int cardCount, int previousInterval) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeDeckInterval(totalMultiplier, cardCount, previousInterval);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 76
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String FILE_PATHWAY \u003d \"questions.txt\";   // file pathway"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String QUESTION_ANSWER_PREFIX \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String QUESTION_PREFIX \u003d \"[Q]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String ANSWER_PREFIX \u003d \"[A]\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static void getFileContents(CardList cards) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            File f \u003d new File(FILE_PATHWAY);    // create a File for the given file path"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            Scanner s \u003d new Scanner(f);     // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String fileCommand \u003d s.nextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String[] args \u003d fileCommand.split(QUESTION_ANSWER_PREFIX, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String question \u003d Parser.parseQuestioninFile(args[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String answer \u003d Parser.parseAnswerinFile(args[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                Card card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                cards.addCard(card);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            System.out.println(\"The format of some commands in the file is invalid\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static void writeToFile(CardList cards) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(FILE_PATHWAY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.getCardCount(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            fw.write(cards.getCard(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 49
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.CANNOT_ANSWER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.EASY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.HARD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MEDIUM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_SHOW_ANSWER_PROMPT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_SHOW_RATING_PROMPT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String userCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        while (userCommand.trim().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            userCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return userCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(\"Welcome to Kaji!\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void printEmptyLine() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showCardAdded(Card card, int cardCount) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"Got it. I\u0027ve added this card:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(card);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (cardCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            out.println(\"Now you have \" + cardCount + \" card in the list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"Now you have \" + cardCount + \" cards in the list.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showCardList(ArrayList\u003cCard\u003e cards, int cardCount) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            out.println(\"There are no cards in your list.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"Here are the cards in your list:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (Card c : cards) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            out.println((cards.indexOf(c) + 1) + \".\" + c);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void showToUser(String message) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void showCard(Card c) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(c.getQuestion() + MESSAGE_SHOW_ANSWER_PROMPT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        getAnswerInput(c);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void getAnswerInput(Card c) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d in.nextLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (!input.equalsIgnoreCase(\"s\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            out.println(\"You have entered an invalid input, please try again.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            input \u003d in.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(c.getAnswer());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getRating() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(MESSAGE_SHOW_RATING_PROMPT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"Exiting the program...\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void showHelpList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"Here is a list of commands available:\" + \"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"1. \" + ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"2. \" + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"3. \" + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"4. \" + AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"5. \" + ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 15,
      "neojiaern": 36,
      "Jane-Ng": 58,
      "Darticune": 1
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_addCommandInvalidArgs_expectException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add \","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add wrong args format\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question and answer separator prefix"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:When is v1.0 due? a:15 Oct 2020\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question prefix"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add When is v1.0 due? | a:15 Oct 2020\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no answer prefix"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:When is v1.0 due? | 15 Oct 2020\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_listCommandWithArgs_expectException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String input \u003d \"list args\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(input));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_exitCommandWithArgs_expectException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String input \u003d \"exit args\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(input));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 41
    }
  },
  {
    "path": "src/test/java/scheduler/SchedulerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "class SchedulerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeEasyDeadline_newIntervalOverLimit_intervalUnchanged() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(333), Scheduler.computeEasyDeadline(333));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeEasyDeadline_newIntervalWithinLimit_increasedInterval() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(1), Scheduler.computeEasyDeadline(1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeMediumDeadline_newIntervalOverLimit_intervalUnchanged() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(333), Scheduler.computeMediumDeadline(333));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeMediumDeadline_newIntervalWithinLimit_increasedInterval() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(2), Scheduler.computeMediumDeadline(1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeHardDeadline_newIntervalOverLimit_intervalUnchanged() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(333), Scheduler.computeHardDeadline(333));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeHardDeadline_newIntervalWithinLimit_increasedInterval() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(4), Scheduler.computeHardDeadline(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeDeckDeadline_newIntervalOverLimit_intervalUnchanged() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(333), Scheduler.computeDeckDeadline(20, 1, 333));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeDeckDeadline_newIntervalWithinLimit_increasedInterval() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(20), Scheduler.computeDeckDeadline(20, 1, 1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void isDeadlineDue_deadlineIsDue_true() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertTrue(Scheduler.isDeadlineDue(Scheduler.getCurrentDate().minusDays(1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void isDeadlineDue_deadlineNotDue_false() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertFalse(Scheduler.isDeadlineDue(Scheduler.getCurrentDate().plusDays(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 62
    }
  }
]
