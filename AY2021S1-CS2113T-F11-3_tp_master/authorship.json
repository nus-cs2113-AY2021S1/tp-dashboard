[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    mainClassName \u003d \"Kaji\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    archiveBaseName \u003d \"kaji\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "Jane-Ng": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jia Ern | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhu Zeyu | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jane Ng | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jiayi Zhang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Yan An | [Github](https://github.com/Darticune) | [Portfolio](docs/team/yanAn.md)"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 1,
      "-": 7,
      "neojiaern": 1,
      "Jane-Ng": 1,
      "Darticune": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. [Introduction](#1-introduction)\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1.1. [Overview](#11-overview)\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1.2. [Purpose](#12-purpose)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1.3. [Scope](#13-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. [Setting Up](#2-setting-up)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2.1. [Prerequisites](#21-prerequisites)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2.2. [Setting up the project in your computer](#22-setting-up-the-project-in-your-computer)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "3. [Design](#3-design)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "3.1. [Architecture](#31-architecture)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4. [Implementation](#4-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4.1. [Print prompt feature](#41-print-prompt-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4.2. [Remove feature](#42-remove-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4.3. [Revise feature](#43-revise-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4.4. [List feature](#44-list-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4.5. [Add flashcard feature](#45-add-flashcard-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4.6. [Scheduler feature](#46-scheduler-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4.7. [History feature](#47-history-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.8. [Exclusion feature](#48-exclusion-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5. [Appendix: Requirements](#5-appendix-requirements)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.1. [Product scope](#51-product-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.1. [Target user profile](#511-target-user-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.2. [Value proposition](#512-value-proposition)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.2. [User Stories](#52-user-stories)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.3. [Use Cases](#53-use-cases)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.4. [Non-Functional Requirements](#54-non-functional-requirements)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.5. [Glossary](#55-glossary)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "6. [Appendix: Instructions for manual testing](#6-appendix-instructions-for-manual-testing)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 1.1. Overview"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 1.2. Purpose"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 1.3. Scope"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "This documentation describes the software architecture and software design decisions for the implementation of Kaji. The intended audience of this document is the developers, designers, and software testers of Kaji."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 2.1. Prerequisites"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* IntelliJ IDEA"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 2.2. Setting up the project in your computer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. Fork this repository, and clone the fork into your computer."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Open IntelliJ (if you are not in the welcome screen, click `File` → `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "3. Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    1. Click `Configure` → `Project Defaults` → `Project Structure`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    2. Click `New…` and set it to the directory of the JDK."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4. Click `Import Project` (or `Open or Import` in newer version of Intellij)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5. Locate the `build.gradle` file (not the root folder as you would do in a normal importing) and select it. Click `OK`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "If asked, choose to `Open as Project` (not `Open as File`)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "7. Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The main class is `Kaji.java`. It is responsible for:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Initializing the components in the correct sequence, and connects them up with each other at app launch."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Shutting down the components and invoking cleanup methods where necessary at exit."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The rest of the App consists of 8 components:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Access`: Keeps track of the access level of the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `UI`: The UI of the App."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Command`: Executes the different command types."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Common`: Contains common classes."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Manager`: Holds the data of the App in memory."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Paser`: Parses user input into specific command type."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Scheduler`: Schedules the revision schedule."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Storage`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "### 4.1. Print prompt feature"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "#### 4.1.1. Implementation"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`Ui` and `Access` facilitate the proposed print prompt feature. The `Access` class stores user\u0027s temporary "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "access level as a variable `Access#level`. Before any read command execution in `Kaji`, `Ui#showLevel(Access)` "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "method runs and prints user\u0027s current access level. "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`Access` are exposed in both the `GoCommand` class and `BackCommand` class as `Access#setChapterLevel()` and "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`Access#setModuleLevel()` respectively."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Class Diagram of print prompt](UML/printPrompt1.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is an example usage scenario and how the print prompt feature behaves at each step."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 1. The user launches the application. The `Access` will be initialized with the initial access level "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "which is the admin level."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 2. In the `Kaji`, the `Ui` will also be initialized, then `Kaji` calls `Ui#showLevel(Access)` to get "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "the access level from `Access` and prints the prompt."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is another example usage scenario and how the print prompt feature behaves at each step."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 1. The user executes the `GoCommand` to modify access level from admin to module. The `GoCommand` modifies "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`Access` via the `Access#setModuleLevel()` method. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 2. In the `Access` instance, `Access` call itself `Access#setLevel()` to modify the `Access#level`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "variable. "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 3. `Ui#showLevel(Access)` method therefore prints different prompt based on the modification in `Access`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following sequence diagram shows how the `GoCommand` modify `Access` and results in different prompt."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Sequence Diagram of print prompt](UML/printPrompt2.png)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 4.2. Remove feature"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### 4.2.1. Implementation"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove mechanism is executed by `RemoveCommand`. It extends from the abstract class `Command`. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#execute()` — checks the `Access` level of user and calls the respective remove methods."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#removeModule()` — removes module from list of modules based on the index provided and the chapters "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "and flashcards under it."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#removeChapter()` — removes chapter from list of chapter based on the index provided and "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "the flashcards under it."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#removeCard()` — removes flashcard from list of flashcards based on the index provided."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Given below is an example usage scenario and how the remove mechanism behaves at each step:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 1: The user launches the application and is currently in the module level. "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 2: The user executes `remove 1` command to delete the first module in the list of modules. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The `remove` command creates `RemoveCommand` which will then be executed. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 3: `RemoveCommand#execute` gets the module object based on the index provided and calls "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "`Storage#deleteDirectory` to delete the module folder as well as the chapters and flashcards under it. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 4.3. Revise feature"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### 4.3.1. Implementation"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The revise mechanism is executed by `ReviseCommand`. It extends from the abstract class `Command`. "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* ReviseCommand#execute() — oversees the entire revise process and calls the respective methods when necessary."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* ReviseCommand#getChapter() — gets Chapter "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* RemoveCommand#getCards() — removes chapter from list of chapter based on the index provided and "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "the flashcards under it."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* ReviseCommand#reviseCard() — removes flashcard from list of flashcards based on the index provided."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* ReviseCommand#addHistory() — adds the revision history to a storage to track past revisions."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* ReviseCommand#rateCard() — gets user input on difficulty of a flashcard."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* ReviseCommand#repeatRevision() — repeats revision for cards which user could not answer. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Given below is an example usage scenario and how the revise mechanism behaves at each step:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 1: The user launches the application and is currently in the module level."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 2: The user executes `revise 1` command to revise the first chapter in the module. The `revise` command creates `ReviseCommand` which will then be executed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 3: `ReviseCommand#execute` gets the chapter object based on the index provided as well as the flashcards under the particular chapter."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 4: Each flashcard will be shown to the user one by one and the `Ui#getInput` is called each time to get user input to rate the difficulty of the questions. "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 5: `ReviseCommand#repeatRevision` then repeats the revision session on cards which the user could not answer."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 6: `ReviseCommand#addHistory` will call `Storage#createHistory` and `Storage#saveHistory` to keep a record of the chapter revised so that the user can look back next time."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.5. Add flashcard feature"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.1. Implementation"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The add flashcard mechanism is facilitated by `AddCommand`. It extends from the abstract class `Command`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `AddCommand#addCard()` — Adds a new flashcard to a chapter."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Given below is an example usage scenario and how the add flashcard mechanism behaves at each step."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 1: The user is using the application and is currently in the chapter level."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 2: The user executes `add q:1+1 | a:2` command to add a flashcard with question `1+1` and answer `2`. The `add` command creates `AddCommand` which will then be executed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 3: `AddCommand#execute` gets the `CardList` object based on the chapter and add the flashcard to the `CardList` object."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.6. Scheduler feature"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 4.6.1. Implementation"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Darticune"
        },
        "content": "In KAJI, each `Chapter` stores a `CardList` of `Card`s, each with their own `int` attribute `previousInterval`. Each `Chapter` also has a `LocalDate` attribute named `dueBy` that determines when the `Chapter` is due for revision. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The Scheduler mechanism implements Spaced Repetition by computing the `deckInterval`, the mean (rounded off to the nearest integer) of the `previousInterval`s of every `Card` within the `Chapter`, and updates the `dueBy` attribute to `deckInterval` days after the day of revision."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Darticune"
        },
        "content": "`Scheduler` implements the following operations:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeEasyInterval()`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeMediumInterval()`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeHardInterval()`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeDeckInterval()`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeDeckDeadline()`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Darticune"
        },
        "content": "`Scheduler#computeEasyInterval()`, `Scheduler#computeMediumInterval()` and `Scheduler#computeHardInterval()` are exposed in the `ReviseCommand` class as `ReviseCommand#rateCard()` while `Scheduler#computeDeckDeadline()` is exposed as `ReviseCommand#execute()`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 4.6.2 Prerequisites"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* There must at least be one `Chapter` with at least one `Card` in the `CardList` attribute of said `Chapter`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 4.6.3 Example"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Given below is an example usage scenario and how the Scheduler mechanism behaves at each step when: "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Darticune"
        },
        "content": "`revise 1` is called in a `Module` that contains only one `Chapter` with three `Card`s in its `CardList` attribute and confirmation is given to proceed with revision. (For more details on revision, refer to [Revise feature](#43-Revise-feature))"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 1:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* The user enters `revise 1` within the `Module` and `ReviseCommand` is instantiated. "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Upon confirmation and check that `CardList` of the designated `Chapter` is not empty, `ReviseCommand` proceeds to create an `ArrayList\u003cCard\u003e` named `allCards` comprising of all `Card`s within in the `CardList`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 2:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* For each `Card` in `allCards`, `ReviseCommand#reviseCard()` is called upon completion of either `ReviseCommand#execute()` or `ReviseCommand#repeateRevision()`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This operation then calls `Scheduler#computeEasyInterval()`, `Scheduler#computeMediumInterval()` or `Scheduler#computeHardInterval()` depending on the user input to compute and update the new value of `previousInteral` for each card."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 3:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Upon completion of all revision, `ReviseCommand#execute()` will call `Scheduler#computeDeckDeadline()`, which in turn calls `Scheduler#computeDeckInterval()`. `Scheduler#computeDeckInterval()` computes `deckInterval`, the mean (rounded off to the nearest integer) of the `previousInterval`s of each `Card` in `allCards,` and returns it to `Scheduler#computeDeckDeadline()`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 4:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Using `deckInterval`, `Scheduler#computeDeckDeadline()` computes the new value of `dueBy` for the Chapter, which is then returned to `ReviseCommand#execute()`, where it will then update the value of `dueBy` for the `Chapter` that was just revised."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.8 Exclusion Feature"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Darticune"
        },
        "content": "##### 4.8.1 Implementation"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Darticune"
        },
        "content": "An ArrayList of `DueChapter`s comprising the `Chapter`s that are to be excluded from the scheduling is stored externally in a text file at relative path \"/data/admin/exclusions.txt\", and is maintained by `Storage` and `ExcludeCommand`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Darticune"
        },
        "content": "`Storage` implements the following relevant operations:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#appendModuleToExclusionFile()` - includes every `Chapter` in the specified `Module` to the exclusion text file."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#appendChapterToExclusionFile()` - include the specified `Chapter` to the exclusion text file."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#removeModuleFromExclusionFile()` - removes every `Chapter` in the specified `Module` from the exclusion text file."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#removeChapterFromExclusionFile()` - remove the specified `Chapter` from the exclusion text file."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#updateExclusionFile()` - writes the `ArrayList\u003cDueChapter\u003e` of excluded chapters into the exclusion text file."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#loadExclusionFile()` - retrieves the `ArrayList\u003cDueChapter\u003e` of excluded chapters from the exclusion text file."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 4.8.2 Prerequisites"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* The application must have read and write access to both the \"data/admin\" folder and to the file \"data/admin/exclusions.txt\" if the file already exists at excecution."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * If these requisites are not met, an ExclusionFileException will be thrown."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 4.8.3 Example"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Given below is an example usage scenario and how the remove mechanism behaves at each step:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 1: "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* The user launches the application with a database of flashcards without any exclusions. "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 2: "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* The user executes `exclude more` command to exclude a part of the database from Scheduling and specifies that a `Module` is to be excluded. "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* The `exclude` command calls `Storage#appendModuleToExclusionFile()` which in turn calls the `Storage#loadExclusionFile()`. "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#loadExclusionFile()` loads the existing list of excluded chapters, which is empty, as a `ArrayList\u003cDueChapter\u003e`. "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 3: "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#appendModuleToExclusionFile()` calls `Storage#loadChaptersFrom()` to create a `String[]` comprising the names of the `Chapter`s belonging to the specified `Module`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 4: "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#appendModuleToExclusionFile()` then creates each `DueChapter`s from each `String` and adds them to the `ArrayList\u003cDueChapter\u003e` if they do not already exist."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 5: "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#appendModuleToExclusionFile()` then calls `Storage#updateExclusionFile()` to store the updated `ArrayList\u003cDueChapter\u003e` into the exclusion text file."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 5. Appendix: Requirements"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.1. Product scope"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### 5.1.1. Target user profile"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* needs to have an effective study schedule"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* is comfortable with the usage of CLI applications"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### 5.1.2. Value proposition"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* implements Spaced Repetition for the user "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.2. User Stories"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "|v1.0|user|revise the flashcards by chapter|do my revision|"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "|v1.0|user|remove modules/chapters/flashcard|remove modules/chapters/flashcards that I no longer need from the scheduler|"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.3. Use Cases"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.4. Non-Functional Requirements"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 installed."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.5. Glossary"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* **CLI**: Command Line Interface"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 6. Appendix: Instructions for manual testing"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 36,
      "-": 25,
      "neojiaern": 143,
      "Jane-Ng": 15,
      "Darticune": 71
    }
  },
  {
    "path": "src/main/java/Kaji.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Kaji {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Access access;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Kaji(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Admin admin \u003d new Admin(storage.loadModule(ui));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access \u003d new Access(admin);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            storage.createAdmin(ui);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access \u003d new Access();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showHelpList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                ui.showLevel(access);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand, access);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                c.execute(ui, access, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            } catch (InvalidInputException | IncorrectAccessLevelException | IOException "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                     | IndexOutOfBoundsException | InvalidFileFormatException | ExclusionFileException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        new Kaji(\"data/admin\").run();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 4,
      "gua-guargia": 15,
      "neojiaern": 7,
      "Jane-Ng": 29,
      "Darticune": 2
    }
  },
  {
    "path": "src/main/java/access/Access.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package access;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class Access {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String adminLevel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String moduleLevel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String chapterLevel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected Chapter chapter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected Module module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected Admin admin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected boolean isAdminLevel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected boolean isModuleLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected boolean isChapterLevel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Access(Admin admin) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.admin \u003d admin;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Access() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getModuleLevel() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return moduleLevel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getLevel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return level;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Module getModule() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Chapter getChapter() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapter;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Admin getAdmin() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return admin;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setAdmin(Admin admin) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.admin \u003d admin;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setModule(Module module) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setChapter(Chapter chapter) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isAdminLevel() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return isAdminLevel;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isModuleLevel() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return isModuleLevel;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isChapterLevel() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return isChapterLevel;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setIsAdminLevel() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setIsModuleLevel() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isModuleLevel \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setIsChapterLevel() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isChapterLevel \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setModuleLevel(String moduleLevel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (isAdminLevel) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setGoModuleLevel(moduleLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setBackAdminLevel(moduleLevel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setGoModuleLevel(String moduleLevel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d moduleLevel;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d level + \"/\" + moduleLevel;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d new Module(moduleLevel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsModuleLevel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setBackAdminLevel(String moduleLevel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d adminLevel;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d moduleLevel;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsAdminLevel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setChapterLevel(String chapterLevel) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (isChapterLevel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setBackModuleLevel(chapterLevel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setGoChapterLevel(chapterLevel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setGoChapterLevel(String chapterLevel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d chapterLevel;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d level + \"/\" + chapterLevel;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d new Chapter(chapterLevel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsChapterLevel();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setBackModuleLevel(String chapterLevel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d adminLevel + \"/\" + moduleLevel;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d chapterLevel;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsModuleLevel();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 138,
      "neojiaern": 1,
      "Jane-Ng": 18
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_ACCESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CHAPTER_PARAMETERS \u003d \" CHAPTER_NAME\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String CHAPTER_MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a chapter to the module. \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Chapter 1\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MODULE_PARAMETERS \u003d \" MODULE_NAME\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MODULE_MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new module. \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2113T\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CARD_PARAMETERS \u003d \" q:QUESTION | a:ANSWER\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CARD_MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module / chapter / flashcard.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"           \" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"           \" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2113T\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" Chapter 1\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Got it. I\u0027ve added this %1$s:\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_COUNT \u003d \"Now you have %1$d %2$s(s) in the list.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String moduleOrChapter;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final String accessLevel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public AddCommand(String moduleOrChapter, String accessLevel) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleOrChapter \u003d moduleOrChapter;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.accessLevel \u003d accessLevel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public AddCommand(String question, String answer, String accessLevel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.accessLevel \u003d accessLevel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IncorrectAccessLevelException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!access.isAdminLevel() \u0026\u0026 !access.isModuleLevel() \u0026\u0026 !access.isChapterLevel()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    access.getLevel(), accessLevel));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (access.isChapterLevel()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result \u003d addCard(access, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else if (access.isAdminLevel()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            Module module \u003d new Module(moduleOrChapter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result \u003d addModule(access, storage, module);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            Chapter chapter \u003d new Chapter(moduleOrChapter, rateChapter(), storage, access);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result \u003d addChapter(access, storage, chapter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    access.getLevel(), accessLevel));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String addChapter(Access access, Storage storage, Chapter chapter) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Module newModule \u003d access.getModule();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ChapterList chapters \u003d newModule.getChapters();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters.addChapter(chapter);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int chapterCount \u003d chapters.getChapterCount();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setModule(newModule);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d storage.createChapter(chapter.getChapterName(), access.getModuleLevel());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result + prepareResult(CHAPTER, chapter.toString(), chapterCount);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String addCard(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        cards.addCard(card);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int cardCount \u003d cards.getCardCount();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage.saveCards(cards, access.getModule().getModuleName(), access.getChapter().getChapterName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return prepareResult(CARD, card.toString(), cardCount);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String addModule(Access access, Storage storage, Module module) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Admin newAdmin \u003d access.getAdmin();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ModuleList modules \u003d newAdmin.getModules();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules.addModule(module);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int moduleCount \u003d modules.getModuleCount();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setAdmin(newAdmin);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d storage.createModule(module.getModuleName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result + prepareResult(MODULE, module.toString(), moduleCount);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String prepareResult(String type, String content, int count) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_SUCCESS, type));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(content).append(\"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_COUNT, count, type));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String rateChapter() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (Ui.chooseToRateNewDeck()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return Ui.getChoiceOfNewDeckRating();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return \"N\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 85,
      "neojiaern": 18,
      "Jane-Ng": 36
    }
  },
  {
    "path": "src/main/java/commands/BackCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Back to up-level directory. \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (access.isChapterLevel()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            access.setChapterLevel(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            access.setModuleLevel(\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(\"Back command can only be called \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + \"at module and chapter level.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 26,
      "neojiaern": 4
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException, "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            IOException, InvalidFileFormatException, ExclusionFileException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 3,
      "neojiaern": 3,
      "Jane-Ng": 12,
      "Darticune": 2
    }
  },
  {
    "path": "src/main/java/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_ACCESS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MODULE_PARAMETERS \u003d \" MODULE_NUMBER MODULE_NAME\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MODULE_MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the module name.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 CS2113T\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String CHAPTER_PARAMETERS \u003d \" CHAPTER_NUMBER CHAPTER_NAME\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CHAPTER_MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the chapter name.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 Chapter 2\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String CARD_PARAMETERS \u003d \" FLASHCARD_NUMBER q:QUESTION | a:ANSWER\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CARD_MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the flashcard content.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3 q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \": Edit the module name / chapter name / flashcard content.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"           \" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"           \" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 CS2113T\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" 2 Chapter 2\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" 3 q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_BEFORE_EDIT \u003d \"The following %1$s will be edited:\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_AFTER_EDIT \u003d \"Edited %1$s:\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String CHAPTER \u003d \"chapter\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String CARD \u003d \"card\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int editIndex;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String moduleOrChapter;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final String accessLevel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public EditCommand(int editIndex, String moduleOrChapter, String accessLevel) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.moduleOrChapter \u003d moduleOrChapter;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.accessLevel \u003d accessLevel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public EditCommand(int editIndex, String question, String answer, String accessLevel) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.accessLevel \u003d accessLevel;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!access.isAdminLevel() \u0026\u0026 !access.isModuleLevel() \u0026\u0026 !access.isChapterLevel()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    access.getLevel(), accessLevel));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (access.isChapterLevel()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result \u003d editCard(access, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } else if (access.isAdminLevel()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result \u003d editModule(access, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result \u003d editChapter(access, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String editCard(Access access, Storage storage) throws InvalidInputException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert !question.isEmpty() || !answer.isEmpty() : \"The content for question and answer are both empty.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Card card \u003d cards.getCard(editIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareBeforeEdit(CARD, card.toString()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!(question.isEmpty())) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                card.setQuestion(question);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!(answer.isEmpty())) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                card.setAnswer(answer);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareAfterEdit(CARD, card.toString()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            storage.saveCards(cards, access.getModule().getModuleName(), access.getChapter().getChapterName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The flashcard number needs to be within the range \""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + \"of the total number of flashcards\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String editModule(Access access, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isAdminLevel() : \"Not admin level\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert !moduleOrChapter.isEmpty() : \"The module name is missing.\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Module module \u003d modules.getModule(editIndex);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            boolean success \u003d storage.renameModule(moduleOrChapter, module);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (success) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                result.append(prepareBeforeEdit(MODULE, module.toString()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                module.setModuleName(moduleOrChapter);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                result.append(prepareAfterEdit(MODULE, module.toString()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The module number needs to be within the range \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + \"of the total number of modules\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String editChapter(Access access, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert !moduleOrChapter.isEmpty() : \"The chapter name is missing.\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Chapter chapter \u003d chapters.getChapter(editIndex);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            boolean success \u003d storage.renameChapter(moduleOrChapter, access, chapter);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (success) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                result.append(prepareBeforeEdit(CHAPTER, chapter.toString()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                chapter.setChapterName(moduleOrChapter);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                result.append(prepareAfterEdit(CHAPTER, chapter.toString()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The chapter number needs to be within the range \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + \"of the total number of chapters\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String prepareBeforeEdit(String type, String content) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_BEFORE_EDIT, type));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(content).append(\"\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String prepareAfterEdit(String type, String content) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_AFTER_EDIT, type));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(content);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 6,
      "neojiaern": 16,
      "Jane-Ng": 152
    }
  },
  {
    "path": "src/main/java/commands/ExcludeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ExcludeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_OPTION_MORE \u003d \"more\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_OPTION_LESS \u003d \"less\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_SECONDARY_OPTION_CHAPTER \u003d \"chapter\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exclude\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Excludes or Includes Modules and Chapters from your \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"schedule.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Parameters: more(excludes from schedule)/less(includes into schedule)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + EXCLUDE_COMMAND_OPTION_MORE + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + EXCLUDE_COMMAND_OPTION_LESS + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ExcludeCommand(String type) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, ExclusionFileException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case EXCLUDE_COMMAND_OPTION_MORE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            addingToExclusion(ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case EXCLUDE_COMMAND_OPTION_LESS:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            removingFromExclusion(ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"The specified type for the exclude command is invalid.\\nThe only valid \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"types are \\\"\" + EXCLUDE_COMMAND_OPTION_MORE + \"\\\" and \\\"\" + EXCLUDE_COMMAND_OPTION_LESS + \"\\\".\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void addChapterToExclusion(Storage storage, Ui ui, String type) throws ExclusionFileException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getExcludedModuleName(type);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterName \u003d ui.getExcludedChapterName(moduleName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.appendChapterToExclusionFile(moduleName,chapterName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Chapter: \" + chapterName + \" could not be excluded as it does\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \" not exist.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void addModuleToExclusion(Storage storage, Ui ui, String type) throws ExclusionFileException,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getExcludedModuleName(type);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.appendModuleToExclusionFile(moduleName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Module: \" + moduleName + \" could not be excluded as it \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"does not exist.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void addingToExclusion(Ui ui, Storage storage) throws InvalidInputException, ExclusionFileException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String type \u003d ui.chooseModuleOrChapterExclusion(EXCLUDE_COMMAND_OPTION_MORE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            addModuleToExclusion(storage, ui, type);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            addChapterToExclusion(storage, ui, type);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void removeChapterFromExclusion(Storage storage, Ui ui, String type) throws ExclusionFileException,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getIncludedModuleName(type);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterName \u003d ui.getIncludedChapterName(moduleName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.removeChapterFromExclusionFile(moduleName,chapterName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Chapter: \" + chapterName + \" could not be included as it does\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \" not exist.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void removeModuleFromExclusion(Storage storage, Ui ui, String type) throws ExclusionFileException,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getIncludedModuleName(type);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.removeModuleFromExclusionFile(moduleName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Module: \" + moduleName + \"could not be included as it \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"does not exist.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void removingFromExclusion(Ui ui, Storage storage) throws ExclusionFileException, InvalidInputException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String type \u003d ui.chooseModuleOrChapterExclusion(EXCLUDE_COMMAND_OPTION_LESS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            removeModuleFromExclusion(storage, ui, type);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            removeChapterFromExclusion(storage, ui, type);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 114
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program. \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 3,
      "gua-guargia": 2,
      "Jane-Ng": 17
    }
  },
  {
    "path": "src/main/java/commands/GoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class GoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"go\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String CHAPTER_PARAMETERS \u003d \" CHAPTER_NAME\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MODULE_PARAMETERS \u003d \" MODULE_NAME\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Goes to chapter / module level. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"           \" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2113T\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" Chapter 1\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String moduleOrChapter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public GoCommand(String moduleOrChapter) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.moduleOrChapter \u003d moduleOrChapter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (access.isAdminLevel()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d goModule(access, storage, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(result);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d goChapter(access, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(result);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(\"Go command can only be called \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + \"at admin and module level.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String goChapter(Access access, Storage storage) throws IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        boolean isLevelExist \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cChapter\u003e allChapters \u003d chapters.getAllChapters();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (Chapter chapter : allChapters) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (moduleOrChapter.equalsIgnoreCase(chapter.getChapterName())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                access.setChapterLevel(moduleOrChapter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                isLevelExist \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    ArrayList\u003cCard\u003e allCards \u003d storage.loadCard(access.getModuleLevel(), chapter.getChapterName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    if (allCards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                        result \u003d \"This is a new chapter, you can try to add flashcards inside!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    chapter.setCards(allCards);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    access.setChapter(chapter);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    result \u003d \"The chapter file cannot be found.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!isLevelExist) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result \u003d \"Sorry, I cannot find this chapter, please add this chapter first\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String goModule(Access access, Storage storage, Ui ui) throws IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        boolean isLevelExist \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cModule\u003e allModules \u003d modules.getAllModules();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (Module module : allModules) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (moduleOrChapter.equalsIgnoreCase(module.getModuleName())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                access.setModuleLevel(moduleOrChapter);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                isLevelExist \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    ArrayList\u003cChapter\u003e chapters \u003d storage.loadChapter(module.getModuleName(), ui);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    if (chapters.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                        result \u003d \"This is a new module, you can try to add chapters inside!\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    module.setChapters(chapters);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    access.setModule(module);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    result \u003d \"The module folder cannot be found.\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!isLevelExist) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result \u003d \"Sorry, I cannot find this module, please add this module first\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 85,
      "neojiaern": 23
    }
  },
  {
    "path": "src/main/java/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of commands available. \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showHelpList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 18,
      "gua-guargia": 2,
      "neojiaern": 1,
      "Jane-Ng": 1
    }
  },
  {
    "path": "src/main/java/commands/HistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String DATE_PARAMETER \u003d \" DATE\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_DOES_NOT_EXIST \u003d \"You did not have any revision in the last session.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_EXIST \u003d \"Here is the revision completed in the session/in a day:\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \": Lists the revision completed in the session/in a day. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Parameters:\" + DATE_PARAMETER + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2020-10-10\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public HistoryCommand(String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String result \u003d listHistory(storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String listHistory(Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cHistory\u003e histories \u003d storage.loadHistory(date);;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        int count \u003d histories.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            result.append(MESSAGE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        result.append(MESSAGE_EXIST);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (History h : histories) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (histories.indexOf(h) \u003d\u003d count - 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                result.append(histories.indexOf(h) + 1).append(\".\").append(h);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                result.append(histories.indexOf(h) + 1).append(\".\").append(h).append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 60
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \": Shows a list of modules / chapters / flashcards available. \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_EXIST \u003d \"Here are the %s(s) in your list:\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_DOES_NOT_EXIST \u003d \"There are no %s(s) in your list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!access.isAdminLevel() \u0026\u0026 !access.isModuleLevel() \u0026\u0026 !access.isChapterLevel()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(\"List command can only be called at admin, \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + \"module and chapter level.\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (access.isChapterLevel()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result \u003d listCards(access);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result \u003d listChapters(access);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } else if (access.isAdminLevel()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result \u003d listModules(access);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String listCards(Access access) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d cards.getAllCards();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int cardCount \u003d cards.getCardCount();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return String.format(MESSAGE_DOES_NOT_EXIST, CARD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        result.append(String.format(MESSAGE_EXIST, CARD));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(\"\\n\").append(allCards.indexOf(c) + 1).append(\".\").append(c);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String listModules(Access access) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cModule\u003e allModules \u003d modules.getAllModules();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int moduleCount \u003d modules.getModuleCount();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (moduleCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return String.format(MESSAGE_DOES_NOT_EXIST, MODULE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        result.append(String.format(MESSAGE_EXIST, MODULE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (Module m : allModules) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(\"\\n\").append(allModules.indexOf(m) + 1).append(\".\").append(m);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String listChapters(Access access) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cChapter\u003e allChapters \u003d chapters.getAllChapters();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        int chapterCount \u003d chapters.getChapterCount();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (chapterCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return String.format(MESSAGE_DOES_NOT_EXIST, CHAPTER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        result.append(String.format(MESSAGE_EXIST, CHAPTER));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (Chapter c : allChapters) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            result.append(\"\\n\").append(allChapters.indexOf(c) + 1).append(\".\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    .append(c).append(\" \").append(c.translateRating());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (c.getDueBy() \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                result.append(\" (No due date)\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                result.append(\" (due by \").append(c.getDueBy()).append(\")\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 21,
      "gua-guargia": 6,
      "neojiaern": 27,
      "Jane-Ng": 58,
      "Darticune": 1
    }
  },
  {
    "path": "src/main/java/commands/ListDueCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ListDueCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"due\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all Chapters that are due by the execution \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"date.\\n\" + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String UNABLE_TO_LOAD_EMPTY_DATABASE \u003d \"Sorry, you do not have any flashcards in the database\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"yet. Please try this command again once you have added some flashcards!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e allChapters;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e dueChapters;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void loadAllChapters(Storage storage, Ui ui) throws InvalidFileFormatException, ExclusionFileException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allChapters \u003d storage.loadAllDueChapters(ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidFileFormatException(UNABLE_TO_LOAD_EMPTY_DATABASE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void setDueChapters() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (DueChapter chapter : allChapters) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            LocalDate deadline \u003d chapter.getChapter().getDueBy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (Scheduler.isDeadlineDue(deadline)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                dueChapters.add(chapter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidFileFormatException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        loadAllChapters(storage, ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        setDueChapters();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.printDueByTodayMessage(dueChapters.size(), COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.printDueChapters(dueChapters);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "neojiaern": 1,
      "Darticune": 59
    }
  },
  {
    "path": "src/main/java/commands/PreviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class PreviewCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"preview\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Forecasts the chapters due in the upcoming week.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String UNABLE_TO_LOAD_EMPTY_DATABASE \u003d \"Sorry, you do not have any flashcards in the database\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"yet. Please try this command again once you have added some flashcards!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e allChapters;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e dueChapters;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void loadAllChapters(Storage storage, Ui ui) throws ExclusionFileException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            allChapters \u003d storage.loadAllDueChapters(ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.showToUser(UNABLE_TO_LOAD_EMPTY_DATABASE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void setDueChapters(int increment) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (DueChapter chapter : allChapters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            LocalDate deadline \u003d chapter.getChapter().getDueBy();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (Scheduler.isDeadlineDueIn(deadline, increment)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                dueChapters.add(chapter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws ExclusionFileException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        loadAllChapters(storage, ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            dueChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueChapters(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                ui.printDueByTodayMessage(dueChapters.size(), COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                ui.printDueByIncrementMessage(dueChapters.size(), Scheduler.getIncrementedDate(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.printDueChapters(dueChapters);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 60
    }
  },
  {
    "path": "src/main/java/commands/RateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class RateCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rate\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \": Rates chapter based on a specified index in the list. \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters: INDEX\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed rating for this chapter.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"Sorry, rate command format is wrong\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \", please read following instruction: \\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_START_RATING \u003d \"Please rate this Chapter! \\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_RATING_USAGE \u003d \"You have the options of: Easy(E), Medium(M) or Hard(H) \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Would your choice be E, M or H?\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String EASY \u003d \"E\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MEDIUM \u003d \"M\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String HARD \u003d \"H\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected int ratingIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public RateCommand(int ratingIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.ratingIndex \u003d ratingIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Chapter getChapter(int ratingIndex, Access access) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Chapter chapter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapter \u003d access.getModule().getChapters().getChapter(ratingIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return chapter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new IndexOutOfBoundsException(\"The chapter is not found.\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!(access.isModuleLevel())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new IncorrectAccessLevelException(\"Rate command can only be called \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + \"at module level.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Chapter toRate \u003d getChapter(ratingIndex, access);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        rateCard(toRate, getChoiceOfDeckRating());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getChoiceOfDeckRating() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Ui ratingUi \u003d new Ui();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ratingUi.showToUser(MESSAGE_START_RATING + MESSAGE_RATING_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        while (!validDeckRating(userChoice)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ratingUi.showToUser(MESSAGE_FAIL + MESSAGE_RATING_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return userChoice.toUpperCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static boolean validDeckRating(String rating) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        switch (rating.toUpperCase()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case EASY:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case HARD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void rateCard(Chapter chapter, String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        switch (input.trim().toLowerCase()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case EASY:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapter.setRating(chapter.EASY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapter.setRating(chapter.MEDIUM);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case HARD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapter.setRating(chapter.HARD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapter.setRating(chapter.NO_RATING);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 95
    }
  },
  {
    "path": "src/main/java/commands/RemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    //private static Logger logger \u003d Logger.getLogger(\"RemoveCommandLog\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \": Removes module / chapter / flashcard based on a specified index in the list. \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: INDEX\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MODULE \u003d \"The module \u003c%1$s\u003e has been removed.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_REMAINING_MODULE \u003d \"You currently have %1$d module(s).\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX_MODULE \u003d \"The module is not found, please try again.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SUCCESS_CHAPTER \u003d \"The chapter \u003c%1$s\u003e has been removed.\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_REMAINING_CHAPTER \u003d \"You currently have %1$d chapter(s) in this module.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX_CHAPTER \u003d \"The chapter is not found, please try again.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SUCCESS_FLASHCARD \u003d \"The following flashcard has been removed:\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_REMAINING_FLASHCARD \u003d \"You currently have %1$d card(s) in this chapter.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX_FLASHCARD \u003d \"The flashcard is not found, please try again.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int removeIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public RemoveCommand(int removeIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.removeIndex \u003d removeIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throws IncorrectAccessLevelException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (access.isAdminLevel()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d removeModule(access, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(result);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d removeChapter(access, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(result);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (access.isChapterLevel()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d removeCard(access, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(result);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(\"Remove command can only be called at admin, \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + \"module and chapter level.\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String removeModule(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assert access.isAdminLevel() : \"Not admin level\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cModule\u003e allModules \u003d modules.getAllModules();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Module module \u003d allModules.get(removeIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            File directory \u003d new File(storage.getFilePath() + \"/\" + module.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            //logger.log(Level.INFO, \"Deleting module...\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            boolean isRemoved \u003d storage.deleteDirectory(directory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (!isRemoved) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                throw new IOException(\"There was a problem deleting module in directory.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result.append(String.format(MESSAGE_SUCCESS_MODULE, module.toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allModules.remove(removeIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result.append(String.format(MESSAGE_REMAINING_MODULE, allModules.size()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result.append(MESSAGE_INVALID_INDEX_MODULE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String removeChapter(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cChapter\u003e allChapters \u003d chapters.getAllChapters();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Chapter chapter \u003d allChapters.get(removeIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            File directory \u003d new File(storage.getFilePath() + \"/\" + access.getModule()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + \"/\" + chapter.toString() + \".txt\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            //logger.log(Level.INFO, \"Deleting chapter...\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            boolean isRemoved \u003d storage.deleteDirectory(directory);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (!isRemoved) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                //logger.log(Level.WARNING, \"problem deleting chapter\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                throw new IOException(\"There was a problem deleting chapter in directory.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result.append(String.format(MESSAGE_SUCCESS_CHAPTER, chapter.toString()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allChapters.remove(removeIndex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result.append(String.format(MESSAGE_REMAINING_CHAPTER, allChapters.size()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            //logger.log(Level.INFO, \"Chapter successfully deleted.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result.append(MESSAGE_INVALID_INDEX_CHAPTER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String removeCard(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cCard\u003e allCards \u003d cards.getAllCards();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Card card \u003d allCards.get(removeIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            //logger.log(Level.INFO, \"Deleting flashcard...\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            cards.removeCard(removeIndex);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result.append(MESSAGE_SUCCESS_FLASHCARD + card.toString() + \"\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + String.format(MESSAGE_REMAINING_FLASHCARD, cards.getCardCount()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            storage.saveCards(cards, access.getModule().getModuleName(), access.getChapter().getChapterName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            //logger.log(Level.INFO, \"Flashcard successfully deleted.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result.append(MESSAGE_INVALID_INDEX_FLASHCARD);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 133,
      "Jane-Ng": 1
    }
  },
  {
    "path": "src/main/java/commands/RescheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_ACCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reschedule\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String PARAMETERS \u003d \" CHAPTER_NUMBER DATE(yyyy-MM-dd)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reschedules the due date of a chapter.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2020-12-12\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_DATE \u003d \"%1$s has the same due date as what you entered: %2$s\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_BEFORE_RESCHEDULE \u003d \"%1$s has the following due date: %2$s\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_AFTER_RESCHEDULE \u003d \"It has been rescheduled to: %1$s\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String ACCESS_LEVEL \u003d \"module\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public RescheduleCommand(int index, LocalDate date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws IncorrectAccessLevelException, InvalidInputException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!access.isModuleLevel()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    access.getLevel(), ACCESS_LEVEL));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Chapter chapter \u003d chapters.getChapter(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            LocalDate dueBy \u003d chapter.getDueBy();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (dueBy !\u003d null \u0026\u0026 date.isEqual(dueBy)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                String result \u003d String.format(MESSAGE_SAME_DATE, chapter.getChapterName(), date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                ui.showToUser(result);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            chapter.setDueBy(date, storage, access);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(String.format(MESSAGE_BEFORE_RESCHEDULE, chapter.getChapterName(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    (dueBy \u003d\u003d null) ? \"No due date\" : dueBy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(String.format(MESSAGE_AFTER_RESCHEDULE, date));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            ui.showToUser(result.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The chapter number needs to be within the range \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + \"of the total number of chapters\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 73
    }
  },
  {
    "path": "src/main/java/commands/ReviseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " * Starts revision for a particular chapter."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class ReviseCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"revise\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Starts revision based on a particular chapter. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: INDEX_OF_CHAPTER\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed revision for %1$s.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_NO_CARDS_IN_CHAPTER \u003d \"You currently have no cards in %1$s.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_CHAPTER_NOT_DUE \u003d \"The chapter %1$s is not due for revision today.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_ANSWER_PROMPT \u003d \"\\n[enter s to show answer]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_RATING_PROMPT \u003d \"How well did you do for this card?\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"[enter e(easy), m(medium), h(hard), c(cannot answer)]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_REVISE_PROMPT \u003d \"Are you sure you want to revise this? (Y/N)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_START_REVISION \u003d \"The revision for %s will start now:\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String EASY \u003d \"e\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MEDIUM \u003d \"m\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String HARD \u003d \"h\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CANNOT_ANSWER \u003d \"c\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int reviseIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public ReviseCommand(int reviseIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.reviseIndex \u003d reviseIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Chapter getChapter(int reviseIndex, Access access) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter chapter;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapter \u003d access.getModule().getChapters().getChapter(reviseIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return chapter;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IndexOutOfBoundsException(\"The chapter is not found.\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private ArrayList\u003cCard\u003e getCards(Access access, Storage storage, Chapter toRevise)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e allCards;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allCards \u003d storage.loadCard(access.getModuleLevel(), toRevise.getChapterName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            toRevise.setCards(allCards);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new FileNotFoundException(\"File is not found.\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return allCards;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private int reviseCard(int count, Card c, Ui ui, ArrayList\u003cCard\u003e repeatCards) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.showToUser(\"\\nQuestion \" + count + \":\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.showCardRevision(c);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d ui.getInput(MESSAGE_SHOW_RATING_PROMPT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        rateCard(ui, repeatCards, c, input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return ++count;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter toRevise \u003d getChapter(reviseIndex, access);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!Scheduler.isDeadlineDue(toRevise.getDueBy())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            StringBuilder prompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            prompt.append(String.format(MESSAGE_CHAPTER_NOT_DUE, toRevise));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            prompt.append(MESSAGE_SHOW_REVISE_PROMPT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String input \u003d ui.getInput(prompt.toString()).trim().toUpperCase();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            boolean isInvalid \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            while (isInvalid) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                switch (input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                case \"Y\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    isInvalid \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                case \"N\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    input \u003d ui.getInput(\"You have entered an invalid input, please try again.\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                            .trim().toUpperCase();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d getCards(access, storage, toRevise);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e repeatCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int cardCount \u003d allCards.size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(\"\\nCard count: \" + cardCount);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_NO_CARDS_IN_CHAPTER, toRevise));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_START_REVISION, toRevise));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            count \u003d reviseCard(count, c, ui, repeatCards);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        repeatRevision(ui, repeatCards, count);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SUCCESS, toRevise));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        toRevise.setDueBy(Scheduler.computeDeckDeadline(toRevise.getCards()), storage, access);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        addHistory(ui, access, storage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private void addHistory(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        LocalDate date \u003d java.time.LocalDate.now();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storage.createHistory(ui, date.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String moduleName \u003d access.getModule().getModuleName();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String chapterName \u003d access.getModule().getChapters().getChapter(reviseIndex).getChapterName();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        History history \u003d new History(moduleName, chapterName, 100);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cHistory\u003e histories \u003d storage.loadHistory(date.toString());;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        histories.add(history);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storage.saveHistory(histories, date.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static ArrayList\u003cCard\u003e rateCard(Ui ui, ArrayList\u003cCard\u003e repeatCards, Card c, String input) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        boolean isInvalid \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (isInvalid) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            switch (input.trim().toLowerCase()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case EASY:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.EASY);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                c.setPreviousInterval(Scheduler.computeEasyInterval(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case MEDIUM:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.MEDIUM);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                c.setPreviousInterval(Scheduler.computeMediumInterval(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case HARD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.HARD);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                c.setPreviousInterval(Scheduler.computeHardInterval(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case CANNOT_ANSWER:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.CANNOT_ANSWER);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                repeatCards.add(c);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                input \u003d ui.getInput(\"You have entered an invalid input, please try again.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return repeatCards;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private void repeatRevision(Ui ui, ArrayList\u003cCard\u003e cards, int count) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (cards.size() !\u003d 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cCard\u003e repeatCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            for (Card c : cards) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                count \u003d reviseCard(count, c, ui, repeatCards);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            cards \u003d new ArrayList\u003c\u003e(repeatCards);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 18,
      "gua-guargia": 6,
      "neojiaern": 132,
      "Darticune": 22
    }
  },
  {
    "path": "src/main/java/commands/ShowRateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ShowRateCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showrate\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \": Shows rate percentage in chapter based on individual cards. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Only available at chapter level. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_NO_CARDS_IN_CHAPTER \u003d \"You currently have no cards in %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_SHOW_PERCENTAGE_PROMPT \u003d \"The percentage of card that \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"is labeled \u003c%1$s\u003e is: %2$.2f\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CANNOT_ANSWER \u003d \"cannot answer\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String EASY \u003d \"easy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MEDIUM \u003d \"medium\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double easyPercentage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double mediumPercentage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double hardPercentage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double cannotAnswerPercentage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int easyCard \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int mediumCard \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int hardCard \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int cannotAnswerCard \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int noCard \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Chapter chapter \u003d access.getChapter();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int cardCount \u003d computePercentage(chapter, ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (cardCount \u003d\u003d noCard) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_NO_CARDS_IN_CHAPTER, chapter));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(\"\\nCard count: \" + cardCount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, EASY, easyPercentage));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, MEDIUM, mediumPercentage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, HARD, hardPercentage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, CANNOT_ANSWER, cannotAnswerPercentage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int computePercentage(Chapter chapter, Ui ui) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d chapter.getCards().getAllCards();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int cardCount \u003d allCards.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return cardCount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            switch (c.getRating()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            case Card.EASY:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                easyCard++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            case Card.MEDIUM:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                mediumCard++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            case Card.HARD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                hardCard++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                cannotAnswerCard++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        assert ((cannotAnswerCard + hardCard + easyCard + mediumCard) \u003d\u003d cardCount) : \"Wrong card count\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        easyPercentage \u003d ((double)easyCard) / cardCount;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        mediumPercentage \u003d ((double)mediumCard) / cardCount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        hardPercentage \u003d ((double)hardCard) / cardCount;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        cannotAnswerPercentage \u003d ((double)cannotAnswerCard) / cardCount;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return cardCount;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 89
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String LINE \u003d \"---------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CHAPTER \u003d \"chapter\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CARD \u003d \"card\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCESS \u003d \"Sorry, you are currently at %1$s\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \", please go to %2$s level first.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_MISSING_ARGS \u003d \"The arguments are missing.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_INCORRECT_ACCESS \u003d \"%s command can only be called at admin, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"module and chapter level.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_EXTRA_ARGS \u003d \"There should not be any arguments for %s.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Sorry, %s command format is wrong\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \", please read following instruction: \\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 2,
      "neojiaern": 16
    }
  },
  {
    "path": "src/main/java/exception/ExclusionFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ExclusionFileException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ExclusionFileException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ExclusionFileException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 10
    }
  },
  {
    "path": "src/main/java/exception/IncorrectAccessLevelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class IncorrectAccessLevelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public IncorrectAccessLevelException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public IncorrectAccessLevelException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 10
    }
  },
  {
    "path": "src/main/java/exception/InvalidFileFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class InvalidFileFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public InvalidFileFormatException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public InvalidFileFormatException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 10
    }
  },
  {
    "path": "src/main/java/exception/InvalidInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public InvalidInputException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 10
    }
  },
  {
    "path": "src/main/java/manager/admin/Admin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class Admin {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected ModuleList modules;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //if there is no storage"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Admin() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules \u003d new ModuleList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //if there is storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Admin(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.modules \u003d new ModuleList(modules);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ModuleList getModules() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 23
    }
  },
  {
    "path": "src/main/java/manager/admin/ModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ModuleList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private final ArrayList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ModuleList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ModuleList(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cModule\u003e getAllModules() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getModuleCount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Module getModule(int moduleIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return modules.get(moduleIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 29,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/manager/card/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package manager.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private int previousInterval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private LocalDate dueBy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int rating;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int CANNOT_ANSWER \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int EASY \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int MEDIUM \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int HARD \u003d 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Card(String question, String answer) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setAnswer(answer);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setQuestion(question);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setDueBy(null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setPreviousInterval(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setRating(CANNOT_ANSWER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Card(String question, String answer, int previousInterval, int rating) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setAnswer(answer);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setQuestion(question);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setDueBy(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setPreviousInterval(previousInterval);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setRating(rating);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setAnswer(String answer) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return \"[Q] \" + question;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return \"[A] \" + answer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public LocalDate getDueBy() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public int getPreviousInterval() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return previousInterval;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setPreviousInterval(int newInterval) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.previousInterval \u003d newInterval;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setDueBy(LocalDate newDueBy) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueBy \u003d newDueBy;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return \"[Q] \" + question + \" | [A] \" + answer;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setRating(int rating) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 24,
      "neojiaern": 16,
      "Jane-Ng": 24,
      "Darticune": 11
    }
  },
  {
    "path": "src/main/java/manager/chapter/CardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class CardList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ArrayList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public CardList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public CardList(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e(cards);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void removeCard(int removeIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        cards.remove(removeIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public int getCardCount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Card getCard(int cardIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards.get(cardIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public ArrayList\u003cCard\u003e getAllCards() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 5,
      "neojiaern": 4,
      "Jane-Ng": 28
    }
  },
  {
    "path": "src/main/java/manager/chapter/Chapter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class Chapter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String chapterName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected CardList cards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected LocalDate dueBy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected int rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int NO_RATING \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int EASY \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int MEDIUM \u003d 2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int HARD \u003d 3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Chapter(String chapterName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setRating(NO_RATING);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new CardList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Chapter(String chapterName, LocalDate dueBy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setRating(NO_RATING);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.cards \u003d new CardList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.dueBy \u003d dueBy;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Chapter(String chapterName, String rating, Storage storage, Access access) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.cards \u003d new CardList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        setNewDeckRating(rating, storage, access);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setNewDeckRating(String rating, Storage storage, Access access) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (rating) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setRating(EASY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate().plusDays(1), storage, access);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"M\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setRating(MEDIUM);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate().plusDays(2), storage, access);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"H\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setRating(HARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate().plusDays(4), storage, access);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setRating(NO_RATING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate(), storage, access);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getChapterName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapterName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setChapterName(String chapterName) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public CardList getCards() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setCards(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new CardList(cards);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setDueBy(LocalDate dueBy, Storage storage, Access access) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.dueBy \u003d dueBy;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueBy.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String module \u003d access.getModule().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        storage.saveChapterDeadline(Scheduler.convertDueByToString(dueBy), module, chapterName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public LocalDate getDueBy() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapterName;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String translateRating() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String ratingInString;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        switch (rating) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case EASY:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ratingInString \u003d \"Easy\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ratingInString \u003d \"Medium\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case HARD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ratingInString \u003d \"Hard\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ratingInString \u003d \"N/A\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return ratingInString;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setRating(int rating) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 56,
      "neojiaern": 9,
      "Darticune": 50,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/manager/chapter/DueChapter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class DueChapter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private final String parentModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private final Chapter chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public DueChapter(String parentModule, Chapter chapter) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.parentModule \u003d parentModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Chapter getChapter() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return chapter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return \"Module: \" + parentModule + \"; Chapter: \" + chapter.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 20
    }
  },
  {
    "path": "src/main/java/manager/history/History.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package manager.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class History {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected String chapterName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected int percentage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public History(String moduleName, String chapterName, int percentage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.percentage \u003d percentage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return moduleName + \"/\" + chapterName + \" (\" + percentage + \"% completed)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 17
    }
  },
  {
    "path": "src/main/java/manager/module/ChapterList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ChapterList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private final ArrayList\u003cChapter\u003e chapters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ChapterList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ChapterList(ArrayList\u003cChapter\u003e chapters) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapters \u003d chapters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void addChapter(Chapter chapter) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters.add(chapter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cChapter\u003e getAllChapters() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getChapterCount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Chapter getChapter(int chapterIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return chapters.get(chapterIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 29,
      "neojiaern": 4
    }
  },
  {
    "path": "src/main/java/manager/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected ChapterList chapters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Module(String moduleName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters \u003d new ChapterList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setModuleName(String moduleName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ChapterList getChapters() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setChapters(ArrayList\u003cChapter\u003e chapters) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapters \u003d new ChapterList(chapters);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 31,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.BackCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ExcludeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.GoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ListDueCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.PreviewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.RateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.RemoveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ExcludeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ShowRateCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_EXTRA_ARGS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INCORRECT_ACCESS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_ARGS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String QUESTION_ANSWER_PREFIX \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String QUESTION_PREFIX \u003d \"q:\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String ANSWER_PREFIX \u003d \"a:\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String ADMIN_LEVEL \u003d \"admin\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String MODULE_LEVEL \u003d \"module\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String CHAPTER_LEVEL \u003d \"chapter\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static Command parse(String fullCommand, Access access)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String[] commandTypeAndArgs \u003d splitCommandTypeAndArgs(fullCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String commandType \u003d commandTypeAndArgs[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String commandArgs \u003d commandTypeAndArgs[1].trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Command Type: \" + commandType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareList(commandArgs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareAdd(commandArgs, access);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareRemove(commandArgs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case ReviseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareRevise(commandArgs, access);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareExit(commandArgs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return prepareHelp(commandArgs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEdit(commandArgs, access);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareBack(commandArgs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case GoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareGo(commandArgs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case ListDueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return prepareListDue(commandArgs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return prepareHistory(commandArgs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case RateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return prepareRate(commandArgs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case ShowRateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return prepareShowRate(commandArgs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case PreviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return preparePreview(commandArgs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case ExcludeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return prepareExclude(commandArgs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case RescheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareReschedule(commandArgs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"There is no such command type.\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareShowRate(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    ShowRateCommand.COMMAND_WORD) + ShowRateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return new ShowRateCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static RateCommand prepareRate(String commandArgs)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int chapterIndex;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    RateCommand.COMMAND_WORD) + RateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapterIndex \u003d Integer.parseInt(commandArgs) - 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new IncorrectAccessLevelException(\"The index for chapter should be an integer.\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + RateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return new RateCommand(chapterIndex);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private static Command prepareHistory(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            LocalDate date \u003d java.time.LocalDate.now();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            commandArgs \u003d date.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(commandArgs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidInputException(\"The date should be in the format of yyyy-MM-dd\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    + HistoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return new HistoryCommand(commandArgs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareGo(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    GoCommand.COMMAND_WORD) + GoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new GoCommand(commandArgs);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareBack(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    BackCommand.COMMAND_WORD) + BackCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new BackCommand();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String[] splitCommandTypeAndArgs(String userCommand) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String[] commandTypeAndParams \u003d userCommand.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (commandTypeAndParams.length !\u003d 2) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            commandTypeAndParams \u003d new String[]{commandTypeAndParams[0], \"\"};"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return commandTypeAndParams;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareList(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    ListCommand.COMMAND_WORD) + ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareAdd(String commandArgs, Access access)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (access.isChapterLevel()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + AddCommand.CARD_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareAddCard(commandArgs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + AddCommand.CHAPTER_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return prepareAddChapter(commandArgs);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else if (access.isAdminLevel()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + AddCommand.MODULE_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return prepareAddModule(commandArgs);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assert !access.isChapterLevel() \u0026\u0026 !access.isAdminLevel() \u0026\u0026 !access.isModuleLevel() : access.getLevel();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    AddCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareAddCard(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(QUESTION_ANSWER_PREFIX, 2);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String question \u003d parseQuestion(args[0]);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String answer \u003d parseAnswer(args[1]);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (question.isEmpty() || answer.isEmpty()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The content for question / answer is empty.\\n\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + AddCommand.CARD_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return new AddCommand(question, answer, CHAPTER_LEVEL);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The format for the add command is incorrect.\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + AddCommand.CARD_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareAddChapter(String commandArgs) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new AddCommand(commandArgs, MODULE_LEVEL);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareAddModule(String commandArgs) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new AddCommand(commandArgs, ADMIN_LEVEL);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Command prepareRemove(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int removeIndex;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(\"The index for module / chapter / flashcard is missing.\\n\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + RemoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            removeIndex \u003d Integer.parseInt(commandArgs) - 1;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(\"The index for module / chapter / flashcard should be an integer.\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + RemoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return new RemoveCommand(removeIndex);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEdit(String commandArgs, Access access)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (access.isChapterLevel() \u0026\u0026 commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + EditCommand.CARD_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (access.isAdminLevel() \u0026\u0026 commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + EditCommand.MODULE_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (access.isModuleLevel() \u0026\u0026 commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + EditCommand.CHAPTER_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (access.isChapterLevel()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEditCard(commandArgs);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } else if (access.isAdminLevel()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEditModule(commandArgs);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEditChapter(commandArgs);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assert !access.isChapterLevel() \u0026\u0026 !access.isAdminLevel() \u0026\u0026 !access.isModuleLevel() : access.getLevel();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    EditCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEditCard(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The flashcard number is missing.\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditCommand.CARD_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int editIndex \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] questionAndAnswer \u003d args[1].trim().split(QUESTION_ANSWER_PREFIX, 2);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String question \u003d parseQuestion(questionAndAnswer[0]);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String answer \u003d parseAnswer(questionAndAnswer[1]);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (question.isEmpty() \u0026\u0026 answer.isEmpty()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The content for question and answer are both empty.\\n\""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditCommand.CARD_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditCommand(editIndex, question, answer, CHAPTER_LEVEL);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The flashcard number needs to be an integer.\\n\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditCommand.CARD_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The format for the edit command is incorrect.\\n\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditCommand.CARD_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEditModule(String commandArgs)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The module number is missing.\\n\""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditCommand.MODULE_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The module name is missing.\\n\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditCommand.MODULE_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (containsCardPrefix(args[1].trim().toLowerCase())) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new IncorrectAccessLevelException(\"This command should be called at chapter level only.\\n\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int editIndex \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditCommand(editIndex, args[1].trim().toLowerCase(), ADMIN_LEVEL);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The module number needs to be an integer.\\n\""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditCommand.MODULE_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The format for the edit command is incorrect.\\n\""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditCommand.MODULE_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEditChapter(String commandArgs)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The chapter number is missing.\\n\""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditCommand.CHAPTER_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The chapter name is missing.\\n\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditCommand.CHAPTER_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (containsCardPrefix(args[1].trim().toLowerCase())) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new IncorrectAccessLevelException(\"This command should be called at chapter level only.\\n\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int editIndex \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditCommand(editIndex, args[1].trim().toLowerCase(), MODULE_LEVEL);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The chapter number needs to be an integer.\\n\""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditCommand.CHAPTER_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The format for the edit command is incorrect.\\n\""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditCommand.CHAPTER_MESSAGE_USAGE);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static boolean containsCardPrefix(String arg) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return arg.contains(\"q:\") || arg.contains(\"a:\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String parseQuestion(String arg) throws InvalidInputException {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!(arg.trim().toLowerCase().startsWith(QUESTION_PREFIX))) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"There needs to be a \\\"q:\\\" prefix before the question.\\n\""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + \"Example: \" + AddCommand.COMMAND_WORD + AddCommand.CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + \"         \" + EditCommand.COMMAND_WORD + EditCommand.CARD_PARAMETERS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return arg.substring(2).trim();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String parseAnswer(String arg) throws InvalidInputException {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!(arg.trim().toLowerCase().startsWith(ANSWER_PREFIX))) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"There needs to be a \\\"a:\\\" prefix before the answer.\\n\""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + \"Example: \" + AddCommand.COMMAND_WORD + AddCommand.CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + \"         \" + EditCommand.COMMAND_WORD + EditCommand.CARD_PARAMETERS);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return arg.substring(2).trim();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Command prepareRevise(String commandArgs, Access access)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (access.isAdminLevel() || access.isChapterLevel()) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(\"Revise command can only be called at module level.\\n\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(\"The index for chapter to revise is missing.\\n\""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int chapterIndex;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapterIndex \u003d Integer.parseInt(commandArgs) - 1;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(\"The index for chapter should be an integer.\\n\""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return new ReviseCommand(chapterIndex);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareExit(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private static Command prepareHelp(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String parseQuestionInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.QUESTION_PREFIX))) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Questions in the file should begin with [Q].\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String question \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (question.isEmpty()) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a question after [Q] in the file.\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String parseAnswerInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.ANSWER_PREFIX))) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Answers in the file should begin with [A].\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String answer \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (answer.isEmpty()) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a answer after [A] in the file.\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parsePreIntervalInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.PREVIOUS_INTERVAL_PREFIX))) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Previous intervals in the file should begin with [P].\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String preInterval \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (preInterval.isEmpty()) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a interval after [P] in the file.\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return preInterval;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static Command prepareListDue(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ListDueCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new ListDueCommand();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parseTaskNameInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String name \u003d arg.trim();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a name of the completed task.\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parsePercentInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String percent \u003d arg.trim().substring(0,3);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (percent.isEmpty()) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException("
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    \"There should be a number to indicate how many tasks have completed.\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return percent;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static String parseRatingInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.RATING_PREFIX))) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidFileFormatException(\"Answers in the file should begin with [R].\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String rating \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (rating.isEmpty()) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a rating after [R] in the file.\");"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static Command preparePreview(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String errorMessage \u003d \"There should not be any arguments for preview.\" + PreviewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(errorMessage);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new PreviewCommand();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static Command prepareExclude(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + ExcludeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new ExcludeCommand(commandArgs);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareReschedule(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The chapter number is missing.\\n\""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The due date is missing.\\n\""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int index \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            LocalDate dueDate \u003d LocalDate.parse(args[1].trim());"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (dueDate.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"You cannot enter a due date that is before today.\\n\");"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new RescheduleCommand(index, dueDate);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The chapter number needs to be an integer.\\n\""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The format for the reschedule command is incorrect.\\n\""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"The format for the date is incorrect.\\n\""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 86,
      "gua-guargia": 88,
      "neojiaern": 54,
      "Jane-Ng": 257,
      "Darticune": 35
    }
  },
  {
    "path": "src/main/java/scheduler/Scheduler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.lang.Math;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class Scheduler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double EASY_MULTIPLIER \u003d 1.1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double MEDIUM_MULTIPLIER \u003d 2.2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double HARD_MULTIPLIER \u003d 4.4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final int MAX_INTERVAL \u003d 365;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean isDeadlineDue(LocalDate dueBy) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (dueBy \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy.isBefore(getCurrentDate()) || dueBy.isEqual(getCurrentDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean isDeadlineDueIn(LocalDate dueBy, int increment) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (dueBy \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (increment \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return dueBy.isBefore(getCurrentDate()) || dueBy.isEqual(getCurrentDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return dueBy.isEqual(getCurrentDate().plusDays(increment));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String getIncrementedDate(int increment) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        LocalDate deadline \u003d getCurrentDate().plusDays(increment);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return convertDueByToString(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate parseDate(String savedDate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (savedDate.equals(\"Invalid Date\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return LocalDate.now();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return LocalDate.parse(savedDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String convertDueByToString(LocalDate dueBy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy.format(formatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeEasyInterval(int previousInterval) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * EASY_MULTIPLIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert newInterval \u003e 0 : \"Invalid new Interval\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static LocalDate computeEasyDeadline(Card c, int previousInterval) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeEasyInterval(previousInterval);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        c.setPreviousInterval(interval);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeMediumInterval(int previousInterval) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * MEDIUM_MULTIPLIER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert newInterval \u003e 0 : \"Invalid new Interval\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static LocalDate computeMediumDeadline(Card c, int previousInterval) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeMediumInterval(previousInterval);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        c.setPreviousInterval(interval);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeHardInterval(int previousInterval) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * HARD_MULTIPLIER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert newInterval \u003e 0 : \"Invalid new Interval\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static LocalDate computeHardDeadline(Card c, int previousInterval) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeHardInterval(previousInterval);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        c.setPreviousInterval(interval);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeDeckInterval(CardList cards) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        double averageInterval \u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (Card c : cards.getAllCards()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            averageInterval +\u003d c.getPreviousInterval();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        averageInterval /\u003d cards.getCardCount();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return (int) Math.round(averageInterval);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate computeDeckDeadline(CardList cards) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeDeckInterval(cards);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 7,
      "Darticune": 115
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String DELIMITER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String QUESTION_PREFIX \u003d \"[Q]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String ANSWER_PREFIX \u003d \"[A]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String PREVIOUS_INTERVAL_PREFIX \u003d \"[P]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String RATING_PREFIX \u003d \"[R]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_CREATED \u003d \"Successfully created new %1$s %2$s\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_EXISTS \u003d \"%1$s %2$s already exists\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_MODULE_CHAPTER \u003d \"Module: %1$s ; Chapter: %2$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String FILE \u003d \"file\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String DIR \u003d \"directory\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //create the folder --\u003e \u0027data/admin\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void createAdmin(Ui ui) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(\"Filepath: \" + filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dataDirExists \u003d f.getParentFile().exists();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dataDirCreated \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!dataDirExists) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            dataDirCreated \u003d f.getParentFile().mkdir();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_EXISTS, DIR.substring(0, 1).toUpperCase(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    f.getParentFile().getName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (dataDirCreated) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_CREATED, DIR, f.getParentFile().getName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean adminDirExists \u003d f.exists();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean adminDirCreated \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!adminDirExists) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            adminDirCreated \u003d f.mkdir();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_EXISTS, DIR.substring(0, 1).toUpperCase(), f));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (adminDirCreated) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_CREATED, DIR, f));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        createHistoryDir();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String createModule(String moduleName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean moduleDirExists \u003d f.exists();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean moduleDirCreated \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!moduleDirExists) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            moduleDirCreated \u003d f.mkdir();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result \u003d String.format(MESSAGE_EXISTS, DIR.substring(0, 1).toUpperCase(), f);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (moduleDirCreated) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result \u003d String.format(MESSAGE_CREATED, DIR, f);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String createChapter(String chapterName, String moduleName) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName + \"/\" + chapterName + \".txt\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean chapterFileExists \u003d f.exists();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean chapterFileCreated \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!chapterFileExists) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapterFileCreated \u003d f.createNewFile();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result \u003d String.format(MESSAGE_EXISTS, FILE.substring(0, 1).toUpperCase(), f);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (chapterFileCreated) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result \u003d String.format(MESSAGE_CREATED, FILE, f);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public ArrayList\u003cModule\u003e loadModule(Ui ui) throws FileNotFoundException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dirExists \u003d f.exists();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!dirExists) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String[] contents \u003d f.list();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(\"List of files and directories in the specified directory:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String content : contents) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (content.equals(\"exclusions.txt\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(content);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            modules.add(new Module(content));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public ArrayList\u003cChapter\u003e loadChapter(String module, Ui ui) throws FileNotFoundException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + module);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dirExists \u003d f.exists();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!dirExists) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cChapter\u003e chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String[] contents \u003d f.list();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (contents.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return chapters;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(\"List of files and directories in the specified directory:\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String content : contents) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (content.equals(\"dues\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String target \u003d content.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(content);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapters.add(new Chapter(target));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String[] loadChaptersFrom(String moduleName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File file \u003d new File(filePath + \"/\" + moduleName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        boolean moduleExists \u003d file.exists();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!moduleExists) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return file.list();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private String retrieveChapterDeadline(String moduleName, String chapterName) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName + \"/\" + \"dues\" + \"/\" + chapterName + \"due\" + \".txt\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (s.hasNext()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String deadline \u003d s.nextLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                s.close();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return deadline;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                s.close();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return \"Invalid Date\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return \"Does not exist\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private boolean missingDueFileCheck(String moduleName, String chapterName) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName + \"/\" + chapterName + \".txt\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return f.exists();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private ArrayList\u003cString\u003e loadExcludedFile() throws ExclusionFileException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File f \u003d new File(getFilePath() + \"/exclusions.txt\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (!f.exists()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                if (!f.createNewFile()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    throw new ExclusionFileException();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    return new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                //to read the card"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String entry \u003d s.nextLine();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                excludedChapters.add(entry);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return excludedChapters;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new ExclusionFileException();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e loadAllDueChapters(Ui ui) throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        //Loading in Excluded Chapters"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExcludedFile();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        //Loading in Modules"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        boolean moduleExists \u003d f.exists();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!moduleExists) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String[] modules \u003d f.list();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cDueChapter\u003e dueChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String module : modules) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (module.equals(\"exclusions.txt\")) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            //Loading in Chapters for each module"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            File f2 \u003d new File(filePath + \"/\" + module);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            boolean chapterExists \u003d f2.exists();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (!chapterExists) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String[] chapters \u003d f2.list();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (chapters.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return dueChapters;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            for (String chapter : chapters) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String target \u003d chapter.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String entry \u003d \"Module: \" + module + \"; Chapter: \" + target;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                if (excludedChapters.contains(entry)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String deadline \u003d retrieveChapterDeadline(module, target);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                assert !deadline.equals(null) : \"Invalid deadline retrieved\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                if (deadline.equals(\"Invalid Date\")) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    ui.showToUser(\"\\nThe chapter:\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    ui.showToUser(String.format(MESSAGE_MODULE_CHAPTER, module, target)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                            + \" has a corrupted deadline. Please revise it ASAP! It will be considered due!\\n\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    dueChapters.add(new DueChapter(module, new Chapter(target, Scheduler.parseDate(deadline))));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                } else if (deadline.equals(\"Does not exist\")) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    if (missingDueFileCheck(module, target)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                        deadline \u003d \"Invalid Date\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                        ui.showToUser(\"\\nThe chapter:\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                        ui.showToUser(String.format(MESSAGE_MODULE_CHAPTER, module, target)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                                + \" has a corrupted deadline. Please revise it ASAP! It will be considered due!\\n\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                        dueChapters.add(new DueChapter(module, new Chapter(target, Scheduler.parseDate(deadline))));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    dueChapters.add(new DueChapter(module, new Chapter(target, Scheduler.parseDate(deadline))));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueChapters;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void chapterExists(String moduleName, String chapterName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File file \u003d new File(filePath + \"/\" + moduleName + \"/\" + chapterName + \".txt\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void updateExclusionFile(ArrayList\u003cString\u003e excludedChapters) throws ExclusionFileException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            FileWriter fw \u003d new FileWriter(getFilePath() + \"/exclusions.txt\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            for (String excluded : excludedChapters) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                fw.write(excluded + \"\\n\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new ExclusionFileException(\"Sorry, there was an error in accessing the Exclusion File\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void appendModuleToExclusionFile(String moduleName) throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExcludedFile();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String[] chapters \u003d loadChaptersFrom(moduleName);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String chapter : chapters) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (chapter.equals(\"dues\")) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            chapter \u003d chapter.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String entry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapter;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (!excludedChapters.contains(entry)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                excludedChapters.add(entry);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void appendChapterToExclusionFile(String moduleName, String chapterName) throws FileNotFoundException,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExcludedFile();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        chapterExists(moduleName, chapterName);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String entry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapterName;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!excludedChapters.contains(entry)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            excludedChapters.add(entry);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void removeModuleFromExclusionFile(String moduleName) throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExcludedFile();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String[] chapters \u003d loadChaptersFrom(moduleName);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String chapter : chapters) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            chapter \u003d chapter.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String entry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapter;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            excludedChapters.remove(entry);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void removeChapterFromExclusionFile(String moduleName, String chapterName) throws FileNotFoundException,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExcludedFile();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        chapterExists(moduleName, chapterName);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String entry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapterName;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        excludedChapters.remove(entry);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cCard\u003e loadCard(String module, String chapter) throws FileNotFoundException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + module + \"/\" + chapter + \".txt\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean fileExists \u003d f.exists();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!fileExists) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            //to read the card"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String fileCommand \u003d s.nextLine();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            String[] args \u003d fileCommand.split(DELIMITER, 4);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String question \u003d Parser.parseQuestionInFile(args[0]);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String answer \u003d Parser.parseAnswerInFile(args[1]);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String interval \u003d Parser.parsePreIntervalInFile(args[2]);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                String rating \u003d Parser.parseRatingInFile(args[3]);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                int preInterval \u003d Integer.parseInt(interval);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                int intRating \u003d Integer.parseInt(rating);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                Card card \u003d new Card(question, answer, preInterval, intRating);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                cards.add(card);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void saveCards(CardList cards, String module, String chapter) throws IOException {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(getFilePath() + \"/\" + module + \"/\" + chapter + \".txt\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.getCardCount(); i++) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            int ratingInt \u003d cards.getCard(i).getRating();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            String ratingString \u003d Integer.toString(ratingInt);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            fw.write(cards.getCard(i).toString()"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + \" | [P] \" + cards.getCard(i).getPreviousInterval() + \" | [R] \""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + ratingString + \"\\n\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private boolean createChapterDue(String duePath, String dirPath) throws IOException {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File due \u003d new File(duePath);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File dir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        boolean isDirValid \u003d dir.exists() \u0026\u0026 dir.isDirectory();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!isDirValid) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return dir.mkdir() \u0026\u0026 due.createNewFile();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else if (!due.exists()) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return due.createNewFile();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void writeDeadlineToChapterDue(String dueBy, String chapterPath) throws IOException {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        FileWriter fw \u003d new FileWriter(chapterPath);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        fw.write(dueBy);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void saveChapterDeadline(String dueBy, String moduleName, String chapterName) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String dirPath \u003d filePath + \"/\" + moduleName + \"/\" + \"dues\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String duePath \u003d filePath + \"/\" + moduleName + \"/\" + \"dues\" + \"/\" + chapterName + \"due\" + \".txt\";"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (createChapterDue(duePath, dirPath)) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                writeDeadlineToChapterDue(dueBy, duePath);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                System.out.println(\"Unable to produce ChapterDue\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            System.out.println(\"Error in saving chapter deadline\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean deleteDirectory(File directoryToBeDeleted) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        File[] allContents \u003d directoryToBeDeleted.listFiles();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (allContents !\u003d null) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            for (File file : allContents) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                deleteDirectory(file);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return directoryToBeDeleted.delete();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean renameChapter(String newChapterName, Access access, Chapter chapter) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        File file \u003d new File(getFilePath()"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                + \"/\" + access.getModule()"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                + \"/\" + chapter.toString() + \".txt\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        boolean success \u003d file.renameTo(new File(getFilePath()"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                + \"/\" + access.getModule()"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                + \"/\" + newChapterName + \".txt\"));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return success;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean renameModule(String newModuleName, Module module) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        File file \u003d new File(getFilePath() + \"/\" + module.toString());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        boolean success \u003d file.renameTo(new File(getFilePath() + \"/\" + newModuleName));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return success;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void createHistoryDir() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        File f \u003d new File(\"data/history\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        boolean historyDirExists \u003d f.exists();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!historyDirExists) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void createHistory(Ui ui, String date) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            File f \u003d new File(\"data/history/\" + date + \".txt\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            boolean historyFileExists \u003d f.exists();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            boolean historyFileCreated \u003d false;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (!historyFileExists) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                historyFileCreated \u003d f.createNewFile();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                ui.showToUser(\"the file \" + date + \".txt already exists in history folder\\n\""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                        + \"It stores the revision completed in the session/in a day\\n\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (historyFileCreated) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                ui.showToUser(\"Successfully created new file \" + date + \".txt in history folder\\n\""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                        + \"It stores the revision completed in the session/in a day\\n\");"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            ui.showError(\"Error creating the file.\");"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void saveHistory(ArrayList\u003cHistory\u003e histories, String date) throws IOException {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/history/\" + date + \".txt\");"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (History h : histories) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            fw.write(h.toString());"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public ArrayList\u003cHistory\u003e loadHistory(String date) throws FileNotFoundException {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        File f \u003d new File(\"data/history/\" + date + \".txt\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        boolean fileExists \u003d f.exists();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!fileExists) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cHistory\u003e histories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            //to read the history"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String revision \u003d s.nextLine();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String[] args \u003d revision.split(\"\\\\(\", 2);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String[] name \u003d args[0].split(\"/\", 2);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String moduleName \u003d Parser.parseTaskNameInFile(name[0]);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String chapterName \u003d Parser.parseTaskNameInFile(name[1]);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String percent \u003d Parser.parsePercentInFile(args[1]);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                int percentage \u003d Integer.parseInt(percent);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                History history \u003d new History(moduleName, chapterName, percentage);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                histories.add(history);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return histories;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 125,
      "gua-guargia": 104,
      "neojiaern": 51,
      "Darticune": 218
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.BackCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ExcludeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.GoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ListDueCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.RateCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.RemoveCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ShowRateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_SHOW_ANSWER_PROMPT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.LINE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean chooseToRateNewDeck() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Would you like to rate this new Chapter? (Y/N)\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        Ui ratingUi \u003d new Ui();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        while (!userChoice.equalsIgnoreCase(\"Y\") \u0026\u0026 !userChoice.equalsIgnoreCase(\"N\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ratingUi.showToUser(\"Sorry, that is not a valid input. Please enter \\\"Y\\\" or \\\"N\\\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return userChoice.equalsIgnoreCase(\"Y\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean validDeckRating(String rating) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (rating.toUpperCase()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"M\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"H\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String getChoiceOfNewDeckRating() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Please rate this new Chapter!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"You have the options of: Easy(E), Medium(M) or Hard(H)\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Would your choice be E, M or H?\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        Ui ratingUi \u003d new Ui();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        while (!validDeckRating(userChoice)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return userChoice.toUpperCase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String userCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        while (userCommand.trim().isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            userCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return userCommand;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(\"Welcome to Kaji!\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void showLevel(Access access) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(access.getLevel());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(LINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void showToUser(String message) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void showToUserInline(String message) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        out.print(message);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void showCardRevision(Card c) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(c.getQuestion() + MESSAGE_SHOW_ANSWER_PROMPT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        getAnswerInput(c);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void getAnswerInput(Card c) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d in.nextLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (!input.trim().equalsIgnoreCase(\"s\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            out.println(\"You have entered an invalid input, please try again.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            input \u003d in.nextLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(c.getAnswer());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getInput(String prompt) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(prompt);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"Exiting the program...\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void showHelpList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"Here is a list of commands available:\" + \"\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"1.  \" + ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"2.  \" + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"3.  \" + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"4.  \" + AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"5.  \" + ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"6.  \" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(\"7.  \" + RemoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"8.  \" + GoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"9.  \" + BackCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"10. \" + ListDueCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"11. \" + HistoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"12. \" + RateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"13. \" + ShowRateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"14. \" + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(error);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void printDueChapters(ArrayList\u003cDueChapter\u003e dueChapters) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (DueChapter dueChapter : dueChapters) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"\\t-\" + dueChapter.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void printDueByTodayMessage(int listSize, String commandType) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"You have no tasks due today!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (commandType.equals(\"due\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                showToUser(\"Please use the \\\"preview\\\" command to view upcoming tasks or check back again tomorrow!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\"The chapter\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            System.out.print(\"s\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\" you have due by today \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"are:\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"is:\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void printDueByIncrementMessage(int listSize, String incrementedDueBy) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"You have no tasks due on \" + incrementedDueBy + \"!\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\"The chapter\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            System.out.print(\"s\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\" you have due by \" + incrementedDueBy + \" \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"are:\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"is:\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isValidExclusionChoice(String choice) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (choice.toLowerCase()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_CHAPTER:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String chooseModuleOrChapterExclusion(String type) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(ExcludeCommand.EXCLUDE_COMMAND_OPTION_MORE)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Would you like to exclude a module or chapter from your schedule?\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Would you like to include a module or chapter back into your schedule?\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String choice \u003d readCommand();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        while (!isValidExclusionChoice(choice)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String message \u003d \"That was not a valid choice. Please enter \\\"\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE + \"\\\" or \\\"\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_CHAPTER + \"\\\".\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(message);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            choice \u003d readCommand();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return choice.toLowerCase();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getExcludedModuleName(String type) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module will you like to be excluded from your schedule?\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module does the chapter you would like to be excluded belong to?\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getExcludedChapterName(String moduleName) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        showToUser(\"Which chapter in the Module: \" + moduleName + \" would you like to exclude?\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getIncludedModuleName(String type) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module will you like to include back into your schedule?\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module does the chapter you would like to be included belong to?\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getIncludedChapterName(String moduleName) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        showToUser(\"Which chapter in the Module: \" + moduleName + \" would you like to include?\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 11,
      "gua-guargia": 21,
      "neojiaern": 33,
      "Jane-Ng": 48,
      "Darticune": 141
    }
  },
  {
    "path": "src/test/java/commands/ReviseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class ReviseCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void rateCard_cannotAnswer_returnsSizeOne() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String question \u003d \"1+1?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String answer \u003d \"2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(ReviseCommand.rateCard(ui, cards, card, \"c\").size(), 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void rateCard_easy_returnsSizeZero() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String question \u003d \"1+1?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String answer \u003d \"2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(ReviseCommand.rateCard(ui, cards, card, \"e\").size(), 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 31
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_addCommandEmptyArgs_expectException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {\"add\", \"add \"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_addCardInvalidArgs_expectException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsChapterLevel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add wrong args format\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for question and answer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q: | a:\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for question"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q: | a:2\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for answer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:1+1 | a:\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question and answer separator prefix"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:1+1 a:2\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question prefix"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add 1+1 | a:2\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no answer prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:1+1 | 2\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void parse_goCommandEmptyArgs_expectException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        final String[] inputs \u003d {\"go\", \"go \"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void parse_backCommandWithArgs_expectException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        final String[] inputs \u003d {\"back args\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_listCommandWithArgs_expectException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String input \u003d \"list args\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_exitCommandWithArgs_expectException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String input \u003d \"exit args\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_removeCommandEmptyArgs_exception() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            \"remove\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            \"remove \","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, access));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_removeCommandNonIntegerArgs_exception() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d \"remove two\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, access));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editCommandEmptyArgs_expectException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {\"edit\", \"edit \"};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editCardInvalidArgs_expectException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsChapterLevel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit wrong args format\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // card number is not integer"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit two q:1*1 | a:\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no card number"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit q:1*1 | a:\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for question and answer"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1 q: | a:\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question and answer separator prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1 q:1*1 a:1\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question prefix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1 1+1 | a:\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no answer prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:1+1 | 2\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editModuleInvalidArgs_expectException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsAdminLevel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit wrong args format\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // module number is not integer"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit two cs2113\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no module number"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit cs2113\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for module name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editModuleInvalidCommandFormat_expectException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsAdminLevel();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String input \u003d \"edit 1 q:1+1 | a:\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editChapterInvalidArgs_expectException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit wrong args format\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // chapter number is not integer"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit two chapter 1\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no chapter number"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit chapter 1\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for chapter name"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editChapterInvalidCommandFormat_expectException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String input \u003d \"edit 1 q:1+1 | a:\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 19,
      "neojiaern": 17,
      "Jane-Ng": 146
    }
  },
  {
    "path": "src/test/java/scheduler/SchedulerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "class SchedulerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeEasyDeadline_newIntervalOverLimit_intervalUnchanged() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card c \u003d new Card(\"1+1\", \"2\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(333), Scheduler.computeEasyDeadline(c, 333));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeEasyDeadline_newIntervalWithinLimit_increasedInterval() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card c \u003d new Card(\"1+1\", \"2\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(1), Scheduler.computeEasyDeadline(c, 1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeMediumDeadline_newIntervalOverLimit_intervalUnchanged() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card c \u003d new Card(\"1+1\", \"2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(333), Scheduler.computeMediumDeadline(c, 333));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeMediumDeadline_newIntervalWithinLimit_increasedInterval() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card c \u003d new Card(\"1+1\", \"2\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(2), Scheduler.computeMediumDeadline(c,1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeHardDeadline_newIntervalOverLimit_intervalUnchanged() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card c \u003d new Card(\"1+1\", \"2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(333), Scheduler.computeHardDeadline(c, 333));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void computeHardDeadline_newIntervalWithinLimit_increasedInterval() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card c \u003d new Card(\"1+1\", \"2\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(LocalDate.now().plusDays(4), Scheduler.computeHardDeadline(c,1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void isDeadlineDue_deadlineIsDue_true() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertTrue(Scheduler.isDeadlineDue(Scheduler.getCurrentDate().minusDays(1)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void isDeadlineDue_deadlineNotDue_false() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertFalse(Scheduler.isDeadlineDue(Scheduler.getCurrentDate().plusDays(1)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 13,
      "Darticune": 46
    }
  }
]
