[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    mainClassName \u003d \"Kaji\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    archiveBaseName \u003d \"kaji\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "Jane-Ng": 3
    }
  },
  {
    "path": "data/history/2020-11-02.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "mod/chap (100% completed)"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Neo Jia Ern | [Github](https://github.com/neojiaern) | [Portfolio](team/neojiaern.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ng Shu Lin Jane | [Github](https://github.com/Jane-Ng) | [Portfolio](team/jane-ng.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Yan An | [Github](https://github.com/Darticune) | [Portfolio](team/darticune.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhang Jiayi | [Github](https://github.com/gua-guargia) | [Portfolio](team/gua-guargia.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhu Zeyu | [Github](https://github.com/Zhu-Ze-Yu) | [Portfolio](team/zhu-ze-yu.md)"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "Jane-Ng": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003ca name\u003d\"top\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "1. [\u003cb\u003eIntroduction\u003c/b\u003e](#1-introduction)\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1.1. [Overview](#11-overview)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1.2. [Purpose](#12-purpose)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1.3. [Scope](#13-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "2. [\u003cb\u003eSetting Up\u003c/b\u003e](#2-setting-up)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2.1. [Prerequisites](#21-prerequisites)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "2.2. [Setting Up the Project in your Computer](#22-setting-up-the-project-in-your-computer)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "2.3. [Verifying the Setup](#23-verifying-the-setup)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3. [\u003cb\u003eDesign (Architecture)\u003c/b\u003e](#3-design-architecture)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.1. [Ui Component](#31-ui-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.2. [Logic Component](#32-logic-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.3. [Model Component](#33-model-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.4. [Storage Component](#34-storage-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.5. [Common Classes](#35-common-classes)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "4. [\u003cb\u003eImplementation\u003c/b\u003e](#4-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.1. [Admin Features](#41-admin-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.1. [Add Module Feature](#411-add-module-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.2. [List Modules Feature](#412-list-modules-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.3. [Edit Module Name Feature](#413-edit-module-name-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.4. [Remove Module Feature](#414-remove-module-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.5. [Access Module Level Feature](#415-access-module-level-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.6. [Example of the Admin Feature](#416-example-of-the-admin-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.7. [Conclusion](#417-conclusion)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.2. [Module Features](#42-module-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.1. [Add Chapter Feature](#421-add-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.2. [List Chapters Feature](#422-list-chapters-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.3. [Edit Chapter Name Feature](#423-edit-chapter-name-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.4. [Remove Chapter Feature](#424-remove-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.5. [Access Chapter Level Feature](#425-access-chapter-level-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.6. [Return to Admin Level Feature](#426-return-to-admin-level-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.7. [Example of the Module Feature](#427-example-of-the-module-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.8. [Conclusion](#428-conclusion)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.3. [Chapter Features](#43-chapter-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.1. [Add Flashcard Feature](#431-add-flashcard-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2. [List Flashcards Feature](#432-list-flashcards-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.3. [Edit Flashcard Content Feature](#433-edit-flashcard-content-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.4. [Remove Flashcard Feature](#434-remove-flashcard-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.5. [Return to Module Level Feature](#435-return-to-module-level-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.6. [Check Overall Performance for a Chapter Feature](#436-check-overall-performance-for-a-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.7. [Example of the Chapter Feature](#437-example-of-the-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.8. [Conclusion](#438-conclusion)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4.4. [Revise Feature](#44-revise-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1. [Implementation](#441-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.5. [Scheduler feature](#45-scheduler-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.1. [View Due Chapters Feature](#451-view-due-chapters-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.2. [Preview Upcoming Dues Feature](#452-preview-upcoming-dues-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.3. [Exclusion Feature](#453-exclusion-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.4. [Reschedule Chapter Feature](#454-reschedule-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.5. [View Revision History Feature](#455-view-revision-history-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "5. [\u003cb\u003eAppendix: Requirements\u003c/b\u003e](#5-appendix-requirements)\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "5.1. [Product Scope](#51-product-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.1. [Target User Profile](#511-target-user-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.2. [Value Proposition](#512-value-proposition)\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.2. [User Stories](#52-user-stories)\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.3. [Use Cases](#53-use-cases)\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.4. [Non-Functional Requirements](#54-non-functional-requirements)\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.5. [Glossary](#55-glossary)\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "6. [\u003cb\u003eAppendix: Instructions for Manual Testing\u003c/b\u003e](#6-appendix-instructions-for-manual-testing)\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 1.1. Overview"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Kaji is a schedule manager that implements Spaced Repetition for students, optimised for use via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 1.2. Purpose"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "This document describes the architecture and system design for the application, Kaji."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 1.3. Scope"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "This documentation describes the software architecture and software design decisions for the implementation of Kaji. The intended audience of this document is the developers, designers, and software testers of Kaji."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "##### \u003ca href\u003d\"#top\"\u003eBack to Top ^\u003c/a\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 2.1. Prerequisites"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "1. JDK 11"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "2. IntelliJ IDEA"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "### 2.2. Setting up the Project in your Computer"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "1. Fork this [repository](https://github.com/AY2021S1-CS2113T-F11-3/tp), and clone the fork into your computer."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Open IntelliJ (if you are not in the welcome screen, click `File` → `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "3. Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    1. Click `Configure` → `Project Defaults` → `Project Structure`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    2. Click `New…` and set it to the directory of the JDK."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4. Click `Import Project` (or `Open or Import` in newer version of Intellij)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5. Locate the `build.gradle` file (not the root folder as you would do in a normal importing) and select it. Click `OK`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "If asked, choose to `Open as Project` (not `Open as File`)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "6. Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "### 2.3. Verifying the Setup"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "1. In an IntelliJ terminal, run `gradlew build`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "2. Navigate to the folder `build` \u003e `libs` by executing `cd build/libs/` and then run: `java -jar kaji.jar`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    1. To use **Kaji**, type a valid command into the terminal and press the enter key to run the command.\u003cbr\u003e "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    e.g. Typing `help` and pressing the enter key will show the list of commands available."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    2. Some example commands you can try to get familiar with **Kaji**:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        * `help`: Lists the commands that **Kaji** supports."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        * `add CS2113T`: Adds a module **CS2113T**."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        * `list`: Shows a list of modules available."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        * `exit`: Exits **Kaji**."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "##### \u003ca href\u003d\"#top\"\u003eBack to Top ^\u003c/a\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 3. Design (Architecture)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/Architecture.png\" width\u003d\"600\" alt\u003d\"Architecture Diagram\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Architecture Diagram of Kaji "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The main class is `Kaji.java`. It is responsible for:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Initializing the components in the correct sequence, and connects them up with each other at app launch."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Shutting down the components and invoking cleanup methods where necessary at exit."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The rest of the App consists of 8 components:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Access`: Keeps track of the access level of the user."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `UI`: The UI of the App."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Command`: Executes the different command types."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Common`: Contains common classes."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Manager`: Holds the data of the App in memory."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Paser`: Parses user input into specific command type."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Scheduler`: Schedules the revision schedule."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Storage`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.1. Ui Component "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/UiComponent.PNG\" width\u003d\"600\" alt\u003d\"Class Diagram of Ui Component\"/\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of Ui component "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The Ui component consists of a main class — `Ui.java`. While `Kaji` has `Ui` as its class variable so that it can instantiate a `Ui` object at each run of the program, the `Model`, `Logic` and `Storage` components have a dependency on the Ui component due to the need to take in user input and show the results of execution."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The Ui component is responsible for:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Taking in user input."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Printing result of execution for the different commands. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Printing error messages when certain exceptions occur. "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.2. Logic Component "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The Logic component consists of the `Parser`, `Command` and `Scheduler` classes as shown in the class diagram below:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/LogicClassDiagram.png\" width\u003d\"700\" alt\u003d\"Logic Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of Logic component  "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. `Kaji` uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "2. This results in a `Command` object which is executed by `Kaji`."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3. The command execution can affect the `Model` and `Storage` (e.g. adding a module)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4. The `Scheduler` is used in some command execution to schedule the due date of a chapter."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "5. The result of the command execution is passed to the `Ui`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `parse(\"edit 1 CS2113T\")` API call:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/LogicSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Logic Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of Logic component  "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Parser` and `EditCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.3. Model Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The Model,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* stores a Access object that holds temporary data for user\u0027s access level and contents of level being accessed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* stores a History object that saves revision history of current day."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* stores a DueChapter object that manages due chapter data."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* contains an Admin class that can be created and accessed by Access object. The Admin class contains a ModuleList object to manage data for modules."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* contains a Module class that can be created and accessed by Access object. The Module class contains a ChapterList object to manage data for chapters."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* contains a Chapter class that can be created and accessed by Access object. The Chapter class contains a CardList object to manage data for cards."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* contains a Card object that can be created and accessed by CardList. A Card object represents a flashcard with question, answer and master level of revision."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"UML/model.png\" width\u003d\"800\" alt\u003d\"Architecture Diagram of Model\"/\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Architecture Diagram of Model"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.4. Storage Component "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The Storage component consists of the `Storage`, `StorageWrite`, `StorageParser` and `StorageLoad` classes."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/storage.png\" width\u003d\"600\" alt\u003d\"Storage Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of Storage component  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The Storage component"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* can save the User\u0027s database of Modules, Chapters and Cards as directories, text files and text within the data directory respectively."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Can parse the contents of the database stored in the data directory back into the software to load the User\u0027s database back into KAJI as Modules, Chapters and Cards"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* can save the due dates for a Chapter into a text file within the dues directory located in the Module directory that contains it "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* can parse the due dates into LocalDate objects from the dues directory so that KAJI can load utilise them."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* can save the exclusions from the scheduling feature into a text file \"exclusions.txt\" within the \"admin\" directory."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* can parse the exclusions into an ArrayList\u003cString\u003e so that KAJI can determine which chapters are excluded."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.5. Common Classes"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "##### \u003ca href\u003d\"#top\"\u003eBack to Top ^\u003c/a\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "This section will describe the significant details of how the features in **Kaji** are being implemented."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.1. Admin Features"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[summary + scenario]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.1. Add Module Feature"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The add modules feature allows the user to create new modules at Admin level."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`AddModuleCommand` facilitates the proposed add module feature. It extends `AddCommand` with an `AddCommand#prepareResult()` method. This method formates message about the result of the action to user in `Ui`. "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Shown as the class diagram below, because of the inheritance of `AddCommand`, `Command` and `AddModuleCommand`, `Kaji` is able to execute the operation `AddModuleCommand#excute()`. "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"UML/AddModuleCommandClass.png\" width\u003d\"800\" alt\u003d\"Class Diagram of add module command\"/\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class Diagram of add module command"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is an example usage scenario at Admin level and how the add module feature behaves at each step:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: The user is currently at admin level and wants to add a new module CS2113 and enters `add CS2113` command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: The `add` command creates `AddModuleCommand` which will then be executed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: The `AddModuleCommand` object creates a new `Module` object with the `Module#moduleName` of CS2113. "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: The new `CS2113 : Module` object will be passed into the `AddModuleCommand#addModule()` with `Access` and `Storage`."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: The `AddModuleCommand#addModule()` gets the current `Admin` object via `Access#getAdmin()` method, then it adds the new `CS2113: Module` object into the `Admin#ModuleList`. "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 6: The new `Admin` object with the `CS2113: Module` object is updated to `Access` via the method `Access#setAdmin(Admin)`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 7: The new `Module` is updated in the folder by executing the `Storage#createModule()`. A \u0027CS2113\u0027 folder is created under the \u0027data/admin\u0027 folder."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 8: The `AddModuleCommand#addModule()` method returns a result message to the `AddModuleCommand#execute()` method which uses `Ui#showToUser()` to print the success message."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows how the add module command feature works:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"UML/AddModuleCommand.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of add module command\"/\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of add module command "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.2. List Modules Feature"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list modules feature allows the user to list all modules in admin level "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list modules mechanism is facilitated by `ListModulesCommand`. It extends from the abstract class `ListCommand`. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListModulesCommand#execute()` — oversees entire execution for listing modules."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListModulesCommand#listModules()` — gets and lists all modules in admin level."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "For instance, the user wants to list all modules available in `admin`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 1: The user is currently in `admin` level. "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 2: The user enters `list` command to list all modules in `admin` level. "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The following sequence diagram shows how the list modules feature works:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "  \u003cimg src\u003d\"UML/listmod_seq_diagram.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of List Modules\"/\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of List Modules"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.3. Edit Module Name Feature"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit module name feature allows the user to edit the name of any existing module."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can edit the name of an existing module with the `edit` command, which follows the following format: `edit MODULE_INDEX MODULE_NAME`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit module name feature is facilitated by `ModuleList` and `Module`. The list of user\u0027s modules are stored internally as `ModuleList`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `ModuleList#getModule()` - Gets a module based on the specified index from the list of modules."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Module#setModuleName()` — Sets the name of the module."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the edit module name feature:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/EditModuleClassDiagram.png\" width\u003d\"800\" alt\u003d\"Edit Module Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of edit module name feature  "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to edit the module `CS2113`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: The user is currently in `admin` level."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: The user enters `edit 1 CS2113T` command to edit the first module in the list of modules — which in this case is `CS2113`."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: The user input is parsed by `Parser`, which results in a new `EditModuleCommand` object."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: `EditModuleCommand` is executed and calls the method `EditModuleCommand#editModule()`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: `EditModuleCommand#editModule()` gets the module based on the index provided by the method `ModuleList#getModule()`."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 6: The module name is edited to `CS2113T` by the method `Module#setModuleName()`."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 7: The result message from `EditModuleCommand#editModule()` is returned to `EditModuleCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the edit module name feature works:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/EditModuleSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Edit Module Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of edit module name feature"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Admin` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.4. Remove Module Feature"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove module feature allows the user to remove a module by specifying the index of the module in the list. "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove module mechanism is facilitated by `RemoveModuleCommand`. It extends from the abstract class `RemoveCommand`. "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveModuleCommand#execute()` — oversees entire execution for removing a module."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveModuleCommand#removeModule()` — removes module from list of modules including the chapters and flashcards under it."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#prepareResult()` — prepares the resulting message of the execution."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to start a remove the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: The user is currently in `admin` level. "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: The user enters `remove 1` command to delete the first module in the list of modules — which in this case is `CS2113T`. The `remove` command creates `RemoveModuleCommand` which will then be executed. "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 3: `RemoveModuleCommand#execute` gets the `module` based on the index provided and passes it to `Storage#deleteDirectory` to delete the module folder as well as the chapters and flashcards under it. "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the remove module feature:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/RemoveModuleCommandClassDiagram.png\" width\u003d\"800\" alt\u003d\"Class Diagram of Remove Module\"/\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of remove module"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The following sequence diagram shows how the remove module feature works:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/RemoveModuleCommandSeqDiagram.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of Remove Module\"/\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of remove module  "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.5. Access Module Level Feature"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The go modules feature allows the user to access the existing module from Admin level."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`GoModuleCommand` class facilitates the proposed access module level feature. It extends `GoCommand` class. "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `GoModuleCommand#execute()` -- Inherits from the abstract `GoCommand`. It is a override to calls `GoModuleCommand#goModule()` and print message to user."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `GoModuleCommand#goModule()` -- Accesses a new module level from admin level based on the index entered by user. If the index is out of bounds, KAJI returns an error message to user. Otherwise, this operation returns a successful message to the `GoModuleCommand#execute` operation."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Shown as the class diagram below, with the inheritance of `GoCommand` and `Command`, `Kaji` is able to execute the operation `GoModuleCommand#execute()` directly. "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"UML/AccessModuleCommandClass.png\" width\u003d\"800\" alt\u003d\"Class Diagram of go module command\"/\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class Diagram of go module command"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is an example usage scenario at Admin level and how the access module level feature behaves at each step:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: The user is currently at admin level and wants to access a module level named \u0027CS2113\u0027. "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: The user enters `go 1` command because module named \u0027CS2113\u0027 is first item on displayed list. This example is based on the assumption that the module \u0027CS2113\u0027 already has been added."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: The `go` command creates `GoModuleCommand` which will then be executed."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: `GoModuleCommand#goModule()` gets the module via the method `ModuleList#get(int)` based on the index parsed by `GoCommandParser`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "          "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: User\u0027s current access level is set to `module` level and a new temporary `CS2113` module object is created via the method `Access#setModule(Module)`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 6: `GoModuleCommand#execute()` prints the successful message to the user via `Ui#showToUser()` method."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows how the add chapter command feature works:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"UML/AccessModuleCommand.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of add chapter command\"/\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of add chapter command "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "##### \u003ca href\u003d\"#top\"\u003eBack to Top ^\u003c/a\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.2. Module Features"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[summary + scenario]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.1. Add Chapter Feature"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The add chapter feature allows the user to create new chapters at Module level."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`AddChapterCommand` facilitates the proposed add chapter feature. It extends `AddCommand` with an `AddCommand#prepareResult()` method. This method formates message about the result of the action to user in `Ui`. "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Shown as the class diagram below, because of the inheritance of `AddCommand`, `Command` and `AddChapterCommand`, `Kaji` is able to execute the operation `AddChapterCommand#excute()`. "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"UML/AddChapterCommandClass.png\" width\u003d\"800\" alt\u003d\"Class Diagram of add chapter command\"/\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class Diagram of add chapter command  "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is an example usage scenario at Module level and how the add chapter feature behaves at each step:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: The user is currently at module level and wants to add a new chapter chapter1 and enters `add chapter1` command."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: The `add` command creates `AddChapterCommand` which will then be executed."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: The `AddChapterCommand` object creates a new `Chapter` object with the `Chapter#chapterName` of chapter1. "
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: The new `chapter1 : Chapter` object will be passed into the `AddChapterCommand#addChapter()` with `Access` and `Storage`."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: The `AddChapterCommand#addChapter()` gets the current `Module` object via `Access#getModule()` method, then it adds the new `chapter1: Chapter` object into the `Module#ChapterList`. "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 6: The new `Module` object with the `chapter1: Chapter` object is updated to `Access` via the method `Access#setModule(Module)`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 7: The new `Chapter` is updated in the folder by executing the `Storage#createChapter()`. A \u0027chapter1\u0027 folder is being created under the \u0027data/module\u0027 folder."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 8: The `AddChapterCommand#addChapter()` method returns a result message to the `AddChapterCommand#execute()` method which uses `Ui#showToUser()` to print the success message."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows how the add chapter command feature works:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"UML/AddChapterCommand.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of add chapter command\"/\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of add chapter command  "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.2. List Chapters Feature"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list chapters feature allows the user to list all chapters in module level "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list chapters mechanism is facilitated by `ListChaptersCommand`. It extends from the abstract class `ListCommand`. "
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListChaptersCommand#execute()` — oversees entire execution for listing chapters."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListChaptersCommand#listChapters()` — gets and lists all chapters in module level."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "For instance, the user wants to list all chapters available in `CS2113T` (module name), a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 1: The user is currently in `CS2113T` level. "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 2: The user enters `list` command to list all chapters in `CS2113T` level. "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The following sequence diagram shows how the list chapters feature works:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "  \u003cimg src\u003d\"UML/listchap_seq_diagram.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of List Chapters\"/\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of List Chapters"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.3. Edit Chapter Name Feature"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit chapter name feature allows the user to edit the name of any existing chapter."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can edit the name of an existing chapter with the `edit` command, which follows the following format: `edit CHAPTER_INDEX CHAPTER_NAME`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit module name feature is facilitated by `ChapterList` and `Chapter`. The list of user\u0027s chapters are stored internally as `ChapterList`."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `ChapterList#getChapter()` - Gets a chapter based on the specified index from the list of chapters."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Chapter#setChapterName()` — Sets the name of the chapter."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the edit chapter name feature:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/EditChapterClassDiagram.png\" width\u003d\"800\" alt\u003d\"Edit Chapter Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of edit chapter name feature  "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to edit the chapter `chap 1` from the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: The user is currently in `CS2113T` at the module level."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: The user enters `edit 1 Chapter 1` command to edit the first chapter in the list of chapters — which in this case is `chap 1`."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: The user input is parsed by `Parser`, which results in a new `EditChapterCommand` object."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: `EditChapterCommand` is executed and calls the method `EditChapterCommand#editChapter()`."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: `EditChapterCommand#editModule()` gets the chapter based on the index provided by the method `ChapterList#getChapter()`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 6: The chapter name is edited to `Chapter 1` by the method `Chapter#setChapterName()`."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 7: The result message from `EditChapterCommand#editChapter()` is returned to `EditChapterCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the edit chapter name feature works:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/EditChapterSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Edit Chapter Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of edit chapter name feature  "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Module` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.4. Remove Chapter Feature"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove chapter feature allows the user to remove a chapter by specifying the index of the chapter in the list. "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove chapter mechanism is facilitated by `RemoveChapterCommand`. It extends from the abstract class `RemoveCommand`. "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveChapterCommand#execute()` — oversees entire execution for removing a chapter."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveChapterCommand#removeModule()` — removes chapter from list of chapters in a module including the flashcards under it."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#prepareResult()` — prepares the resulting message of the execution."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to start a remove the chapter `Chapter 1` from the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: The user is currently in `CS2113T` at the module level. "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: The user enters `remove 1` command to delete the first chapter in the list of chapters — which in this case is `Chapter 1`. The `remove` command creates `RemoveChapterCommand` which will then be executed. "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 3: `RemoveChapterCommand#execute` gets the `chapter` based on the index provided and passes it to `Storage#deleteDirectory` to delete the chapter file as well as the flashcards under it. "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the remove chapter feature:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/RemoveChapterCommandClassDiagram.png\" width\u003d\"800\" alt\u003d\"Class Diagram of Remove Chapter\"/\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of remove chapter"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The following sequence diagram shows how the remove chapter feature works:"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/RemoveChapterCommandSeqDiagram.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of Remove Chapter\"/\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of remove chapter"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.5. Access Chapter Level Feature"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "***Implementation***"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "If a user wishes to go to the Chapter Level from the Module Level by accessing a Chapter within the Module he is currently in, he can do so with the Access Chapter Level Feature."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "To execute this feature, the following class was created:"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `GoChapterCommand` - extends the abstract class `GoCommand`, brings the User down to the Chapter level if the target Chapter exists."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "To support the Access Chapter Level Feature, `GoChapterCommand` implements the following operations:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `GoChapterCommand#goChapter()` - Parses through the Module that the User is currently on to search for the specified Chapter. If the Chapter is found but not empty, there will be no output message, while if the found Chapter is empty, a message prompting the user to add Cards to the Chapter will be returned."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `GoChapterCommand#execute()` - Calls `GoChapterCommand#goChapter()` and prints the output message returned if there is one."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following sequence Diagrams illustrates how the Access Chapter Level Feature is executed:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.6. Return to Admin Level Feature"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "***Implementation***"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "If a user has completed the tasks he has on the Module Level and wish to edit Modules from the Admin level, he can do so with the return to Admin Level Feature."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "To execute this feature, the following class was created:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `BackAdminCommand` - Extends the abstract class `BackCommand`, returns the User to the Admin Level"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "To support the Return to Admin Level Feature, `BackAdminCommand` implements the following operation:"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `BackAdminCommand#execute()` - Calls `Access#setModuleLevel()` to set the `Access` Object\u0027s `level` attribute\u0027s value to `adminLevel` if its current value is the `moduleLevel`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following sequence Diagrams illustrates how the Return to Admin Level Feature is executed:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "##### \u003ca href\u003d\"#top\"\u003eBack to Top ^\u003c/a\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.3. Chapter Features"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[summary + scenario]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.1. Add Flashcard Feature"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The add flashcard feature allows the user to add a flashcard to a chapter."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can add a flashcard with the `add` command, which follows the following format: `add q:QUESTION | a: ANSWER`."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The add flashcard feature is facilitated by `CardList`. The list of user\u0027s flashcards are stored internally as `CardList`."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operation:"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `CardList#addCard()` - Adds a flashcard to the list of flashcards."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the add flashcard feature:"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/AddCardClassDiagram.png\" width\u003d\"800\" alt\u003d\"Add Card Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of add flashcard feature  "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " "
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to add a flashcard `[Q] 1+1 | [A] 2` to the chapter `Chapter 1` for module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: The user is currently in `Chapter 1` at the chapter level of the module `CS2113T`."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: The user enters `add q:1+1 | a:2` command to add a flashcard to the list of flashcards."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: The user input is parsed by `Parser`, which results in a new `AddCardCommand` object."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: A `Card` object is created within `AddCardCommand`."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: `AddCardCommand` is executed and calls the method `AddCardCommand#addCard()`."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 6: `AddCardCommand#addCard()` adds a flashcard to the list of flashcards by calling the method `CardList#addCard()`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 7: The result message from `AddCardCommand#addCard()` is returned to `AddCardCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the add flashcard feature works:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/AddCardSequenceDiagram.png\" width\u003d\"600\" alt\u003d\"Add Card Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of add flashcard feature  "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Chapter` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.2. List Flashcards Feature"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list flashcards feature allows the user to list all flashcards in chapter level "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list flashcards mechanism is facilitated by `ListCardsCommand`. It extends from the abstract class `ListCommand`. "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListCardsCommand#execute()` — oversees entire execution for listing flashcards."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListCardsCommand#listCards()` — gets and lists all flashcards in chapter level."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "For instance, the user wants to list all flashcards available in `Chapter 1` (chapter name), a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 1: The user is currently in `Chapter 1` level. "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 2: The user enters `list` command to list all flashcards in `Chapter 1` level. "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The following sequence diagram shows how the list flashcards feature works:"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "  \u003cimg src\u003d\"UML/listcard_seq_diagram.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of List Cards\"/\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of List Cards"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.3. Edit Flashcard Content Feature"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit flashcard content feature allows the user to edit the content of any existing flashcard."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can edit the content of an existing flashcard with the `edit` command, which follows the following format: `edit FLASHCARD_INDEX q:QUESTION | a: ANSWER`."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit flashcard content feature is facilitated by `CardList` and `Card`. The list of user\u0027s flashcards are stored internally as `CardList`."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `CardList#getCard()` - Gets a flashcard based on the specified index from the list of flashcards."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Card#setQuestion()` — Sets the question of a flashcard."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Card#setAnswer()` — Sets the answer of a flashcard."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the edit flashcard content feature:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/EditCardClassDiagram.png\" width\u003d\"800\" alt\u003d\"Edit Flashcard Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of edit flashcard content feature  "
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to edit the flashcard `[Q] 2*1 | [A] 2` from the chapter `Chapter 1` for module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: The user is currently in `Chapter 1` at the chapter level of the module `CS2113T`."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: The user enters `edit 1 q:1+1 | a:` command to edit the first flashcard in the list of flashcards — which in this case is `[Q] 2*1 | [A] 2`."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: The user input is parsed by `Parser`, which results in a new `EditCardCommand` object."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: `EditCardCommand` is executed and calls the method `EditCardCommand#editCard()`."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: `EditCardCommand#editCard()` gets the chapter based on the index provided by the method `CardList#getCard()`."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 6: As there is no content to edit the answer, the method `Card#getAnswer()` is called to get the answer of the existing flashcard - which in this case is `2`."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 7: The question is edited to `1+1` by the method `Card#setQuestion()`."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 8: The answer is edited to `2` by the method `Card#setAnswer()`."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 9: The result message from `EditCardCommand#editCard()` is returned to `EditCardCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the edit flashcard content feature works:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/EditCardSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Edit Card Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of edit flashcard content feature  "
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Chapter` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.4. Remove Flashcard Feature"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove flashcard feature allows the user to remove a flashcard by specifying the index of the flashcard in the list. "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove flashcard mechanism is facilitated by `RemoveFlashcardCommand`. It extends from the abstract class `RemoveCommand`. "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveFlashcardCommand#execute()` — oversees entire execution for removing a flashcard."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveFLashcardCommand#removeModule()` — removes flashcard from list of flashcards in a chapter."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#prepareResult()` — prepares the resulting message of the execution."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to start a remove the flashcard `[Q] 1+1 | [A] 2` from the chapter `Chapter 1`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: The user is currently in `Chapter 1` at the chapter level of the module `CS2113T`. "
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: The user enters `remove 1` command to delete the first flashcard in the list of flashcards — which in this case is `[Q] 1+1 | [A] 2`. The `remove` command creates `RemoveCardCommand` which will then be executed. "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 3: `RemoveCardCommand#execute` gets the `flashcard` based on the index provided and removes it from the `CardList` "
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 4: The updated `CardList` is passed to `Storage#saveCards()` to update the contents of the chapter with the removed card. "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the remove flashcard feature:"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/RemoveCardCommandClassDiagram.png\" width\u003d\"800\" alt\u003d\"Class Diagram of Remove  Flashcard\"/\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of remove flashcard"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The following sequence diagram shows how the remove flashcard feature works:"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/RemoveCardCommandSeqDiagram.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of Remove Flashcard\"/\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of remove flashcard"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.5. Return to Module Level Feature"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The return to module level feature allows the user to return to the module level from the chapter level."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The return to module level mechanism is facilitated by `BackModuleCommand`. It extends from the abstract class `BackCommand`. "
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operation:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `BackModuleCommand#execute` — lowers access level of the user."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to return to the module level from the chapter he is currently at in the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: The user is currently in `Chapter 1` at the chapter level in the module `CS2113T`. "
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: The user enters `back` command to return to `CS2113T`. The `back` command creates `BackModuleCommand` which will then be executed."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 3: `BackModuleCommand#execute` passes an empty string to `Access#setChapterLevel()` to check the chapter level and calls `Access#setIsModuleLevel` to set the user back to module level."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the return to module feature:"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/BackModuleCommandClassDiagram.png\" width\u003d\"600\" alt\u003d\"Class Diagram of Return to Module\"/\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of return to module"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following sequence diagram shows how the return to module feature works:"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/BackModuleCommandSeqDiagram.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of Return to Module\"/\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of return to module"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.6. Check Overall Performance for a Chapter Feature"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The show rate feature allows the user to check their overall performance of revision with the chapter they are currently accessing."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`ShowRateCommand` facilitates the proposed check overall performance feature. It extends an abstract `Command` class with the abstract `Command#execute()` and `Command#isExit()`."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `ShowRateCommand#execute()` -- Inherits from the abstract `Command`. It is an override to calls `ShowRateCommand#computePercentage()` and print message that specific to performance checking feature."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `ShowRateCommand#computePercentage()` -- Computes the overall performance by master levels and updates the `ShowRateCommand#easyPercentage`, `ShowRateCommand#mediumPercentage`, `ShowRateCommand#hardPercentage` and `ShowRateCommand#cannotAnswerPercentage`, then it returns number of cards in the `Chapter`."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `ShowRateCommand#isExit()` -- Inherits from the abstract `Command`. It is an override to return `false`."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Shown as the class diagram below, with the inheritance of `Command`, `Kaji` is able to execute the operation `ShowRateCommand#execute()` directly. "
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"UML/ShowRateCommandClass.png\" width\u003d\"800\" alt\u003d\"Class Diagram of show overall performance command\"/\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class Diagram of show overall performance command  "
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is an example usage scenario at Chapter level and how the show overall performance feature behaves at each step:"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: The user is currently at chapter level."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: The user enters `showrate` command to check the overall revision performance of the current chapter. The `showrate` command creates `ShowRateCommand` which will then be executed."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: The `ShowRateCommand` object gets the reference of current chapter level via the `Access#getChapter()` and stores the reference as a `Chapter` object. "
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: The `Chapter` object will be passed into the operation `ShowRateCommand#computePercentage()`."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: The `ShowRateCommand#computePercentage()` gets all the `Card` objects in the current `Chapter` object via the methods `Chapter#getCards()` and `CardList#getAllCards()` respectively. "
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 6: If there is no `Card` object in the current `Chapter`, the `ShowRateCommand#computePercentage()` operation returns int `0` after checking the `ArrayList\u003cCard\u003e` size. If there are `Card` objects, a \u0027for\u0027 loop is used to check the `Card#rating` of every `Card` objects and compute the overall performance. "
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 7: `ShowRateCommand#computePercentage()` updates the variables `ShowRateCommand#easyPercentage`, `ShowRateCommand#mediumPercentage`, `ShowRateCommand#hardPercentage` and `ShowRateCommand#cannotAnswerPercentage` at the end and returns the number of cards in the chapter"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 8: `GoModuleCommand#execute()` prints the performance message to the user via `Ui#showToUser` if the `ShowRateCommand#computePercentage()` is greater than int `0`."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows how the show overall performance feature works:"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"UML/ShowRateCommand.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of show overall performance command\"/\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of show overall performance command "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "##### \u003ca href\u003d\"#top\"\u003eBack to Top ^\u003c/a\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 4.4. Revise Feature"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The revise feature allows the user to start a revision on a chapter and can only be done when the user is in the module level. "
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### 4.4.1. Implementation"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The revise mechanism is facilitated by `ReviseCommand`. It extends from the abstract class `Command`. "
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#execute()` — oversees the entire revise process and calls the respective methods when necessary."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#getChapter()` — gets `chapter` based on the index the user provided."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#getCards()` — gets a list of `card` in `chapter`."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#promptNotDue()` — prompts user if he still wants to revise a `chapter` that is not due."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#reviseCard()` — makes use of `ui` to show the contents of each card to the user and gets rating input for the particular card."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#rateCard()` — gets user input on difficulty of a flashcard."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#repeatRevision()` — repeats revision for cards which user could not answer. "
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the revise feature:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/ReviseCommandClassDiagram.png\" height\u003d\"600\" width\u003d\"1023\" alt\u003d\"Class Diagram of Revise\"/\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of revise"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to start a revision for `Chapter 1` in the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: The user is currently in `CS2113T` at the module level."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: The user enters `revise 1` command to revise the first chapter in the module — which in this case is `Chapter 1`. The `revise` command creates `ReviseCommand` which will then be executed."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 3: `ReviseCommand#execute` gets `Chapter1` based on the index provided as well as a list of `card` under the particular chapter by calling `ReviseCommand#getChapter` and `ReviseCommand#getCards` respectively."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 4: If the `chapter` is not due for revision yet, `ReviseCommand#promptNotDue()` will prompt the user if he still wants to revise a `chapter` that is not due. If the user enters `Y`, the Revise feature will continue execution, else it will return to the main class Kaji, and wait for the next command."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 5: `ReviseCommand#execute` loops through each flashcard and shows the user its contents by calling `ReviseCommand#reviseCard()`  and inside it, `ReviseCommand#rateCard()` is called and makes use of `Ui#getUserInput()` to get user to rate the difficulty of each flashcard. "
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 6: A success message of completing the revision will be shown to the user through `Ui#showToUser()`."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 7: `Scheduler#computeChapterDeadline()` then calculates the new deadline for the `chapter` and passes the result to `Chapter#setueBy()` to set the new deadline for the `chapter`."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 6: `ReviseCommand#repeatRevision` then repeats the revision session on cards which the user could not answer if any."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 7: Lastly, `ReviseCommand#execute()` calls `HistoryCommand#addHistory()` to keep a record of the chapter revised so that the user can review what revision has been completed."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The following sequence diagram shows how the revise feature works:"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/ReviseCommandSeqDiagram.png\" height\u003d\"700\" width\u003d\"1200\" alt\u003d\"Sequence Diagram of Revise\"/\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of revise"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/ReviseGetChap.png\" width\u003d\"500\" alt\u003d\"Sequence Diagram of Revise Get Chapter\"/\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of get chapter for revision"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/ReviseNotDue.png\" width\u003d\"400\" alt\u003d\"Sequence Diagram of Revise Not Due\"/\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of revise for chapter that is not due"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " "
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/ReviseGetCards.png\" width\u003d\"500\" alt\u003d\"Sequence Diagram of Revise Get Chapter\"/\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of get cards for revision"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 4.4.2. Scheduling The Chapters Feature"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Darticune"
        },
        "content": "In KAJI, each `Chapter` stores a `CardList` of `Card`s, each with their own `int` attribute `previousInterval`. Each `Chapter` also has a `LocalDate` attribute named `dueBy` that determines when the `Chapter` is due for revision. "
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Darticune"
        },
        "content": "At the end of a revision session, the `Scheduler` class implements Spaced Repetition by computing the `deckInterval`, the mean (rounded off to the nearest integer) of the `previousInterval`s of every `Card` within the `Chapter`, and updates the `dueBy` attribute of the `Chapter` to `deckInterval` days after the day of revision."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support this feature, `Scheduler` implements the following operations:"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeEasyInterval()` - returns the product of the `Card`\u0027s `previousInterval` and the Easy Multiplier(4.4) rounded to the nearest integer"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeMediumInterval()` - returns the product of the `Card`\u0027s `previousInterval` and the Medium Multiplier(2.2) rounded to the nearest integer"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeHardInterval()` - returns the product of the `Card`\u0027s `previousInterval` and the Hard Multiplier(1.1) rounded to the nearest integer"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeChapterInterval()` - returns the mean of the `previousInterval` of each `Card` within the `Chapter` rounded off to the nearest integer"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeChapterDeadline()` - returns a `LocalDate` object containing the new `dueBy`, which is interval(returned from `Scheduler#computeChapterInterval()`) days away from the current day"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Darticune"
        },
        "content": "`Scheduler#computeEasyInterval()`, `Scheduler#computeMediumInterval()` and `Scheduler#computeHardInterval()` are exposed in the `ReviseCommand` class as `ReviseCommand#rateCard()` while `Scheduler#computeDeckDeadline()` is exposed as `ReviseCommand#execute()`."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Darticune"
        },
        "content": "***Example***"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Given below is an example usage scenario on how the Scheduler mechanism behaves at each step when: "
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Darticune"
        },
        "content": "`revise 1` is called in a `Module` that contains only one `Chapter` with three `Card`s in its `CardList` attribute and confirmation is given to proceed with revision."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\\\u003cOBJECT DIAGRAMS\\\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 1:"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* The user enters `revise 1` within the `Module` and `ReviseCommand` is instantiated. "
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Upon confirmation to revise and a check that `CardList` of the designated `Chapter` is not empty is complete, `ReviseCommand` proceeds to create a `ArrayList\u003cCard\u003e allCards` comprising of all `Card`s within in the `CardList`."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 2:"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* For each `Card` in `allCards`, `ReviseCommand#reviseCard()` is called upon completion of either `ReviseCommand#execute()` or `ReviseCommand#repeateRevision()`."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This operation then calls `Scheduler#computeEasyInterval()`, `Scheduler#computeMediumInterval()` or `Scheduler#computeHardInterval()` depending on the user input to compute and update the new value of `previousInteral` for each card."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 3:"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Upon completion of all revision, `ReviseCommand#execute()` will call `Scheduler#computeDeckDeadline()`, which in turn calls `Scheduler#computeDeckInterval()`. `Scheduler#computeDeckInterval()` computes `deckInterval`, the mean (rounded off to the nearest integer) of the `previousInterval`s of each `Card` in `allCards,` and returns it to `Scheduler#computeDeckDeadline()`."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 4:"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Using `deckInterval`, `Scheduler#computeDeckDeadline()` computes the new value of `dueBy` for the Chapter, which is then returned to `ReviseCommand#execute()`, where it will then update the value of `dueBy` for the `Chapter` that was just revised."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "##### \u003ca href\u003d\"#top\"\u003eBack to Top ^\u003c/a\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5. Viewing and Customising the Schedule Feature"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Darticune"
        },
        "content": "KAJI schedules the user\u0027s database automatically for them based on their [revision sessions](#), chapter by chapter, using Spaced Repetition. Users should be able to view their schedule for the current day to know which tasks they need to complete on the day itself and to view their schedule for the upcoming week so that they can plan ahead. However, to effectively use the scheduling feature, users should also be able to customise their scheduling system to include or exclude chapters from their schedule with ease."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To utilise this feature, the following commands and their corresponding features are introduced:"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* [`due`](#451-View-Due-Chapters-Feature) - Viewing their schedule for the current day (View Due)"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* [`preview`](#452-Preview-Upcoming-Dues-Feature) - Viewing their schedule for the upcoming week (Preview Upcoming Due)"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* [`exclude`](#453-Exclusion-Feature) - Customising which of their Chapters will be in the Scheduler (Exclusion)"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.1. View Due Chapters Feature"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Darticune"
        },
        "content": "***Implementation***"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Each Chapter has a [`deadline assigned to it`](#) from the point of creation, which forms the core of the Scheduling process. The View Due Chapters Feature builds on that by allowing users to view every chapter in the database that is due on the current day with a single command."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support this feature, the following command was added to KAJI:"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `due` - A command that displays every `Chapter` in the database that is due on a given day."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Darticune"
        },
        "content": "A corresponding Class `ListDueCommand` was also created to carry out the functions related to the command."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Darticune"
        },
        "content": "This feature takes the [`Exclusions`](#) of the database into account and will not display `Chapter`s from the Exclusion List when the user calls them even if their deadlines are due."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Darticune"
        },
        "content": "As this Feature can be activated at any point, the following class is created to identify `Chapter`s easily."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `DueChapter` - object contain two variables, `String parentModule` to identify the `Chapter`\u0027s parent `Module`, and `Chapter chapter` to hold a reference to the actual `Chapter`"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support the View Due feature, `ListDueCommand` implements the following operations:"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `ListDueCommand#loadAllDueChapters()` - Calls `Storage#loadAllDueChapters()` to load every `Chapter` in the database as a `DueChapter` and stores them into a `ArrayList\u003cDueChapter\u003e allDueChapters` "
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `ListDueCommand#setDueDueChapters()` - Checks each `DueChapter` in `ArrayList\u003cDueChapter\u003e allDueChapters` to verify if the underlying `Chapter` is due by the current day by calling `Scheduler#isDeadlineDue()` on the `Chapter`\u0027s deadline\u0027, and adds the due `DueChapters` into `ArrayList\u003cDueChapter\u003e dueDueChapters`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `ListDueCommand#execute()` - Calls `ListDueCommand#loadAllDueChapters()`, `ListDueCommand#setDueDueChapters()` and prints the `DueChapter`s that are due"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Darticune"
        },
        "content": "On top of that, `Storage` implements the following operations:"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#checkChapterDeadline()` - Reads the deadline for each `Chapter`, prompts if they are corrupted, and adds a `DueChapter` formed with the `Chapter` into `ArrayList\u003cDueChapter\u003e allDueChapters`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#checkAllChaptersForDue()` - Obtains the name of every `Chapter` from the list of Modules passed to it and calls `Storage#checkChapterDeadline()` for each of them"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#loadAllDueChapters()` - Obtains the names of every `Module` in the user database and calls `Storage#checkAllChaptersForDue()`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The following sequence Diagrams illustrates how the View Due Chapters Process is executed:"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/listDueSeq.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of the View Due Feature\"/\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of the View Due Feature "
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.2. Preview Upcoming Dues Feature"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Darticune"
        },
        "content": "***Implementation***"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Similar to the View Due Chapters Feature, the Preview Upcoming Dues Feature builds on the Scheduling process by allowing users to view every chapter in the database that is due in the upcoming week with a single command."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support this feature, the following command was added to KAJI:"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `preview` - A command that displays every `Chapter` in the database that is due in the upcoming week."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Darticune"
        },
        "content": "A corresponding Class `PreviewCommand` was also created to carry out the functions related to the command."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Darticune"
        },
        "content": "This feature also takes the [`Exclusions`](#) of the database into account and will not display `Chapters` from the Exclusion List when the user calls them even if they are due in the upcoming week."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Darticune"
        },
        "content": "As this Feature can be activated at any point, the following class is also (similar to View Due Chapters) used to identify `Chapter`s easily."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `DueChapter` - object contain two variables, `String parentModule` to identify the `Chapter`\u0027s parent `Module`, and `Chapter chapter` to hold a reference to the actual `Chapter`"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support the Preview Upcoming Dues feature, `PreviewCommand` implements the following operations:"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `PreviewCommand#loadAllDueChapters()` - Calls `Storage#loadAllDueChapters()` to load every `Chapter` in the database as a `DueChapter` and stores them into a `ArrayList\u003cDueChapter\u003e allDueChapters` "
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `PreviewCommand#setDueDueChapters()` - Checks each `DueChapter` in `ArrayList\u003cDueChapter\u003e allChapters` to verify if the underlying `Chapter` is due in an increment number of days from the current day by calling `Scheduler#isDeadlineDueIn()` on the `Chapter`\u0027s deadline, and adds the due `DueChapters` into `ArrayList\u003cDueChapter\u003e dueDueChapters`"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `PreviewCommand#execute()` - Calls `PreviewCommand#loadAllDueChapters()`, before calling `PreviewCommand#setDueDueChapters()` for the current day, then one to six days after the current day, and prints the `DueChapter`s for each day individually"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Darticune"
        },
        "content": "On top of that, the following operations from `Storage` are used:"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#checkChapterDeadline()` - Reads the deadline for each `Chapter`, prompts if they are corrupted, and adds a `DueChapter` formed with the `Chapter` into `ArrayList\u003cDueChapter\u003e allDueChapters`"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#checkAllChaptersForDue()` - Obtains the name of every `Chapter` from the list of Modules passed to it and calls `Storage#checkChapterDeadline()` for each of them"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#loadAllDueChapters()` - Obtains the names of every `Module` in the user database and calls `Storage#checkAllChaptersForDue()`"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The following sequence Diagrams illustrates how the Preview Upcoming Dues Process is executed:"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/previewSeq.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of the Preview Upcoming Dues Feature\"/\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of the Preview Upcoming Dues Feature "
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.3. Exclusion Feature"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Darticune"
        },
        "content": "***Implementation***"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "***Implementation***"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "KAJI allows users to customise which Chapters are to be excluded from their scheduling by maintaining an Exclusion List: a list of `Chapter`s that KAJI will ignore as it parses for `Chapter`s that are due in the `due` and `preview` commands. "
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "This is to allow users to exclude and include `Chapter`s from and to their schedules without having to remove and add the `Chapter`s from their database, which can be tedious."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "To support this feature, the following commands were added to KAJI:"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `exclude` - A command that adds `Chapter`s to the Exclusion List."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `include` - A command that removes `Chapter`s from the Exclusion List."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Two corresponding Classes `ExecuteCommand` and `IncludeCommand` were also created to carry out the functions related to the commands."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To load and store the Exclusion List, a Exclusion File is created and maintained using these two methods from the `Storage` Class:"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#loadExclusionFile()` - Reads the contents of the Exclusion File, parses it into the Exclusion List, stored as a `ArrayList\u003cString\u003e`, and returns it."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#updateExclusionFile()` - Writes the `ArrayList\u003cString\u003e` Exclusion List into the Exclusion File."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The `exclude` command can be called with either `exclude chapter` or `exclude module`, which adds a `Chapter` or every `Chapter` from a `Module` to the Exclusion List respectively. "
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "To determine if a single `chapter` or an entire `module` is to be added to the Exclusion List, `excludecommand` implements the operation `excludecommand#attemptToExclude()`."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `excludecommand#attemptToExclude()` - responds to various forms of `exclude` command input as follows:"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * calls `excludecommand#addChapterToExclusion()` if `exclude chapter` is entered"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * calls `excludecommand#addModuleToExclusion()` if `exclude module` is entered"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * or throws an exception if the specified command argument is invalid."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Items are added into the `ArrayList\u003cString\u003e` Exclusion List using two pairs of commands in both `ExcludeCommand` and"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " `Storage`:"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Excluding a Chapter from Scheduling"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `ExcludeCommand#addChapterToExclusion()` - gets the name of the `Chapter` to be excluded and the name of the `Module` it belongs to, and calls `Storage#appendChapterToExclusionFile()`"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `Storage#appendChapterToExclusionFile()` - appends the target `Chapter` to the Exclusion File if the target `Chapter` exists and is not already in the Exclusion File"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Excluding a Module from Scheduling"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `ExcludeCommand#addModuleToExclusion()` - gets the name of the `Module` to be excluded, and calls `Storage#appendModuleToExclusionFile()`"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `Storage#appendModuleToExclusionFile()` - appends every `Chapter` of the target `Module` not already in the Exclusion File to it if the target `Module` exists"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following sequence Diagrams illustrates how the \"include\" command is executed:"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/excludeSeq.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of the exclude command\"/\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram using the Exclusion Feature to exclude content from the schedule"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "On the other hand, the `include` command can be called with `include chapter` or `include module` which removes a `Chapter` or every `Chapter` from a `Module` from the Exclusion List."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Similarly, to determine if a single `chapter` or an entire `module` is to be removed from the Exclusion List, `includecommand` implements the operation `includecommand#attemptToInclude()`."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `includecommand#attemptToInclude()`. - responds to various forms of `exclude` command input as follows:"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * calls `includecommand#addChapterToExclusion()` if `exclude chapter` is entered"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * calls `includecommand#addModuleToExclusion()` if `exclude module` is entered"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * or throws an exception if the specified command argument is invalid."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    "
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Items are removed from the `ArrayList\u003cString\u003e` Exclusion List using two pairs of commands in both `IncludeCommand"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "` and `Storage`:"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Including a Chapter from Scheduling"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * `IncludeCommand#removeChapterFromExclusion()` - gets the name of the `Chapter` to be included and the name of the `Module` it belongs to, and calls `Storage#removeChapterFromExclusionFile()`"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `Storage#removeChapterFromExclusionFile()` - removes the target `Chapter` from the Exclusion File if the target `Chapter` is in the Exclusion File"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Including a Module from Scheduling"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * `IncludeCommand#removeModuleFromExclusion()`- gets the name of the `Module` to be included, and calls `Storage#removeModuleFromExclusionFile()`"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `Storage#removeModuleFromExclusionFile()` - removes every `Chapter` of the target `Module` that is in the Exclusion File"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following sequence Diagrams illustrates how the \"include\" command is executed:"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/includeSeq.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of the include command\"/\u003e"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram using the Exclusion Feature to include content into the schedule"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.4. Reschedule Chapter Feature"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The reschedule chapter feature allows the user to reschedule the due date of any existing chapter."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can reschedule the due date of an existing chapter with the `reschedule` command, which follows the following format: `reschedule CHAPTER_INDEX DATE(yyyy-MM-dd)`."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The reschedule chapter feature is facilitated by `ChapterList` and `Chapter`. The list of user\u0027s chapters are stored internally as `ChapterList`."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `ChapterList#getChapter()` - Gets a chapter based on the specified index from the list of chapters."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Chapter#setDueBy()` — Sets the due date of the chapter."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagram shows the class diagram of the reschedule chapter feature:"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/RescheduleChapterClassDiagram.png\" width\u003d\"800\" alt\u003d\"Reschedule Chapter Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of reschedule chapter feature  "
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " "
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to reschedule the due date `2020-12-12` of the chapter `Chapter 1`  from the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: The user is currently in `CS2113T` at the module level."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: The user enters `reschedule 1 2020-12-20` command to reschedule the first chapter in the list of chapters — which in this case is `Chapter 1`."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: The user input is parsed by `Parser`, which results in a new `RescheduleCommand` object."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: `RescheduleCommand` is executed and calls the method `RescheduleCommand#reschedule()`."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: `RescheduleCommand#reschedule()` gets the chapter based on the index provided by the method `ChapterList#getChapter()`."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 6: The due date of the chapter is rescheduled to `2020-12-20` by the method `Chapter#setDueBy()`."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 7: The result message from `RescheduleCommand#reschedule()` is returned to `RescheduleCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the reschedule chapter feature works:"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/RescheduleChapterSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Reschedule Chapter Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of reschedule chapter feature  "
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Module` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.5. View Revision History Feature"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The view revision history feature allows the user to list the revision completed in the session/in a day. In case the user enters `history` follow by a `date(example: 2020-10-10)`, `Kaji` will list the revision completed in `October 10, 2020`. Otherwise, `Kaji` will list the revision completed in the day the user uses `HelpCommand`. This feature can be accessed at any level."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The history mechanism is facilitated by `HistoryCommand`. It extends from the abstract class `Command`. "
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `HistoryCommand#execute()` — calls the list method to list the history. "
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `HistoryCommand#listHistory()` — lists the revision completed in the session/in a day."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Given below is an example usage scenario and how the history mechanism behaves at each step:"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Step 1: The user launches the application and is currently in the admin level. "
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Step 2: The user executes `history` command to load and list the revision completed in the session/in a day."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The following sequence diagram shows how the list chapters feature works:"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "  \u003cimg src\u003d\"UML/listhistory_seq_diagram.png\" width\u003d\"800\" alt\u003d\"Sequence Diagram of List Revision History\"/\u003e"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence Diagram of List Revision History"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "##### \u003ca href\u003d\"#top\"\u003eBack to Top ^\u003c/a\u003e"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 5. Appendix: Requirements"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 5.1. Product Scope"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 5.1.1. Target User Profile"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Students who use a computer often, and are reasonably comfortable with the command line interface"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Needs to have an effective study schedule"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Willing to keep track of the content they need to study"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 5.1.2. Value Proposition"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The application aims to provide students with an effective studying technique. In order to make studying easier for students, the application implements a technique known as spaced repetition, which help with memory retention. Content are scheduled automatically, and information is organised in the form of flashcards which makes it convenient to revise. "
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.2. User Stories"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "| Version | As a ... | I want to ... | So that I can ... |"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | add modules | study based on modules |"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | add chapters for each module | study based on chapters for a certain module |"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | add flashcards inside each chapter for the content of each chapter | study the content of each chapter |"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | list my modules | have an overview of what modules I have |"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | list my chapters in each module | have an overview of what chapters I have for a module |"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | list my flashcards in each chapter | have an overview of the content I have for a chapter |"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | modify the module name | correct the module name if it is incorrect |"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | modify the chapter name | correct the chapter name if it is incorrect |"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | modify the content of the flashcards | correct the content if it is incorrect |"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | remove modules/chapters/flashcard | remove modules/chapters/flashcards that I no longer need |"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | access my module | revise based on module |"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | access my chapters for a module | revise based on chapter for a certain module |"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | revise the flashcards by chapter | do my revision |"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | set a rating for a newly created chapter | rate a chapter without going through a revision session |"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | state whether a flashcard is easy, medium or hard | revise the flashcards based of the difficulty of it |"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | check the scheduled tasks daily | plan my schedule accordingly |"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | rely entirely on the application to implement spaced repetition for me | enjoy the benefits of spaced repetition without having to implement it myself |"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | have a help command | have an overview of how the application works |"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v1.0 | student | terminate the program | exit the application when I am done using it |"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v2.0 | student | see a forecast of the my revision schedule | plan ahead and make time to accommodate the revision of the corresponding number of chapters |"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v2.0 | student | reschedule a chapter | change the schedule according to my situation |"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v2.0 | student | view the module and chapters I have completed in a session/in a day | track my progress |"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v2.0 | student | get a sense of how well I have mastered each chapter | have an idea of how well I am doing for a module |"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| v2.0 | student | include or exclude certain modules/chapters from the scheduler | revise only the modules/chapters that I need to |"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.3. Use Cases"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "This section will describe the use cases of Kaji. "
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "(For all use cases below, the **System** is the `Kaji` application and the **Actor** is the `user`, unless specified otherwise.)"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `add` a new `module`"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to add a new `module`."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji creates and saves the new `module` with the `module` name specified by the user."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `list` all current `module`s"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to list all current `module`s."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji shows a list of `module`s available."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `edit` a `module`"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to edit a `module`."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji makes the changes and saves the `module` with the new `module` name specified by the user."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "   "
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `remove` a `module` from the current list of `module`s"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to remove an existing `module`."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji deletes the `module` from the list of `module`s."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `access` a `module` level"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to access a `module` level."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji changes the current `admin` level of the user to the `module` level specified by the user."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `revise` a `chapter` from the current list of `chapter`s in a particular `module`"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to revise a `chapter` from the current list of `chapter`s in a particular `module`."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji starts a revision session for the user."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "User will be prompted to acknowledge that he wants to start a revision session for a `chapter` that is not due. \u003cbr\u003e"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "There will be no revision for an empty `chapter`."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: view a list of `chapter`s which are `due`"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to view a list of `chapter`s which are `due`."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji shows a list of `chapter`s that are `due` to the user."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `preview` a list of `chapter`s that are `due` in the week"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to `preview` a list of `chapter`s that are `due` in the week."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji shows a list of `chapter`s that are `due` in the week to the user."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `exclude` an existing `module` or `chapter` "
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to `exclude` a `module` or `chapter`."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji `exclude`s the `module` or `chapter` specified by the user so that it will no longer be scheduled for revision."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `include` an existing `module` or `chapter` "
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to `include` a `module` or `chapter`."
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji `include`s the `module` or `chapter` specified by the user so that it will be scheduled for revision once again."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: `reschedule` the due date of an existing `chapter` "
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to `reschedule` the due date of an existing `chapter`."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji `reschedule`s the due date of the `chapter` specified by the user."
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: view the `history` of revision completed in a day "
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to view the `history` of revision completed in a day."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji shows the `history` of revision completed by the user in a day."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: check overall performance for an existing chapter using `showrate` "
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to check overall performance for an existing chapter using `showrate`."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji shows the list of number of cards that were rated easy/medium/hard in the chapter to the user."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "   "
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "There will only be changes to the rating after a revision session. "
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### Use Case: view the list of commands available using `help`"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. User requests to view the list of commands available using `help`."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Kaji shows the list of commands available to the user."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.4. Non-Functional Requirements"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 installed."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "2. Should be able to hold up to 1000 flashcards without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "4. Data saved in a session should be persistent and carry forward to the next session of use."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "5. The file containing the saved data should be portable so that the user can transfer to the other machine with any mainstream OS and continuing using the app without any additional configuration."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "6. Application should not crash, application should always recover from error gracefully with an error message."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "7. Should work mostly without the need for the Internet."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "8. Should be designed for a single user."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "9. Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.5. Glossary"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* **CLI**: Command Line Interface"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "##### \u003ca href\u003d\"#top\"\u003eBack to Top ^\u003c/a\u003e"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 6. Appendix: Instructions for Manual Testing"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 110,
      "gua-guargia": 429,
      "-": 27,
      "neojiaern": 325,
      "Jane-Ng": 295,
      "Darticune": 132
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "# Kaji - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "By: `Team F11-3` Since: `August 2020`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. [Overview](#1-overview)\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1.1. [About Kaji](#11-about-kaji)\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1.2. [About this User Guide](#12-about-this-user-guide)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1.3. [Understanding the Command Line Interface (CLI)](#13-understanding-the-command-line-interface-cli)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1.4. [Understanding Kaji](#14-understanding-kaji)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.4.1. [Content Management](#141-content-management)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.4.2. [Schedule Management](#142-schedule-management)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "2. [Quick Start](#2-quick-start)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3. [Features](#3-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.1. [Admin Level](#31-admin-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.1. [Adding a module: `add`](#311-adding-a-module-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.2. [Listing modules available: `list`](#312-listing-modules-available-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.3. [Editing a module name: `edit`](#313-editing-a-module-name-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.4. [Removing a module: `remove`](#314-removing-a-module-remove)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.5. [Accessing the module level: `go`](#315-accessing-the-module-level-go)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.2. [Module Level](#32-module-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.1. [Adding a chapter: `add`](#321-adding-a-chapter-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.2. [Listing chapters available: `list`](#322-listing-chapters-available-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.3. [Editing a chapter name: `edit`](#323-editing-a-chapter-name-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.4. [Removing a chapter: `remove`](#324-removing-a-chapter-remove)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.5. [Accessing the chapter level: `go`](#325-accessing-the-chapter-level-go)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.6. [Returning to admin level: `back`](#326-returning-to-admin-level-back)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.7. [Starting a revision session: `revise`](#327-starting-a-revision-session-revise)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.8. [Rescheduling a chapter: `reschedule`](#328-rescheduling-a-chapter-reschedule)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.3. [Chapter Level](#33-chapter-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.1. [Adding a flashcard: `add`](#331-adding-a-flashcard-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2. [Listing flashcards available: `list`](#332-listing-flashcards-available-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.3. [Editing a flashcard content: `edit`](#333-editing-a-flashcard-content-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.4. [Removing a flashcard: `remove`](#334-removing-a-flashcard-remove)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.5. [Returning to module level: `back`](#335-returning-to-module-level-back)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.6. [Checking overall performance for a chapter: `showrate`](#336-checking-overall-performance-for-a-chapter-showrate)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.4. [General](#34-general)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1. [Showing a list of commands available: `help`](#341-showing-a-list-of-commands-available-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2. [Listing the chapters due for today: `due`](#342-listing-the-chapters-due-for-today-due)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.3. [Listing the chapters due in the upcoming week: `preview`](#343-listing-the-chapters-due-in-the-upcoming-week-preview)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.4. [Viewing the revision history: `history`](#344-viewing-the-revision-history-history)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.5. [Excluding or including modules and chapters: `exclude`](#345-excluding-or-including-modules-and-chapters-exclude)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.6. [Exiting the program: `exit`](#346-exiting-the-program-exit)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4. [Command Summary](#4-command-summary)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.1. [Admin Level](#41-admin-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.2. [Module Level](#42-module-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.3. [Chapter Level](#43-chapter-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.4. [General](#44-general)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 1. Overview"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "This section gives an overview about Kaji and the purpose of this user guide."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 1.1. About Kaji"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In your past learning experience, have you encountered these problems? A large number of lecture notes and materials have made your computer desktop messy, "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "and there is no way to find the materials you want. When the exam is approaching, you don’t know which subject to review first, or suddenly find that you have "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "forgotten everything you learned before. No one wants to forget what they have dedicated time to learn."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Don\u0027t worry! \u003cstrong\u003eKaji\u003c/strong\u003e will help you solve all these problems!"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "KAJI is a schedule manager that implements Spaced Repetition, optimised for use via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 1.2. About this User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "This User Guide explains how to use Kaji. It provides an understanding of the features and commands, as well as some common use cases of this application."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In this guide, we cover:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* How to use the Command Line Interface (CLI)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Syntax of the commands available in different levels in Kaji"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Common use cases for each command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Summary of all the commands"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 1.3. Understanding the Command Line Interface (CLI)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "A \u003cb\u003ecommand line interface (CLI)\u003c/b\u003e is a text-based user interface (UI) used to view and manage computer files. Command line interfaces are also called command-line user interfaces, console user interfaces and character user interfaces."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 1.4. Understanding Kaji"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 1.4.1. Content Management"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 1.4.2. Schedule Management"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "To get started on this application, please perform the following steps:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. Download the latest version of `Kaji` from [here](https://github.com/AY2021S1-CS2113T-F11-3/tp/releases)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. Copy the file to an empty folder you want to use as the \u003cI\u003ehome folder\u003c/I\u003e for your Kaji."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. Open a command window in the folder you saved Kaji and run the command `java -jar kaji.jar`. You should get the output as shown below: \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Welcome screen](images/kaji.PNG)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. Type the command in the command window and press Enter to execute it. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "   e.g. typing `help` and pressing Enter will show the list of commands available.\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "   * `help` : Lists all commands available."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "   * `exit` : Exits the app."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. Refer to [Features](#3-features) below for details of each command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "This section introduces the syntax and usages of the commands for the features available in Kaji. "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In explaining the syntax, do take note of the following command format which applies to all Kaji commands:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Words in `UPPER_CASE` are the parameters that you need to provide."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    * \u003cb\u003eExample:\u003c/b\u003e In `add MODULE_NAME`, `MODULE_NAME` is a parameter which can be used as `add CS2113`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Parameters cannot be given in any order."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    * \u003cb\u003eExample:\u003c/b\u003e In `edit MODULE_INDEX MODULE_NAME`, entering `edit CS2113 1` will result in an error as "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "      the `MODULE_INDEX` and `MODULE_NAME` parameters are in the wrong order."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* The `INDEX` that is used for various commands is a number used to identify a module/chapter/flashcard within the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The `INDEX` of a module/chapter/flashcard is shown one the left of each module/chapter/flashcard whenever a `list` command is used."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    * \u003cb\u003eExample of index:\u003cb\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    \u003cimg src\u003d\"UG_Images/Index.png\" width\u003d\"600\" alt\u003d\"Index\"/\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.1. Admin Level"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "This section introduces the syntax and usages of the commands for the features that are available at the **Admin Level**.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Ensure that you are at the **Admin Level** before trying the commands in the next few sections:\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/AdminLevel.png\" width\u003d\"600\" alt\u003d\"Admin Level\"/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.1. Adding a module: `add`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jiayi)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Welcome to the first feature of Kaji! In order to use this program, you first will need to create a module deck. Creating a new module deck in Kaji is like getting a new folder to store all the handouts for one module. This is important because it helps you to organize your messy notes. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Format: `add \\MODULE_CODE`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\\MODULE_CODE is the name of the new module that you would like to create, such as `CS2113`, `Module 1` or `Biology`. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Key Pointers:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Kaji does not allow duplicate of module names, therefore, if the existing module has the same name as the new module, you will get an error message."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Kaji is not case-sensitive, therefore, a new module named `module`  will be treated equally to a module named `MODULE`. "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Kaji only allows creation of one module with the `add` command. If you enter command `add CS2113T CS2101` will creates a module named `CS2113T CS2101`, instead of two separated modules named `CS2113T` and `CS2101` respectively."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Example: "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "In this example, you are going to add a new module called `CS2113T`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Below are steps of using this `add` command:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: Enters the command `add CS2113T` into the command prompt. Your new module name comes after the key word `add`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Module 1](UG_Images/addModule1.PNG)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: As shown below, a new module named `CS2113T` has just been created! You are free to edit, delete and access this module!"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Module 2](UG_Images/addModule2.PNG)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "This is an additional example to show you the unique property of Kaji\u0027s add feature. "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "As you may aware from `Key Pointers` section above, Kaji is case-insensetive. This example belows shows you what will happen if you try to add a new module called `cs2113t` after completing the previous example."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Below are the breakdown of this example:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: Types `add cs2113t` to add a new module named `cs2113t` after adding a module named `CS2113T` which essentially have a same name as our new module but in capital letters."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Module 3](UG_Images/addModule3.PNG)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: Opps, Kaji refuses to add the module `cs2113t` because a module with the same name is already existed!"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Module 4](UG_Images/addModule4.PNG)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "This is an additional example to show you the unique property of Kaji\u0027s add feature. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "As you may aware from `Key Pointers` section above, Kaji only allows addition of one new module each time. Let\u0027s see what will happen if you try to add two modules `cs2113 cs2101` at same time."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Below are the breakdown of this example:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: Types `add cs2113t cs2101` and attempts to add a new module named `cs2113t` and another new module `cs2101`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Module 5](UG_Images/addModule5.PNG)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: Opps, Kaji has interpreted it as one single module with the name of `cs2113t cs2101`, instead of two seperate modules. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Module 6](UG_Images/addModule6.PNG)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.2. Listing modules available: `list` "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "This command shows a list of modules on the admin level."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Here are some key points:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Do not need to add `admin` after `list`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* All list commands have the same command word `list`. "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* At Admin Level: enter the command `list`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Here is the expected output:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![List Modules](UG_Images/list_module.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* After listing all modules, you can try all commands available in **Admin Level**."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.3. Editing a module name: `edit` "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "This command modifies the module name you want to change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Format: `edit MODULE_INDEX MODULE_NAME`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Here are some key points:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* You can only edit content on the level below the one you are on."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Edit the name / content at the specified `MODULE_INDEX`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* The `MODULE_INDEX` refers to the index number shown in the displayed content list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* The `MODULE_INDEX` **must be a positive integer** 1, 2, 3, …"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* At Admin Level: enter `edit 1 CS2113T` changes current Module name at index 1 to CS2113T."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Here is the expected output:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![Edit Module Name](UG_Images/edit_module.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* After editing the module name, you can try all commands available in **Admin Level**."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.4. Removing a module: `remove` "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Removes a module from Kaji."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Format: `remove MODULE_INDEX`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Removes the module based on the index provided."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `MODULE_INDEX` refers to the index number shown in the current module list. "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Index provided **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Example: \u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, you are currently at the admin level and want to remove the module `CS2113T`, the steps to do so are shown below:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: Enter the command `remove 1` to remove the first module in the list which in this case is `CS2113T`: \u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Remove Module 1](UG_Images/RemoveMod1.PNG)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: The module as well as the chapters and flashcards in it are removed, and the output message below will be shown: \u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Remove Module 2](UG_Images/RemoveMod2.PNG)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.5. Accessing the module level: `go`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jiayi)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Now you have learnt how to create, edit and delete the module deck, let\u0027s move to the next page. You can now access the module deck you have created by using the command `go \\MODULE_CODE`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Format: `go \\MODULE_INDEX`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\\MODULE_INDEX is the index of the module that you can find in the list command, such as `1`, `2` or `3`. "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Key Pointers:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Kaji only allow access to the existing modules that are shown in the list, therefore, module that is deleted or has never been created will result in an error message."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Kaji does not recognise any index out of bound such as `0` or index numbers that are not present in the list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Example: "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "In this example, you are going to access the module `CS2113T` that you have created in the previous sections."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Below are steps of using this `go` command:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: Uses `list` command to check the index of the module that you would like to access."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Go Module 1](UG_Images/goModule1.PNG)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: In this example, the module you would like to access is `CS2113T` and its index is `2` as shown as the diagram below."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Go Module 2](UG_Images/goModule2.PNG)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: You can type `go 2` to access this module."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Go Module 3](UG_Images/goModule3.PNG)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: As shown below, you are now "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Go Module 4](UG_Images/goModule4.PNG)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 5: You may double check your access using the command prompt directory displayed on top of `Enter command here:`. As shown as the diagram, your current access directory is under `Admin/CS2113T`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Go Module 5](UG_Images/goModule5.PNG)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.2. Module level"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "This section introduces the syntax and usages of the commands for the features that are available at the **Module Level**.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Ensure that you are at the **Module Level** before trying the commands in the next few sections:\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/ModuleLevel.png\" width\u003d\"600\" alt\u003d\"Module Level\"/\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.1. Adding a chapter: `add`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jiayi)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "You are now at the module level! This command allows you to create a new chapter inside your current module deck. It belongs to the module level you are currently in. It is like preparing an empty paper to write notes for a lecture. Let\u0027s create a new chapter inside the module!"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Format: `add \\CHAPTER_NAME`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\\CHAPTER_NAME is the name of the new chapter that you would like to create, such as `Topic 1`, `Chapter 1` or `Newton\u0027s laws of motion`. "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Key Pointers:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Similar to module, Kaji does not allow duplicate of chapter names, therefore, if the existing chapter has the same name as the new chapter, you will get an error message"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Kaji is not case-sensitive, therefore, a new chapter named `chapter`  will be treated equally to a module named `CHAPTER`. "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Example 1: "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "In this example, you are going to add a new chapter called `Chapter 1`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Below are steps of using this `add` command:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: Enters the command `add Chapter 1` into the command prompt which your new chapter name comes after the key word `add`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Chapter 1](UG_Images/addChapter1.PNG)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: In Kaji, you can give new chapters a rate to pre-set its revision schedules. If you would like to keep it as fault state, you can simply enter `N`. To demonstrate this feature fully, you may enter `Y` to rate the new chapter and check out how will Kaji responses!"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Chapter 2](UG_Images/addChapter2.PNG)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 3: You choose to rate the new chapter from the previous step, therefore, you can rate your chapter as `Easy`, `Medium` or `Hard` by entering `E`, `M` and `H` as shown as the instruction given by Kaji."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Chapter 3](UG_Images/addChapter3.PNG)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 4: You have just created a new chapter! Good Job!"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Add Chapter 4](UG_Images/addChapter4.PNG)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.2. Listing chapters available: `list`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "This command shows a list of chapters on the module level."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Here are some key points:"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Do not need to add `module_name` after `list`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* All list commands have the same command word `list`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* At Module Level: enter the command `list`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Here is the expected output:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![List Chapters](UG_Images/list_chapter.png)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* The date in the bracket is the due date for each chapter."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* After listing all chapters, you can try all commands available in **Module Level**."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.3. Editing a chapter name: `edit`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "You can edit the name of an existing chapter from the list of chapters."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "You can do so by using the `edit` command, followed by the edited name of the chapter."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Format:** `edit CHAPTER_INDEX CHAPTER_NAME`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `CHAPTER_INDEX` **must be a positive integer** 1, 2, 3, ...,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "and must be a valid index number for a chapter as displayed from the list of chapters."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `CHAPTER_NAME` is the edited name of your chapter."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Let\u0027s say you want to edit the chapter name to `Chapter 1` for the chapter `chap 1`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 1: Type `list` into the command prompt and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/EditChapter1.png\" width\u003d\"600\" alt\u003d\"Edit Chapter 1\"/\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 2: From the list of chapters displayed, you can see that the chapter `CHAPTER_INDEX` is 1.\u003cbr\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/EditChapter2.png\" width\u003d\"600\" alt\u003d\"Edit Chapter 2\"/\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 3: Next, you can type `edit 1 Chapter 1` into the command prompt and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/EditChapter3.png\" width\u003d\"600\" alt\u003d\"Edit Chapter 3\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 4: After the chapter name has been successfully edited, the result will be displayed as shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/EditChapter4.png\" width\u003d\"600\" alt\u003d\"Edit Chapter 4\"/\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.4. Removing a chapter: `remove`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Removes a chapter from Kaji."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Format: `remove CHAPTER_INDEX`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Removes the chapter based on the index provided."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `CHAPTER_INDEX` refers to the index number shown in the current chapter list. "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Index provided **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Example: \u003cbr\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, you are currently at the module level `CS2113T` and want to remove the chapter `Chapter 1`, the steps to do so are shown below:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: Enter the command `remove 1` to remove the first chapter in the list which in this case is `Chapter 1`: \u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Remove Chapter 1](UG_Images/RemoveChap1.PNG)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: The chapter and the flashcards in it are removed, and the output message below will be shown: \u003cbr\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Remove Chapter 2](UG_Images/RemoveChap2.PNG)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.5. Accessing the chapter level: `go` "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Proceeds to the Chapter Level with reference to one of the Chapters within the module."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Format: `go CHAPTER_INDEX`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Darticune"
        },
        "content": " "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Example: \u003cbr\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Darticune"
        },
        "content": "For instance, you are currently in Module level `Module` and want to head to Chapter level `Chapter1` , the steps to"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Darticune"
        },
        "content": " do so are shown below:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 1: Enter the command `go 1` to head down to the Chapter level below: \u003cbr\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/moduleGo.png\" alt\u003d\"Go Command\"/\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of the \"go\" command "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Step 2: You should return to the Admin level as shown below: \u003cbr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/moduleGoResult.png\" alt\u003d\"Go Result\"/\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of the \"go\" command Result"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.6. Returning to admin level: `back`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Returns to the Admin level."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Format: `back`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Darticune"
        },
        "content": " "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Example: \u003cbr\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Darticune"
        },
        "content": "For instance, you are currently in Module level `Module` and want to return to the Admin level, the steps to do so"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Darticune"
        },
        "content": " are shown below:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Step 1: Enter the command `back` to return to the previous level which is the module level: \u003cbr\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/back.png\" alt\u003d\"Back Command\"/\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of the \"back\" command "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Step 2: You should return to the Admin level as shown below: \u003cbr\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/backComplete.png\" alt\u003d\"Back Result\"/\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of the \"back\" command Result"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.7. Starting a revision session: `revise`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Starts a revision session for a chapter."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Format: `revise CHAPTER_INDEX` "
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Here are some key pointers: "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Revision can only be done at module level. "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Starts a revision based on the index provided. "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* The index refers to the index number shown in the chapter list for the module level you are currently in.  "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Index provided **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Example: \u003cbr\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, you are currently in the module level `CS2113T` and want to start a revision for `Chapter 1`, the steps to do so are shown below:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: Enter the command `revise 1` to start a revision on the first chapter in the list which in this case is `Chapter 1`: \u003cbr\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Revise 1](UG_Images/Revise1.png)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: If the chapter is not due for revision yet, you will be shown the below message: \u003cbr\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Revise 2](UG_Images/Revise2.PNG)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 3: Enter `Y` to start the revision."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Revise 3](UG_Images/Revise3.PNG)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 4: The message below will be shown at the start of the revision: \u003cbr\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Revise 4](UG_Images/Revise4.PNG)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 5: The question of the flashcard will be shown as well: \u003cbr\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Revise 5](UG_Images/Revise5.PNG)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 6: Enter `s` to see the answer for the flashcard: \u003cbr\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Revise 6](UG_Images/Revise6.PNG)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 7: Based on the difficulty of the flashcard, you may enter either `e`/`m`/`h`/`c` to rate the flashcard as shown below: \u003cbr\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Revise 7](UG_Images/Revise7.PNG)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 8: If you entered `c`, the same flashcard will be shown again after your last flashcard, and the process will repeat until you enter `e`/`m`/`h` for the particular flashcard you could not answer for.  "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 9: Once all the flashcards have been revised, the output message below will be shown: \u003cbr\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Revise 8](UG_Images/Revise8.PNG)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.8. Rescheduling a chapter: `reschedule`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "You can reschedule the due date of an existing chapter from the list of chapters."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Rescheduling a chapter allows you to reschedule a chapter to an earlier or later date than the specified due date."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "You can do so by using the `reschedule` command, followed by the due date that you want to reschedule the chapter to."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Format:** `reschedule CHAPTER_INDEX DATE`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `CHAPTER_INDEX` **must be a positive integer** 1, 2, 3, ...,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "and must be a valid index number for a chapter as displayed from the list of chapters."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `DATE` is the rescheduled due date of your chapter."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `DATE` should be in the format `yyyy-MM-dd`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Let\u0027s say you want to reschedule the due date to `2020-12-20` for the chapter `Chapter 1`."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 1: Type `list` into the command prompt and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/RescheduleChapter1.png\" width\u003d\"600\" alt\u003d\"Reschedule Chapter 1\"/\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 2: From the list of chapters displayed, you can see that the chapter `CHAPTER_INDEX` is 1.\u003cbr\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/RescheduleChapter2.png\" width\u003d\"600\" alt\u003d\"Reschedule Chapter 2\"/\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 3: Next, you can type `reschedule 1 2020-12-20` into the command prompt and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/RescheduleChapter3.png\" width\u003d\"600\" alt\u003d\"Reschedule Chapter 3\"/\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 4: After the due date of the chapter has been successfully rescheduled, the result will be displayed as shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/RescheduleChapter4.png\" width\u003d\"600\" alt\u003d\"Reschedule Chapter 4\"/\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.3. Chapter Level"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "This section introduces the syntax and usages of the commands for the features that are available at the **Chapter Level**.\u003cbr\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Ensure that you are at the **Chapter Level** before trying the commands in the next few sections:\u003cbr\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/ChapterLevel.png\" width\u003d\"600\" alt\u003d\"Chapter Level\"/\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.1. Adding a flashcard: `add`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "After adding a new chapter, the first thing you might want to do is to add a flashcard to the chapter."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "You can do so by using the `add` command, followed by the details of the flashcard."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Format:** `add q:QUESTION | a:ANSWER`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `QUESTION` is the question of your flashcard."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `ANSWER` is the answer of your flashcard."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* You need to type `q:` before the `QUESTION` parameter. "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* You need to type `a:` before the `ANSWER` parameter."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Having `|` between `q:QUESTION` and `a:ANSWER` is required."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Let\u0027s say you want to add a new flashcard with `1+1` as the `QUESTION` and `2` as the `ANSWER`:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 1: Type `add q:1+1 | a:2` into the command prompt and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/AddCard1.png\" width\u003d\"600\" alt\u003d\"Add Card 1\"/\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 2: After the flashcard has been successfully added to the chapter, the result will be displayed as shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/AddCard2.png\" width\u003d\"600\" alt\u003d\"Add Card 2\"/\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.2. Listing flashcards available: `list`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "After adding flashcards to the chapter, you can view the list of flashcards that you have for the chapter."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "You can do so by using the `list` command."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Format:** `list`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* You cannot type in any parameters after the `list` command."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Let\u0027s say you want to view all the flashcards for a chapter:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 1: Type `list` into the command prompt and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/ListCard1.png\" width\u003d\"600\" alt\u003d\"List Card 1\"/\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 2: The result for the list of flashcards will be displayed as shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/ListCard2.png\" width\u003d\"600\" alt\u003d\"List Card 2\"/\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.3. Editing a flashcard content: `edit`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "You can edit the question and/or answer of an existing flashcard from the list of flashcards."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "You can do so by using the `edit` command, followed by the details of the flashcard."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Format:** \u003cbr\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Editing question and answer: `edit FLASHCARD_INDEX q:QUESTION | a:ANSWER`\u003cbr\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Editing question only: `edit FLASHCARD_INDEX q:QUESTION | a:`\u003cbr\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Editing answer only: `edit FLASHCARD_INDEX q: | a:ANSWER`\u003cbr\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `FLASHCARD_INDEX` **must be a positive integer** 1, 2, 3, ...,"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "and must be a valid index number for a flashcard as displayed from the list of flashcards."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `QUESTION` is the edited question of your flashcard."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `ANSWER` is the edited answer of your flashcard."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* You need to type `q:` before the `QUESTION` parameter. "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* You need to type `a:` before the `ANSWER` parameter."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Having `|` between `q:QUESTION` and `a:ANSWER` is required."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* If the question or answer of your flashcard does not need to be edited,"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "you do not need to type any content for the parameter `QUESTION` or `ANSWER`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Example:**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Let\u0027s say you want to edit the question to `2*1` for the flashcard that has `1+1` as the question and `2` as the answer."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 1: Type `list` into the command prompt and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/EditCard1.png\" width\u003d\"600\" alt\u003d\"Edit Card 1\"/\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 2: From the list of flashcards displayed, you can see that the flashcard `FLASHCARD_INDEX` is 1.\u003cbr\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/EditCard2.png\" width\u003d\"600\" alt\u003d\"Edit Card 2\"/\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 3: Next, you can type `edit 1 q:2*1 | a:` into the command prompt and press `Enter` to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/EditCard3.png\" width\u003d\"600\" alt\u003d\"Edit Card 3\"/\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Step 4: After the flashcard has been successfully edited, the result will be displayed as shown.\u003cbr\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cimg src\u003d\"UG_Images/EditCard4.png\" width\u003d\"600\" alt\u003d\"Edit Card 4\"/\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.4. Removing a flashcard: `remove`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Removes a flashcard from Kaji."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Format: `remove FLASHCARD_INDEX`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Here are some key pointers:"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Removes the flashcard based on the index provided."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `FLASHCARD_INDEX` refers to the index number shown in the current flashcard list. "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Index provided **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Example: \u003cbr\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, you are currently at the chapter level `Chapter 1` and want to remove the flashcard `[Q] 1+1 | [A] 2`, the steps to do so are shown below:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: Enter the command `remove 1` to remove the first flashcard in the list which in this case is `[Q] 1+1 | [A] 2`: \u003cbr\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Remove Card 1](UG_Images/RemoveCard1.PNG)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: The flashcard is removed, and the output message below will be shown: \u003cbr\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Remove Card 2](UG_Images/RemoveCard2.PNG)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.5. Returning to module level: `back`"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Returns to the module level."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Format: `back`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Example: \u003cbr\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, you are currently in chapter level `Chapter 1` and want to return to the module level `CS2113T`, the steps to do so are shown below:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 1: Enter the command `back` to return to the previous level which is the module level: \u003cbr\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Back Module 1](UG_Images/BackMod1.PNG)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Step 2: You should return to the module level as shown below: \u003cbr\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Back Module 2](UG_Images/BackMod2.PNG)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.6. Checking overall performance for a chapter: `showrate`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jiayi)"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Congratulations! You have learnt how to add flashcards and revise your flash cards, and now is the time to **check your overall performance** for a chapter."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "It is very simple, all you have to do is to enter the command [`showrate`](#) in prompt. "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Format: `showrate`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Key Pointers:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* This command is only accessible in the chapter level. You will get an error message if you are in the wrong access level."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Only overall performance of your current chapter level will be computed."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Cards that has yet be answered will be label as \u003ccannot answer\u003e, therefore, if you find a `1.0` for `the percentage of cards that is labeled \u003ccannot answer\u003e`, don\u0027t panic, it will be updated as soon as you finish your first revision session of this particular chapter."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e As you now know, it is the level which you can add/edit/delete cards."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Example: "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "For instance, you would like to check your overall performance after completing several rounds of revision."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Below are steps of using this `showrate` command."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 1: Type \"showrate\" into the command prompt while you are in a chapter level."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![showrate 1](UG_Images/showrate1.PNG)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* Step 2: Kaji calculates the percentage of card in different master level (i.e. `easy`, `medium`, `hard` and `cannot answer`)."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![showrate 2](UG_Images/showrate2.PNG)"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.4. General"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "This section introduces the syntax and usages of the commands for the features that are available at **All Levels**.\u003cbr\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "You can use the commands in the next few sections at **Admin, Module and Chapter Level.**"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.4.1. Showing a list of commands available: `help`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "This command shows a list of commands available."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Here is a key point:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* This command can be **called from any Level**."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* At Any Level: enter the command `help`."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Here is part of the expected output, the whole output is a list of all commands useage:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![Help List Beginning](UG_Images/help1.png)"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![Help list Ending](UG_Images/help2.png)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* After knowing waht are the commands, you can try any commands on the correct level."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 3.4.4. Viewing the revision history: `history`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Darticune"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "You can view the revision completed in the session/in a day by using this command."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Format:\u003cbr\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "`history`\u003cbr\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "`history DATE`\u003cbr\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Here are some key points:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* This command can be **called from any Level**."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* If you enter `history`, Kaji will show the revision completed today (the day you enter `history`)."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* If you enter `history DATE`, the `DATE` need to be in the format of yyyy-mm-dd, then Kaji will show the revision completed on the given date."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Example of usage (`history` format): "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* At Any Level: enter the command `history`."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Here is the expected output:"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![History List](UG_Images/history.png)"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Example of usage (`history DATE` format): "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* At Any Level: enter the command `history 2020-10-30`."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Here is the expected output:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![History List](UG_Images/history_Date.png)"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* After knowing the revision you have completed, you can try any commands on the correct level."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 3.4.6. Exiting the program: `exit`"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Darticune"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "You can exit Kaji by using this command."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* At Any Level: enter the command `exit`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Here is the expected output:"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![Exit Kaji](UG_Images/exit.png)"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5 Scheduling In KAJI"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Now that you know how to make KAJI manage your Database of revision content for you, **what about scheduling?** For your benefit, the **scheduling** in KAJI is mostly **automated**! "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Darticune"
        },
        "content": "**You don\u0027t have to do a thing** to enjoy the benefits of Spaced Repetition. Everything is scheduled for you, so all you have to do is to use the commands [`due`](#) and [`preview`](#) to view what chapters are due and complete the revision  for them accordingly. "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Despite that, this **does not mean that you cannot customise** the scheduling process. KAJI allows you to [`reschedule`](#451) and [`exclude`](#451) Chapters manually if you wish to do so, but more on that later. First, let us get into the specific introduction of each command."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5.1. Listing the chapters due for today: `due`"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Darticune"
        },
        "content": "As you now know, **each Chapter will be scheduled** to be due on a date. However, it will be **tedious** for you to go through each chapter **one by one** to find their deadlines. Our **solution** to that, is the `due` command."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `due` command simplifies the process for by **showing you the Chapters that you have scheduled on that day** and the Modules they belong to."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Format: `due`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Key Pointers:"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* There are **no parameters** for this command."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This command can be **called from any Level**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Example: "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Darticune"
        },
        "content": "At any point, if you want to **see what Chapters are due**, all you have to do is enter the `due` command. Below is an example of an execution of the `due` command."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`due`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/due.png\" alt\u003d\"Due Command\"/\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of the \"due\" command "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/dueComplete.png\" alt\u003d\"Due Command Result\"/\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of the \"due\" result"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Darticune"
        },
        "content": "[Labeled expected output]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5.2. Listing the chapters that are due in the upcoming week: `preview`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Beyond simply being able to view the Chapters that are due on the day itself, what if you would like to **view your upcoming revision schedule** so that you can **plan ahead**? For that specific purpose, we have the `preview` command."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `preview` command shows you **the Chapters that you have scheduled for each day of the upcoming week** and the Modules that they belong to."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Format: `preview`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Key Pointers:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* There are **no parameters** for this command."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This command can be **called from any Level**"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Example: "
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Darticune"
        },
        "content": "At any point, if you **want to see a preview of which Chapters are going to be due within the upcoming week**, all you have to do is enter the `preview` command. Below is an example of an execution of the `preview` command."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`preview`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/preview.png\" alt\u003d\"Preview Command\"/\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of the \"preview\" command  "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/previewComplete.png\" alt\u003d\"Preview Command Result\"/\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of the \"preview\" result"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Darticune"
        },
        "content": "[Labeled expected output]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5.3. Adding chapters to your list of Excluded Modules: `exclude`"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Darticune"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Apart from viewing your schedule, what if the Semester has ended and you would like to take a Module or Chapter out of your schedule? If you were to remove the files from your database completely, it would be really tedious to add the content back Card by Card. Therefore, we created the `exclude` command."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `exclude` command allows you to **add** a single Chapter or every Chapter from a Module to your Exclusion list so that you can **remove these items** from your schedule."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Format: `exclude MODULE_OR_CHAPTER`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `exclude` command has two options for MODULE_OR_CHAPTER:"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***module***: This option allows you to use `exclude` to add all the Chapters from a Module into the Exclusion List."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***chapter***: This option allows you to use `exclude` to add a Chpater into the Exclusion List."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Key Pointers:"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This command can be **called from any Level**"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This command **checks if the Chapter/Module** you are adding into the Exclusion List **exists**, so the List will not be filled with non-existing exclusions."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Do note that the name of the Chapter/Module you provide has to be in the correct case as our check is **case-sensitive**."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Example"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Darticune"
        },
        "content": "At any point, if you would like to **add to your Exclusion List**, all you have to do is enter the `exclude` command with the choice of \"module\" or \"chapter\" in the format specified above. Below are examples of the execution of the `exclude` command using both options."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Example of ***`exclude module`***"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`exclude module`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeModule.png\" alt\u003d\"Exclude Command Module mode: Command\"/\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Module mode: Command"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 2***: Key the **Module name** that you wish to exclude from your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeModuleModulePrompt.png\" alt\u003d\"Exclude Command Module mode: ModuleName Prompt\"/\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Module mode: ModuleName Prompt"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeModuleModuleFilled.png\" alt\u003d\"Exclude Command Module mode: ModuleName Filled\"/\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Module mode: ModuleName Filled"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeModuleResult.png\" alt\u003d\"Exclude Command Module mode: Result\"/\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Module mode: Result"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Example of ***`exclude chapter`***"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`exclude chapter`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeChapter.png\" alt\u003d\"Exclude Command Chapter mode: ChapterName Command\"/\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Chapter mode: ChapterName Command"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 2***: Key the **Module name** of the Module that contains Chapter that you wish to exclude from your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeChapterModulePrompt.png\" alt\u003d\"Exclude Command Module mode: ModuleName Prompt\"/\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Chapter mode: ModuleName Prompt"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeChapterModuleFilled.png\" alt\u003d\"Exclude Command Module mode: ModuleName Filled\"/\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Chapter mode: ModuleName Filled"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 3***: Key the **Chapter name** that you wish to exclude from your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeChapterChapterPrompt.png\" alt\u003d\"Exclude Command Chapter mode: ChapterName Prompt\"/\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Chapter mode: ChapterName Prompt"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeChapterChapterFilled.png\" alt\u003d\"Exclude Command Chapter mode: ChapterName Filled\"/\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Chapter mode: ChapterName Filled"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/excludeChapterResult.png\" alt\u003d\"Exclude Command Chapter mode: Result\"/\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Exclude Command Chapter mode: Result"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5.4. Removing chapters from the list of Excluded Modules: `include`"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Darticune"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Darticune"
        },
        "content": "However, what should be done if you had excluded the Chapters of a Module from your schedule, only to find that it is a prerequisite for another module the next semester. To prepare for the upcoming semester, you would like to revise the excluded content again. This is why we created the `include` command."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `include` command allows you to **remove** a single Chapter or every Chapter from a Module from your Exclusion list so that you can **add these items** back into your schedule."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Format: `include MODULE_OR_CHAPTER`"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `include` command has two options for MODULE_OR_CHAPTER:"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***module***: This option allows you to use `include` to remove all the Chapters from a Module from the Exclusion List."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***chapter***: This option allows you to use `include` to remove a Chpater from the Exclusion List."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Key Pointers:"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This command can be **called from any Level**"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Do note that the name of the Chapter/Module you provide has to be in the correct case as our check is **case-sensitive**."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Example"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Darticune"
        },
        "content": "At any point, if you wish to **remove from your Exclusion List**, you can either enter the `include` command with the choice of either \"chapter\" or \"module\" in the format specified above. Below are examples of the command\u0027s execution using both options."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Example of ***`include module`***"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`include module`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeModule.png\" alt\u003d\"Include Command Module mode: ModuleName Command\"/\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Module mode: ModuleName Command"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 2***: Key the **Module name** that you wish to include back into your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeModuleModulePrompt.png\" alt\u003d\"Include Command Module mode: ModuleName Prompt\"/\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Module mode: ModuleName Prompt"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeModuleModuleFilled.png\" alt\u003d\"Include Command Module mode: ModuleName Filled\"/\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Module mode: ModuleName Filled"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeModuleResult.png\" alt\u003d\"Include Command Module mode: Result\"/\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Module mode: Result"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Example of ***`exclude chapter`***"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`exclude chapter`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeChapter.png\" alt\u003d\"Include Command Chapter mode: ChapterName Command\"/\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Chapter mode: ChapterName Command"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 2***: Key the **Module name** of the Module that contains the Chapter that you wish to include back into your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeChapterModulePrompt.png\" alt\u003d\"Include Command Chapter mode: ModuleName Prompt\"/\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Chapter mode: ModuleName Prompt"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeChapterModuleFilled.png\" alt\u003d\"Include Command Chapter mode: ModuleName Filled\"/\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Chapter mode: ModuleName Filled"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 3***: Key the **Chapter name** that you wish to include back into your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeChapterChapterPrompt.png\" alt\u003d\"Include Command Chapter mode: ChapterName Prompt\"/\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Chapter mode: ChapterName Prompt"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeChapterChapterFilled.png\" alt\u003d\"Include Command Chapter mode: ChapterName Filled\"/\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Chapter mode: ChapterName Filled"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cimg src\u003d\"UG_Images/includeChapterResult.png\" alt\u003d\"Include Command Chapter mode: Result\"/\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Example of Include Command Chapter mode: Result"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.1. Admin Level"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Add Module | `add MODULE_NAME` \u003cbr\u003e e.g. `add CS2113T` |"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| List Modules | `list` |"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Edit Module Name | `edit MODULE_INDEX MODULE_NAME` \u003cbr\u003e e.g. `edit 1 CS2113` |"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Remove Module | `remove MODULE_INDEX` \u003cbr\u003e e.g. `remove 1` |"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Access Module Level | `go MODULE_NAME` \u003cbr\u003e e.g. `go CS2113` |"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.2. Module Level"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Add Chapter | `add CHAPTER_NAME` \u003cbr\u003e e.g. `add Chapter 1` |"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| List Chapters | `list` |"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Edit Chapter Name | `edit INDEX CHAPTER_NAME` \u003cbr\u003e e.g. `edit 1 Chapter 1` |"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Remove Chapter | `remove CHAPTER_INDEX` \u003cbr\u003e e.g. `remove 1` |"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Access Chapter Level | `go CHAPTER_NAME` \u003cbr\u003e e.g. `go Chapter 1` |"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Return Admin Level | `back` |"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Revise | `revise CHAPTER_INDEX` \u003cbr\u003e e.g. `revise Chapter 1` |"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Reschedule | `reschedule CHAPTER_INDEX DATE` \u003cbr\u003e e.g. `reschedule 1 2020-11-03` |"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.3. Chapter Level"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Add Flashcard | `add q:QUESTION | a:ANSWER` \u003cbr\u003e e.g. `add q:1+1 | a:2` |"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| List Flashcards | `list` |"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Edit Flashcard | `edit FLASHCARD_INDEX q:QUESTION | a:ANSWER` \u003cbr\u003e e.g. `edit 1 q:2*1 | a:2` |"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Remove Flashcard | `remove FLASHCARD_INDEX` \u003cbr\u003e e.g. `remove 1` |"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Return Module Level | `back` |"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Show Rate | `showrate` |"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.4. General"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Help | `help` |"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Show Revision History | `history` or `history DATE` \u003cbr\u003e e.g. `history 2020-11-03` |"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Exit | `exit` |"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "### 4.5. Scheduling"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| List Due Chapters | `due` |"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "| Preview | `preview` |"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Darticune"
        },
        "content": "| Exclude | `exclude MODULE_OR_CHAPTER` \u003cbr\u003e e.g. `exclude module` or `exclude chapter` |"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Darticune"
        },
        "content": "| Include | `include MODULE_OR_CHAPTER` \u003cbr\u003e e.g. `include module` or `include chapter` |"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 117,
      "gua-guargia": 99,
      "-": 21,
      "neojiaern": 89,
      "Jane-Ng": 321,
      "Darticune": 302
    }
  },
  {
    "path": "docs/team/darticune.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "# Tan Yan An - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "KAJI is a flashcard database application that implements Spaced Repetition for its users automatically. Users can use"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": " this application to enjoy the benefits of Spaced Repetition to improve memory retention without ever having to"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  implement the technique themselves manually."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* **New Feature**: Viewing of due Chapters under due command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* **New Feature**: Viewing a forecast of Chapters that are due in the upcoming week."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* **New Feature**: Exclusion of Chapters from the Scheduling system"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* **New Feature**: Inclusion of Chapters back into the Scheduling system"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003ddarticune\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~otherx)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * Added the documentation for the features `go chapter`, `back admin`, `due`, `preview`, `include` and `exclude`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    ` [\\#72]()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * Added implementation details of the `Access Chapter`, `Return to Admin`, `View Due Chapters`, `View Upcoming"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "     Dues` and `Exclusion` features."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * Added architecture details of the `Structure` component."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Darticune": 33
    }
  },
  {
    "path": "docs/team/gua-guargia.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "# Jiayi Georgia Zhang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* **New Feature**: Access decks by levels."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * What it does:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * Justification:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * Highlight:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* **New Feature**: Add module/chapter by levels."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* **New Feature**: Calculate user\u0027s overall performance in revision"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * Allows the user to check how well they have mastered card by calculating the percentage of easy/medium/hard cards in one chapter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dgua-guargia\u0026tabRepo\u003dAY2021S1-CS2113T-F11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * **Feature**: Store Flashcard\u0027s master level"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * Added the documentation for the features `add module`, `add chapter`, `go module` and `showrate` [\\#72]()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * Added implementation details of the `AddChapterCommand`, `AddModuleCommand`, `GoModuleCommand` and `ShowrateCommand` features."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    * Added architecture details of the `Model` component."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#60](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/60)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 34
    }
  },
  {
    "path": "docs/team/jane-ng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "# Ng Shu Lin Jane - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "This section shows a summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Code contributions:** Please click this link to see a sample of my code: [RepoSense](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djane-ng)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Features implemented:**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Added the feature of adding flashcards"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Added the feature of editing module/chapter/flashcards"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Added the feature of rescheduling the due date of chapters"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Contributions to user guide:**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 3.2.3. Editing a chapter name: `edit`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 3.2.9. Rescheduling a chapter: `reschedule`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 3.3.1. Adding a flashcard: `add`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 3.3.2. Listing flashcards available:`list`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 3.3.3. Editing a flashcard content: `edit`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Contributions to developer guide:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 3.2. Logic Component"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 4.1.3. Edit Module Name Feature"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 4.2.3. Edit Chapter Name Feature"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 4.3.1. Add Flashcard Feature"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 4.3.3. Edit Flashcard Content Feature"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Section 4.5.4. Reschedule Chapter Feature"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Contributions to team-based tasks:**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Maintaining the issue tracker"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Release management"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "**Review contributions:**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Reviewed Pull Requests:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[\\#19](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/19),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[\\#20](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/20),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[\\#27](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/27),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[\\#55](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/55),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[\\#62](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/62),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[\\#63](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/63),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[\\#76](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/76),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[\\#81](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/81),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[\\#85](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/85)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 46
    }
  },
  {
    "path": "docs/team/neojiaern.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "# Neo Jia Ern - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## Project: KAJI"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### Overview "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "KAJI is a desktop command line interface application catered for university students to schedule their revision, as well as allow them to revise content in the form of flashcards. It is written in java and has about "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Given below are my contributions to the project:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* New Feature: Added the ability to remove modules/chapters/flashcards."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  * What it does: Allows the user to remove modules/chapter/flashcards that are no longer needed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  * Justification: This feature improves the product significantly because it allows user to completely remove data of a module/chapter/flashcard if he does not want to keep it anymore. In addition, removing content decreases the amount of storage space needed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* New Feature: Added the ability for the user to do a revision."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  * What it does: Allows the user to revise on chapters he wants in the form of flashcards."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  * Justification: This feature improves the product significantly because it allows users to do their revision in the form of flashcards and even takes in input on user\u0027s rating of each flashcard in order for the scheduler to schedule the next time the chapter should be revised. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Code Contributed:  [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dneojiaern)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Project management: "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  * Managed releases `v1.0` - `v2.1` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Enhancements to existing features:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    * Added documentation for the features `Remove Module`, `Remove Chapter`, `Remove Flashcard` and `Return to Module Level` "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  * Developer Guide: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    * Added implementation details for the features `Remove Module`, `Remove Chapter`, `Remove Flashcard` and `Return to Module Level` "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    * Added class diagram for `UI Component` and sequence diagrams for `Remove Module`, `Remove Chapter`, `Remove Flashcard` and `Return to Module Level`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  * PRs reviewed (with non-trivial review comments):"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  [#56](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/56), [#68](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/68), "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  [#76](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/76), [#87](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/87), "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "  [#89](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/89), [#117](https://github.com/AY2021S1-CS2113T-F11-3/tp/pull/117)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "neojiaern": 39
    }
  },
  {
    "path": "docs/team/zhu-ze-yu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "# Zhu Zeyu - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "## Project: KAJI"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "### 1. Overview "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "KAJI is a schedule manager that implements Spaced Repetition, optimised for use via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "It is written in Java, and has about 2 kLoC."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "### 2. Summary of Contributions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* **Code contributed**: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dF11-3\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003dfunctional-code\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dJane-Ng\u0026tabRepo\u003dAY2021S1-CS2113T-F11-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003dfunctional-code)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* **New feature:** list module/chapters/flashcards base on different level."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* **New feature:** save and load flashcards(.txt file) in corresponding chapter(folder)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* **Enhancement implemented:** Save the revision completed in the session/in a day."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* **Documentation:**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    * User Guide:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        * Added the overview section"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        * Added the description for the features: `list modules/chapters/flashcards`, `edit module`, `view history` and `exit`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        * Added command summary"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    * Developer Guide:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        * Added overall architecture diagram "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        * Added implementation details of the `ListModulesCommand`, `ListChaptersCommand`, `ListCardsCommand` and `HistoryCommand` features. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        "
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 24
    }
  },
  {
    "path": "src/main/java/Kaji.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.StorageDataException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_HELP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Entry point of the Kaji application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Kaji {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Access access;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static final Logger logger \u003d KajiLog.getLogger(\"Kaji\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Sets up the required objects and loads the data from the storage file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param filePath filepath of the storage file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Kaji(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Admin admin \u003d new Admin(storage.loadModule());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access \u003d new Access(admin);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            storage.createAdmin();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access \u003d new Access();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /** Runs the program until termination. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.info(\"Starting up Kaji...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(MESSAGE_HELP);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                ui.showLevel(access);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand, access);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                c.execute(ui, access, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } catch (InvalidInputException | IncorrectAccessLevelException | IOException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    | IndexOutOfBoundsException | InvalidFileFormatException | ExclusionFileException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    | StorageDataException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                logger.warning(\"An error occured: \" + e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.info(\"Exiting Kaji...\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        new Kaji(\"data/admin\").run();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 10,
      "gua-guargia": 15,
      "neojiaern": 13,
      "Jane-Ng": 40
    }
  },
  {
    "path": "src/main/java/access/Access.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package access;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Stores temporary data about user\u0027s current access level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class Access {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String adminLevel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String moduleLevel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String chapterLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected Chapter chapter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected Module module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected Admin admin;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected boolean isAdminLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected boolean isModuleLevel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected boolean isChapterLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Access(Admin admin) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.admin \u003d admin;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Access() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getModuleLevel() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return moduleLevel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getLevel() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return level;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Module getModule() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Chapter getChapter() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapter;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Admin getAdmin() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return admin;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setAdmin(Admin admin) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.admin \u003d admin;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setModule(Module module) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setChapter(Chapter chapter) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isAdminLevel() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return isAdminLevel;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isModuleLevel() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return isModuleLevel;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isChapterLevel() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return isChapterLevel;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setIsAdminLevel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setIsModuleLevel() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isModuleLevel \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setIsChapterLevel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isChapterLevel \u003d true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Determines the action to be taken: access a module level or go back to admin level."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param moduleLevel the name of the chapter level to be accessed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setModuleLevel(String moduleLevel) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (isAdminLevel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setGoModuleLevel(moduleLevel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setBackAdminLevel(moduleLevel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Updates user\u0027s current access level from admin level to corresponding module level."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param moduleLevel the name of the module level to be accessed"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setGoModuleLevel(String moduleLevel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d moduleLevel;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d level + \"/\" + moduleLevel;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d new Module(moduleLevel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsModuleLevel();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Updates user\u0027s current access level from module level to admin level."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param moduleLevel the name of the module level to be accessed"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setBackAdminLevel(String moduleLevel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d adminLevel;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d moduleLevel;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsAdminLevel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Determines the action to be taken: access a chapter level or go back to module level."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param chapterLevel the name of the chapter level to be accessed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setChapterLevel(String chapterLevel) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (isChapterLevel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setBackModuleLevel(chapterLevel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setGoChapterLevel(chapterLevel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Updates user\u0027s current access level from module level to corresponding chapter level."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param chapterLevel the name of the chapter level to be accessed"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setGoChapterLevel(String chapterLevel) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d chapterLevel;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d level + \"/\" + chapterLevel;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d new Chapter(chapterLevel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsChapterLevel();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Updates user\u0027s current access level from chapter level to module level."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param chapterLevel the name of the module level to be accessed"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setBackModuleLevel(String chapterLevel) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d adminLevel + \"/\" + moduleLevel;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d chapterLevel;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsModuleLevel();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Gets user\u0027s current access level."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return user\u0027s current access level (i.e. admin, module or chapter)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String getAccessLevel() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String accessLevel;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (isAdminLevel()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            accessLevel \u003d ADMIN;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } else if (isModuleLevel()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            accessLevel \u003d MODULE;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } else if (isChapterLevel()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            accessLevel \u003d CHAPTER;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            accessLevel \u003d \"No level\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return accessLevel;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 172,
      "Jane-Ng": 35
    }
  },
  {
    "path": "src/main/java/commands/AddCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "//@@author Jane-Ng"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Adds a flashcard to a chapter."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class AddCardCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(AddCardCommand.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Creates an AddCardCommand to add the specified {@code question} and {@code answer}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param question question to be added to a flashcard"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param answer answer to be added to a flashcard"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public AddCardCommand(String question, String answer) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d addCard(access, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Adds a flashcard."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param access to get the list of cards"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param storage to write the flashcard content to the storage file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws IOException if there is an error writing to the storage file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String addCard(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (cards.checkCardExistence(card.getQuestion().toLowerCase(), card.getAnswer().toLowerCase())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return String.format(MESSAGE_ITEM_EXISTED, CARD,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    \"[Q] \" + card.getQuestion() + \" [A] \" + card.getAnswer(), CARD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        logger.info(\"Adding flashcard: \" + card);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.addCard(card);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int cardCount \u003d cards.getCardCount();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storage.saveCards(cards, access.getModule().getModuleName(), access.getChapter().getChapterName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        logger.info(\"Successfully saved the flashcards.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return prepareResult(CARD, card.toString(), cardCount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 1,
      "Darticune": 11,
      "Jane-Ng": 57
    }
  },
  {
    "path": "src/main/java/commands/AddChapterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Adds a chapter to a module."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class AddChapterCommand extends AddCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a chapter to the module. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Chapter 1\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String chapter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Creates an AddChapterCommand to add a new {@code chapter} with name entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param chapter name of the new chapter that users would like to create"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public AddChapterCommand(String chapter) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Chapter chapter \u003d new Chapter(this.chapter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d addChapter(access, storage, chapter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Adds a chapter."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param access temporary access data about user\u0027s current access level"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param storage file storage and file management of Kaji"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param chapter new chapter that user would like to create"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws IOException if there is an error writing to the storage file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String addChapter(Access access, Storage storage, Chapter chapter) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Module newModule \u003d access.getModule();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ChapterList chapters \u003d newModule.getChapters();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean isChapterExist \u003d chapters.checkChapterExistence(chapter.getChapterName().toLowerCase());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (isChapterExist) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            String result \u003d String.format(MESSAGE_ITEM_EXISTED, CHAPTER, chapter.getChapterName(), CHAPTER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Chapter newChapter \u003d new Chapter(this.chapter, rateChapter(), storage, access);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters.addChapter(newChapter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int chapterCount \u003d chapters.getChapterCount();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setModule(newModule);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage.createChapter(chapter.getChapterName(), access.getModuleLevel());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return prepareResult(CHAPTER, chapter.toString(), chapterCount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Give an initial rating to a new chapter."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return the corresponding rate of chapter entered by user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String rateChapter() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (Ui.chooseToRateNewDeck()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return Ui.getChoiceOfNewDeckRating();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return \"N\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 74,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Represents an AddCommand which contains methods used in the various AddCommand classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CHAPTER_PARAMETERS \u003d \" CHAPTER_NAME\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MODULE_PARAMETERS \u003d \" MODULE_NAME\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CARD_PARAMETERS \u003d \" q:QUESTION | a:ANSWER\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module / chapter / flashcard.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"           \" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"           \" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2113T\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" Chapter 1\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Got it. I\u0027ve added this %1$s:\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_COUNT \u003d \"Now you have %1$d %2$s(s) in the list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Constructs the result of the command execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param type module, chapter or card type"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param content content that is added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param count total number of modules, chapters or flashcards"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String prepareResult(String type, String content, int count) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_SUCCESS, type));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(content).append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_COUNT, count, type));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 25,
      "neojiaern": 4,
      "Jane-Ng": 25
    }
  },
  {
    "path": "src/main/java/commands/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Adds a module to a admin."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class AddModuleCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new module. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2113T\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Creates an AddModuleCommand to add a new {@code module} with name entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param module name of the new module that users would like to create"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public AddModuleCommand(String module) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Module module \u003d new Module(this.module);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d addModule(access, storage, module);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Adds a module."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param access temporary access data about user\u0027s current access level"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param storage file storage and file management of Kaji"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param module new module that user would like to create"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String addModule(Access access, Storage storage, Module module) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Admin newAdmin \u003d access.getAdmin();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ModuleList modules \u003d newAdmin.getModules();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean isModuleExist \u003d modules.checkModuleExistence(module.getModuleName().toLowerCase());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (isModuleExist) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            String result \u003d String.format(MESSAGE_ITEM_EXISTED, MODULE, module.getModuleName(), MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules.addModule(module);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int moduleCount \u003d modules.getModuleCount();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setAdmin(newAdmin);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage.createModule(module.getModuleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return prepareResult(MODULE, module.toString(), moduleCount);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 58,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/commands/BackAdminCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Back to the Admin level."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class BackAdminCommand extends BackCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Back to admin level.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setModuleLevel(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 15,
      "Jane-Ng": 3
    }
  },
  {
    "path": "src/main/java/commands/BackCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public abstract class BackCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Back to admin/module level.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 17,
      "gua-guargia": 1,
      "Jane-Ng": 2
    }
  },
  {
    "path": "src/main/java/commands/BackModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Back to the Module level."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class BackModuleCommand extends BackCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Back to module level.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setChapterLevel(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 15,
      "Jane-Ng": 3
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.StorageDataException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Represents a command that has the ability to be executed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param ui ui which the command uses to print messages"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param access access which the command uses to get the modules, chapters or cards"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param storage storage which the command uses to load or write data to storage files"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not valid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws IOException if there is an error writing to files"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidFileFormatException if the format in the storage file is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws ExclusionFileException if there is an error with the exclusion file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws StorageDataException if there is an error with any of the storage folders or files"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IOException, InvalidFileFormatException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            ExclusionFileException, StorageDataException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Checks to see if the program should terminate."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return true to terminate the program"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 5,
      "gua-guargia": 3,
      "neojiaern": 1,
      "Jane-Ng": 32
    }
  },
  {
    "path": "src/main/java/commands/EditCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Edits the question and/or answer of a flashcard."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditCardCommand extends EditCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(EditCardCommand.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the flashcard content.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3 q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_QUESTION \u003d \"%1$s has the same question as what you entered: %2$s\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_ANSWER \u003d \"%1$s has the same answer as what you entered: %2$s\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_CONTENT \u003d \"%1$s has the same content as what you entered: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"[Q] %2$s | [A] %3$s\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int editIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Creates an EditCardCommand to edit to the specified {@code question} and {@code answer}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param editIndex of the flashcard in the list of flashcards to edit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param question question to edit the question of the flashcard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param answer answer to edit the answer of the flashcard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public EditCardCommand(int editIndex, String question, String answer) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d editCard(access, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Edits the content of a flashcard."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param access to get the list of flashcards"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param storage to write the flashcard content to the storage file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the index is invalid"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws IOException if there is an error writing to the storage file"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String editCard(Access access, Storage storage) throws InvalidInputException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert !question.isEmpty() || !answer.isEmpty() : \"The content for question and answer are both empty.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Card card \u003d cards.getCard(editIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String checkResult \u003d checkCardContent(card);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!checkResult.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return checkResult;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (question.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                question \u003d card.getQuestion();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (answer.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                answer \u003d card.getAnswer();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (cards.checkCardExistence(question.toLowerCase(), answer.toLowerCase())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    \u0026\u0026 !(question.toLowerCase().equals(card.getQuestion().toLowerCase())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    \u0026\u0026 answer.toLowerCase().equals(card.getAnswer().toLowerCase()))) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return String.format(MESSAGE_ITEM_EXISTED, CARD, \"[Q] \" + question + \" [A] \" + answer, CARD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            logger.info(\"Editing flashcard: \" + card);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareBeforeEdit(CARD, card.toString()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            card.setQuestion(question);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            card.setAnswer(answer);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            logger.info(\"Flashcard successfully edited to: \" + card);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareAfterEdit(CARD, card.toString()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            storage.saveCards(cards, access.getModule().getModuleName(), access.getChapter().getChapterName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            logger.info(\"Successfully saved the flashcards.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_INDEX_RANGE, CARD));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Checks if the question and/or answer is the same as the content of the card to be edited."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param card to be edited"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String checkCardContent(Card card) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (question.equals(card.getQuestion()) \u0026\u0026 answer.equals(card.getAnswer())) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return String.format(MESSAGE_SAME_CONTENT, card, question, answer);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (answer.isEmpty() \u0026\u0026 question.equals(card.getQuestion())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return String.format(MESSAGE_SAME_QUESTION, card, question);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (question.isEmpty() \u0026\u0026 answer.equals(card.getAnswer())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return String.format(MESSAGE_SAME_ANSWER, card, answer);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 125
    }
  },
  {
    "path": "src/main/java/commands/EditChapterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.StorageDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Edits the chapter name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditChapterCommand extends EditCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(EditChapterCommand.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the chapter name.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 Chapter 2\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_NAME \u003d \"%1$s has the same chapter name as what you entered: %2$s\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int editIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String chapter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Creates an EditChapterCommand to edit to the specified {@code chapter}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param editIndex of the chapter in the list of chapters to edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param chapter name to edit the chapter to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public EditChapterCommand(int editIndex, String chapter) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, StorageDataException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d editChapter(access, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Edits the name of the chapter."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param access to get the list of chapters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param storage to rename the storage file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the index is invalid"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws StorageDataException if there is an error renaming the storage file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String editChapter(Access access, Storage storage) throws InvalidInputException, StorageDataException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert !chapter.isEmpty() : \"The chapter name is missing.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Chapter chapter \u003d chapters.getChapter(editIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (this.chapter.equals(chapter.getChapterName())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return String.format(MESSAGE_SAME_NAME, chapter.getChapterName(), this.chapter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (chapters.checkChapterExistence(this.chapter.toLowerCase())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    \u0026\u0026 !this.chapter.toLowerCase().equals(chapter.getChapterName().toLowerCase())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return String.format(MESSAGE_ITEM_EXISTED, CHAPTER, this.chapter, CHAPTER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            logger.info(\"Renaming chapter: \" + chapter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            storage.renameChapter(this.chapter, access.getModule(), chapter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareBeforeEdit(CHAPTER, chapter.toString()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            chapter.setChapterName(this.chapter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            logger.info(\"Chapter successfully renamed to: \" + chapter);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareAfterEdit(CHAPTER, chapter.toString()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 88
    }
  },
  {
    "path": "src/main/java/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.StorageDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Represents an EditCommand which contains methods used in the various EditCommand classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MODULE_PARAMETERS \u003d \" MODULE_INDEX MODULE_NAME\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String CHAPTER_PARAMETERS \u003d \" CHAPTER_INDEX CHAPTER_NAME\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String CARD_PARAMETERS \u003d \" FLASHCARD_INDEX q:QUESTION | a:ANSWER\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \": Edit the module name / chapter name / flashcard content.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"           \" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"           \" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 CS2113T\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" 2 Chapter 2\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" 3 q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_BEFORE_EDIT \u003d \"The following %1$s will be edited:\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_AFTER_EDIT \u003d \"Edited %1$s:\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IOException, StorageDataException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Constructs the result of the command execution before editing the content."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param type module, chapter or card type"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param content content to be edited"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    protected String prepareBeforeEdit(String type, String content) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_BEFORE_EDIT, type));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(content).append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Constructs the result of the command execution after editing the content."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param type module, chapter or card type"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param content content it is edited to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    protected String prepareAfterEdit(String type, String content) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_AFTER_EDIT, type));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(content);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 1,
      "Jane-Ng": 70
    }
  },
  {
    "path": "src/main/java/commands/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.StorageDataException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Edits the module name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditModuleCommand extends EditCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(EditModuleCommand.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the module name.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 CS2113T\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_NAME \u003d \"%1$s has the same module name as what you entered: %2$s\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int editIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String module;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Creates an EditModuleCommand to edit to the specified {@code module}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param editIndex of the module in the list of modules to edit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param module name to edit the module to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public EditModuleCommand(int editIndex, String module) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, StorageDataException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d editModule(access, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Edits the name of the module."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param access to get the list of modules"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param storage to rename the storage file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the index is invalid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws StorageDataException if there is an error renaming the storage file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String editModule(Access access, Storage storage) throws InvalidInputException, StorageDataException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isAdminLevel() : \"Not admin level\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert !module.isEmpty() : \"The module name is missing.\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Module module \u003d modules.getModule(editIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (this.module.equals(module.getModuleName())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return String.format(MESSAGE_SAME_NAME, module.getModuleName(), this.module);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (modules.checkModuleExistence(this.module.toLowerCase())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    \u0026\u0026 !this.module.toLowerCase().equals(module.getModuleName().toLowerCase())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return String.format(MESSAGE_ITEM_EXISTED, MODULE, this.module, MODULE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            logger.info(\"Renaming module: \" + module);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            storage.renameModule(this.module, module);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareBeforeEdit(MODULE, module.getModuleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            module.setModuleName(this.module);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            logger.info(\"Module successfully renamed to: \" + module);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareAfterEdit(MODULE, module.getModuleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_INDEX_RANGE, MODULE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 86
    }
  },
  {
    "path": "src/main/java/commands/ExcludeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ExcludeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_OPTION_MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_OPTION_CHAPTER \u003d \"chapter\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUSION_SUCCESS_MESSAGE \u003d \"Success! The %s has been excluded from your schedule. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Check out your updated due dates with the \\\"due\\\" command or \\\"preview\\\" command now.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exclude\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Excludes Modules and Chapters from your schedule.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Parameters: \" + EXCLUDE_COMMAND_OPTION_CHAPTER + \" or \" + EXCLUDE_COMMAND_OPTION_MODULE + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + EXCLUDE_COMMAND_OPTION_MODULE + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + EXCLUDE_COMMAND_OPTION_CHAPTER + \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String PRINT_FORMAT_MODULE \u003d \"Module: %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String PRINT_FORMAT_CHAPTER \u003d \"Module: %s; Chapter: %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ExcludeCommand(String type) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, ExclusionFileException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String result \u003d attemptToExclude(ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private String attemptToExclude(Ui ui, Storage storage) throws ExclusionFileException,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case EXCLUDE_COMMAND_OPTION_CHAPTER:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return addChapterToExclusion(storage, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case EXCLUDE_COMMAND_OPTION_MODULE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return addModuleToExclusion(storage, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"The specified type for the exclude command is invalid.\\nThe only valid \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"types are \\\"\" + EXCLUDE_COMMAND_OPTION_CHAPTER + \"\\\" and \\\"\" + EXCLUDE_COMMAND_OPTION_MODULE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"\\\".\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private String addChapterToExclusion(Storage storage, Ui ui) throws ExclusionFileException,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getExcludedModuleName(type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterName \u003d ui.getExcludedChapterName(moduleName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.appendChapterToExclusionFile(moduleName,chapterName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String exclusionTarget \u003d String.format(PRINT_FORMAT_CHAPTER, moduleName, chapterName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return String.format(EXCLUSION_SUCCESS_MESSAGE, exclusionTarget);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Chapter: \" + chapterName + \" could not be excluded as it does\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \" not exist.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private String addModuleToExclusion(Storage storage, Ui ui) throws ExclusionFileException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getExcludedModuleName(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.appendModuleToExclusionFile(moduleName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String exclusionTarget \u003d String.format(PRINT_FORMAT_MODULE, moduleName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return String.format(EXCLUSION_SUCCESS_MESSAGE, exclusionTarget);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Module: \" + moduleName + \" could not be excluded as it \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"does not exist.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 82
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program. \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 3,
      "gua-guargia": 2,
      "Jane-Ng": 17
    }
  },
  {
    "path": "src/main/java/commands/GoChapterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Access an existing chapter level from module level."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class GoChapterCommand extends GoCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(GoChapterCommand.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Goes to chapter level. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private final int chapterIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public GoChapterCommand(int chapterIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterIndex \u003d chapterIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String result \u003d goChapter(access, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (result.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Goes to a chapter level."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param access temporary access data about user\u0027s current access level"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param storage file storage and file management of Kaji"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws IOException if there is an error writing to the storage file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String goChapter(Access access, Storage storage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ArrayList\u003cChapter\u003e allChapters \u003d chapters.getAllChapters();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            Chapter chapter \u003d allChapters.get(chapterIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ArrayList\u003cCard\u003e allCards \u003d storage.loadCard(access.getModuleLevel(), chapter.getChapterName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (allCards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                result \u003d \"This is a new chapter, you can try to add flashcards inside!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access.setChapterLevel(chapter.getChapterName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapter.setCards(allCards);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access.setChapter(chapter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(\"Going into chapter: \" + chapter.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            result \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            result \u003d \"The chapter file cannot be found.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 74,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/commands/GoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public abstract class GoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"go\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MODULE_PARAMETERS \u003d \"MODULE_INDEX\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CHAPTER_PARAMETERS \u003d \"CHAPTER_INDEX\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Goes to chapter / module level. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"           \" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 20,
      "gua-guargia": 5,
      "Jane-Ng": 3
    }
  },
  {
    "path": "src/main/java/commands/GoModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Access an existing module level from admin level."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class GoModuleCommand extends GoCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(GoModuleCommand.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Goes to module level. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private final int moduleIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public GoModuleCommand(int moduleIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleIndex \u003d moduleIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d goModule(access, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (result.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Goes to a module level."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param access temporary access data about user\u0027s current access level"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param storage file storage and file management of Kaji"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws IOException if there is an error writing to the storage file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String goModule(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        assert access.isAdminLevel() : \"Not admin level\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ArrayList\u003cModule\u003e allModules \u003d modules.getAllModules();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            Module module \u003d allModules.get(moduleIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            ArrayList\u003cChapter\u003e chapters \u003d storage.loadChapter(module.getModuleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (chapters.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                result \u003d \"This is a new module, you can try to add chapters inside!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access.setModuleLevel(module.getModuleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            module.setChapters(chapters);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access.setModule(module);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(\"Going into module: \" + module.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            result \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, MODULE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            result \u003d \"The module folder cannot be found.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 70,
      "Jane-Ng": 8
    }
  },
  {
    "path": "src/main/java/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "//@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": " * Lists all the command available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of commands available. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showHelpList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 24,
      "gua-guargia": 2
    }
  },
  {
    "path": "src/main/java/commands/HistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "//@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": " * Lists all the revision history in a day."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String DATE_PARAMETER \u003d \" DATE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_DOES_NOT_EXIST \u003d \"You did not have any revision in this session.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_EXIST \u003d \"Here is the revision completed in the session/in a day:\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \": Lists the revision completed in the session/in a day. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Parameters:\" + DATE_PARAMETER + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2020-10-10\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * Creates a HistoryCommand to list the revision completed in the {@code date}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param date the date of the revision history the user want to list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public HistoryCommand(String date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String result \u003d listHistory(storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * Add module and chapter name revised into history."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param access to get the module and chapter name"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param storage to save the history content to the storage file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param reviseIndex to get which chapter have revised"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @throws IOException if there is an error writing to the storage file"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static void addHistory(Access access, Storage storage, int reviseIndex) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        LocalDate date \u003d java.time.LocalDate.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storage.createHistory(date.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String moduleName \u003d access.getModule().getModuleName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String chapterName \u003d access.getModule().getChapters().getChapter(reviseIndex).getChapterName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        History history \u003d new History(moduleName, chapterName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cHistory\u003e histories \u003d storage.loadHistory(date.toString());;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        histories.add(history);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storage.saveHistory(histories, date.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * list the revision history."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param storage to get the history content in the storage file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String listHistory(Storage storage) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            ArrayList\u003cHistory\u003e histories \u003d storage.loadHistory(date);;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            result.append(MESSAGE_EXIST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            for (History h : histories) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                result.append(\"\\n\").append(histories.indexOf(h) + 1).append(\".\").append(h);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return MESSAGE_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 91
    }
  },
  {
    "path": "src/main/java/commands/IncludeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class IncludeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String INCLUDE_COMMAND_OPTION_MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String INCLUDE_COMMAND_OPTION_CHAPTER \u003d \"chapter\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String INCLUSION_SUCCESS_MESSAGE \u003d \"Success! The %s has been included back into your schedule. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            +  \"Check out your updated due dates with the \\\"due\\\" command or \\\"preview\\\" command now.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"include\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Includes excluded Modules and Chapters back into \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"your schedule.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Parameters: \" + INCLUDE_COMMAND_OPTION_CHAPTER + \" or \" + INCLUDE_COMMAND_OPTION_CHAPTER + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + INCLUDE_COMMAND_OPTION_CHAPTER + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + INCLUDE_COMMAND_OPTION_MODULE + \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String PRINT_FORMAT_MODULE \u003d \"Module: %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String PRINT_FORMAT_CHAPTER \u003d \"Module: %s; Chapter: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public IncludeCommand(String type) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, ExclusionFileException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String result \u003d attemptToInclude(ui, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private String attemptToInclude(Ui ui, Storage storage) throws ExclusionFileException, InvalidInputException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case INCLUDE_COMMAND_OPTION_MODULE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return removeModuleFromExclusion(storage, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case INCLUDE_COMMAND_OPTION_CHAPTER:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return removeChapterFromExclusion(storage, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"The specified type for the include command is invalid.\\nThe only valid \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"types are \\\"\" + INCLUDE_COMMAND_OPTION_MODULE + \"\\\" and \\\"\" + INCLUDE_COMMAND_OPTION_CHAPTER"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"\\\".\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private String removeChapterFromExclusion(Storage storage, Ui ui) throws ExclusionFileException,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getIncludedModuleName(type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterName \u003d ui.getIncludedChapterName(moduleName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.removeChapterFromExclusionFile(moduleName,chapterName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String exclusionTarget \u003d String.format(PRINT_FORMAT_CHAPTER, moduleName, chapterName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return String.format(INCLUSION_SUCCESS_MESSAGE, exclusionTarget);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Chapter: \" + chapterName + \" could not be included as it does\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \" not exist.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private String removeModuleFromExclusion(Storage storage, Ui ui) throws ExclusionFileException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getIncludedModuleName(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.removeModuleFromExclusionFile(moduleName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String exclusionTarget \u003d String.format(PRINT_FORMAT_MODULE, moduleName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return String.format(INCLUSION_SUCCESS_MESSAGE, exclusionTarget);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Module: \" + moduleName + \"could not be included as it \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"does not exist.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 82
    }
  },
  {
    "path": "src/main/java/commands/ListCardsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Lists all the flashcards in a chapter."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class ListCardsCommand extends ListCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of flashcards available. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d listCards(access);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Lists all of the flashcards."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param access to get the list of cards"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String listCards(Access access) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d cards.getAllCards();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int cardCount \u003d cards.getCardCount();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return String.format(MESSAGE_DOES_NOT_EXIST, CARD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_EXIST, CARD));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(\"\\n\").append(allCards.indexOf(c) + 1).append(\".\").append(c);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 4,
      "Jane-Ng": 45
    }
  },
  {
    "path": "src/main/java/commands/ListChaptersCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class ListChaptersCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of chapters available. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String result \u003d listChapters(access);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String listChapters(Access access) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cChapter\u003e allChapters \u003d chapters.getAllChapters();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        int chapterCount \u003d chapters.getChapterCount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (chapterCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return String.format(MESSAGE_DOES_NOT_EXIST, CHAPTER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        result.append(String.format(MESSAGE_EXIST, CHAPTER));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (Chapter c : allChapters) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            result.append(\"\\n\").append(allChapters.indexOf(c) + 1).append(\".\").append(c);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (c.getDueBy() \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                result.append(\" (Corrupted due date. Please revise soon.)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                result.append(\" (due by \").append(c.getDueBy()).append(\")\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 44,
      "Jane-Ng": 1
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Represents a ListCommand which contains messages used in the various ListCommand classes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \": Shows a list of modules / chapters / flashcards available. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_EXIST \u003d \"Here are the %s(s) in your list:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_DOES_NOT_EXIST \u003d \"There are no %s(s) in your list.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 5,
      "gua-guargia": 2,
      "neojiaern": 1,
      "Jane-Ng": 18,
      "Darticune": 1
    }
  },
  {
    "path": "src/main/java/commands/ListDueCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ListDueCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"due\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all Chapters that are due by the execution \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"date.\\n\" + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String UNABLE_TO_LOAD_EMPTY_DATABASE \u003d \"Sorry, you do not have any flashcards in the database\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"yet. Please try this command again once you have added some flashcards!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e allDueChapters;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e dueDueChapters;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void loadAllDueChapters(Storage storage, Ui ui) throws InvalidFileFormatException, ExclusionFileException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            allDueChapters \u003d storage.loadAllDueChapters(ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidFileFormatException(UNABLE_TO_LOAD_EMPTY_DATABASE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void setDueDueChapters() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (DueChapter chapter : allDueChapters) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            LocalDate deadline \u003d chapter.getChapter().getDueBy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (Scheduler.isDeadlineDue(deadline)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                dueDueChapters.add(chapter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidFileFormatException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueDueChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        loadAllDueChapters(storage, ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        setDueDueChapters();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.printDueByTodayMessage(dueDueChapters.size(), COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.printDueChapters(dueDueChapters);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Darticune": 60
    }
  },
  {
    "path": "src/main/java/commands/ListModulesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class ListModulesCommand extends ListCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of modules available. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String result \u003d listModules(access);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String listModules(Access access) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        assert access.isAdminLevel() : \"Not admin level\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cModule\u003e allModules \u003d modules.getAllModules();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        int moduleCount \u003d modules.getModuleCount();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (moduleCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return String.format(MESSAGE_DOES_NOT_EXIST, MODULE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        result.append(String.format(MESSAGE_EXIST, MODULE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (Module m : allModules) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            result.append(\"\\n\").append(allModules.indexOf(m) + 1).append(\".\").append(m);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 40
    }
  },
  {
    "path": "src/main/java/commands/PreviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class PreviewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"preview\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Forecasts the chapters due in the upcoming week.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String UNABLE_TO_LOAD_EMPTY_DATABASE \u003d \"Sorry, you do not have any flashcards in the database\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"yet. Please try this command again once you have added some flashcards!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e allDueChapters;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e dueDueChapters;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void loadAllDueChapters(Storage storage, Ui ui) throws ExclusionFileException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            allDueChapters \u003d storage.loadAllDueChapters(ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.showToUser(UNABLE_TO_LOAD_EMPTY_DATABASE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void setDueDueChapters(int increment) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (DueChapter chapter : allDueChapters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            LocalDate deadline \u003d chapter.getChapter().getDueBy();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (Scheduler.isDeadlineDueIn(deadline, increment)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                dueDueChapters.add(chapter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws ExclusionFileException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        loadAllDueChapters(storage, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (int increment \u003d 0; increment \u003c 7; increment++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            dueDueChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            setDueDueChapters(increment);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (increment \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                ui.printDueByTodayMessage(dueDueChapters.size(), COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                ui.printDueByIncrementMessage(dueDueChapters.size(), Scheduler.getIncrementedDate(increment));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.printDueChapters(dueDueChapters);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 55,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/commands/RemoveCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveCardCommand extends RemoveCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(RemoveCardCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \": Removes card based on the index in the list. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: \" + CARD_PARAMETER + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int removeIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public RemoveCardCommand(int removeIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.removeIndex \u003d removeIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d removeCard(access, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String removeCard(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cCard\u003e allCards \u003d cards.getAllCards();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Card card \u003d allCards.get(removeIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Deleting flashcard: \" + card.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            cards.removeCard(removeIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            storage.saveCards(cards, access.getModule().getModuleName(), access.getChapter().getChapterName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Flashcard successfully deleted.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareResult(CARD, card.toString(), cards.getCardCount());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, CARD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 53
    }
  },
  {
    "path": "src/main/java/commands/RemoveChapterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveChapterCommand extends RemoveCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(RemoveChapterCommand.class.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \": Removes chapter based on the index in the list. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: \" + CHAPTER_PARAMETER + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int removeIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public RemoveChapterCommand(int removeIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.removeIndex \u003d removeIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d removeChapter(access, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String removeChapter(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cChapter\u003e allChapters \u003d chapters.getAllChapters();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Chapter chapter \u003d allChapters.get(removeIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            File directory \u003d new File(storage.getFilePath() + \"/\" + access.getModule()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + \"/\" + chapter.toString() + \".txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Deleting chapter: \" + chapter.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            boolean isRemoved \u003d storage.deleteDirectory(directory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            boolean isRemovedFromDue \u003d storage.removeChapterFromDue("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    access.getModule().toString(), chapter.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (!isRemoved \u0026\u0026 !isRemovedFromDue) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                throw new IOException(\"There was a problem deleting chapter in directory.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allChapters.remove(removeIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Chapter: \" + chapter.toString() + \" successfully deleted.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareResult(CHAPTER, chapter.toString(), allChapters.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 61
    }
  },
  {
    "path": "src/main/java/commands/RemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public abstract class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MODULE_PARAMETER \u003d \"MODULE_INDEX\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CHAPTER_PARAMETER \u003d \"CHAPTER_INDEX\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CARD_PARAMETER \u003d \"FLASHCARD_INDEX\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \": Removes module / chapter / flashcard based on the index in the list. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: \" + MODULE_PARAMETER + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"            \" + CHAPTER_PARAMETER + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"            \" + CARD_PARAMETER + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    protected static final String MESSAGE_SUCCESS \u003d \"Got it. I\u0027ve removed this %1$s:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    protected static final String MESSAGE_COUNT \u003d \"Now you have %1$d %2$s(s) in the list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    protected String prepareResult(String type, String content, int count) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        result.append(String.format(MESSAGE_SUCCESS, type));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        result.append(content).append(\"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        result.append(String.format(MESSAGE_COUNT, count, type));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 40
    }
  },
  {
    "path": "src/main/java/commands/RemoveModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveModuleCommand extends RemoveCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(RemoveModuleCommand.class.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \": Removes module based on the index in the list. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: \" + MODULE_PARAMETER + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int removeIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public RemoveModuleCommand(int removeIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.removeIndex \u003d removeIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d removeModule(access, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String removeModule(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assert access.isAdminLevel() : \"Not admin level\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cModule\u003e allModules \u003d modules.getAllModules();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Module module \u003d allModules.get(removeIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            File directory \u003d new File(storage.getFilePath() + \"/\" + module.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Deleting module: \" + module.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            boolean isRemoved \u003d storage.deleteDirectory(directory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (!isRemoved) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                throw new IOException(\"There was a problem deleting module in directory.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allModules.remove(removeIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Module: \" + module.toString() + \" successfully deleted.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareResult(MODULE, module.toString(), allModules.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 57,
      "Jane-Ng": 1
    }
  },
  {
    "path": "src/main/java/commands/RescheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Reschedules the chapter due date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reschedule\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String PARAMETERS \u003d \" CHAPTER_INDEX DATE(yyyy-MM-dd)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reschedules the due date of a chapter.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Only available at module level.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2020-12-12\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_DATE \u003d \"%1$s has the same due date as what you entered: %2$s\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_BEFORE_RESCHEDULE \u003d \"%1$s has the following due date: %2$s\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_AFTER_RESCHEDULE \u003d \"It has been rescheduled to: %1$s\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String MESSAGE_NO_DUE_DATE \u003d \"No due date\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Creates a RescheduleCommand to reschedule to the specified {@code date}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param index of the chapter in the list of chapters to edit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param date to reschedule the chapter to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public RescheduleCommand(int index, LocalDate date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d reschedule(access, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Reschedules the due date of the chapter."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param access to get the list of chapters"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param storage to change the due date in the storage file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return result to be displayed"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the index is invalid"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String reschedule(Access access, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Chapter chapter \u003d chapters.getChapter(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            LocalDate dueBy \u003d chapter.getDueBy();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (dueBy !\u003d null \u0026\u0026 date.isEqual(dueBy)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return String.format(MESSAGE_SAME_DATE, chapter.getChapterName(), date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            chapter.setDueBy(date, storage, access);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(String.format(MESSAGE_BEFORE_RESCHEDULE, chapter.getChapterName(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    (dueBy \u003d\u003d null) ? MESSAGE_NO_DUE_DATE : dueBy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(String.format(MESSAGE_AFTER_RESCHEDULE, date));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 86
    }
  },
  {
    "path": "src/main/java/commands/ReviseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " * Starts revision for a particular chapter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class ReviseCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(ReviseCommand.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"revise\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Starts revision based on a particular chapter. \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: INDEX_OF_CHAPTER\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed revision for \u003c%1$s\u003e.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_NO_CARDS_IN_CHAPTER \u003d \"You currently have no cards in \u003c%1$s\u003e.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_CHAPTER_NOT_DUE \u003d \"The chapter \u003c%1$s\u003e is not due for revision today.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_ANSWER_PROMPT \u003d \"\\n[enter s to show answer]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_RATING_PROMPT \u003d \"How well did you do for this card?\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"[enter e(easy), m(medium), h(hard), c(cannot answer)]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_REVISE_PROMPT \u003d \"Are you sure you want to revise this? (Y/N)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_START_REVISION \u003d \"The revision for %s will start now:\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_NOT_REVISING \u003d \"You have chosen to not revise the chapter \u003c%1s\u003e.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String EASY \u003d \"e\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MEDIUM \u003d \"m\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String HARD \u003d \"h\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CANNOT_ANSWER \u003d \"c\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int reviseIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public ReviseCommand(int reviseIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.reviseIndex \u003d reviseIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Chapter getChapter(int reviseIndex, Access access) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter chapter;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapter \u003d access.getModule().getChapters().getChapter(reviseIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return chapter;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IndexOutOfBoundsException(String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private ArrayList\u003cCard\u003e getCards(Access access, Storage storage, Chapter toRevise)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e allCards;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allCards \u003d storage.loadCard(access.getModuleLevel(), toRevise.getChapterName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            toRevise.setCards(allCards);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new FileNotFoundException(\"File is not found.\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return allCards;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private int reviseCard(int count, Card c, Ui ui, ArrayList\u003cCard\u003e repeatCards, Scanner scanner) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.showToUser(\"\\nQuestion \" + count + \":\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showCardRevision(c, scanner);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d ui.getInput(MESSAGE_SHOW_RATING_PROMPT, scanner);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        rateCard(ui, repeatCards, c, input, scanner);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return ++count;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter toRevise \u003d getChapter(reviseIndex, access);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        // re-initialize scanner for testing purposes"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!Scheduler.isDeadlineDue(toRevise.getDueBy())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (promptNotDue(ui, toRevise, scanner)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.showToUser(String.format(MESSAGE_NOT_REVISING, toRevise));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d getCards(access, storage, toRevise);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e repeatCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int cardCount \u003d allCards.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(\"\\nCard count: \" + cardCount);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_NO_CARDS_IN_CHAPTER, toRevise));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_START_REVISION, toRevise));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            count \u003d reviseCard(count, c, ui, repeatCards, scanner);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        repeatRevision(ui, repeatCards, count, scanner);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SUCCESS, toRevise));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.info(\"Revision has completed for chapter: \" + toRevise);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        toRevise.setDueBy(Scheduler.computeChapterDeadline(toRevise.getCards()), storage, access);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        CardList newCards \u003d new CardList(allCards);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage.saveCards(newCards, access.getModuleLevel(), toRevise.getChapterName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        HistoryCommand.addHistory(access, storage, reviseIndex);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private boolean promptNotDue(Ui ui, Chapter toRevise, Scanner scanner) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder prompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        prompt.append(String.format(MESSAGE_CHAPTER_NOT_DUE, toRevise));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        prompt.append(MESSAGE_SHOW_REVISE_PROMPT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d ui.getInput(prompt.toString(), scanner).trim().toUpperCase();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        boolean isInvalid \u003d true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        boolean notRevising \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (isInvalid) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            switch (input) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case \"Y\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                notRevising \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case \"N\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                notRevising \u003d true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                input \u003d ui.getInput(\"You have entered an invalid input, please try again.\", scanner)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                        .trim().toUpperCase();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return notRevising;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private ArrayList\u003cCard\u003e rateCard(Ui ui, ArrayList\u003cCard\u003e repeatCards,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                                           Card c, String input, Scanner scanner) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        boolean isInvalid \u003d true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (isInvalid) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            switch (input.trim().toLowerCase()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case EASY:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                c.setPreviousInterval(Scheduler.computeEasyInterval(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.EASY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case MEDIUM:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                c.setPreviousInterval(Scheduler.computeMediumInterval(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.MEDIUM);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case HARD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                c.setPreviousInterval(Scheduler.computeHardInterval(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.HARD);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case CANNOT_ANSWER:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                repeatCards.add(c);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.CANNOT_ANSWER);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                input \u003d ui.getInput(\"You have entered an invalid input, please try again.\", scanner);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return repeatCards;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private void repeatRevision(Ui ui, ArrayList\u003cCard\u003e cards, int count, Scanner scanner) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (cards.size() !\u003d 0) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cCard\u003e repeatCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            for (Card c : cards) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                count \u003d reviseCard(count, c, ui, repeatCards, scanner);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            cards \u003d new ArrayList\u003c\u003e(repeatCards);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 4,
      "gua-guargia": 9,
      "neojiaern": 158,
      "Darticune": 17,
      "Jane-Ng": 3
    }
  },
  {
    "path": "src/main/java/commands/ShowRateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Calculates user\u0027s overall revision performance and display the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ShowRateCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showrate\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \": Shows rate percentage in chapter based on individual cards. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Only available at chapter level. \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_NO_CARDS_IN_CHAPTER \u003d \"You currently have no cards in %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_SHOW_PERCENTAGE_PROMPT \u003d \"The percentage of card that \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"is labeled \u003c%1$s\u003e is: %2$.2f\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CANNOT_ANSWER \u003d \"cannot answer\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String EASY \u003d \"easy\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MEDIUM \u003d \"medium\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double easyPercentage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double mediumPercentage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double hardPercentage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double cannotAnswerPercentage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int easyCard \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int mediumCard \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int hardCard \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int cannotAnswerCard \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int noCard \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Manages the execution of ShowRateCommand and display the calculated result to user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param ui user interface of Kaji"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param access temporary access data about user\u0027s current access level"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param storage file storage and file management of Kaji"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Chapter chapter \u003d access.getChapter();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int cardCount \u003d computePercentage(chapter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (cardCount \u003d\u003d noCard) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_NO_CARDS_IN_CHAPTER, chapter));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(\"\\nCard count: \" + cardCount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, EASY, easyPercentage));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, MEDIUM, mediumPercentage));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, HARD, hardPercentage));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, CANNOT_ANSWER, cannotAnswerPercentage));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Computes the percentage of card at each master level in a chapter."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param chapter blueprint of chapter that user is currently accessing"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return number of card in the chapter"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int computePercentage(Chapter chapter) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d chapter.getCards().getAllCards();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int cardCount \u003d allCards.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return cardCount;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            switch (c.getRating()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            case Card.EASY:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                easyCard++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            case Card.MEDIUM:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                mediumCard++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            case Card.HARD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                hardCard++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                cannotAnswerCard++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        assert ((cannotAnswerCard + hardCard + easyCard + mediumCard) \u003d\u003d cardCount) : \"Wrong card count\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        easyPercentage \u003d ((double)easyCard) / cardCount;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        mediumPercentage \u003d ((double)mediumCard) / cardCount;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        hardPercentage \u003d ((double)hardCard) / cardCount;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        cannotAnswerPercentage \u003d ((double)cannotAnswerCard) / cardCount;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return cardCount;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 105
    }
  },
  {
    "path": "src/main/java/common/KajiLog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class KajiLog {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static final String LOG_FILE \u003d \"data/kaji.log\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static FileHandler fh;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (fh \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                fh \u003d new FileHandler(LOG_FILE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                fh.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger is not working.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 33
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String LINE \u003d \"---------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String ADMIN \u003d \"admin\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CHAPTER \u003d \"chapter\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CARD \u003d \"flashcard\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"[Type help to view a list of commands available]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCESS \u003d \"Sorry, you are currently at %1$s level\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \", please go to %2$s level first.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_MISSING_ARGS \u003d \"The arguments are missing.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_INCORRECT_ACCESS \u003d \"%s command can only be called at admin, \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"module and chapter level.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_INCORRECT_ACCESS_AT_CHAPTER_LEVEL \u003d \"%s command can only be called at admin, \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"module.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_EXTRA_ARGS \u003d \"There should not be any arguments for %s.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"The format for %s command is wrong.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_MISSING_INDEX \u003d \"The index for %s is missing.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_NON_INTEGER \u003d \"The index for %s should be an integer.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX_RANGE \u003d \"The %1$s index needs to be within the range \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"of the total number of %1$ss.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_NO_QUESTION_OR_ANSWER \u003d \"The content for question / answer is empty.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_NO_QUESTION_AND_ANSWER \u003d \"The content for question and answer are both empty.\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_DATE_FORMAT \u003d \"The date should be in the format of yyyy-MM-dd.\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_TYPE \u003d \"There is no such command type.\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_ITEM_EXISTED \u003d \"The %1$s %2$s already exists, the %3$s cannot be duplicated.\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_ALPHANUMERIC_CHARACTERS \u003d \"Only alphanumeric characters and spaces \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"are allowed for %1$s.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 4,
      "neojiaern": 18,
      "Jane-Ng": 13
    }
  },
  {
    "path": "src/main/java/exception/ExclusionFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ExclusionFileException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ExclusionFileException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ExclusionFileException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 10
    }
  },
  {
    "path": "src/main/java/exception/IncorrectAccessLevelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Represents an error when a command is input at the incorrect access level."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class IncorrectAccessLevelException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Error message to be thrown."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param message should contain relevant information on the access level which the command can be input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public IncorrectAccessLevelException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 15
    }
  },
  {
    "path": "src/main/java/exception/InvalidFileFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class InvalidFileFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public InvalidFileFormatException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 7
    }
  },
  {
    "path": "src/main/java/exception/InvalidInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Represents an error that the given input is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Error message to be thrown."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param message should contain relevant information on why the input is invalid"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 15
    }
  },
  {
    "path": "src/main/java/exception/StorageDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Represents an error encountered by storage data."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class StorageDataException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Error message to be thrown."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param message should contain relevant information of the error encountered"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public StorageDataException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 15
    }
  },
  {
    "path": "src/main/java/manager/admin/Admin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class Admin {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected ModuleList modules;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //if there is no storage"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Admin() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules \u003d new ModuleList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //if there is storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Admin(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.modules \u003d new ModuleList(modules);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ModuleList getModules() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 23
    }
  },
  {
    "path": "src/main/java/manager/admin/ModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * A list of modules."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ModuleList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private final ArrayList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ModuleList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ModuleList(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cModule\u003e getAllModules() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getModuleCount() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Module getModule(int moduleIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return modules.get(moduleIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Checks if the list contains an equivalent module that has the same {@code newModuleName}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param newModuleName new name for a module"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return true if the list contains an equivalent module that has the same name as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean checkModuleExistence(String newModuleName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            String moduleName \u003d module.getModuleName().toLowerCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (moduleName.equals(newModuleName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 38,
      "Jane-Ng": 14
    }
  },
  {
    "path": "src/main/java/manager/card/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package manager.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Represents a Card in the chapter."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private int previousInterval;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private LocalDate dueBy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int CANNOT_ANSWER \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int EASY \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int MEDIUM \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int HARD \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Constructs a Card."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param question A valid question"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param answer A valid answer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Card(String question, String answer) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setAnswer(answer);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setQuestion(question);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setDueBy(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setPreviousInterval(1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setRating(CANNOT_ANSWER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Constructs a Card when loading from storage file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param question A valid question"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param answer A valid answer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param previousInterval A valid interval"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param rating A valid rating"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Card(String question, String answer, int previousInterval, int rating) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setAnswer(answer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setQuestion(question);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setDueBy(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setPreviousInterval(previousInterval);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setRating(rating);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setAnswer(String answer) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String getRevisionQuestion() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return \"[Q] \" + question;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String getRevisionAnswer() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return \"[A] \" + answer;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public int getPreviousInterval() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return previousInterval;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setPreviousInterval(int newInterval) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.previousInterval \u003d newInterval;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setDueBy(LocalDate newDueBy) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueBy \u003d newDueBy;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return \"[Q] \" + question + \" | [A] \" + answer;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setRating(int rating) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 24,
      "neojiaern": 16,
      "Jane-Ng": 48,
      "Darticune": 7
    }
  },
  {
    "path": "src/main/java/manager/chapter/CardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * A list of cards."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class CardList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ArrayList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public CardList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public CardList(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e(cards);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void removeCard(int removeIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        cards.remove(removeIndex);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public int getCardCount() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Card getCard(int cardIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards.get(cardIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public ArrayList\u003cCard\u003e getAllCards() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Checks if the list contains an equivalent card that has the same {@code newQuestion} and {@code newAnswer}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param newQuestion new question for the card"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param newAnswer new answer for the card"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return true if the list contains an equivalent card that has the same content as the given arguments."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean checkCardExistence(String newQuestion, String newAnswer) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (Card card : cards) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String question \u003d card.getQuestion().toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String answer \u003d card.getAnswer().toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (question.equals(newQuestion) \u0026\u0026 answer.equals(newAnswer)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 5,
      "neojiaern": 4,
      "Jane-Ng": 49
    }
  },
  {
    "path": "src/main/java/manager/chapter/Chapter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class Chapter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String chapterName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected CardList cards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected LocalDate dueBy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String EASY \u003d \"E\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MEDIUM \u003d \"M\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String HARD \u003d \"H\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Chapter(String chapterName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new CardList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Chapter(String chapterName, LocalDate dueBy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.cards \u003d new CardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.dueBy \u003d dueBy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Chapter(String chapterName, String rating, Storage storage, Access access) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.cards \u003d new CardList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        setNewDeckRating(rating, storage, access);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setNewDeckRating(String rating, Storage storage, Access access) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (rating) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case EASY:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate().plusDays(Scheduler.computeEasyInterval(1)), storage, access);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate().plusDays(Scheduler.computeMediumInterval(1)), storage, access);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case HARD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate().plusDays(Scheduler.computeHardInterval(1)), storage, access);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate(), storage, access);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getChapterName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapterName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setChapterName(String chapterName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public CardList getCards() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setCards(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new CardList(cards);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setDueBy(LocalDate dueBy, Storage storage, Access access) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.dueBy \u003d dueBy;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueBy.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String module \u003d access.getModule().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        storage.saveChapterDeadline(Scheduler.convertDueByToString(dueBy), module, chapterName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public LocalDate getDueBy() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapterName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 25,
      "neojiaern": 9,
      "Darticune": 47,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/manager/chapter/DueChapter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class DueChapter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private final String parentModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private final Chapter chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public DueChapter(String parentModule, Chapter chapter) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.parentModule \u003d parentModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Chapter getChapter() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return chapter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return \"Module: \" + parentModule + \"; Chapter: \" + chapter.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 20
    }
  },
  {
    "path": "src/main/java/manager/history/History.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package manager.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class History {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected String chapterName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public History(String moduleName, String chapterName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return moduleName + \"/\" + chapterName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 15
    }
  },
  {
    "path": "src/main/java/manager/module/ChapterList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * A list of chapters."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ChapterList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private final ArrayList\u003cChapter\u003e chapters;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ChapterList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ChapterList(ArrayList\u003cChapter\u003e chapters) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapters \u003d chapters;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void addChapter(Chapter chapter) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters.add(chapter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cChapter\u003e getAllChapters() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getChapterCount() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Chapter getChapter(int chapterIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return chapters.get(chapterIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Checks if the list contains an equivalent chapter that has the same {@code newChapterName}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param newChapterName new name for a chapter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return true if the list contains an equivalent chapter that has the same name as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean checkChapterExistence(String newChapterName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (Chapter chapter : chapters) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            String chapterName \u003d chapter.getChapterName().toLowerCase();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (chapterName.equals(newChapterName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 38,
      "neojiaern": 4,
      "Jane-Ng": 10
    }
  },
  {
    "path": "src/main/java/manager/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected ChapterList chapters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Module(String moduleName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters \u003d new ChapterList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setModuleName(String moduleName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ChapterList getChapters() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setChapters(ArrayList\u003cChapter\u003e chapters) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapters \u003d new ChapterList(chapters);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 31,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddChapterCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ALPHANUMERIC_CHARACTERS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INCORRECT_ACCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_ARGS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_NO_QUESTION_OR_ANSWER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand, AddChapterCommand or AddCardCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String QUESTION_ANSWER_DIVIDER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses the given arguments in the context of the AddCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param commandArgs input arguments of the command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param accessLevel access level of the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return an AddModuleCommand, AddChapterCommand or AddCardCommand object based on the access level"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws IncorrectAccessLevelException if the command cannot be executed at the access level"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Command parse(String commandArgs, String accessLevel)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        switch (accessLevel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareAddModule(commandArgs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + AddChapterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareAddChapter(commandArgs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareAddCard(commandArgs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    AddCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //@@author gua-guargia"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Parses arguments in the context of the add module command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param commandArgs full command args string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return an AddModuleCommand object for execution"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareAddModule(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!ParserUtil.checkAlphanumericOnly(commandArgs)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_ALPHANUMERIC_CHARACTERS, MODULE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return new AddModuleCommand(commandArgs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Parses arguments in the context of the add chapter command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param commandArgs full command args string"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return an AddChapterCommand object for execution"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareAddChapter(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!ParserUtil.checkAlphanumericOnly(commandArgs)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_ALPHANUMERIC_CHARACTERS, CHAPTER));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return new AddChapterCommand(commandArgs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    //@@author Jane-Ng"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses arguments in the context of the add card command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param commandArgs full command args string"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return an AddCardCommand object for execution"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareAddCard(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(QUESTION_ANSWER_DIVIDER, 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String question \u003d ParserUtil.parseQuestion(args[0], AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String answer \u003d ParserUtil.parseAnswer(args[1], AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (question.isEmpty() || answer.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_NO_QUESTION_OR_ANSWER"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new AddCardCommand(question, answer);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 29,
      "Jane-Ng": 84
    }
  },
  {
    "path": "src/main/java/parser/BackCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.BackAdminCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.BackModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_ARGS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "//@@author gua-guargia"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Parses input arguments and creates a new BackModuleCommand or BackAdminCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class BackCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static final String MESSAGE_INCORRECT_ACCESS \u003d \"Back command can only be called \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"at module and chapter level.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Parses the given arguments in the context of the BackCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param commandArgs input arguments of the command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param accessLevel access level of the user"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return an BackModuleCommand or BackAdminCommand object based on the access level"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws IncorrectAccessLevelException if the command cannot be executed at the access level"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Command parse(String commandArgs, String accessLevel)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        switch (accessLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + BackAdminCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return new BackAdminCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + BackModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return new BackModuleCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new IncorrectAccessLevelException(MESSAGE_INCORRECT_ACCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 36,
      "Jane-Ng": 12
    }
  },
  {
    "path": "src/main/java/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditCardCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditChapterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ALPHANUMERIC_CHARACTERS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INCORRECT_ACCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_ARGS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_NO_QUESTION_AND_ANSWER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "//@@author Jane-Ng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Parses input arguments and creates a new EditModuleCommand, EditChapterCommand or EditCardCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String QUESTION_ANSWER_DIVIDER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses the given arguments in the context of the EditCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param commandArgs input arguments of the command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param accessLevel access level of the user"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return an EditModuleCommand, EditChapterCommand or EditCardCommand object based on the access level"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws IncorrectAccessLevelException if the command cannot be executed at the access level"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Command parse(String commandArgs, String accessLevel)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        switch (accessLevel) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEditModule(commandArgs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + EditChapterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEditChapter(commandArgs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEditCard(commandArgs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    EditCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses arguments in the context of the edit module command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param commandArgs full command args string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return an EditModuleCommand object for execution"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEditModule(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int editIndex \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!ParserUtil.checkAlphanumericOnly(args[1].trim().toLowerCase())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_ALPHANUMERIC_CHARACTERS, MODULE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditModuleCommand(editIndex, args[1].trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses arguments in the context of the edit chapter command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param commandArgs full command args string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return an EditChapterCommand object for execution"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEditChapter(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int editIndex \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!ParserUtil.checkAlphanumericOnly(args[1].trim().toLowerCase())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_ALPHANUMERIC_CHARACTERS, CHAPTER));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditChapterCommand(editIndex, args[1].trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditChapterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses arguments in the context of the edit card command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param commandArgs full command args string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return an EditCardCommand object for execution"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEditCard(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int editIndex \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] questionAndAnswer \u003d args[1].trim().split(QUESTION_ANSWER_DIVIDER, 2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String question \u003d ParserUtil.parseQuestion(questionAndAnswer[0], EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String answer \u003d ParserUtil.parseAnswer(questionAndAnswer[1], EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (question.isEmpty() \u0026\u0026 answer.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_NO_QUESTION_AND_ANSWER + EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditCardCommand(editIndex, question, answer);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 136
    }
  },
  {
    "path": "src/main/java/parser/ExcludeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ExcludeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "//@@author Darticune"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ExcludeCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Command parse(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + ExcludeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new ExcludeCommand(commandArgs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 8,
      "Darticune": 11
    }
  },
  {
    "path": "src/main/java/parser/ExitCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_EXTRA_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "//@@author Jane-Ng"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Parses input arguments and creates a new ExitCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ExitCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses the given arguments in the context of the ExitCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param commandArgs input arguments of the command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return an ExitCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Command parse(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 29
    }
  },
  {
    "path": "src/main/java/parser/GoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.GoChapterCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.GoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.GoModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MESSAGE_INCORRECT_ACCESS_AT_CHAPTER_LEVEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MESSAGE_NON_INTEGER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "//@@author gua-guargia"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class GoCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Command parse(String commandArgs, String accessLevel)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int moduleIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String messageUsage \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        switch (accessLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            type \u003d MODULE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            messageUsage \u003d GoModuleCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            type \u003d CHAPTER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            messageUsage \u003d GoChapterCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS_AT_CHAPTER_LEVEL,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    GoCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_MISSING_INDEX, type)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + messageUsage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            moduleIndex \u003d Integer.parseInt(commandArgs) - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_NON_INTEGER, type)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + messageUsage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        switch (accessLevel) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return new GoModuleCommand(moduleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return new GoChapterCommand(moduleIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS_AT_CHAPTER_LEVEL,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    GoCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 55,
      "Jane-Ng": 6
    }
  },
  {
    "path": "src/main/java/parser/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_EXTRA_ARGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "//@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HelpCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * Parses the given arguments in the context of the HelpCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param commandArgs input arguments of the command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @return a HelpCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public Command parse(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 21,
      "Jane-Ng": 8
    }
  },
  {
    "path": "src/main/java/parser/HistoryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.HistoryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_DATE_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "//@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": " * Parses input arguments and creates a new HistoryCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HistoryCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * Parses the given arguments in the context of the HistoryCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param commandArgs input arguments of the command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @return a HistoryCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected date format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public Command parse(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            LocalDate date \u003d java.time.LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            commandArgs \u003d date.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(commandArgs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidInputException(MESSAGE_DATE_FORMAT + HistoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return new HistoryCommand(commandArgs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 30,
      "Jane-Ng": 11
    }
  },
  {
    "path": "src/main/java/parser/IncludeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.IncludeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "//@@author Darticune"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class IncludeCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Command parse(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + IncludeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new IncludeCommand(commandArgs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 19
    }
  },
  {
    "path": "src/main/java/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ListCardsCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ListChaptersCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ListModulesCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_EXTRA_ARGS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INCORRECT_ACCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Parses input arguments and creates a new ListModulesCommand, ListChaptersCommand or ListCardsCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses the given arguments in the context of the ListCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param commandArgs input arguments of the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param accessLevel access level of the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return a ListModulesCommand, ListChaptersCommand or ListCardsCommand object based on the access level"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws IncorrectAccessLevelException if the command cannot be executed at the access level"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Command parse(String commandArgs, String accessLevel)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ListCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        switch (accessLevel) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new ListModulesCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new ListChaptersCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new ListCardsCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    ListCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 50
    }
  },
  {
    "path": "src/main/java/parser/ListDueCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ListDueCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_EXTRA_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "//@@author Darticune"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ListDueCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Command parse(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ListDueCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new ListDueCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 8,
      "Darticune": 11
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.BackCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ExcludeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.GoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.IncludeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ListDueCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.PreviewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.RemoveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ShowRateCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param fullCommand full command input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param access access level of the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws IncorrectAccessLevelException if the user input a command that cannot be executed at a access level"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static Command parse(String fullCommand, Access access)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String[] commandTypeAndArgs \u003d splitCommandTypeAndArgs(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String commandType \u003d commandTypeAndArgs[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String commandArgs \u003d commandTypeAndArgs[1].trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String accessLevel \u003d access.getAccessLevel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Command Type: \" + commandType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new ListCommandParser().parse(commandArgs, accessLevel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new AddCommandParser().parse(commandArgs, accessLevel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new RemoveCommandParser().parse(commandArgs, accessLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case ReviseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new ReviseCommandParser().parse(commandArgs, accessLevel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new ExitCommandParser().parse(commandArgs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new HelpCommandParser().parse(commandArgs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditCommandParser().parse(commandArgs, accessLevel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new BackCommandParser().parse(commandArgs, accessLevel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case GoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new GoCommandParser().parse(commandArgs, accessLevel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ListDueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new ListDueCommandParser().parse(commandArgs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new HistoryCommandParser().parse(commandArgs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ShowRateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new ShowRateCommandParser().parse(commandArgs, accessLevel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case PreviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new PreviewCommandParser().parse(commandArgs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ExcludeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new ExcludeCommandParser().parse(commandArgs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case RescheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new RescheduleCommandParser().parse(commandArgs, accessLevel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case IncludeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return new IncludeCommandParser().parse(commandArgs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_INVALID_COMMAND_TYPE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Separates the command type and args."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param userCommand full user command input string"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return the command type and args"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String[] splitCommandTypeAndArgs(String userCommand) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String[] commandTypeAndParams \u003d userCommand.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (commandTypeAndParams.length !\u003d 2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            commandTypeAndParams \u003d new String[]{commandTypeAndParams[0], \"\"};"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return commandTypeAndParams;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 4,
      "gua-guargia": 8,
      "neojiaern": 3,
      "Jane-Ng": 81,
      "Darticune": 21
    }
  },
  {
    "path": "src/main/java/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String QUESTION_PREFIX \u003d \"q:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String ANSWER_PREFIX \u003d \"a:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String MESSAGE_QUESTION_PREFIX \u003d \"There needs to be a \\\"q:\\\" prefix before the question.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String MESSAGE_ANSWER_PREFIX \u003d \"There needs to be a \\\"a:\\\" prefix before the answer.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    //@@author Jane-Ng"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses {@code arg} into a question by removing the question prefix."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param arg argument to be parsed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param messageUsage message usage of the command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return the question with leading and trailing whitespaces trimmed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the given {@code arg} is invalid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static String parseQuestion(String arg, String messageUsage) throws InvalidInputException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!(arg.trim().toLowerCase().startsWith(QUESTION_PREFIX))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_QUESTION_PREFIX + messageUsage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return arg.substring(2).trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses {@code arg} into an answer by removing the answer prefix."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param arg argument to be parsed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param messageUsage message usage of the command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return the answer with leading and trailing whitespaces trimmed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the given {@code arg} is invalid"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static String parseAnswer(String arg, String messageUsage) throws InvalidInputException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!(arg.trim().toLowerCase().startsWith(ANSWER_PREFIX))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_ANSWER_PREFIX + messageUsage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return arg.substring(2).trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //@@author gua-guargia"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Checks if {@code commandArgs} contains alphanumeric characters and spaces only."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param commandArgs command argument entered by user"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return true if {@code commandArgs} contains alphanumeric characters and spaces only"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static boolean checkAlphanumericOnly(String commandArgs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"^[a-zA-Z0-9\\\\s]+$\", Pattern.CASE_INSENSITIVE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(commandArgs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return matcher.matches();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 13,
      "Jane-Ng": 51
    }
  },
  {
    "path": "src/main/java/parser/PreviewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.PreviewCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_EXTRA_ARGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "//@@author Darticune"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class PreviewCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Command parse(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, PreviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new PreviewCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 8,
      "Darticune": 11
    }
  },
  {
    "path": "src/main/java/parser/RemoveCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RemoveCardCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RemoveChapterCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RemoveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RemoveModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INCORRECT_ACCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_INDEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_NON_INTEGER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "//@@author neojiaern"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveCommandParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Command parse(String commandArgs, String accessLevel)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int removeIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String messageUsage \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (accessLevel.equals(ADMIN)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            type \u003d MODULE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            messageUsage \u003d RemoveModuleCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (accessLevel.equals(MODULE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            type \u003d CHAPTER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            messageUsage \u003d RemoveChapterCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (accessLevel.equals(CHAPTER)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            type \u003d CARD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            messageUsage \u003d RemoveCardCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    RemoveCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_MISSING_INDEX, type)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + messageUsage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            removeIndex \u003d Integer.parseInt(commandArgs) - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_NON_INTEGER, type)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + messageUsage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        switch (accessLevel) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return new RemoveModuleCommand(removeIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return new RemoveChapterCommand(removeIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return new RemoveCardCommand(removeIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    RemoveCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 48,
      "Jane-Ng": 18
    }
  },
  {
    "path": "src/main/java/parser/RescheduleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_DATE_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_ACCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_ARGS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "//@@author Jane-Ng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Parses input arguments and creates a new RescheduleCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class RescheduleCommandParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String MESSAGE_DUE_DATE_BEFORE_TODAY \u003d \"You cannot enter a due date that is before today.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Parses the given arguments in the context of the RescheduleCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param commandArgs input arguments of the command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param accessLevel access level of the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return a RescheduleCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws IncorrectAccessLevelException if the command cannot be executed at the access level"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Command parse(String commandArgs, String accessLevel)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws IncorrectAccessLevelException, InvalidInputException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!accessLevel.equals(MODULE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    accessLevel, MODULE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int index \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            LocalDate dueDate \u003d LocalDate.parse(args[1].trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (dueDate.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_DUE_DATE_BEFORE_TODAY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new RescheduleCommand(index, dueDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    RescheduleCommand.COMMAND_WORD) + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_DATE_FORMAT + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 60
    }
  },
  {
    "path": "src/main/java/parser/ReviseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_ACCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_NON_INTEGER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "//@@author neojiaern"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class ReviseCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Command parse(String commandArgs, String accessLevel)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throws IncorrectAccessLevelException, InvalidInputException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (!accessLevel.equals(MODULE)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                   accessLevel, MODULE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_MISSING_INDEX, CHAPTER)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int chapterIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapterIndex \u003d Integer.parseInt(commandArgs) - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_NON_INTEGER, CHAPTER)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return new ReviseCommand(chapterIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 26,
      "Jane-Ng": 13
    }
  },
  {
    "path": "src/main/java/parser/ShowRateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ShowRateCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_EXTRA_ARGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_ACCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "//@@author gua-guargia"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " * Parses input arguments and creates a new ShowRateCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ShowRateCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Parses the given arguments in the context of the ShowRateCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param commandArgs input arguments of the command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param accessLevel access level of the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return an ShowRateCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws InvalidInputException if the user input is not of the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws IncorrectAccessLevelException if the access level is not at chapter level"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Command parse(String commandArgs, String accessLevel)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throws IncorrectAccessLevelException, InvalidInputException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!accessLevel.equals(CHAPTER)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    accessLevel, CHAPTER));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ShowRateCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return new ShowRateCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 31,
      "Jane-Ng": 11
    }
  },
  {
    "path": "src/main/java/scheduler/Scheduler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.lang.Math;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class Scheduler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double EASY_MULTIPLIER \u003d 4.4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double MEDIUM_MULTIPLIER \u003d 2.2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double HARD_MULTIPLIER \u003d 1.1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final int MAX_INTERVAL \u003d 365;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean isDeadlineDue(LocalDate dueBy) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (dueBy \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy.isBefore(getCurrentDate()) || dueBy.isEqual(getCurrentDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean isDeadlineDueIn(LocalDate dueBy, int increment) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (dueBy \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (increment \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return dueBy.isBefore(getCurrentDate()) || dueBy.isEqual(getCurrentDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return dueBy.isEqual(getCurrentDate().plusDays(increment));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String getIncrementedDate(int increment) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        LocalDate deadline \u003d getCurrentDate().plusDays(increment);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return convertDueByToString(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate parseDate(String savedDate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (savedDate.equals(\"Invalid Date\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return LocalDate.now();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return LocalDate.parse(savedDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String convertDueByToString(LocalDate dueBy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy.format(formatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeEasyInterval(int previousInterval) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * EASY_MULTIPLIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert newInterval \u003e 0 : \"Invalid new Interval\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeMediumInterval(int previousInterval) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * MEDIUM_MULTIPLIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert newInterval \u003e 0 : \"Invalid new Interval\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeHardInterval(int previousInterval) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * HARD_MULTIPLIER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert newInterval \u003e 0 : \"Invalid new Interval\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeChapterInterval(CardList cards) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        double averageInterval \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (Card c : cards.getAllCards()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            averageInterval +\u003d c.getPreviousInterval();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        averageInterval /\u003d cards.getCardCount();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return (int) Math.round(averageInterval);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate computeChapterDeadline(CardList cards) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeChapterInterval(cards);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 4,
      "Darticune": 100
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.StorageDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * Manages storage of Kaji data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String QUESTION_PREFIX \u003d \"[Q]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String ANSWER_PREFIX \u003d \"[A]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String PREVIOUS_INTERVAL_PREFIX \u003d \"[P]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String RATING_PREFIX \u003d \"[R]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //@@author gua-guargia"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //create the folder --\u003e \u0027data/admin\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void createAdmin() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        logger.info(\"Filepath: \" + filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.createDir(f.getParentFile());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.createDir(f);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.createHistoryDir();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //@@author gua-guargia"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void createModule(String moduleName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.createDir(f);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //@@author gua-guargia"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void createChapter(String chapterName, String moduleName) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName + \"/\" + chapterName + \".txt\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.createFile(f);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cModule\u003e loadModule() throws FileNotFoundException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageLoad.loadModule(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Loads all the chapters of the specified {@code module}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param module module name of the chapters"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @return list of chapters"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws IOException if there is an error when loading from storage file"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cChapter\u003e loadChapter(String module) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageLoad.loadChapter(module, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e loadAllDueChapters(Ui ui) throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageLoad.loadAllDueChapters(ui, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void appendModuleToExclusionFile(String moduleName) throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.appendModuleToExclusionFile(moduleName, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void appendChapterToExclusionFile(String moduleName, String chapterName) throws FileNotFoundException,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.appendChapterToExclusionFile(moduleName, chapterName, filePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void removeModuleFromExclusionFile(String moduleName) throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.removeModuleFromExclusionFile(moduleName, filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void removeChapterFromExclusionFile(String moduleName, String chapterName) throws FileNotFoundException,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.removeChapterFromExclusionFile(moduleName, chapterName, filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cCard\u003e loadCard(String module, String chapter) throws FileNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageLoad.loadCard(module, chapter, filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void saveCards(CardList cards, String module, String chapter) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.saveCards(cards,module, chapter, filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void saveChapterDeadline(String dueBy, String moduleName, String chapterName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.saveChapterDeadline(dueBy, moduleName, chapterName, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean deleteDirectory(File directoryToBeDeleted) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageWrite.deleteDirectory(directoryToBeDeleted);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Rename the filename of a chapter."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param newChapterName new chapter name to rename to"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param module module of the chapter to be renamed"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param chapter existing chapter to be renamed"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws StorageDataException if there is an error renaming the storage file"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void renameChapter(String newChapterName, Module module, Chapter chapter) throws StorageDataException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.renameChapter(newChapterName, module, chapter, filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * Rename the folder of a module."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param newModuleName new module name to rename to"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @param module existing module to be renamed"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     * @throws StorageDataException if there is an error renaming the storage file"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void renameModule(String newModuleName, Module module) throws StorageDataException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.renameModule(newModuleName, module, filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void createHistory(String date) throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.createHistory(date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void saveHistory(ArrayList\u003cHistory\u003e histories, String date) throws IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        StorageWrite.saveHistory(histories, date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cHistory\u003e loadHistory(String date) throws FileNotFoundException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageLoad.loadHistory(date);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean removeChapterFromDue(String module, String chapter) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageWrite.removeChapterFromDue(module, chapter, filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static boolean createChapterDue(String duePath, String dirPath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageWrite.createChapterDue(duePath, dirPath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static ArrayList\u003cString\u003e loadExclusionFile(String filePath) throws ExclusionFileException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageLoad.loadExclusionFile(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static String[] loadChaptersFromSpecifiedModule(String moduleName, String filePath)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return StorageLoad.loadChaptersFromSpecifiedModule(moduleName, filePath);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 16,
      "gua-guargia": 141,
      "neojiaern": 7,
      "Jane-Ng": 4,
      "Darticune": 2
    }
  },
  {
    "path": "src/main/java/storage/StorageLoad.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " *  Manages loading of Kaji data from local storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class StorageLoad {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String DELIMITER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_MODULE_CHAPTER \u003d \"Module: %1$s ; Chapter: %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static void checkExists(File f) throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        boolean dirExists \u003d f.exists();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!dirExists) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static String[] loadChaptersFromSpecifiedModule(String moduleName, String filePath)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File file \u003d new File(filePath + \"/\" + moduleName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        boolean moduleExists \u003d file.exists();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!moduleExists) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return file.list();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static String retrieveChapterDeadline(String moduleName, String chapterName, String filePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName + \"/dues/\" + chapterName + \"due\" + \".txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (s.hasNext()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String deadline \u003d s.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                s.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return deadline;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                s.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return \"Invalid Date\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return \"Does not exist\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static ArrayList\u003cString\u003e loadExclusionFile(String filePath) throws ExclusionFileException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File exclusionFile \u003d new File(filePath + \"/exclusions.txt\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (!exclusionFile.exists()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                if (!exclusionFile.createNewFile()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    throw new ExclusionFileException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    return new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            Scanner exclusionFileScanner \u003d new Scanner(exclusionFile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            while (exclusionFileScanner.hasNext()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                //to read the card"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String entry \u003d exclusionFileScanner.nextLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                excludedChapters.add(entry);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            exclusionFileScanner.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return excludedChapters;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new ExclusionFileException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static ArrayList\u003cDueChapter\u003e loadAllChaptersAsDueChapters(Ui ui, ArrayList\u003cString\u003e excludedChapters,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                                                        ArrayList\u003cDueChapter\u003e dueChapters,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                                                        String[] modules, String filePath)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                                                  throws FileNotFoundException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String module : modules) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (module.equals(\"exclusions.txt\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            File f2 \u003d new File(filePath + \"/\" + module);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            boolean chapterExists \u003d f2.exists();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (!chapterExists) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String[] chapters \u003d f2.list();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (chapters.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return dueChapters;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            for (String chapter : chapters) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                convertChapterInToDueChapter(ui, excludedChapters, dueChapters, module, chapter, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueChapters;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static void convertChapterInToDueChapter(Ui ui, ArrayList\u003cString\u003e excludedChapters,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                                     ArrayList\u003cDueChapter\u003e dueChapters, String module, String chapter,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                                     String filePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (chapter.equals(\"dues\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String target \u003d chapter.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String entry \u003d \"Module: \" + module + \"; Chapter: \" + target;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (excludedChapters.contains(entry)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        checkChapterDeadline(ui, dueChapters, module, target, filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static void checkChapterDeadline(Ui ui, ArrayList\u003cDueChapter\u003e dueChapters, String module,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                             String target, String filePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String deadline \u003d retrieveChapterDeadline(module, target, filePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert !deadline.equals(null) : \"Invalid deadline retrieved\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (deadline.equals(\"Invalid Date\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.showToUser(\"\\nThe chapter:\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_MODULE_CHAPTER, module, target)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \" has a corrupted deadline. Please revise it ASAP! It will be considered due!\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            dueChapters.add(new DueChapter(module, new Chapter(target, Scheduler.parseDate(deadline))));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else if (deadline.equals(\"Does not exist\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            deadline \u003d \"Invalid Date\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.showToUser(\"\\nThe chapter:\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_MODULE_CHAPTER, module, target)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \" has a corrupted deadline. Please revise it ASAP! It will be considered due!\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            dueChapters.add(new DueChapter(module, new Chapter(target, Scheduler.parseDate(deadline))));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            dueChapters.add(new DueChapter(module, new Chapter(target, Scheduler.parseDate(deadline))));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //@@author gua-guargia"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected static ArrayList\u003cModule\u003e loadModule(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        checkExists(f);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String[] contents \u003d f.list();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String result \u003d \"List of files and directories in the specified directory:\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (String content : contents) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (content.equals(\"exclusions.txt\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            result +\u003d \"\\n\" + content;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            modules.add(new Module(content));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        logger.info(result);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    //@@author Jane-Ng"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Loads all the chapters of the specified {@code module}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param module module name of the chapters"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param filePath of the storage file"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return list of chapters"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws IOException if there is an error when loading from storage file"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    protected static ArrayList\u003cChapter\u003e loadChapter(String module, String filePath) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + module);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        checkExists(f);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ArrayList\u003cChapter\u003e chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String[] contents \u003d f.list();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (contents.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return chapters;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d \"List of files and directories in the specified directory:\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String content : contents) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (content.equals(\"dues\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String target \u003d content.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result +\u003d content;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String deadline \u003d retrieveChapterDeadline(module, target, filePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assert !deadline.equals(null) : \"Invalid deadline retrieved\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (deadline.equals(\"Invalid Date\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                chapters.add(new Chapter(target));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (deadline.equals(\"Does not exist\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                String dirPath \u003d filePath + \"/\" + module + \"/\" + \"dues\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                String duePath \u003d filePath + \"/\" + module + \"/\" + \"dues\" + \"/\" + target + \"due\" + \".txt\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                boolean success \u003d Storage.createChapterDue(duePath, dirPath);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                if (!success) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    throw new IOException(\"Error creating chapter due file.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                chapters.add(new Chapter(target));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            chapters.add(new Chapter(target, Scheduler.parseDate(deadline)));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        logger.info(result);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return chapters;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static ArrayList\u003cDueChapter\u003e loadAllDueChapters(Ui ui, String filePath)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExclusionFile(filePath);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File admin \u003d new File(filePath);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        checkExists(admin);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String[] modules \u003d admin.list();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cDueChapter\u003e dueChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return loadAllChaptersAsDueChapters(ui, excludedChapters, dueChapters, modules, filePath);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    //@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * Loads all the cards of the specified {@code chapter}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param module module name of the chapters"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param chapter chapter name of the cards"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param filePath of the storage file"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @return list of cards"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @throws FileNotFoundException if there is not any cards in the storage file"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected static ArrayList\u003cCard\u003e loadCard(String module, String chapter, String filePath)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + module + \"/\" + chapter + \".txt\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        checkExists(f);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            //to read the card"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String fileCommand \u003d s.nextLine();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String[] args \u003d fileCommand.split(DELIMITER, 4);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String question \u003d StorageParser.parseQuestionInFile(args[0]);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String answer \u003d StorageParser.parseAnswerInFile(args[1]);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String interval \u003d StorageParser.parsePreIntervalInFile(args[2]);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String rating \u003d StorageParser.parseRatingInFile(args[3]);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                int preInterval \u003d Integer.parseInt(interval);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                int intRating \u003d Integer.parseInt(rating);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                Card card \u003d new Card(question, answer, preInterval, intRating);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                cards.add(card);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    //@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * Loads the revision history."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param date the date for the revision"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @return list of revision history"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @throws FileNotFoundException if there is not any revision in the storage file"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected static ArrayList\u003cHistory\u003e loadHistory(String date) throws FileNotFoundException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        File f \u003d new File(\"data/history/\" + date + \".txt\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        checkExists(f);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cHistory\u003e histories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            //to read the history"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String revision \u003d s.nextLine();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String[] name \u003d revision.split(\"/\", 2);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String moduleName \u003d StorageParser.parseTaskNameInFile(name[0]);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String chapterName \u003d StorageParser.parseTaskNameInFile(name[1]);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                History history \u003d new History(moduleName, chapterName);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                histories.add(history);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return histories;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 71,
      "gua-guargia": 19,
      "neojiaern": 26,
      "Jane-Ng": 52,
      "Darticune": 134
    }
  },
  {
    "path": "src/main/java/storage/StorageParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    //@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parseQuestionInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.QUESTION_PREFIX))) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Questions in the file should begin with [Q].\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String question \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (question.isEmpty()) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a question after [Q] in the file.\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parseAnswerInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.ANSWER_PREFIX))) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Answers in the file should begin with [A].\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String answer \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (answer.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a answer after [A] in the file.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parsePreIntervalInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.PREVIOUS_INTERVAL_PREFIX))) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Previous intervals in the file should begin with [P].\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String preInterval \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (preInterval.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a interval after [P] in the file.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return preInterval;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parseTaskNameInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String name \u003d arg.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a name of the completed task.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parseRatingInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.RATING_PREFIX))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Answers in the file should begin with [R].\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String rating \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (rating.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a rating after [R] in the file.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 63,
      "Jane-Ng": 7
    }
  },
  {
    "path": "src/main/java/storage/StorageWrite.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.StorageDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static storage.StorageLoad.checkExists;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " *  Manages writing of Kaji data to local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class StorageWrite {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String MESSAGE_CREATED \u003d \"Successfully created new %1$s %2$s\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String MESSAGE_EXISTS \u003d \"%1$s %2$s already exists\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String FILE \u003d \"file\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String DIR \u003d \"directory\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //@@author gua-guargia"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected static void createDir(File f) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dirExists \u003d f.exists();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dirCreated \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!dirExists) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            dirCreated \u003d f.mkdir();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(String.format(MESSAGE_EXISTS, DIR, f));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (dirCreated) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(String.format(MESSAGE_CREATED, DIR, f));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //@@author gua-guargia"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected static void createFile(File f) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean fileExists \u003d f.exists();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean fileCreated \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!fileExists) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            fileCreated \u003d f.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(String.format(MESSAGE_EXISTS, FILE, f));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (fileCreated) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            logger.info(String.format(MESSAGE_CREATED, FILE, f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static void updateExclusionFile(ArrayList\u003cString\u003e excludedChapters, String filePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws ExclusionFileException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            FileWriter exclusionFileWriter \u003d new FileWriter(filePath + \"/exclusions.txt\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            for (String excluded : excludedChapters) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                exclusionFileWriter.write(excluded + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            exclusionFileWriter.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new ExclusionFileException(\"Sorry, there was an error in accessing the Exclusion File\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static boolean createChapterDue(String duePath, String dirPath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File due \u003d new File(duePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File dir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        boolean isDirValid \u003d dir.exists() \u0026\u0026 dir.isDirectory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!isDirValid) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return dir.mkdir() \u0026\u0026 due.createNewFile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else if (!due.exists()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return due.createNewFile();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    //@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static void createHistoryDir() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        File f \u003d new File(\"data/history\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        createDir(f);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static void writeDeadlineToChapterDue(String dueBy, String chapterPath) throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        FileWriter fw \u003d new FileWriter(chapterPath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        fw.write(dueBy);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static void addEntryToExclusionFile(String moduleName, String chapterName,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                                ArrayList\u003cString\u003e excludedChapters) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterEntry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapterName;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!excludedChapters.contains(chapterEntry)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            excludedChapters.add(chapterEntry);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static void appendModuleToExclusionFile(String moduleName, String filePath)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d Storage.loadExclusionFile(filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String[] chaptersInModule \u003d Storage.loadChaptersFromSpecifiedModule(moduleName, filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String chapter : chaptersInModule) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (chapter.equals(\"dues\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            chapter \u003d chapter.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            addEntryToExclusionFile(moduleName, chapter, excludedChapters);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters, filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static void appendChapterToExclusionFile(String moduleName, String chapterName, String filePath)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws FileNotFoundException,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d Storage.loadExclusionFile(filePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File file \u003d new File(filePath + \"/\" + moduleName + \"/\" + chapterName + \".txt\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        checkExists(file);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        addEntryToExclusionFile(moduleName, chapterName, excludedChapters);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters, filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static void deleteEntryFromExclusionFile(String moduleName, ArrayList\u003cString\u003e excludedChapters,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                                     String chapterName) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterEntry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapterName;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        excludedChapters.remove(chapterEntry);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static void removeModuleFromExclusionFile(String moduleName, String filePath)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d Storage.loadExclusionFile(filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String[] chaptersInModule \u003d Storage.loadChaptersFromSpecifiedModule(moduleName, filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String chapter : chaptersInModule) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String chapterName \u003d chapter.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            deleteEntryFromExclusionFile(moduleName, excludedChapters, chapterName);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters, filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static void removeChapterFromExclusionFile(String moduleName, String chapterName, String filePath)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d Storage.loadExclusionFile(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        deleteEntryFromExclusionFile(moduleName, excludedChapters, chapterName);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters, filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    //@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected static void saveCards(CardList cards, String module, String chapter, String filePath)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath + \"/\" + module + \"/\" + chapter + \".txt\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.getCardCount(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            int ratingInt \u003d cards.getCard(i).getRating();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String ratingString \u003d Integer.toString(ratingInt);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            fw.write(cards.getCard(i).toString()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    + \" | [P] \" + cards.getCard(i).getPreviousInterval() + \" | [R] \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    + ratingString + \"\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    //@@author Darticune"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected static void saveChapterDeadline(String dueBy, String moduleName, String chapterName, String filePath) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String dirPath \u003d filePath + \"/\" + moduleName + \"/\" + \"dues\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String duePath \u003d filePath + \"/\" + moduleName + \"/\" + \"dues\" + \"/\" + chapterName + \"due\" + \".txt\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (createChapterDue(duePath, dirPath)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                writeDeadlineToChapterDue(dueBy, duePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                System.out.println(\"Unable to produce ChapterDue\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            System.out.println(\"Error in saving chapter deadline\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    //@@author neojiaern"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    protected static boolean deleteDirectory(File directoryToBeDeleted) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        File[] allContents \u003d directoryToBeDeleted.listFiles();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (allContents !\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            for (File file : allContents) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                deleteDirectory(file);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return directoryToBeDeleted.delete();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    //@@author Jane-Ng"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Rename the filename of a chapter."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param newChapterName new chapter name to rename to"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param module module of the chapter to be renamed"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param chapter existing chapter to be renamed"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param filePath of the storage file"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws StorageDataException if there is an error renaming the storage file"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    protected static void renameChapter(String newChapterName, Module module, Chapter chapter, String filePath)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws StorageDataException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        File chapterFile \u003d new File(filePath"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + module.getModuleName()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + chapter.getChapterName() + \".txt\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        File dueFile \u003d new File(filePath"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + module.getModuleName()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/dues\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + chapter.getChapterName() + \"due.txt\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean chapterSuccess \u003d chapterFile.renameTo(new File(filePath"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + module.getModuleName()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + newChapterName + \".txt\"));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean dueSuccess \u003d dueFile.renameTo(new File(filePath"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + module.getModuleName()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/dues\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + newChapterName + \"due.txt\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!chapterSuccess || !dueSuccess) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new StorageDataException(\"Error renaming the chapter. Please check your directory.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    //@@author Jane-Ng"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Rename the folder of a module."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param newModuleName new module name to rename to"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param module existing module to be renamed"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param filePath of the storage file"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @throws StorageDataException if there is an error renaming the storage file"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    protected static void renameModule(String newModuleName, Module module, String filePath)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws StorageDataException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        File file \u003d new File(filePath + \"/\" + module.getModuleName());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean success \u003d file.renameTo(new File(filePath + \"/\" + newModuleName));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!success) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new StorageDataException(\"Error renaming the module. Please check your directory.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    //@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * Create a txt file to store history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param date the date of the revision"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @throws IOException if there is an error creating the storage file"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected static void createHistory(String date) throws IOException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            File f \u003d new File(\"data/history/\" + date + \".txt\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            createFile(f);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new IOException(\"Error creating the data/history file.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    //@@author Zhu-Ze-Yu"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * Save revision history into file."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param date the date of the revision"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @param histories all chapters revised in the date"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     * @throws IOException if there is an error creating the storage file"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected static void saveHistory(ArrayList\u003cHistory\u003e histories, String date) throws IOException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/history/\" + date + \".txt\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (History h : histories) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            fw.write(h.toString() + \"\\n\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    //@@author neojiaern"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    protected static boolean removeChapterFromDue(String module, String chapter, String filePath) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        File fileToDelete \u003d new File(filePath + \"/\" + module"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + \"/dues/\" + chapter + \"due.txt\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return deleteDirectory(fileToDelete);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 52,
      "gua-guargia": 28,
      "neojiaern": 43,
      "Jane-Ng": 55,
      "Darticune": 110
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.BackCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ExcludeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.GoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.IncludeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ListDueCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.PreviewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.RemoveCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ShowRateCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_SHOW_ANSWER_PROMPT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.LINE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " * UI of the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean chooseToRateNewDeck() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Would you like to rate this new Chapter? (Y/N)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        Ui ratingUi \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        while (!userChoice.equalsIgnoreCase(\"Y\") \u0026\u0026 !userChoice.equalsIgnoreCase(\"N\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ratingUi.showToUser(\"Sorry, that is not a valid input. Please enter \\\"Y\\\" or \\\"N\\\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return userChoice.equalsIgnoreCase(\"Y\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean validDeckRating(String rating) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (rating.toUpperCase()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"M\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"H\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String getChoiceOfNewDeckRating() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Please rate this new Chapter!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"You have the options of: Easy(E), Medium(M) or Hard(H)\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Would your choice be E, M or H?\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        Ui ratingUi \u003d new Ui();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        while (!validDeckRating(userChoice)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return userChoice.toUpperCase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /** Prompts for the command and reads the text entered by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @return full command entered by the user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.print(\"Enter command here: \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String userCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        while (userCommand.trim().isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            out.print(\"Enter command here: \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            userCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return userCommand;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Prints the welcome message upon the start of the application."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(\"Welcome to Kaji!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Prints the access level that the user is currently at."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param access access level of the user"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void showLevel(Access access) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(access.getLevel());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Prints the line divider between each command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(LINE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Shows message to the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param message message to be shown to the user"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void showToUser(String message) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void showCardRevision(Card c, Scanner scanner) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(c.getRevisionQuestion() + MESSAGE_SHOW_ANSWER_PROMPT);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        getAnswerInput(c, scanner);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void getAnswerInput(Card c, Scanner scanner) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (!input.trim().equalsIgnoreCase(\"s\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            out.println(\"You have entered an invalid input, please try again.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(c.getRevisionAnswer());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getInput(String prompt, Scanner scanner) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(prompt);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Prints the exit message upon termination of the application."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"Exiting the program...\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Prints the list of commands available."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void showHelpList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"Here is a list of commands available:\" + \"\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"1.  \" + AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"2.  \" + BackCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"3.  \" + ListDueCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"4.  \" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"5.  \" + ExcludeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"6.  \" + ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"7.  \" + GoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"8.  \" + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"9.  \" + HistoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"10. \" + IncludeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"11. \" + ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"12. \" + PreviewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"13. \" + RemoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"14. \" + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"15. \" + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"16. \" + ShowRateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * Prints the error message from exceptions."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     * @param error error message thrown by exceptions"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(error);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void printDueChapters(ArrayList\u003cDueChapter\u003e dueChapters) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (DueChapter dueChapter : dueChapters) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"\\t-\" + dueChapter.toString());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void printDueByTodayMessage(int listSize, String commandType) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"You have no tasks due today!\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (commandType.equals(\"due\")) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                showToUser(\"Please use the \\\"preview\\\" command to view upcoming tasks or check back again tomorrow!\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\"The chapter\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            System.out.print(\"s\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\" you have due by today \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"are:\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"is:\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void printDueByIncrementMessage(int listSize, String incrementedDueBy) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"You have no tasks due on \" + incrementedDueBy + \"!\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\"The chapter\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            System.out.print(\"s\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\" you have due by \" + incrementedDueBy + \" \");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"are:\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"is:\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getExcludedModuleName(String type) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(ExcludeCommand.EXCLUDE_COMMAND_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module will you like to be excluded from your schedule?\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module does the chapter you would like to be excluded belong to?\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getExcludedChapterName(String moduleName) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        showToUser(\"Which chapter in the Module: \" + moduleName + \" would you like to exclude?\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getIncludedModuleName(String type) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(IncludeCommand.INCLUDE_COMMAND_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module will you like to include back into your schedule?\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module does the chapter you would like to be included belong to?\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getIncludedChapterName(String moduleName) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        showToUser(\"Which chapter in the Module: \" + moduleName + \" would you like to include?\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 4,
      "gua-guargia": 16,
      "neojiaern": 30,
      "Jane-Ng": 100,
      "Darticune": 109
    }
  },
  {
    "path": "src/test/java/commands/AddCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class AddCardCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private AddCardCommand addCardCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private AccessStub accessStub;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub \u003d new StorageStub(\"src/test/data/admin\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/Chapter1.txt\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        accessStub \u003d new AccessStub();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d accessStub.getChapter().getCards();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.addCard(new Card(\"one plus one\", \"two\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.addCard(new Card(\"2*2\", \"4\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/Chapter1.txt\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_validInput_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String question \u003d \"1+1\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answer \u003d \"2\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(question, answer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        addCardCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(AddCommand.MESSAGE_SUCCESS, CARD)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"[Q] \" + question + \" | [A] \" + answer + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + String.format(AddCommand.MESSAGE_COUNT, 3, CARD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_duplicatedCard_addFail() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String question \u003d \"One plus one\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answer \u003d \"Two\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        addCardCommand \u003d new AddCardCommand(question, answer);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        addCardCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_ITEM_EXISTED, CARD, \"[Q] \" + question + \" [A] \" + answer, CARD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class AccessStub extends Access {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public AccessStub() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.moduleLevel \u003d \"CS2113\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapterLevel \u003d \"Chapter1\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.module \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapter \u003d new Chapter(\"Chapter1\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isChapterLevel \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public StorageStub(String filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void createDirectory(String path) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void createFile(String path) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void deleteDirectory(String path) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File directory \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            directory.delete();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 118
    }
  },
  {
    "path": "src/test/java/commands/EditCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditCardCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private EditCardCommand editCardCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private AccessStub accessStub;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub \u003d new StorageStub(\"src/test/data/admin\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/Chapter1.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        accessStub \u003d new AccessStub();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d accessStub.getChapter().getCards();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.addCard(new Card(\"one plus one\", \"two\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.addCard(new Card(\"2*2\", \"4\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.addCard(new Card(\"2+2\", \"4\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/Chapter1.txt\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_invalidIndex_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String question \u003d \"1+1\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answer \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand \u003d new EditCardCommand(index, question, answer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e editCardCommand.execute(ui, accessStub, storageStub));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        index \u003d 3;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand \u003d new EditCardCommand(index, question, answer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e editCardCommand.execute(ui, accessStub, storageStub));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_sameQuestionAnswer_editFail() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String question \u003d \"one plus one\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answer \u003d \"two\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand \u003d new EditCardCommand(index, question, answer);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(EditCardCommand.MESSAGE_SAME_CONTENT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                \"[Q] one plus one | [A] two\", question, answer);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_sameQuestion_editFail() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String question \u003d \"one plus one\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answer \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand \u003d new EditCardCommand(index, question, answer);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(EditCardCommand.MESSAGE_SAME_QUESTION,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                \"[Q] one plus one | [A] two\", question);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_sameAnswer_editFail() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String question \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answer \u003d \"two\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand \u003d new EditCardCommand(index, question, answer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(EditCardCommand.MESSAGE_SAME_ANSWER,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                \"[Q] one plus one | [A] two\", answer);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_cardExists_editFail() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String question \u003d \"2+2\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answer \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand \u003d new EditCardCommand(index, question, answer);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_ITEM_EXISTED, CARD, \"[Q] \" + question + \" [A] 4\", CARD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_validInput_editSuccess() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String question \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answer \u003d \"2\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand \u003d new EditCardCommand(index, question, answer);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editCardCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(EditCommand.MESSAGE_BEFORE_EDIT, CARD)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"[Q] one plus one | [A] two\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + String.format(EditCommand.MESSAGE_AFTER_EDIT, CARD)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"[Q] one plus one | [A] 2\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class AccessStub extends Access {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public AccessStub() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.moduleLevel \u003d \"CS2113\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapterLevel \u003d \"Chapter1\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.module \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapter \u003d new Chapter(\"Chapter1\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isChapterLevel \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public StorageStub(String filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void createDirectory(String path) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void createFile(String path) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void deleteDirectory(String path) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File directory \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            directory.delete();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 173
    }
  },
  {
    "path": "src/test/java/commands/EditChapterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditChapterCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private EditChapterCommand editChapterCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private AccessStub accessStub;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub \u003d new StorageStub(\"src/test/data/admin\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createDirectory(\"/CS2113/dues\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/Chapter1.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/Chapter2.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/dues/Chapter1due.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/dues/Chapter2due.txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        accessStub \u003d new AccessStub();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ChapterList chapters \u003d accessStub.getModule().getChapters();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        chapters.addChapter(new Chapter(\"Chapter1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        chapters.addChapter(new Chapter(\"Chapter2\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/dues/Chapter1due.txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/dues/Chapter2due.txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/Chapter1.txt\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/Chapter2.txt\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/dues\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_invalidIndex_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String chapterName \u003d \"chapter1\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editChapterCommand \u003d new EditChapterCommand(index, chapterName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e editChapterCommand.execute(ui, accessStub, storageStub));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        index \u003d 2;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editChapterCommand \u003d new EditChapterCommand(index, chapterName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e editChapterCommand.execute(ui, accessStub, storageStub));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_sameChapterName_editFail() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String chapterName \u003d \"Chapter1\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editChapterCommand \u003d new EditChapterCommand(index, chapterName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editChapterCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(EditChapterCommand.MESSAGE_SAME_NAME, \"Chapter1\", chapterName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_chapterExists_editFail() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String chapterName \u003d \"chapter1\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editChapterCommand \u003d new EditChapterCommand(index, chapterName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editChapterCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_ITEM_EXISTED, CHAPTER, chapterName, CHAPTER);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_validInput_editSuccess() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String chapterName \u003d \"chapter1\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editChapterCommand \u003d new EditChapterCommand(index, chapterName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editChapterCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(EditCommand.MESSAGE_BEFORE_EDIT, CHAPTER)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"Chapter1\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + String.format(EditCommand.MESSAGE_AFTER_EDIT, CHAPTER)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + chapterName;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class AccessStub extends Access {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public AccessStub() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.moduleLevel \u003d \"CS2113\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.module \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapter \u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isModuleLevel \u003d true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public StorageStub(String filePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void createDirectory(String path) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void createFile(String path) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void deleteDirectory(String path) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File directory \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            directory.delete();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 150
    }
  },
  {
    "path": "src/test/java/commands/EditModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_ITEM_EXISTED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditModuleCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private EditModuleCommand editModuleCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private AccessStub accessStub;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub \u003d new StorageStub(\"src/test/data/admin\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createDirectory(\"/CS2101\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        accessStub \u003d new AccessStub();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ModuleList modules \u003d accessStub.getAdmin().getModules();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        modules.addModule(new Module(\"CS2113\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        modules.addModule(new Module(\"CS2101\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2101\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_invalidIndex_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String moduleName \u003d \"cs2113\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editModuleCommand \u003d new EditModuleCommand(index, moduleName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e editModuleCommand.execute(ui, accessStub, storageStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        index \u003d 2;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editModuleCommand \u003d new EditModuleCommand(index, moduleName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e editModuleCommand.execute(ui, accessStub, storageStub));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_sameModuleName_editFail() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String moduleName \u003d \"CS2113\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editModuleCommand \u003d new EditModuleCommand(index, moduleName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editModuleCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(EditModuleCommand.MESSAGE_SAME_NAME, \"CS2113\", moduleName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_moduleExists_editFail() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String moduleName \u003d \"cs2113\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editModuleCommand \u003d new EditModuleCommand(index, moduleName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editModuleCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_ITEM_EXISTED, MODULE, moduleName, MODULE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_validInput_editSuccess() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String moduleName \u003d \"cs2113\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editModuleCommand \u003d new EditModuleCommand(index, moduleName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        editModuleCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(EditCommand.MESSAGE_BEFORE_EDIT, MODULE)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"CS2113\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + String.format(EditCommand.MESSAGE_AFTER_EDIT, MODULE)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + moduleName;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class AccessStub extends Access {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public AccessStub() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.moduleLevel \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.module \u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapter \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public StorageStub(String filePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void createDirectory(String path) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void deleteDirectory(String path) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File directory \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            directory.delete();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 135
    }
  },
  {
    "path": "src/test/java/commands/HistoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private HistoryCommand historyCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private AccessStub accessStub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storageStub \u003d new StorageStub(\"src/test/data\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storageStub.createDirectory(\"/history\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storageStub.createFile(\"/history/2020-11-01.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        accessStub \u003d new AccessStub();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storageStub.deleteDirectory(\"/history/2020-11-01.txt\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storageStub.deleteDirectory(\"/history\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute_noHistory_noHistoryMessage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String date \u003d \"2020-11-01\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        historyCommand \u003d new HistoryCommand(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        historyCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String expectedResult \u003d String.format(HistoryCommand.MESSAGE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public class AccessStub extends Access {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        public AccessStub() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.moduleLevel \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.module \u003d new Module(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.chapter \u003d new Chapter(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        public StorageStub(String filePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        public void createDirectory(String path) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        public void createFile(String path) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        public void deleteDirectory(String path) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            File directory \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            directory.delete();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 92
    }
  },
  {
    "path": "src/test/java/commands/ListCardsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ListCardsCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private ListCardsCommand listCardsCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private AccessStub accessStub;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub \u003d new StorageStub(\"src/test/data/admin\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        accessStub \u003d new AccessStub();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_noCards_noCardsMessage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        listCardsCommand \u003d new ListCardsCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        listCardsCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(ListCommand.MESSAGE_DOES_NOT_EXIST, CARD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_withCards_listCardsMessage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d accessStub.getChapter().getCards();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.addCard(new Card(\"one plus one\", \"two\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.addCard(new Card(\"2*2\", \"4\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        listCardsCommand \u003d new ListCardsCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        listCardsCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(ListCommand.MESSAGE_EXIST, CARD)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"\\n1.[Q] one plus one | [A] two\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"\\n2.[Q] 2*2 | [A] 4\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class AccessStub extends Access {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public AccessStub() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.moduleLevel \u003d \"CS2113\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapterLevel \u003d \"Chapter1\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.module \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapter \u003d new Chapter(\"Chapter1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isChapterLevel \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public StorageStub(String filePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 84
    }
  },
  {
    "path": "src/test/java/commands/RemoveCardCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.RemoveCommand.MESSAGE_COUNT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.RemoveCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveCardCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Access access;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private File moduleDir;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private File chapterFile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    void init() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String filePath \u003d \"src/test/data/admin\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cChapter\u003e chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter chapter \u003d new Chapter(\"chapter1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card card \u003d new Card(\"1+1\", \"2\", 4, 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapter.setCards(cards);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapters.add(chapter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Module module \u003d new Module(\"CS2113T\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        module.setChapters(chapters);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Admin admin \u003d new Admin(modules);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access \u003d new Access();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setAdmin(admin);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setModule(module);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setChapter(chapter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setIsChapterLevel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        moduleDir \u003d new File(filePath + \"/CS2113T\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile \u003d new File(filePath + \"/CS2113T/chapter1.txt\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        moduleDir.mkdir();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile.createNewFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath + \"/CS2113T/chapter1.txt\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        fw.write(\"[Q] 1+1 | [A] 2 | [P] 4 | [R] 1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    void end() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (chapterFile.exists()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapterFile.delete();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (moduleDir.exists()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            moduleDir.delete();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_invalidIndex_expectException() throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        RemoveCardCommand command \u003d new RemoveCardCommand(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, CARD).trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expectedResult, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_validIndex_expectSuccess() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        RemoveCardCommand command \u003d new RemoveCardCommand(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_SUCCESS, CARD) + \"[Q] 1+1 | [A] 2\" + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + String.format(MESSAGE_COUNT, 0, CARD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expectedResult, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 96
    }
  },
  {
    "path": "src/test/java/commands/RemoveChapterCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.RemoveCommand.MESSAGE_COUNT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.RemoveCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveChapterCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Access access;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private File moduleDir;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private File chapterFile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    void init() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String filePath \u003d \"src/test/data/admin\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cChapter\u003e chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Module module \u003d new Module(\"CS2113T\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter chapter \u003d new Chapter(\"chapter1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapters.add(chapter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        module.setChapters(chapters);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Admin admin \u003d new Admin(modules);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access \u003d new Access();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setAdmin(admin);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setModule(module);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        moduleDir \u003d new File(filePath + \"/CS2113T\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile \u003d new File(filePath + \"/CS2113T/chapter1.txt\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        moduleDir.mkdir();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile.createNewFile();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    void end() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (chapterFile.exists()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapterFile.delete();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (moduleDir.exists()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            moduleDir.delete();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_invalidIndex_expectException() throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        RemoveChapterCommand command \u003d new RemoveChapterCommand(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expectedResult, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_validIndex_expectSuccess() throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        RemoveChapterCommand command \u003d new RemoveChapterCommand(0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_SUCCESS, CHAPTER) + \"chapter1\" + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + String.format(MESSAGE_COUNT, 0, CHAPTER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expectedResult, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 86
    }
  },
  {
    "path": "src/test/java/commands/RemoveModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.RemoveCommand.MESSAGE_COUNT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.RemoveCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveModuleCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Access access;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private File moduleDir;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private File chapterFile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    void init() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String filePath \u003d \"src/test/data/admin\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Module module \u003d new Module(\"CS2113T\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Admin admin \u003d new Admin(modules);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access \u003d new Access();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setAdmin(admin);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        moduleDir \u003d new File(filePath + \"/CS2113T\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile \u003d new File(filePath + \"/CS2113T/chapter1.txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        moduleDir.mkdir();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile.createNewFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    void end() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (chapterFile.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapterFile.delete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (moduleDir.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            moduleDir.delete();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_invalidIndex_expectException() throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        RemoveModuleCommand command \u003d new RemoveModuleCommand(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, MODULE).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expectedResult, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_validIndex_expectSuccess() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        RemoveModuleCommand command \u003d new RemoveModuleCommand(0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_SUCCESS, MODULE) + \"CS2113T\" + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + String.format(MESSAGE_COUNT, 0, MODULE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expectedResult, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 79
    }
  },
  {
    "path": "src/test/java/commands/RescheduleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class RescheduleCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private RescheduleCommand rescheduleCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private AccessStub accessStub;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub \u003d new StorageStub(\"src/test/data/admin\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createDirectory(\"/CS2113/dues\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/Chapter1.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/Chapter2.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/dues/Chapter1due.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.createFile(\"/CS2113/dues/Chapter2due.txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        accessStub \u003d new AccessStub();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ChapterList chapters \u003d accessStub.getModule().getChapters();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        chapters.addChapter(new Chapter(\"Chapter1\", LocalDate.now().plusDays(1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        chapters.addChapter(new Chapter(\"Chapter2\", LocalDate.now().plusDays(2)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.writeToFile(\"/CS2113/dues/Chapter1due.txt\", LocalDate.now().plusDays(1).toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.writeToFile(\"/CS2113/dues/Chapter2due.txt\", LocalDate.now().plusDays(2).toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void cleanUp() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/dues/Chapter1due.txt\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/dues/Chapter2due.txt\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/Chapter1.txt\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/Chapter2.txt\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113/dues\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        storageStub.deleteDirectory(\"/CS2113\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_invalidIndex_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        LocalDate date \u003d LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        rescheduleCommand \u003d new RescheduleCommand(index, date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e rescheduleCommand.execute(ui, accessStub, storageStub));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        index \u003d 2;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        rescheduleCommand \u003d new RescheduleCommand(index, date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e rescheduleCommand.execute(ui, accessStub, storageStub));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_sameDate_rescheduleFail() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        LocalDate date \u003d LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        rescheduleCommand \u003d new RescheduleCommand(index, date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        rescheduleCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(RescheduleCommand.MESSAGE_SAME_DATE, \"Chapter1\", date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute_validInput_rescheduleFail() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        LocalDate date \u003d LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        rescheduleCommand \u003d new RescheduleCommand(index, date);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        rescheduleCommand.execute(ui, accessStub, storageStub);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String expectedResult \u003d String.format(RescheduleCommand.MESSAGE_BEFORE_RESCHEDULE, \"Chapter2\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                LocalDate.now().plusDays(2))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + String.format(RescheduleCommand.MESSAGE_AFTER_RESCHEDULE, date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(expectedResult.trim(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class AccessStub extends Access {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public AccessStub() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.moduleLevel \u003d \"CS2113\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.module \u003d new Module(\"CS2113\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.chapter \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isModuleLevel \u003d true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public StorageStub(String filePath) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void createDirectory(String path) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void createFile(String path) throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File f \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void deleteDirectory(String path) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            File directory \u003d new File(filePath + path);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            directory.delete();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        public void writeToFile(String path, String dueBy) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath + path);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            fw.write(dueBy);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 148
    }
  },
  {
    "path": "src/test/java/commands/ReviseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_CHAPTER_NOT_DUE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_NOT_REVISING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_NO_CARDS_IN_CHAPTER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_SHOW_ANSWER_PROMPT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_SHOW_RATING_PROMPT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_SHOW_REVISE_PROMPT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_START_REVISION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class ReviseCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String INVALID_INPUT \u003d \"You have entered an invalid input, please try again.\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String filePath \u003d \"src/test/data/admin\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final InputStream systemIn \u003d System.in;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final PrintStream systemOut \u003d System.out;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private ByteArrayInputStream testIn;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private ByteArrayOutputStream testOut;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Access access;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private File moduleDir;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private File chapterFile;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private File chapterFile2;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void init() throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        card \u003d new Card(\"1+1\", \"2\", 4, 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter chapter \u003d new Chapter(\"chapter1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapter.setCards(cards);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cChapter\u003e chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapters.add(chapter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter chapter2 \u003d new Chapter(\"chapter2\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapters.add(chapter2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Module module \u003d new Module(\"CS2113T\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        module.setChapters(chapters);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Admin admin \u003d new Admin(modules);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access \u003d new Access();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setAdmin(admin);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setModuleLevel(\"CS2113T\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setModule(module);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        moduleDir \u003d new File(filePath + \"/CS2113T\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile \u003d new File(filePath + \"/CS2113T/chapter1.txt\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile2 \u003d new File(filePath + \"/CS2113T/chapter2.txt\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        moduleDir.mkdir();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile.createNewFile();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        chapterFile2.createNewFile();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath + \"/CS2113T/chapter1.txt\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        fw.write(\"[Q] 1+1 | [A] 2 | [P] 4 | [R] 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void setUpOutput() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        testOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setOut(new PrintStream(testOut));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private void provideInput(String data) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        testIn \u003d new ByteArrayInputStream(data.getBytes());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setIn(testIn);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String getOutput() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return testOut.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void restoreSystemInputOutput() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setIn(systemIn);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        System.setOut(systemOut);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void end() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        File dueChapterFile \u003d new File(filePath + \"/CS2113T/dues/chapter1due.txt\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (dueChapterFile.exists()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            dueChapterFile.delete();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        File due \u003d new File(filePath + \"/CS2113T/dues\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (due.exists()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            due.delete();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (chapterFile.exists()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapterFile.delete();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (chapterFile2.exists()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            chapterFile2.delete();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (moduleDir.exists()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            moduleDir.delete();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String getExpected(String expectedResult) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        printWriter.print(expectedResult);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (!(os.contains(\"win\"))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            expected \u003d expected.replaceAll(\"\\\\r\\\\n\", \"\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return expected;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_invalidIndex_expectException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ReviseCommand command \u003d new ReviseCommand(2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e command.execute(ui, access, storage));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_validIndexUserInputN_expectNoRevision() throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ReviseCommand command \u003d new ReviseCommand(0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String testInput \u003d \"w\\nN\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        provideInput(testInput);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_CHAPTER_NOT_DUE, \"chapter1\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_REVISE_PROMPT + \"\\r\\n\" + INVALID_INPUT"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + String.format(MESSAGE_NOT_REVISING, \"chapter1\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expected \u003d getExpected(expectedResult);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expected, getOutput().trim());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_validIndexUserInputYEasy_expectRevision() throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ReviseCommand command \u003d new ReviseCommand(0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String testInput \u003d \"w\\nY\\nw\\ns\\nw\\nc\\ns\\ne\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        provideInput(testInput);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_CHAPTER_NOT_DUE, \"chapter1\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_REVISE_PROMPT + \"\\r\\n\" + INVALID_INPUT + \"\\nCard count: 1\\r\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + String.format(MESSAGE_START_REVISION, \"chapter1\") + \"\\r\\n\\nQuestion 1:\\r\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + card.getRevisionQuestion() + MESSAGE_SHOW_ANSWER_PROMPT + \"\\r\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + INVALID_INPUT + card.getRevisionAnswer() + \"\\r\\n\" + MESSAGE_SHOW_RATING_PROMPT + \"\\r\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + INVALID_INPUT + \"\\nQuestion 2:\\r\\n\" + card.getRevisionQuestion()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_ANSWER_PROMPT + \"\\r\\n\" + card.getRevisionAnswer() + \"\\r\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_RATING_PROMPT + \"\\r\\n\" + String.format(MESSAGE_SUCCESS, \"chapter1\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expected \u003d getExpected(expectedResult);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expected, getOutput().trim());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_validIndexUserInputYMedium_expectRevision() throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ReviseCommand command \u003d new ReviseCommand(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String testInput \u003d \"w\\nY\\nw\\ns\\nw\\nc\\ns\\nm\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        provideInput(testInput);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_CHAPTER_NOT_DUE, \"chapter1\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_REVISE_PROMPT + \"\\r\\n\" + INVALID_INPUT + \"\\nCard count: 1\\r\\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + String.format(MESSAGE_START_REVISION, \"chapter1\") + \"\\r\\n\\nQuestion 1:\\r\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + card.getRevisionQuestion() + MESSAGE_SHOW_ANSWER_PROMPT + \"\\r\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + INVALID_INPUT + card.getRevisionAnswer() + \"\\r\\n\" + MESSAGE_SHOW_RATING_PROMPT + \"\\r\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + INVALID_INPUT + \"\\nQuestion 2:\\r\\n\" + card.getRevisionQuestion()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_ANSWER_PROMPT + \"\\r\\n\" + card.getRevisionAnswer() + \"\\r\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_RATING_PROMPT + \"\\r\\n\" + String.format(MESSAGE_SUCCESS, \"chapter1\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expected \u003d getExpected(expectedResult);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expected, getOutput().trim());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_validIndexUserInputYHard_expectRevision() throws IOException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ReviseCommand command \u003d new ReviseCommand(0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String testInput \u003d \"w\\nY\\nw\\ns\\nw\\nc\\ns\\nh\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        provideInput(testInput);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_CHAPTER_NOT_DUE, \"chapter1\")"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_REVISE_PROMPT + \"\\r\\n\" + INVALID_INPUT + \"\\nCard count: 1\\r\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + String.format(MESSAGE_START_REVISION, \"chapter1\") + \"\\r\\n\\nQuestion 1:\\r\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + card.getRevisionQuestion() + MESSAGE_SHOW_ANSWER_PROMPT + \"\\r\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + INVALID_INPUT + card.getRevisionAnswer() + \"\\r\\n\" + MESSAGE_SHOW_RATING_PROMPT + \"\\r\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + INVALID_INPUT + \"\\nQuestion 2:\\r\\n\" + card.getRevisionQuestion()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_ANSWER_PROMPT + \"\\r\\n\" + card.getRevisionAnswer() + \"\\r\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_RATING_PROMPT + \"\\r\\n\" + String.format(MESSAGE_SUCCESS, \"chapter1\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expected \u003d getExpected(expectedResult);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expected, getOutput().trim());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute_validIndexZeroCards_expectNoCardsForRevision() throws IOException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ReviseCommand command \u003d new ReviseCommand(1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String testInput \u003d \"Y\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        provideInput(testInput);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        command.execute(ui, access, storage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expectedResult \u003d String.format(MESSAGE_CHAPTER_NOT_DUE, \"chapter2\")"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + MESSAGE_SHOW_REVISE_PROMPT + \"\\r\\n\" + \"\\nCard count: 0\\r\\n\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + String.format(MESSAGE_NO_CARDS_IN_CHAPTER, \"chapter2\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String expected \u003d getExpected(expectedResult);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(expected, getOutput().trim());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 214,
      "Jane-Ng": 14
    }
  },
  {
    "path": "src/test/java/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddChapterCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_missingParts_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", ADMIN));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", MODULE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", CHAPTER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_incorrectLevel_throwsIncorrectAccessLevelException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"CS2113\", \"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_invalidModuleName_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"../Non-alphanumeric\", ADMIN));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_invalidChapterName_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"../Non-alphanumeric\", MODULE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_invalidQuestionAnswer_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for question"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"q: | a:2\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for answer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"q:1+1 | a:\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question and answer separator prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"q:1+1 a:2\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"1+1 | a:2\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no answer prefix"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"q:1+1 | 2\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, CHAPTER));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_validInput_returnsAddModuleCommand() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"CS2113\", ADMIN) instanceof AddModuleCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_validInput_returnsAddChapterCommand() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"Chapter 1\", MODULE) instanceof AddChapterCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_validInput_returnsAddCardCommand() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"q:1+1 | a:2\", CHAPTER) instanceof AddCardCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 76
    }
  },
  {
    "path": "src/test/java/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditChapterCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_missingParts_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", ADMIN));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", MODULE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", CHAPTER));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"CS2113\", ADMIN));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"Chapter1\", MODULE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"q:1+1 | a:\", CHAPTER));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"1\", ADMIN));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"1\", MODULE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"1\", CHAPTER));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_incorrectLevel_throwsIncorrectAccessLevelException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"1 CS2113\", \"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_invalidModuleName_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"1 ../Non-alphanumeric\", ADMIN));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_invalidChapterName_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"1 ../Non-alphanumeric\", MODULE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_invalidQuestionAnswer_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for question and answer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"1 q: | a:\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question and answer separator prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"1 q:1*1 a:1\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"1 1+1 | a:\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no answer prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"1 q:1+1 | 2\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, CHAPTER));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_validInput_returnsEditModuleCommand() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"1 CS2113\", ADMIN) instanceof EditModuleCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_validInput_returnsEditChapterCommand() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"1 Chapter 1\", MODULE) instanceof EditChapterCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_validInput_returnsEditCardCommand() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // content for question and answer"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"1 q:1+1 | a:2\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for question"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"1 q: | a:1\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for answer"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"1 q:1+1 | a:\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertTrue(parser.parse(input, CHAPTER) instanceof EditCardCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 94
    }
  },
  {
    "path": "src/test/java/parser/ExitCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ExitCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private ExitCommandParser parser \u003d new ExitCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_withArgs_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"args\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_noArgs_returnsExitCommand() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 23
    }
  },
  {
    "path": "src/test/java/parser/HistoryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HistoryCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private HistoryCommandParser parser \u003d new HistoryCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void parse_editHistoryInvalidCommandFormat_expectException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            \"history wrong args format\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            // not date format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            \"history 20-10-2020\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            // not yyyy-mm-dd but dd-mm-yyyy"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            \"history 10-20-2020\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            // not yyyy-mm-dd but mm-dd-yyyy"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            \"history 1\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 28
    }
  },
  {
    "path": "src/test/java/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ListCardsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ListChaptersCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ListModulesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_withArgs_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"args\", ADMIN));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"args\", MODULE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"args\", CHAPTER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_incorrectLevel_throwsIncorrectAccessLevelException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"\", \"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_noArgs_returnsListModulesCommand() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"\", ADMIN) instanceof ListModulesCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_noArgs_returnsListChaptersCommand() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"\", MODULE) instanceof ListChaptersCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_noArgs_returnsListCardsCommand() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"\", CHAPTER) instanceof ListCardsCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 46
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.AddModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.AddChapterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.AddCardCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.EditModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.EditChapterCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.EditCardCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ListModulesCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ListChaptersCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ListCardsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class  ParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_add() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsAdminLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(AddCommand.COMMAND_WORD + \" CS2113\", access) instanceof AddModuleCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(AddCommand.COMMAND_WORD + \" Chapter 1\", access)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                instanceof AddChapterCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsChapterLevel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(AddCommand.COMMAND_WORD + \" q:1+1 | a:2\", access) instanceof AddCardCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_edit() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsAdminLevel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(EditCommand.COMMAND_WORD + \" 1 CS2113\", access)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                instanceof EditModuleCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(EditCommand.COMMAND_WORD + \" 1 Chapter 1\", access)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                instanceof EditChapterCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsChapterLevel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(EditCommand.COMMAND_WORD + \" 1 q:1+1 | a:\", access)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                instanceof EditCardCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_list() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsAdminLevel();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(ListCommand.COMMAND_WORD, access) instanceof ListModulesCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(ListCommand.COMMAND_WORD, access) instanceof ListChaptersCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsChapterLevel();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(ListCommand.COMMAND_WORD, access) instanceof ListCardsCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_reschedule() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String date \u003d LocalDate.now().plusDays(1).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(RescheduleCommand.COMMAND_WORD + \" 1 \" + date, access)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                instanceof RescheduleCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void parse_history() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        assertTrue(Parser.parse(HistoryCommand.COMMAND_WORD, access) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_exit() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(Parser.parse(ExitCommand.COMMAND_WORD, access) instanceof ExitCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_unknownCommand_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e Parser.parse(\"unknownCommand\", access));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void parse_goCommandEmptyArgs_expectException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        final String[] inputs \u003d {\"go\", \"go \"};"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void parse_backCommandWithArgs_expectException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        final String[] inputs \u003d {\"back args\"};"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 21,
      "gua-guargia": 17,
      "Jane-Ng": 84
    }
  },
  {
    "path": "src/test/java/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \"1+1\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String INVALID_ANSWER \u003d \"2\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String INVALID_NAME \u003d \"../CS2!13:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"q:1+1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String VALID_ANSWER \u003d \"a:2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String VALID_NAME \u003d \"Chapter 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parseQuestion_invalidInput_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parseQuestion_validInput_returnsQuestion() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(\"1+1\", ParserUtil.parseQuestion(VALID_QUESTION, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parseQuestion_validInput_returnsTrimmedQuestion() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String questionWithWhitespaces \u003d VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(\"1+1\", ParserUtil.parseQuestion(questionWithWhitespaces, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parseAnswer_invalidInput_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            () -\u003e ParserUtil.parseAnswer(INVALID_ANSWER, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parseAnswer_validInput_returnsAnswer() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(\"2\", ParserUtil.parseAnswer(VALID_ANSWER, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parseAnswer_validInput_returnsTrimmedAnswer() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String answerWithWhitespaces \u003d VALID_ANSWER + WHITESPACE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(\"2\", ParserUtil.parseAnswer(answerWithWhitespaces, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void checkAlphanumericOnly_invalidInput_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(false, ParserUtil.checkAlphanumericOnly(INVALID_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void checkAlphanumericOnly_validInput_returnsTrue() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertEquals(true, ParserUtil.checkAlphanumericOnly(VALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 65
    }
  },
  {
    "path": "src/test/java/parser/RemoveCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import commands.RemoveCardCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import commands.RemoveChapterCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import commands.RemoveModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private RemoveCommandParser parser \u003d new RemoveCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_missingParts_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", ADMIN));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", MODULE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", CHAPTER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_incorrectLevel_throwsIncorrectAccessLevelException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"1\", \"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_NonIntegerArgs_exception() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d \"remove two\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, ADMIN));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, MODULE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, CHAPTER));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_emptyArgs_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            \"remove \","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, ADMIN));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, MODULE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, CHAPTER));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_validInput_returnsRemoveModuleCommand() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertTrue(parser.parse(\"1\", ADMIN) instanceof RemoveModuleCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertTrue(parser.parse(\"1\", MODULE) instanceof RemoveChapterCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertTrue(parser.parse(\"1\", CHAPTER) instanceof RemoveCardCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 58
    }
  },
  {
    "path": "src/test/java/parser/RescheduleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class RescheduleCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private RescheduleCommandParser parser \u003d new RescheduleCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String date \u003d LocalDate.now().plusDays(1).toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String dateBeforeToday \u003d LocalDate.now().minusDays(1).toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_missingParts_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", MODULE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(date, MODULE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"1\", MODULE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_incorrectLevel_throwsIncorrectAccessLevelException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"1 \" + date, \"\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"1 \" + date, ADMIN));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"1 \" + date, CHAPTER));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_invalidDateFormat_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"1 10-12-2020\", MODULE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_invalidDateBeforeToday_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"1 \" + dateBeforeToday, MODULE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_validInput_returnsRescheduleCommand() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertTrue(parser.parse(\"1 \" + date, MODULE) instanceof RescheduleCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 55
    }
  },
  {
    "path": "src/test/java/parser/ReviseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class ReviseCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private ReviseCommandParser parser \u003d new ReviseCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_missingParts_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(\"\", MODULE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_incorrectLevel_throwsIncorrectAccessLevelException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"1\", \"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"1\", ADMIN));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e parser.parse(\"1\", CHAPTER));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_NonIntegerArgs_exception() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d \"revise two\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, MODULE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_emptyArgs_throwsInvalidInputException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            \"revise \","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, MODULE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_validInput_returnsReviseModuleCommand() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertTrue(parser.parse(\"1\", MODULE) instanceof ReviseCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 50
    }
  },
  {
    "path": "src/test/java/scheduler/SchedulerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "class SchedulerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void isDeadlineDue_deadlineIsDue_true() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertTrue(Scheduler.isDeadlineDue(Scheduler.getCurrentDate().minusDays(1)));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void isDeadlineDue_deadlineNotDue_false() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertFalse(Scheduler.isDeadlineDue(Scheduler.getCurrentDate().plusDays(1)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 1,
      "Darticune": 22
    }
  }
]
