[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    mainClassName \u003d \"Kaji\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    archiveBaseName \u003d \"kaji\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "Jane-Ng": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jia Ern | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhu Zeyu | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jane Ng | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Jiayi Zhang | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Tan Yan An | [Github](https://github.com/Darticune) | [Portfolio](docs/team/yanAn.md)"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 1,
      "-": 7,
      "neojiaern": 1,
      "Jane-Ng": 1,
      "Darticune": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "1. [\u003cb\u003eIntroduction\u003c/b\u003e](#1-introduction)\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1.1. [Overview](#11-overview)\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1.2. [Purpose](#12-purpose)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1.3. [Scope](#13-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "2. [\u003cb\u003eSetting Up\u003c/b\u003e](#2-setting-up)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2.1. [Prerequisites](#21-prerequisites)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "2.2. [Setting Up the Project in your Computer](#22-setting-up-the-project-in-your-computer)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3. [\u003cb\u003eDesign (Architecture)\u003c/b\u003e](#3-design-architecture)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.1. [Ui Component](#31-ui-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.2. [Logic Component](#32-logic-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.3. [Model Component](#33-model-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.4. [Storage Component](#34-storage-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.5. [Common Classes](#35-common-classes)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "4. [\u003cb\u003eImplementation\u003c/b\u003e](#4-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.1. [Admin Features](#41-admin-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.1. [Add Module Feature](#411-add-module-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.2. [List Modules Feature](#412-list-modules-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.3. [Edit Module Name Feature](#413-edit-module-name-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.4. [Remove Module Feature](#414-remove-module-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.5. [Access Module Level Feature](#415-access-module-level-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.6. [Example of the Admin Feature](#416-example-of-the-admin-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.7. [Conclusion](#417-conclusion)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.2. [Module Features](#42-module-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.1. [Add Chapter Feature](#421-add-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.2. [List Chapters Feature](#422-list-chapters-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.3. [Edit Chapter Name Feature](#423-edit-chapter-name-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.4. [Remove Chapter Feature](#424-remove-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.5. [Access Chapter Level Feature](#425-access-chapter-level-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.6. [Return to Admin Level Feature](#426-return-to-admin-level-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.7. [Example of the Module Feature](#427-example-of-the-module-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.8. [Conclusion](#428-conclusion)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.3. [Chapter Features](#43-chapter-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.1. [Add Flashcard Feature](#431-add-flashcard-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2. [List Flashcards Feature](#432-list-flashcards-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.3. [Edit Flashcard Content Feature](#433-edit-flashcard-content-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.4. [Remove Flashcard Feature](#434-remove-flashcard-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.5. [Return to Module Level Feature](#435-return-to-module-level-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.6. [Check Overall Performance for a Chapter Feature](#436-check-overall-performance-for-a-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.7. [Example of the Chapter Feature](#437-example-of-the-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.8. [Conclusion](#438-conclusion)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4.4. [Revise Feature](#44-revise-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1. [Implementation](#441-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.5. [Scheduler feature](#45-scheduler-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.1. [View Due Chapters Feature](#451-view-due-chapters-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.2. [Preview Upcoming Dues Feature](#452-preview-upcoming-dues-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.3. [Exclusion Feature](#453-exclusion-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.4. [Reschedule Chapter Feature](#454-reschedule-chapter-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.5. [View Revision History Feature](#455-view-revision-history-feature)\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "5. [\u003cb\u003eAppendix: Requirements\u003c/b\u003e](#5-appendix-requirements)\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "5.1. [Product Scope](#51-product-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.1. [Target User Profile](#511-target-user-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;5.1.2. [Value Proposition](#512-value-proposition)\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.2. [User Stories](#52-user-stories)\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.3. [Use Cases](#53-use-cases)\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.4. [Non-Functional Requirements](#54-non-functional-requirements)\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5.5. [Glossary](#55-glossary)\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "6. [\u003cb\u003eAppendix: Instructions for Manual Testing\u003c/b\u003e](#6-appendix-instructions-for-manual-testing)\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 1.1. Overview"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 1.2. Purpose"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 1.3. Scope"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "This documentation describes the software architecture and software design decisions for the implementation of Kaji. The intended audience of this document is the developers, designers, and software testers of Kaji."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 2. Setting Up"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 2.1. Prerequisites"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* IntelliJ IDEA"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 2.2. Setting up the project in your computer"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. Fork this repository, and clone the fork into your computer."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. Open IntelliJ (if you are not in the welcome screen, click `File` → `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "3. Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    1. Click `Configure` → `Project Defaults` → `Project Structure`."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    2. Click `New…` and set it to the directory of the JDK."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "4. Click `Import Project` (or `Open or Import` in newer version of Intellij)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "5. Locate the `build.gradle` file (not the root folder as you would do in a normal importing) and select it. Click `OK`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "If asked, choose to `Open as Project` (not `Open as File`)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "7. Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 3. Design (Architecture)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![Architecture Diagram of Design Component](UML/Architecture.png)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The main class is `Kaji.java`. It is responsible for:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Initializing the components in the correct sequence, and connects them up with each other at app launch."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Shutting down the components and invoking cleanup methods where necessary at exit."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The rest of the App consists of 8 components:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Access`: Keeps track of the access level of the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `UI`: The UI of the App."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Command`: Executes the different command types."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Common`: Contains common classes."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Manager`: Holds the data of the App in memory."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Paser`: Parses user input into specific command type."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Scheduler`: Schedules the revision schedule."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `Storage`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.1. Ui Component "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Class Diagram of Ui Component](DG_Images/ui_component.PNG)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The UI component consists of a main class — Ui.java. The Kaji, Logic and Storage components have a dependency on the UI component due to the need to take in user input and show the results of execution."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The UI component is responsible for:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Taking in user input."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Printing result of execution for the different commands. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* Printing error messages when certain exceptions occur. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.2. Logic Component "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The Logic component consists of the `Parser`, `Command` and `Scheduler` classes."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/LogicClassDiagram.png\" width\u003d\"600\" alt\u003d\"Logic Class Diagram\"/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Class diagram of Logic component  "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. `Kaji` uses the `Parser` class to parse the user command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "2. This results in a `Command` object which is executed by `Kaji`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3. The command execution can affect the `Model` and `Storage` (e.g. adding a module)."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4. The `Scheduler` is used in some command execution to schedule the due date of a chapter."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "5. The result of the command execution is passed to the `Ui`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `parse(\"edit 1 CS2113T\")` API call:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/LogicSequenceDiagram.png\" width\u003d\"600\" alt\u003d\"Logic Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of Logic component  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Parser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.3. Model Component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "API: Model.java"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The Model,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* stores a Access object that holds temporary data for user\u0027s access level and contents of level being accessed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* stores a History object that saves revision history of current day."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* stores a DueChapter object that manages due chapter data."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* contains an Admin class that can be created and accessed by Access object. The Admin class contains a ModuleList object to manage data for modules."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* contains a Module class that can be created and accessed by Access object. The Module class contains a ChapterList object to manage data for chapters."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* contains a Chapter class that can be created and accessed by Access object. The Chapter class contains a CardList object to manage data for cards."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* contains a Card object that can be created and accessed by CardList. A Card object represents a flashcard with question, answer and master level of revision."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Architecture Diagram of Model](UML/model.png)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.4. Storage Component "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.5. Common Classes"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.1. Admin Features"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[summary + scenario]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.1. Add Module Feature"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`AddModuleCommand` facilitates the proposed add module feature. It extends `AddCommand` with an `AddCommand#prepareResult()` method. This method formates message about the result of the action to user in `Ui`. "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Shown as the class diagram below, because of the inheritance of `AddCommand`, `Command` and `AddModuleCommand`, `Kaji` is able to execute the operation `AddModuleCommand#excute()`. "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Class Diagram of add module command](UML/AddModuleCommandClass.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is an example usage scenario at Admin level and how the add module feature behaves at each step:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 1: The user is currently in admin level."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 2: The user want to add a new module CS2113 and enters `add CS2113` command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 3: The `Kaji` object passes the user\u0027s command to the `Parser` object. Then `Parser` creates a new `AddModuleCommand` object and return the `AddModuleCommand` object to `Kaji`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 4: The `Kaji` object uses the public `AddModuleCommand#excute()` to add new modules into Kaji application."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 5: The `AddModuleCommand` object creates a new `Module` object with the `Module#moduleName` of CS2113. "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 6: The new `CS2113 : Module` object will be passed into the `AddModuleCommand#addModule()` with `Access` and `Storage`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 7: The `AddModuleCommand#addModule()` gets the current `Admin` object via `Access#getAdmin()` method, then it adds the new `CS2113: Module` object into the `Admin#ModuleList`. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 8: The new `Admin` object with the `CS2113: Module` object is updated to `Access` via the method `Access#setAdmin(Admin)`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 9: The new `Module` is updated in the folder by executing the `Storage#createModule()`. A \u0027CS2113\u0027 folder is created under the \u0027data/admin\u0027 folder."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 10: A result message is returned from `AddModuleCommand#addModule()` method to the `AddModuleCommand#execute()` method which uses `Ui#showToUser()` to print the success message."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagam shows how the add module command feature works:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Sequence Diagram of add module command](UML/AddModuleCommand.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.2. List Modules Feature"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list modules feature allows the user to list all modules in admin level "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list modules mechanism is facilitated by `ListModulesCommand`. It extends from the abstract class `ListCommand`. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListModulesCommand#execute()` — oversees entire execution for listing modules."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListModulesCommand#listModules()` — gets and lists all modules in admin level."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "For instance, the user wants to list all modules available in `admin`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 1: The user is currently in `admin` level. "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 2: The user enters `list` command to list all modules in `admin` level. "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The following sequence diagram shows how the list modules feature works:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![Sequence Diagram of List Modules](UML/listmod_seq_diagram.png)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.3. Edit Module Name Feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit module name feature allows the user to edit the name of any existing module."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can edit the name of an existing module with the `edit` command, which follows the following format: `edit MODULE_INDEX MODULE_NAME`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit module name feature is facilitated by `ModuleList` and `Module`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `ModuleList#getModule()` - Returns a module based on the specified index from the list of modules."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Module#setModuleName()` — Sets the name of the module."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to edit the module `CS2113`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 1: The user is currently in `admin` level."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 2: The user enters `edit 1 CS2113T` command to edit the first module in the list of modules — which in this case is `CS2113`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 3: The user input is parsed by `Parser`, and `Parser` creates a `EditModuleCommand` object."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 4: `EditModuleCommand` is executed and calls the method `EditModuleCommand#editModule()`."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 5: `EditModuleCommand#editModule()` gets the module based on the index provided by the method `ModuleList#getModule()`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 6: The module name is edited to `CS2113T` by the method `Module#setModuleName()`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 7: The result message from `EditModuleCommand#editModule()` is returned to `EditModuleCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the edit module name feature works:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/EditModuleSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Edit Module Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of edit module name feature  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Parser` and `Admin` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.4. Remove Module Feature"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove module feature allows the user to remove a module by specifying the index of the module in the list. "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove module mechanism is facilitated by `RemoveModuleCommand`. It extends from the abstract class `RemoveCommand`. "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveModuleCommand#execute()` — oversees entire execution for removing a module."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveModuleCommand#removeModule()` — removes module from list of modules including the chapters and flashcards under it."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#prepareResult()` — prepares the resulting message of the execution."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to start a remove the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 1: The user is currently in `admin` level. "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 2: The user enters `remove 1` command to delete the first module in the list of modules — which in this case is `CS2113T`. The `remove` command creates `RemoveModuleCommand` which will then be executed. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 3: `RemoveModuleCommand#execute` gets the `module` based on the index provided and passes it to `Storage#deleteDirectory` to delete the module folder as well as the chapters and flashcards under it. "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The following sequence diagram shows how the remove module feature works:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Sequence Diagram of Remove Module](DG_Images/removemod_seq_diagram.png)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.5. Access Module Level Feature"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`GoModuleCommand` class facilitates the proposed access module level feature. It extends `GoCommand` class. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `GoModuleCommand#execute()` -- Inherites from the abstract `GoCommand`. It is overrided to calls `GoModuleCommand#goModule()` and print message to user."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `GoModuleCommand#goModule()` -- Accesses a new module level from admin level based on the module name entered by user. If the module name does not match with any of the existing module, it returns a error message. Otherwise, this operation returns a successful message to the `GoModuleCommand#execute` operation."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Shown as the class diagram below, with the inheritance of `GoCommand` and `Command`, `Kaji` is able to execute the operation `GoModuleCommand#execute()` directly. "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Class Diagram of go module command](UML/GoModuleCommandClass.png)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is an example usage scenario at Admin level and how the access module level feature behaves at each step:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 1: The user is currently in admin level."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 2: The user want to access a module level named \u0027CS2113\u0027 and enters `go CS2113` command. This example is based on the assumption that the module \u0027CS2113\u0027 already has been added."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 3: The `Kaji` object passes the user\u0027s command to the `Parser` object. The `Parser` creates a new `GoModuleCommand` object if the user\u0027s current access level is admin level. Then `Parser` returns the `GoModuleCommand` object to `Kaji`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 4: The `Kaji` object uses the public `GoModuleCommand#execute()` to access module level \u0027CS2113\u0027."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 5: The `GoModuleCommand#execute()` object calls its own private operation `GoModuleCommand#goModule()` to check the existence of the module level entered by user and modify the user\u0027s access level if the module level exists. "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 6: The reference of both the `Access` and `Storage` objects is passed into `GoModuleCommand#goModule()`."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 7: The `GoModuleCommand#goModule()` gets all the `Module` objects in the `Access#Admin` via the methods `Access#getAdmin()`, `Admin#getModules()` and `ModuleList#getAllModules()` respectively. "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 8: A for loop is used to check the existence of module entered by user. If there is an existing module with same `Module#moduleName` as the module code entered by user, the `GoModuleCommand#goModule()` operation returns an successful message."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 9: `GoModuleCommand#execute()` prints the successful message to the user via `Ui#showToUser()` method."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagam shows how the add chapter command feature works:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Sequence Diagram of add chapter command](UML/AddChapterCommand.png)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.6. Example of the Admin Feature"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.1.7. Conclusion"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.2. Module Features"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[summary + scenario]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.1. Add Chapter Feature"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`AddChapterCommand` facilitates the proposed add chapter feature. It extends `AddCommand` with an `AddCommand#prepareResult()` method. This method formates message about the result of the action to user in `Ui`. "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Shown as the class diagram below, because of the inheritance of `AddCommand`, `Command` and `AddChapterCommand`, `Kaji` is able to execute the operation `AddChapterCommand#excute()`. "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Class Diagram of add chapter command](UML/AddChapterCommandClass.png)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is an example usage scenario at Module level and how the add chapter feature behaves at each step:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 1: The user is currently in module level."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 2: The user want to add a new chapter chapter1 and enters `add chapter1` command."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 3: The `Kaji` object passes the user\u0027s command to the `Parser` object. Then `Parser` creates a new `AddChapterCommand` object and return the `AddChapterCommand` object to `Kaji`."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 4: The `Kaji` object uses the public `AddChapterCommand#excute()` to add new chapters into Kaji application."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 5: The `AddChapterCommand` object creates a new `Chapter` object with the `Chapter#chapterName` of chapter1. "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 6: The new `chapter1 : Chapter` object will be passed into the `AddChapterCommand#addChapter()` with `Access` and `Storage`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 7: The `AddChapterCommand#addChapter()` gets the current `Module` object via `Access#getModule()` method, then it adds the new `chapter1: Chapter` object into the `Module#ChapterList`. "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 8: The new `Module` object with the `chapter1: Chapter` object is updated to `Access` via the method `Access#setModule(Module)`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 9: The new `Chapter` is updated in the folder by executing the `Storage#createChapter()`. A \u0027chapter1\u0027 folder is created under the \u0027data/module\u0027 folder."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 10: A result message is returned from `AddChapterCommand#addChapter()` method to the `AddChapterCommand#execute()` method which uses `Ui#showToUser()` to print the success message."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagam shows how the add chapter command feature works:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Sequence Diagram of add chapter command](UML/AddChapterCommand.png)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.2. List Chapters Feature"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list chapters feature allows the user to list all chapters in module level "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list chapters mechanism is facilitated by `ListChaptersCommand`. It extends from the abstract class `ListCommand`. "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListChaptersCommand#execute()` — oversees entire execution for listing chapters."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListChaptersCommand#listChapters()` — gets and lists all chapters in module level."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "For instance, the user wants to list all chapters available in `CS2113T` (module name), a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 1: The user is currently in `CS2113T` level. "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 2: The user enters `list` command to list all chapters in `CS2113T` level. "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The following sequence diagram shows how the list chapters feature works:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![Sequence Diagram of List Chapters](UML/listchap_seq_diagram.png)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.3. Edit Chapter Name Feature"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit chapter name feature allows the user to edit the name of any existing chapter."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can edit the name of an existing chapter with the `edit` command, which follows the following format: `edit CHAPTER_INDEX CHAPTER_NAME`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit module name feature is facilitated by `ChapterList` and `Chapter`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `ChapterList#getChapter()` - Returns a chapter based on the specified index from the list of chapters."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Chapter#setChapterName()` — Sets the name of the chapter."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to edit the chapter `chap 1` from the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 1: The user is currently in `CS2113T` at the module level."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 2: The user enters `edit 1 Chapter 1` command to edit the first chapter in the list of chapters — which in this case is `chap 1`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 3: The user input is parsed by `Parser`, and `Parser` creates a `EditChapterCommand` object."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 4: `EditChapterCommand` is executed and calls the method `EditChapterCommand#editChapter()`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 5: `EditChapterCommand#editModule()` gets the chapter based on the index provided by the method `ChapterList#getChapter()`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 6: The chapter name is edited to `Chapter 1` by the method `Chapter#setChapterName()`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 7: The result message from `EditChapterCommand#editChapter()` is returned to `EditChapterCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the edit chapter name feature works:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/EditChapterSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Edit Chapter Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of edit chapter name feature  "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Parser` and `Module` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.4. Remove Chapter Feature"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove chapter feature allows the user to remove a chapter by specifying the index of the chapter in the list. "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove chapter mechanism is facilitated by `RemoveChapterCommand`. It extends from the abstract class `RemoveCommand`. "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveChapterCommand#execute()` — oversees entire execution for removing a chapter."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveChapterCommand#removeModule()` — removes chapter from list of chapters in a module including the flashcards under it."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#prepareResult()` — prepares the resulting message of the execution."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to start a remove the chapter `Chapter 1` from the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 1: The user is currently in `CS2113T` at the module level. "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 2: The user enters `remove 1` command to delete the first chapter in the list of chapters — which in this case is `Chapter 1`. The `remove` command creates `RemoveChapterCommand` which will then be executed. "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 3: `RemoveChapterCommand#execute` gets the `chapter` based on the index provided and passes it to `Storage#deleteDirectory` to delete the chapter file as well as the flashcards under it. "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The following sequence diagram shows how the remove chapter feature works:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Sequence Diagram of Remove Chapter](DG_Images/removechap_seq_diagram.png)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.5. Access Chapter Level Feature"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.6. Return to Admin Level Feature"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.7. Example of the Module Feature"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.2.8. Conclusion"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.3. Chapter Features"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "[summary + scenario]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.1. Add Flashcard Feature"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The add flashcard feature allows the user to add a flashcard to a chapter."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can add a flashcard with the `add` command, which follows the following format: `add q:QUESTION | a: ANSWER`."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The add flashcard feature is facilitated by `CardList`."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operation:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `CardList#addCard()` - Adds a flashcard to the list of flashcards."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to add a flashcard `[Q] 1+1 | [A] 2` to the chapter `Chapter 1` for module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 1: The user is currently in `Chapter 1` at the chapter level of the module `CS2113T`."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 2: The user enters `add q:1+1 | a:2` command to add a flashcard to the list of flashcards."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 3: The user input is parsed by `Parser`, and `Parser` creates a `AddCardCommand` object."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 4: A `Card` object is created within `AddCardCommand`."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 5: `AddCardCommand` is executed and calls the method `AddCardCommand#addCard()`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 6: `AddCardCommand#addCard()` adds a flashcard to the list of flashcards by calling the method `CardList#addCard()`."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 7: The result message from `AddCardCommand#addCard()` is returned to `AddCardCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the add flashcard feature works:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/AddCardSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Add Card Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of add flashcard feature  "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Parser` and `Chapter` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.2. List Flashcards Feature"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list flashcards feature allows the user to list all flashcards in chapter level "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The list flashcards mechanism is facilitated by `ListCardsCommand`. It extends from the abstract class `ListCommand`. "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListCardsCommand#execute()` — oversees entire execution for listing flashcards."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `ListCardsCommand#listCards()` — gets and lists all flashcards in chapter level."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "For instance, the user wants to list all flashcards available in `Chapter 1` (chapter name), a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 1: The user is currently in `Chapter 1` level. "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* Step 2: The user enters `list` command to list all flashcards in `Chapter 1` level. "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The following sequence diagram shows how the list flashcards feature works:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![Sequence Diagram of List Cards](UML/listcard_seq_diagram.png)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.3. Edit Flashcard Content Feature"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit flashcard content feature allows the user to edit the content of any existing flashcard."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can edit the content of an existing flashcard with the `edit` command, which follows the following format: `edit FLASHCARD_INDEX q:QUESTION | a: ANSWER`."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The edit flashcard content feature is facilitated by `CardList` and `Card`."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `CardList#getCard()` - Returns a flashcard based on the specified index from the list of flashcards."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Card#setQuestion()` — Sets the question of a flashcard."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Card#setAnswer()` — Sets the answer of a flashcard."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to edit the flashcard `[Q] 2*1 | [A] 2` from the chapter `Chapter 1` for module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 1: The user is currently in `Chapter 1` at the chapter level of the module `CS2113T`."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 2: The user enters `edit 1 q:1+1 | a:` command to edit the first flashcard in the list of flashcards — which in this case is `[Q] 2*1 | [A] 2`."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 3: The user input is parsed by `Parser`, and `Parser` creates a `EditCardCommand` object."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 4: `EditCardCommand` is executed and calls the method `EditCardCommand#editCard()`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 5: `EditCardCommand#editCard()` gets the chapter based on the index provided by the method `CardList#getCard()`."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 6: The question is edited to `1+1` by the method `Card#setQuestion()`."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 7: As there is no content to edit the answer, the method `Card#setAnswer()` is not called."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 7: The result message from `EditCardCommand#editCard()` is returned to `EditCardCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the edit flashcard content feature works:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/EditCardSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Edit Card Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of edit flashcard content feature  "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Parser` and `Chapter` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.4. Remove Flashcard Feature"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove flashcard feature allows the user to remove a flashcard by specifying the index of the flashcard in the list. "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The remove flashcard mechanism is facilitated by `RemoveFlashcardCommand`. It extends from the abstract class `RemoveCommand`. "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveFlashcardCommand#execute()` — oversees entire execution for removing a flashcard."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveFLashcardCommand#removeModule()` — removes flashcard from list of flashcards in a chapter."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `RemoveCommand#prepareResult()` — prepares the resulting message of the execution."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to start a remove the flashcard `[Q] 1+1 | [A] 2` from the chapter `Chapter 1`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 1: The user is currently in `Chapter 1` at the chapter level of the module `CS2113T`. "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 2: The user enters `remove 1` command to delete the first flashcard in the list of flashcards — which in this case is `[Q] 1+1 | [A] 2`. The `remove` command creates `RemoveCardCommand` which will then be executed. "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 3: `RemoveCardCommand#execute` gets the `flashcard` based on the index provided and removes it from the `CardList` "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 4: The updated `CardList` is passed to `Storage#saveCards()` to update the contents of the chapter with the removed card. "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The following sequence diagram shows how the remove flashcard feature works:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Sequence Diagram of Remove Flashcard](DG_Images/removecard_seq_diagram.png)"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.5. Return to Module Level Feature"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The return to module level feature allows the user to return to the module level from the chapter level."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The return to module level mechanism is facilitated by `BackModuleCommand`. It extends from the abstract class `BackCommand`. "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operation:"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `BackModuleCommand#execute` — lowers access level of the user."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to return to the module level from the chapter he is currently at in the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 1: The user is currently in `Chapter 1` at the chapter level in the module `CS2113T`. "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 2: The user enters `back` command to return to `CS2113T`. The `back` command creates `BackModuleCommand` which will then be executed."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 3: `BackModuleCommand#execute` passes an empty string to `Access#setChapterLevel()` to check the chapter level and calls `Access#setIsModuleLevel` to set the user back to module level."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The following sequence diagram shows how the return to module level feature works:"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Sequence Diagram of Return to Module](DG_Images/returnmod_seq_diagram.png)"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.6. Check Overall Performance for a Chapter Feature"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jiayi)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "`ShowRateCommand` facilitates the proposed check overall performance feature. It extends an abstract `Command` class with the abstract `Command#execute()` and `Command#isExit()`."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `ShowRateCommand#execute()` -- Inherites from the abstract `Command`. It is overrided to calls `ShowRateCommand#computePercentage()` and print message that specific to performance checking feature."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `ShowRateCommand#computePercentage()` -- Computes the overall performance by master levels and updates the `ShowRateCommand#easyPercentage`, `ShowRateCommand#mediumPercentage`, `ShowRateCommand#hardPercentage` and `ShowRateCommand#cannotAnswerPercentage`, then it returns number of cards in the `Chapter`."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "* `ShowRateCommand#isExit()` -- Inherites from the abstract `Command`. It is overrided to return `false`."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Shown as the class diagram below, with the inheritance of `Command`, `Kaji` is able to execute the operation `ShowRateCommand#execute()` directly. "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Class Diagram of show overall performance command](UML/ShowRateCommandClass.png)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Given below is an example usage scenario at Chapter level and how the show overall performance feature behaves at each step:"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 1: The user is currently in chapter level."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 2: The user want to check overall performance of the current chapter level and enters `showrate` command."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 3: The `Kaji` object passes the user\u0027s command to the `Parser` object. Then `Parser` creates a new `ShowRateCommand` object and return the `ShowRateCommand` object to `Kaji`."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 4: The `Kaji` object uses the public `ShowRateCommand#excute()` to compute overall performance and print relevant message to user."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 5: The `ShowRateCommand` object gets the reference of current chapter level via the `Access#getChapter()` and stores the reference as a `Chapter` object. "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 6: The `Chapter` object will be passed into the operation `ShowRateCommand#computePercentage()`."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 7: The `ShowRateCommand#computePercentage()` gets all the `Card` objects in the current `Chapter` object via the methods `Chapter#getCards()` and `CardList#getAllCards()` respectively. "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 8: If there is no `Card` object in the current `Chapter`, the `ShowRateCommand#computePercentage()` operation returns int `0` after checking the `ArrayList\u003cCard\u003e` size. If there are `Card` objects, a \u0027for\u0027 loop is used to check the `Card#rating` of every `Card` objects and compute the overall performance. "
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 9: `ShowRateCommand#computePercentage()` updates the variables `ShowRateCommand#easyPercentage`, `ShowRateCommand#mediumPercentage`, `ShowRateCommand#hardPercentage` and `ShowRateCommand#cannotAnswerPercentage` at the end and returns the number of cards in the chapter"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "Step 10: `GoModuleCommand#execute()` prints the performance message to the user via `Ui#showToUser` if the `ShowRateCommand#computePercentage()` is greater than int `0`."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "The following diagam shows how the show overall performance feature works:"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "![Sequence Diagram of show overall performance command](UML/ShowRateCommand.png)"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.7. Example of the Chapter Feature"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.3.8. Conclusion"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 4.4. Revise Feature"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jia Ern)"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The revise feature allows the user to start a revision on a chapter and can only be done when the user is in the module level. "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "#### 4.4.1. Implementation"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The revise mechanism is facilitated by `ReviseCommand`. It extends from the abstract class `Command`. "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#execute()` — oversees the entire revise process and calls the respective methods when necessary."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#getChapter()` — gets `chapter` based on the index the user provided."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#getCards()` — gets a list of `card` in `chapter`."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#promptNotDue()` — prompts user if he still wants to revise a `chapter` that is not due."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#reviseCard()` — makes use of `ui` to show the contents of each card to the user and gets rating input for the particular card."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#rateCard()` — gets user input on difficulty of a flashcard."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* `ReviseCommand#repeatRevision()` — repeats revision for cards which user could not answer. "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "For instance, the user wants to start a revision for `Chapter 1` in the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 1: The user is currently in `CS2113T` at the module level."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 2: The user enters `revise 1` command to revise the first chapter in the module — which in this case is `Chapter 1`. The `revise` command creates `ReviseCommand` which will then be executed."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 3: `ReviseCommand#execute` gets `Chapter1` based on the index provided as well as a list of `card` under the particular chapter by calling `ReviseCommand#getChapter` and `ReviseCommand#getCards` respectively."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 4: If the `chapter` is not due for revision yet, `ReviseCommand#promptNotDue()` will prompt the user if he still wants to revise a `chapter` that is not due. If the user enters `Y`, the Revise feature will continue execution, else it will return to the main class Kaji, and wait for the next command."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 5: `ReviseCommand#execute` loops through each flashcard and shows the user its contents by calling `ReviseCommand#reviseCard()`  and inside it, `ReviseCommand#rateCard()` is called and makes use of `Ui#getUserInput()` to get user to rate the difficulty of each flashcard. "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 6: A success message of completeing the revision will be shown to the user through `Ui#showToUser()`."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 7: `Scheduler#computeDeckDeadline()` then calculates the new deadline for the `chapter` and passes the result to `Chapter#setueBy()` to set the new deadline for the `chapter`."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 6: `ReviseCommand#repeatRevision` then repeats the revision session on cards which the user could not answer."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "Step 7: Lastly, `ReviseCommand#execute()` calls `HistoryCommand#addHistory()` to keep a record of the chapter revised so that the user can review what revision has been completed."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "The following sequence diagram shows how the revise feature works:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "![Sequence Diagram of Revise](DG_Images/revise_seq_diagram.png)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 4.4.2. Scheduling The Chapters Feature"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Darticune"
        },
        "content": "In KAJI, each `Chapter` stores a `CardList` of `Card`s, each with their own `int` attribute `previousInterval`. Each `Chapter` also has a `LocalDate` attribute named `dueBy` that determines when the `Chapter` is due for revision. "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Darticune"
        },
        "content": "At the end of a revision session, the `Scheduler` class implements Spaced Repetition by computing the `deckInterval`, the mean (rounded off to the nearest integer) of the `previousInterval`s of every `Card` within the `Chapter`, and updates the `dueBy` attribute of the `Chapter` to `deckInterval` days after the day of revision."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support this feature, `Scheduler` implements the following operations:"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeEasyInterval()` - returns the product of the `Card`\u0027s `previousInterval` and the Easy Multiplier(4.4) rounded to the nearest integer"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeMediumInterval()` - returns the product of the `Card`\u0027s `previousInterval` and the Medium Multiplier(2.2) rounded to the nearest integer"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeHardInterval()` - returns the product of the `Card`\u0027s `previousInterval` and the Hard Multiplier(1.1) rounded to the nearest integer"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeChapterInterval()` - returns the mean of the `previousInterval` of each `Card` within the `Chapter` rounded off to the nearest integer"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Scheduler#computeChapterDeadline()` - returns a `LocalDate` object containing the new `dueBy`, which is interval(returned from `Scheduler#computeChapterInterval()`) days away from the current day"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Darticune"
        },
        "content": "`Scheduler#computeEasyInterval()`, `Scheduler#computeMediumInterval()` and `Scheduler#computeHardInterval()` are exposed in the `ReviseCommand` class as `ReviseCommand#rateCard()` while `Scheduler#computeDeckDeadline()` is exposed as `ReviseCommand#execute()`."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Darticune"
        },
        "content": "***Example***"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Given below is an example usage scenario on how the Scheduler mechanism behaves at each step when: "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Darticune"
        },
        "content": "`revise 1` is called in a `Module` that contains only one `Chapter` with three `Card`s in its `CardList` attribute and confirmation is given to proceed with revision."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\\\u003cOBJECT DIAGRAMS\\\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 1:"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* The user enters `revise 1` within the `Module` and `ReviseCommand` is instantiated. "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Upon confirmation to revise and a check that `CardList` of the designated `Chapter` is not empty is complete, `ReviseCommand` proceeds to create a `ArrayList\u003cCard\u003e allCards` comprising of all `Card`s within in the `CardList`."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 2:"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* For each `Card` in `allCards`, `ReviseCommand#reviseCard()` is called upon completion of either `ReviseCommand#execute()` or `ReviseCommand#repeateRevision()`."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This operation then calls `Scheduler#computeEasyInterval()`, `Scheduler#computeMediumInterval()` or `Scheduler#computeHardInterval()` depending on the user input to compute and update the new value of `previousInteral` for each card."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 3:"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Upon completion of all revision, `ReviseCommand#execute()` will call `Scheduler#computeDeckDeadline()`, which in turn calls `Scheduler#computeDeckInterval()`. `Scheduler#computeDeckInterval()` computes `deckInterval`, the mean (rounded off to the nearest integer) of the `previousInterval`s of each `Card` in `allCards,` and returns it to `Scheduler#computeDeckDeadline()`."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Step 4:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Using `deckInterval`, `Scheduler#computeDeckDeadline()` computes the new value of `dueBy` for the Chapter, which is then returned to `ReviseCommand#execute()`, where it will then update the value of `dueBy` for the `Chapter` that was just revised."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5. Viewing and Customising the Schedule Feature"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Darticune"
        },
        "content": "KAJI schedules the user\u0027s database automatically for them based on their [revision sessions](#), chapter by chapter, using Spaced Repetition. Users should be able to view their schedule for the current day to know which tasks they need to complete on the day itself and to view their schedule for the upcoming week so that they can plan ahead. However, to effectively use the scheduling feature, users should also be able to customise their scheduling system to include or exclude chapters from their schedule with ease."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To utilise this feature, the following commands and their corresponding features are introduced:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* [`due`](#451-View-Due-Chapters-Feature) - Viewing their schedule for the current day (View Due)"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* [`preview`](#452-Preview-Upcoming-Dues-Feature) - Viewing their schedule for the upcoming week (Preview Upcoming Due)"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* [`exclude`](#453-Exclusion-Feature) - Customising which of their Chapters will be in the Scheduler (Exclusion)"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.1. View Due Chapters Feature"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Darticune"
        },
        "content": "***Implementation***"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Each Chapter has a [`deadline assigned to it`](#) from the point of creation, which forms the core of the Scheduling process. The View Due Chapters Feature builds on that by allowing users to view every chapter in the database that is due on the current day with a single command."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support this feature, the following command was added to KAJI:"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `due` - A command that displays every `Chapter` in the database that is due on a given day."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Darticune"
        },
        "content": "A corresponding Class `ListDueCommand` was also created to carry out the functions related to the command."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Darticune"
        },
        "content": "This feature takes the [`Exclusions`](#) of the database into account and will not display `Chapter`s from the Exclusion List when the user calls them even if their deadlines are due."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Darticune"
        },
        "content": "As this Feature can be activated at any point, the following class is created to identify `Chapter`s easily."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `DueChapter` - object contain two variables, `String parentModule` to identify the `Chapter`\u0027s parent `Module`, and `Chapter chapter` to hold a reference to the actual `Chapter`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support the View Due feature, `ListDueCommand` implements the following operations:"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `ListDueCommand#loadAllDueChapters()` - Calls `Storage#loadAllDueChapters()` to load every `Chapter` in the database as a `DueChapter` and stores them into a `ArrayList\u003cDueChapter\u003e allDueChapters` "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `ListDueCommand#setDueDueChapters()` - Checks each `DueChapter` in `ArrayList\u003cDueChapter\u003e allDueChapters` to verify if the underlying `Chapter` is due by the current day by calling `Scheduler#isDeadlineDue()` on the `Chapter`\u0027s deadline\u0027, and adds the due `DueChapters` into `ArrayList\u003cDueChapter\u003e dueDueChapters`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `ListDueCommand#execute()` - Calls `ListDueCommand#loadAllDueChapters()`, `ListDueCommand#setDueDueChapters()` and prints the `DueChapter`s that are due"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Darticune"
        },
        "content": "On top of that, `Storage` implements the following operations:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#checkChapterDeadline()` - Reads the deadline for each `Chapter`, prompts if they are corrupted, and adds a `DueChapter` formed with the `Chapter` into `ArrayList\u003cDueChapter\u003e allDueChapters`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#checkAllChaptersForDue()` - Obtains the name of every `Chapter` from the list of Modules passed to it and calls `Storage#checkChapterDeadline()` for each of them"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#loadAllDueChapters()` - Obtains the names of every `Module` in the user database and calls `Storage#checkAllChaptersForDue()`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The following sequence Diagrams illustrates how the View Due Chapters Process is executed:"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.2. Preview Upcoming Dues Feature"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Darticune"
        },
        "content": "***Implementation***"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Similar to the View Due Chapters Feature, the Preview Upcoming Dues Feature builds on the Scheduling process by allowing users to view every chapter in the database that is due in the upcoming week with a single command."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support this feature, the following command was added to KAJI:"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `preview` - A command that displays every `Chapter` in the database that is due in the upcoming week."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Darticune"
        },
        "content": "A corresponding Class `PreviewCommand` was also created to carry out the functions related to the command."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Darticune"
        },
        "content": "This feature also takes the [`Exclusions`](#) of the database into account and will not display `Chapters` from the Exclusion List when the user calls them even if they are due in the upcoming week."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Darticune"
        },
        "content": "As this Feature can be activated at any point, the following class is also (similar to View Due Chapters) used to identify `Chapter`s easily."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `DueChapter` - object contain two variables, `String parentModule` to identify the `Chapter`\u0027s parent `Module`, and `Chapter chapter` to hold a reference to the actual `Chapter`"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support the Preview Upcoming Dues feature, `PreviewCommand` implements the following operations:"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `PreviewCommand#loadAllDueChapters()` - Calls `Storage#loadAllDueChapters()` to load every `Chapter` in the database as a `DueChapter` and stores them into a `ArrayList\u003cDueChapter\u003e allDueChapters` "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `PreviewCommand#setDueDueChapters()` - Checks each `DueChapter` in `ArrayList\u003cDueChapter\u003e allChapters` to verify if the underlying `Chapter` is due in an increment number of days from the current day by calling `Scheduler#isDeadlineDueIn()` on the `Chapter`\u0027s deadline, and adds the due `DueChapters` into `ArrayList\u003cDueChapter\u003e dueDueChapters`"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `PreviewCommand#execute()` - Calls `PreviewCommand#loadAllDueChapters()`, before calling `PreviewCommand#setDueDueChapters()` for the current day, then one to six days after the current day, and prints the `DueChapter`s for each day individually"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Darticune"
        },
        "content": "On top of that, the following operations from `Storage` are used:"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#checkChapterDeadline()` - Reads the deadline for each `Chapter`, prompts if they are corrupted, and adds a `DueChapter` formed with the `Chapter` into `ArrayList\u003cDueChapter\u003e allDueChapters`"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#checkAllChaptersForDue()` - Obtains the name of every `Chapter` from the list of Modules passed to it and calls `Storage#checkChapterDeadline()` for each of them"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#loadAllDueChapters()` - Obtains the names of every `Module` in the user database and calls `Storage#checkAllChaptersForDue()`"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The following sequence Diagrams illustrates how the Preview Upcoming Dues Process is executed:"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.3. Exclusion Feature"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Lucas)"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Darticune"
        },
        "content": "***Implementation***"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Darticune"
        },
        "content": "KAJI allows users to customise which Chapters are to be excluded from their scheduling by maintaining an Exclusion List: a list of Chapters that KAJI will ignore as it parses for Chapters that are due in the `due` and `preview` commands. This is to allow users to exclude and include `Chapter`s from and to their schedules without having to remove and add the `Chapter`s from their database, which can be tedious."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To support this feature, the following command was added to KAJI:"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `exclude` - A command that excludes more or less `Chapters` from the Exclusion List."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Darticune"
        },
        "content": "A corresponding Class `ExecuteCommand` was also created to carry out the functions related to the command."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `exclude` command can be called with either `exclude more` or `exclude less`, which adds to or removes from the Exclusion List respectively. Furthermore, both modes can be used to edit the Exclusion List a single `Chapter` at a time or every `Chapter` belonging to a `Module` at a time as a secondary option."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To determine if the Exclusion List is going to be modified by a single `Chapter` or by an entire `Module`, `ExcludeCommand` implements an operation each for `exclude more` and `exclude less`."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* For `exclude more`:"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `ExcludeCommand#addingToExclusion()` - calls `ExcludeCommand#addChapterToExclusion()` if user inputs \"chapter\", `ExcludeCommand#addModuleToExclusion()` if user inputs \"module\""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* For `exclude less`:"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `ExcludeCommand#addingToExclusion()` - calls `ExcludeCommand#removeChapterFromExclusion()` if user inputs \"chapter\", `ExcludeCommand#removeModuleFromExclusion()` if user inputs \"module\""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Darticune"
        },
        "content": "To load and store the Exclusion List, a Exclusion File is created and maintained using these two methods from the `Storage` Class:"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#loadExclusionFile()` - Reads the contents of the Exclusion File, parses it into the Exclusion List, stored as a `ArrayList\u003cString\u003e`, and returns it."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* `Storage#updateExclusionFile()` - Writes the `ArrayList\u003cString\u003e` Exclusion List into the Exclusion File."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `ArrayList\u003cString\u003e` Exclusion List is modified using four pairs of commands in both `ExcludeCommand` and `Storage`:"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Excluding a Chapter from Scheduling"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `ExcludeCommand#addChapterToExclusion()` - gets the name of the `Chapter` to be excluded and the name of the `Module` it belongs to, and calls `Storage#appendChapterToExclusionFile()`"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `Storage#appendChapterToExclusionFile()` - appends the target `Chapter` to the Exclusion File if the target `Chapter` exists and is not already in the Exclusion File"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Excluding a Module from Scheduling"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `ExcludeCommand#addModuleToExclusion()` - gets the name of the `Module` to be excluded, and calls `Storage#appendModuleToExclusionFile()`"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `Storage#appendModuleToExclusionFile()` - appends every `Chapter` of the target `Module` not already in the Exclusion File to it if the target `Module` exists"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Including a Chapter from Scheduling"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `ExcludeCommand#removeChapterFromExclusion()` - gets the name of the `Chapter` to be included and the name of the `Module` it belongs to, and calls `Storage#removeChapterFromExclusionFile()`"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `Storage#removeChapterFromExclusionFile()` - removes the target `Chapter` from the Exclusion File if the target `Chapter` is in the Exclusion File"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* Including a Module from Scheduling"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `ExcludeCommand#removeModuleFromExclusion()`- gets the name of the `Module` to be included, and calls `Storage#removeModuleFromExclusionFile()`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * `Storage#removeModuleFromExclusionFile()` - removes every `Chapter` of the target `Module` that is in the Exclusion File"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The following sequence Diagrams illustrates how the Exclusion Process is executed:"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Darticune"
        },
        "content": "![](images/ExcludeCommand.png)"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Darticune"
        },
        "content": "![](images/addModuleToExclusion.png)"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Darticune"
        },
        "content": "![](images/addChapterToExclusion.png)"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Darticune"
        },
        "content": "![](images/removeModuleFromExclusion.png)"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Darticune"
        },
        "content": "![](images/removeChapterFromExclusion.png)"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.4. Reschedule Chapter Feature"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Jane)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The reschedule chapter feature allows the user to reschedule the due date of any existing chapter."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The user can reschedule the due date of an existing chapter with the `reschedule` command, which follows the following format: `reschedule CHAPTER_INDEX DATE(yyyy-MM-dd)`."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The reschedule chapter feature is facilitated by `ChapterList` and `Chapter`."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `ChapterList#getChapter()` - Returns a chapter based on the specified index from the list of chapters."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* `Chapter#setDueBy()` — Sets the due date of the chapter."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": " "
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "For instance, the user wants to reschedule the due date `2020-12-12` of the chapter `Chapter 1`  from the module `CS2113T`, a detailed description of what happens is shown below:"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 1: The user is currently in `CS2113T` at the module level."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 2: The user enters `reschedule 1 2020-12-20` command to reschedule the first chapter in the list of chapters — which in this case is `Chapter 1`."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 3: The user input is parsed by `Parser`, and `Parser` creates a `RescheduleCommand` object."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 4: `RescheduleCommand` is executed and calls the method `RescheduleCommand#reschedule()`."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 5: `RescheduleCommand#reschedule()` gets the chapter based on the index provided by the method `ChapterList#getChapter()`."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 6: The due date of the chapter is rescheduled to `2020-12-20` by the method `Chapter#setDueBy()`."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "Step 7: The result message from `RescheduleCommand#reschedule()` is returned to `RescheduleCommand#execute()` and shown to the user by calling `Ui#showToUser()`."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "The following sequence diagram shows how the reschedule chapter feature works:"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cimg src\u003d\"DG_Images/RescheduleChapterSequenceDiagram.png\" width\u003d\"800\" alt\u003d\"Reschedule Chapter Sequence Diagram\"/\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "  \u003cbr/\u003eFigure \u003c\u003e. Sequence diagram of reschedule chapter feature  "
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u003e:information_source: \u003cb\u003eNote:\u003c/b\u003e The lifeline for `Parser` and `Module` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 4.5.5. View Revision History Feature"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(Zeyu)"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The view revision history feature allows the user to list the revision completed in the session/in a day. In case the user enters `history` follow by a `date(example: 2020-10-10)`, `Kaji` will list the revision completed in `October 10, 2020`. Otherwise, `Kaji` will list the revision completed in the day the user uses `HelpCommand`. This feature can be accessed at any level."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The history mechanism is facilitated by `HistoryCommand`. It extends from the abstract class `Command`. "
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "In addition, it implements the following operations:"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `HistoryCommand#execute()` — calls the list method to list the history. "
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "* `HistoryCommand#listHistory()` — lists the revision completed in the session/in a day."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Given below is an example usage scenario and how the history mechanism behaves at each step:"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Step 1: The user launches the application and is currently in the admin level. "
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Step 2: The user executes `history` command to load and list the revision completed in the session/in a day."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "The following sequence diagram shows how the list chapters feature works:"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "![Sequence Diagram of List History](UML/listhistory_seq_diagram.png)"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "## 5. Appendix: Requirements"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 5.1. Product Scope"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 5.1.1. Target User Profile"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Needs to have an effective study schedule"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Prefers typing to mouse interactions"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Is comfortable with the usage of CLI applications"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 5.1.2. Value Proposition"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "* Implements Spaced Repetition for the user "
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.2. User Stories"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "|v1.0|user|revise the flashcards by chapter|do my revision|"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "|v1.0|user|remove modules/chapters/flashcard|remove modules/chapters/flashcards that I no longer need from the scheduler|"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.3. Use Cases"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.4. Non-Functional Requirements"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 installed."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "### 5.5. Glossary"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "* **CLI**: Command Line Interface"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 6. Appendix: Instructions for Manual Testing"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 85,
      "gua-guargia": 152,
      "-": 25,
      "neojiaern": 193,
      "Jane-Ng": 326,
      "Darticune": 157
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "# Kaji - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "By: `Team F11-3` Since: `August 2020`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. [Overview](#1-overview)\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1.1. [About Kaji](#11-about-kaji)\u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1.2. [About this User Guide](#12-about-this-user-guide)\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1.3. [Understanding the Command Line Interface (CLI)](#13-understanding-the-command-line-interface-cli)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1.4. [Understanding Kaji](#14-understanding-kaji)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.4.1. [Content Management](#141-content-management)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;1.4.2. [Schedule Management](#142-schedule-management)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "2. [Quick Start](#2-quick-start)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3. [Features](#3-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.1. [Admin Level](#31-admin-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.1. [Adding a module: `add`](#311-adding-a-module-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.2. [Listing modules available: `list`](#312-listing-modules-available-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.3. [Editing a module name: `edit`](#313-editing-a-module-name-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.4. [Removing a module: `remove`](#314-removing-a-module-remove)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.5. [Accessing the module level: `go`](#315-accessing-the-module-level-go)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.2. [Module Level](#32-module-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.1. [Adding a chapter: `add`](#321-adding-a-chapter-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.2. [Listing chapters available: `list`](#322-listing-chapters-available-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.3. [Editing a chapter name: `edit`](#323-editing-a-chapter-name-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.4. [Removing a chapter: `remove`](#324-removing-a-chapter-remove)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.5. [Accessing the chapter level: `go`](#325-accessing-the-chapter-level-go)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.6. [Returning to admin level: `back`](#326-returning-to-admin-level-back)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.7. [Starting a revision session: `revise`](#327-starting-a-revision-session-revise)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.8. [Rating a chapter: `rate`](#328-rating-a-chapter-rate)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.9. [Rescheduling a chapter: `reschedule`](#329-rescheduling-a-chapter-reschedule)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.3. [Chapter Level](#33-chapter-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.1. [Adding a flashcard: `add`](#331-adding-a-flashcard-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2. [Listing flashcards available: `list`](#332-listing-flashcards-available-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.3. [Editing a flashcard content: `edit`](#333-editing-a-flashcard-content-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.4. [Removing a flashcard: `remove`](#334-removing-a-flashcard-remove)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.5. [Returning to module level: `back`](#335-returning-to-module-level-back)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.6. [Checking overall performance for a chapter: `showrate`](#336-checking-overall-performance-for-a-chapter-showrate)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "3.4. [General](#34-general)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1. [Showing a list of commands available: `help`](#341-showing-a-list-of-commands-available-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2. [Listing the chapters due for today: `due`](#342-listing-the-chapters-due-for-today-due)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.3. [Listing the chapters due in the upcoming week: `preview`](#343-listing-the-chapters-due-in-the-upcoming-week-preview)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.4. [Viewing the revision history: `history`](#344-viewing-the-revision-history-history)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.5. [Excluding or including modules and chapters: `exclude`](#345-excluding-or-including-modules-and-chapters-exclude)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.6. [Exiting the program: `exit`](#346-exiting-the-program-exit)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4. [Command Summary](#4-command-summary)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.1. [Admin Level](#41-admin-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.2. [Module Level](#42-module-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.3. [Chapter Level](#43-chapter-level)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "4.4. [General](#44-general)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 1. Overview"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "In the past learning experience, have you encountered these problems? A large number of lecture notes and materials have made your computer desktop messy, and there is no way to find the materials you want. When the exam is approaching, you don’t know which subject to review first, or suddenly find that you have forgotten everything you learned before. No one wants to forget what they have dedicated time to learn."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "Don\u0027t worry! \u003cstrong\u003eKaji\u003c/strong\u003e will help you solve all these problems!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 1.1. About Kaji"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "KAJI is a schedule manager that implements Spaced Repetition, optimised for use via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 1.2. About this User Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "This User GUide is divided into four sections, Overview, Quik Start, Features, and Command Summary."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003cb\u003eOverview section\u003c/b\u003e will briefly introduce Kaji and its User Guide, also the Command Line Interface to you."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003cb\u003eQuik Start section\u003c/b\u003e will guide you to make some preparations in advance and teach you how to run Kaji."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003cb\u003eFeatures section\u003c/b\u003e will introduce all features of Kaji according to different levels, you can learn features in details in this section."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "\u003cb\u003eCommand summary section\u003c/b\u003e will sum up different command type in a table."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 1.3. Understanding the Command Line Interface (CLI)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "A \u003cb\u003ecommand line interface (CLI)\u003c/b\u003e is a text-based user interface (UI) used to view and manage computer files. Command line interfaces are also called command-line user interfaces, console user interfaces and character user interfaces."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 1.4. Understanding Kaji"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 1.4.1. Content Management"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 1.4.2. Schedule Management"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "To get started on this application, please perform the following steps:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. Download the latest version of `Kaji` from [here](https://github.com/AY2021S1-CS2113T-F11-3/tp/releases)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. Copy the file to the folder you want to use as the \u003cI\u003ehome folder\u003c/I\u003e for your Kaji."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. Double-click the file to start the app or open a command window in the folder you saved Kaji and run the command `java -jar kaji.jar`. You should see the welcome message `Welcome to Kaji` as well as a list of commands available."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. Type the command in the command window and press Enter to execute it. "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "   e.g. typing `help` and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "   * `help` : List commands available"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "   * `exit` : Exits the app."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "1. Refer to [Features](#4-features) below for details of each command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.1. Admin Level"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.1. Adding a module: `add`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jiayi)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.2. Listing modules available: `list` "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.3. Editing a module name: `edit` "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.4. Removing a module: `remove` "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.1.5. Accessing the module level: `go`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jiayi)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.2. Module level"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.1. Adding a chapter: `add`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jiayi)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.2. Listing chapters available: `list`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.3. Editing a chapter name: `edit`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.4. Removing a chapter: `remove`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.5. Accessing the chapter level: `go` "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.6. Returning to admin level: `back`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.7. Starting a revision session: `revise`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.8. Rating a chapter: `rate`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jiayi)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.2.9. Rescheduling a chapter: `reschedule`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.3. Chapter Level"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.1. Adding a flashcard: `add`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.2. Listing flashcards available: `list`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.3. Editing a flashcard content: `edit`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jane)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.4. Removing a flashcard: `remove`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.5. Returning to module level: `back`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jia Ern)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.3.6. Checking overall performance for a chapter: `showrate`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Jiayi)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 3.4. General"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "#### 3.4.1. Showing a list of commands available: `help`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 3.4.4. Viewing the revision history: `history`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Darticune"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### 3.4.6. Exiting the program: `exit`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Darticune"
        },
        "content": "(by Zeyu)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5 Scheduling In KAJI"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Now that you know how to make KAJI manage your Database of revision content for you, **what about scheduling?** For your benefit, the **scheduling** in KAJI is mostly **automated**! "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Darticune"
        },
        "content": "**You don\u0027t have to do a thing** to enjoy the benefits of Spaced Repetition. Everything is scheduled for you, so all you have to do is to use the commands [`due`](#) and [`preview`](#) to view what chapters are due and complete the revision  for them accordingly. "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Despite that, this **does not mean that you cannot customise** the scheduling process. KAJI allows you to [`reschedule`](#451) and [`exclude`](#451) Chapters manually if you wish to do so, but more on that later. First, let us get into the specific introduction of each command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5.1. Listing the chapters due for today: `due`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Darticune"
        },
        "content": "As you now know, **each Chapter will be scheduled** to be due on a date. However, it will be **tedious** for you to go through each chapter **one by one** to find their deadlines. Our **solution** to that, is the `due` command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `due` command simplifies the process for by **showing you the Chapters that you have scheduled on that day** and the Modules they belong to."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Format: `due`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Key Pointers:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* There are **no parameters** for this command."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This command can be **called from any Level**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Example: "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Darticune"
        },
        "content": "At any point, if you want to **see what Chapters are due**, all you have to do is enter the `due` command. Below is an example of an execution of the `due` command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`due`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Darticune"
        },
        "content": "[Show welcome prompt, and label where to put in command]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Darticune"
        },
        "content": "[Labeled expected output]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5.2. Listing the chapters that are due in the upcoming week: `preview`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Beyond simply being able to view the Chapters that are due on the day itself, what if you would like to **view your upcoming revision schedule** so that you can **plan ahead**? For that specific purpose, we have the `preview` command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `preview` command shows you **the Chapters that you have scheduled for each day of the upcoming week** and the Modules that they belong to."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Format: `preview`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Key Pointers:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* There are **no parameters** for this command."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This command can be **called from any Level**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Example: "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Darticune"
        },
        "content": "At any point, if you **want to see a preview of which Chapters are going to be due within the upcoming week**, all you have to do is enter the `preview` command. Below is an example of an execution of the `preview` command."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`preview`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Darticune"
        },
        "content": "[Show welcome prompt, and label where to put in command]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Darticune"
        },
        "content": "[Labeled expected output]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Darticune"
        },
        "content": "### 4.5.3. Customising your list of Excluded Modules: `exclude`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Darticune"
        },
        "content": "(by Yan An)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Darticune"
        },
        "content": "As your Database grows in size over time, you might want to **customise the automated scheduling** that KAJI provides for you. However, it would **take considerable effort** for you to **delete** an entire Module or Chapter, only to find that you have to **add it back** into your Database **Card by Card**."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Our solution to that is an Exclusion List: **a list of Chapters that KAJI will ignore** as it creates your schedule for you. In this way, you will only have to **add** a Chapter to the list to **exclude** it from your schedule and **remove** it from the list to **include** it back into your schedule."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Darticune"
        },
        "content": "The `exclude` command allows you to **add or remove** a single Chapter or an entire Module, to and from your Exclusion list to **customise which Chapters are scheduled** in your Database."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Format: `exclude \\PRIMARY_OPTION`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\\PRIMARY_OPTION has two values which changes the mode of the `exclude` command:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***more***: This option allows you to use `exclude` to **add** to the Exclusion List"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***less***: This option allows you to use `exclude` to **remove** from the Exclusion List"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Key Pointers:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This command can be **called from any Level**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* This command **checks if the Chapter/Module** you are adding into the Exclusion List **exists**, so the List will not be filled with non-existing exclusions."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* After calling the command with either \"more\" or \"less\", there will be **a guided secondary option** on whether you would like to add/remove **a single Chapter** or **an entire Module**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* The name entry of the Chapter/Module to be operated on is **case-sensitive**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Darticune"
        },
        "content": "#### Example"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Darticune"
        },
        "content": "At any point, if you **customise your Exclusion List**, all you have to do is enter the `exclude` command with the choice of \"more\" or \"less\" in the format specified above. Below are examples of the execution of the `exclude` command using both options."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Example of ***`exclude more`***"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`exclude more`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 2***: Key either **\"chapter\"**, to exclude a new Chapter, or **\"module\"**, to exclude an entire Module, **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***`exclude more`*** + ***chapter***"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * ***Step 3***: Key the **Chapter name** that you wish to exclude from your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***`exclude more`*** + ***module***"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * ***Step 3***: Key the **Module name** that you wish to exclude from your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Darticune"
        },
        "content": "Example of ***`exclude less`***"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 1***: Key the **`exclude less`** command **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***Step 2***: Key either **\"chapter\"**, to include a excluded Chapter, or **\"module\"**, to include a excluded Module, **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***`exclude less`*** + ***chapter***"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * ***Step 3***: Key the **Chapter name** that you wish to include back into your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Darticune"
        },
        "content": "* ***`exclude less`*** + ***module***"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * ***Step 3***: Key the **Module name** that you wish to include back into your schedule **into the prompt** as shown below and **press *[Enter]***"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    * ***Upon completion***: This is what you will see:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Darticune"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "## 4. Command Summary"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.1. Admin Level"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.2. Module Level"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.3. Chapter Level"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "### 4.4. General"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "|--------|------------------|"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 17,
      "-": 20,
      "Jane-Ng": 170,
      "Darticune": 120
    }
  },
  {
    "path": "src/main/java/Kaji.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.DuplicateDataException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.EmptyFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_HELP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Kaji {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Access access;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static final Logger logger \u003d KajiLog.getLogger(\"Kaji\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Kaji(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Admin admin \u003d new Admin(storage.loadModule());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access \u003d new Access(admin);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            storage.createAdmin(ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            access \u003d new Access();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.info(\"Starting up Kaji...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(MESSAGE_HELP);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.printLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                ui.showLevel(access);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand, access);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                c.execute(ui, access, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } catch (InvalidInputException | IncorrectAccessLevelException | IOException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    | IndexOutOfBoundsException | InvalidFileFormatException | ExclusionFileException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    | DuplicateDataException | EmptyFileException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                logger.warning(\"An error occured: \" + e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                ui.printLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.info(\"Exiting Kaji...\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        new Kaji(\"data/admin\").run();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 13,
      "gua-guargia": 15,
      "neojiaern": 13,
      "Jane-Ng": 27
    }
  },
  {
    "path": "src/main/java/access/Access.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package access;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class Access {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String adminLevel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String moduleLevel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String chapterLevel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected Chapter chapter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected Module module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected Admin admin;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected boolean isAdminLevel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected boolean isModuleLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected boolean isChapterLevel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Access(Admin admin) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.admin \u003d admin;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Access() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d \"admin\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.adminLevel \u003d \"admin\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.admin \u003d new Admin();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getModuleLevel() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return moduleLevel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getLevel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return level;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Module getModule() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Chapter getChapter() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapter;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Admin getAdmin() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return admin;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setAdmin(Admin admin) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.admin \u003d admin;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setModule(Module module) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setChapter(Chapter chapter) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isAdminLevel() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return isAdminLevel;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isModuleLevel() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return isModuleLevel;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isChapterLevel() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return isChapterLevel;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setIsAdminLevel() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isAdminLevel \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setIsModuleLevel() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isModuleLevel \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isChapterLevel \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setIsChapterLevel() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isAdminLevel \u003d false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isModuleLevel \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.isChapterLevel \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setModuleLevel(String moduleLevel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (isAdminLevel) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setGoModuleLevel(moduleLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setBackAdminLevel(moduleLevel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setGoModuleLevel(String moduleLevel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d moduleLevel;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d level + \"/\" + moduleLevel;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d new Module(moduleLevel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsModuleLevel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setBackAdminLevel(String moduleLevel) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d adminLevel;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleLevel \u003d moduleLevel;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsAdminLevel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setChapterLevel(String chapterLevel) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (isChapterLevel) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            setBackModuleLevel(chapterLevel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setGoChapterLevel(chapterLevel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setGoChapterLevel(String chapterLevel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d chapterLevel;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d level + \"/\" + chapterLevel;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d new Chapter(chapterLevel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsChapterLevel();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setBackModuleLevel(String chapterLevel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.level \u003d adminLevel + \"/\" + moduleLevel;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapterLevel \u003d chapterLevel;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setIsModuleLevel();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 138,
      "neojiaern": 1,
      "Jane-Ng": 18
    }
  },
  {
    "path": "src/main/java/commands/AddCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class AddCardCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a flashcard.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Parameters:\" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private Card card;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public AddCardCommand(String question, String answer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d addCard(access, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private String addCard(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        cards.addCard(card);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int cardCount \u003d cards.getCardCount();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        storage.saveCards(cards, access.getModule().getModuleName(), access.getChapter().getChapterName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return prepareResult(CARD, card.toString(), cardCount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 1,
      "Darticune": 34,
      "Jane-Ng": 3
    }
  },
  {
    "path": "src/main/java/commands/AddChapterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class AddChapterCommand extends AddCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a chapter to the module. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Chapter 1\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String chapter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public AddChapterCommand(String chapter) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Chapter chapter \u003d new Chapter(this.chapter, rateChapter(), storage, access);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d addChapter(access, storage, chapter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String addChapter(Access access, Storage storage, Chapter chapter) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Module newModule \u003d access.getModule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ChapterList chapters \u003d newModule.getChapters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters.addChapter(chapter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int chapterCount \u003d chapters.getChapterCount();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setModule(newModule);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage.createChapter(chapter.getChapterName(), access.getModuleLevel());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return prepareResult(CHAPTER, chapter.toString(), chapterCount);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String rateChapter() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (Ui.chooseToRateNewDeck()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return Ui.getChoiceOfNewDeckRating();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return \"N\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 46,
      "Jane-Ng": 3
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CHAPTER_PARAMETERS \u003d \" CHAPTER_NAME\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MODULE_PARAMETERS \u003d \" MODULE_NAME\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CARD_PARAMETERS \u003d \" q:QUESTION | a:ANSWER\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module / chapter / flashcard.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"           \" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"           \" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2113T\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" Chapter 1\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Got it. I\u0027ve added this %1$s:\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_COUNT \u003d \"Now you have %1$d %2$s(s) in the list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String prepareResult(String type, String content, int count) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_SUCCESS, type));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(content).append(\"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_COUNT, count, type));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 25,
      "neojiaern": 6,
      "Jane-Ng": 12
    }
  },
  {
    "path": "src/main/java/commands/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.Admin;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class AddModuleCommand extends AddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new module. \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2113T\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public AddModuleCommand(String module) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Module module \u003d new Module(this.module);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d addModule(access, storage, module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String addModule(Access access, Storage storage, Module module) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Admin newAdmin \u003d access.getAdmin();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ModuleList modules \u003d newAdmin.getModules();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules.addModule(module);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int moduleCount \u003d modules.getModuleCount();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setAdmin(newAdmin);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage.createModule(module.getModuleName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return prepareResult(MODULE, module.toString(), moduleCount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 37,
      "Jane-Ng": 3
    }
  },
  {
    "path": "src/main/java/commands/BackAdminCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class BackAdminCommand extends BackCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setModuleLevel(\"\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 12,
      "Jane-Ng": 1
    }
  },
  {
    "path": "src/main/java/commands/BackCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public abstract class BackCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Back to up-level directory. \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 18,
      "gua-guargia": 1,
      "Jane-Ng": 1
    }
  },
  {
    "path": "src/main/java/commands/BackModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class BackModuleCommand extends BackCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        access.setChapterLevel(\"\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 12,
      "Jane-Ng": 1
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.DuplicateDataException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.EmptyFileException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            IOException, InvalidFileFormatException, ExclusionFileException, DuplicateDataException, EmptyFileException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 9,
      "gua-guargia": 3,
      "neojiaern": 2,
      "Jane-Ng": 9
    }
  },
  {
    "path": "src/main/java/commands/EditCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditCardCommand extends EditCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the flashcard content.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3 q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int editIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public EditCardCommand(int editIndex, String question, String answer) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d editCard(access, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String editCard(Access access, Storage storage) throws InvalidInputException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert !question.isEmpty() || !answer.isEmpty() : \"The content for question and answer are both empty.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Card card \u003d cards.getCard(editIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareBeforeEdit(CARD, card.toString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!(question.isEmpty())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                card.setQuestion(question);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!(answer.isEmpty())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                card.setAnswer(answer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareAfterEdit(CARD, card.toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            storage.saveCards(cards, access.getModule().getModuleName(), access.getChapter().getChapterName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_INDEX_RANGE, CARD));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 57
    }
  },
  {
    "path": "src/main/java/commands/EditChapterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditChapterCommand extends EditCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the chapter name.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 Chapter 2\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_NAME \u003d \"%1$s has the same chapter name as what you entered: %2$s\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int editIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String chapter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public EditChapterCommand(int editIndex, String chapter) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, DuplicateDataException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d editChapter(access, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String editChapter(Access access, Storage storage) throws InvalidInputException, DuplicateDataException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert !chapter.isEmpty() : \"The chapter name is missing.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Chapter chapter \u003d chapters.getChapter(editIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (this.chapter.equals(chapter.getChapterName())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return String.format(MESSAGE_SAME_NAME, chapter.getChapterName(), this.chapter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            storage.renameChapter(this.chapter, access.getModule(), chapter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareBeforeEdit(CHAPTER, chapter.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            chapter.setChapterName(this.chapter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareAfterEdit(CHAPTER, chapter.toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 56
    }
  },
  {
    "path": "src/main/java/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MODULE_PARAMETERS \u003d \" MODULE_INDEX MODULE_NAME\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String CHAPTER_PARAMETERS \u003d \" CHAPTER_INDEX CHAPTER_NAME\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String CARD_PARAMETERS \u003d \" FLASHCARD_INDEX q:QUESTION | a:ANSWER\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \": Edit the module name / chapter name / flashcard content.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"           \" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"           \" + CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 CS2113T\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" 2 Chapter 2\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" 3 q:What is the result of one plus one | a:two\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_BEFORE_EDIT \u003d \"The following %1$s will be edited:\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_AFTER_EDIT \u003d \"Edited %1$s:\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IOException, DuplicateDataException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    protected String prepareBeforeEdit(String type, String content) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_BEFORE_EDIT, type));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(content).append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    protected String prepareAfterEdit(String type, String content) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_AFTER_EDIT, type));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(content);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 3,
      "Jane-Ng": 51
    }
  },
  {
    "path": "src/main/java/commands/EditModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class EditModuleCommand extends EditCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the module name.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 CS2113T\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_NAME \u003d \"%1$s has the same module name as what you entered: %2$s\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int editIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public EditModuleCommand(int editIndex, String module) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.editIndex \u003d editIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, DuplicateDataException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d editModule(access, storage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String editModule(Access access, Storage storage) throws InvalidInputException, DuplicateDataException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isAdminLevel() : \"Not admin level\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert !module.isEmpty() : \"The module name is missing.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Module module \u003d modules.getModule(editIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (this.module.equals(module.getModuleName())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return String.format(MESSAGE_SAME_NAME, module.getModuleName(), this.module);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            storage.renameModule(this.module, module);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareBeforeEdit(MODULE, module.getModuleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            module.setModuleName(this.module);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(prepareAfterEdit(MODULE, module.getModuleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_INDEX_RANGE, MODULE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 56
    }
  },
  {
    "path": "src/main/java/commands/ExcludeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ExcludeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_OPTION_MORE \u003d \"more\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_OPTION_LESS \u003d \"less\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String EXCLUDE_COMMAND_SECONDARY_OPTION_CHAPTER \u003d \"chapter\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    String type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exclude\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Excludes or Includes Modules and Chapters from your \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"schedule.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Parameters: more(excludes from schedule)/less(includes into schedule)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + EXCLUDE_COMMAND_OPTION_MORE + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + EXCLUDE_COMMAND_OPTION_LESS + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ExcludeCommand(String type) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidInputException, ExclusionFileException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case EXCLUDE_COMMAND_OPTION_MORE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            addingToExclusion(ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case EXCLUDE_COMMAND_OPTION_LESS:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            removingFromExclusion(ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"The specified type for the exclude command is invalid.\\nThe only valid \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"types are \\\"\" + EXCLUDE_COMMAND_OPTION_MORE + \"\\\" and \\\"\" + EXCLUDE_COMMAND_OPTION_LESS + \"\\\".\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void addChapterToExclusion(Storage storage, Ui ui, String type) throws ExclusionFileException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getExcludedModuleName(type);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterName \u003d ui.getExcludedChapterName(moduleName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.appendChapterToExclusionFile(moduleName,chapterName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Chapter: \" + chapterName + \" could not be excluded as it does\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \" not exist.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void addModuleToExclusion(Storage storage, Ui ui, String type) throws ExclusionFileException,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getExcludedModuleName(type);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.appendModuleToExclusionFile(moduleName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Module: \" + moduleName + \" could not be excluded as it \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"does not exist.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void addingToExclusion(Ui ui, Storage storage) throws InvalidInputException, ExclusionFileException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String secondaryType \u003d ui.chooseModuleOrChapterExclusion(EXCLUDE_COMMAND_OPTION_MORE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (secondaryType.equals(EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            addModuleToExclusion(storage, ui, secondaryType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            addChapterToExclusion(storage, ui, secondaryType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void removeChapterFromExclusion(Storage storage, Ui ui, String type) throws ExclusionFileException,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getIncludedModuleName(type);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterName \u003d ui.getIncludedChapterName(moduleName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.removeChapterFromExclusionFile(moduleName,chapterName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Chapter: \" + chapterName + \" could not be included as it does\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \" not exist.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void removeModuleFromExclusion(Storage storage, Ui ui, String type) throws ExclusionFileException,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            InvalidInputException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String moduleName \u003d ui.getIncludedModuleName(type);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            storage.removeModuleFromExclusionFile(moduleName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(\"Sorry, the Module: \" + moduleName + \"could not be included as it \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + \"does not exist.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void removingFromExclusion(Ui ui, Storage storage) throws ExclusionFileException, InvalidInputException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String secondaryType \u003d ui.chooseModuleOrChapterExclusion(EXCLUDE_COMMAND_OPTION_LESS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (secondaryType.equals(EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            removeModuleFromExclusion(storage, ui, secondaryType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            removeChapterFromExclusion(storage, ui, secondaryType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 114
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program. \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showExit();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 3,
      "gua-guargia": 2,
      "Jane-Ng": 17
    }
  },
  {
    "path": "src/main/java/commands/GoChapterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class GoChapterCommand extends GoCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String chapter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public GoChapterCommand(String chapter) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String result \u003d goChapter(access, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (result.equals(\"\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String goChapter(Access access, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean isLevelExist \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String currentChapter \u003d this.chapter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cChapter\u003e allChapters \u003d chapters.getAllChapters();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (Chapter chapter : allChapters) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (currentChapter.equalsIgnoreCase(chapter.getChapterName())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                access.setChapterLevel(currentChapter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                isLevelExist \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    ArrayList\u003cCard\u003e allCards \u003d storage.loadCard(access.getModuleLevel(), chapter.getChapterName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    if (allCards.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                        result \u003d \"This is a new chapter, you can try to add flashcards inside!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    chapter.setCards(allCards);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    access.setChapter(chapter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    result \u003d \"The chapter file cannot be found.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!isLevelExist) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            result \u003d \"Sorry, I cannot find this chapter, please add this chapter first\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 56,
      "Jane-Ng": 2
    }
  },
  {
    "path": "src/main/java/commands/GoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public abstract class GoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"go\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String CHAPTER_PARAMETERS \u003d \" CHAPTER_NAME\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MODULE_PARAMETERS \u003d \" MODULE_NAME\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Goes to chapter / module level. \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Parameters:\" + MODULE_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"           \" + CHAPTER_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2113T\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" Chapter 1\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 24,
      "gua-guargia": 1,
      "Jane-Ng": 3
    }
  },
  {
    "path": "src/main/java/commands/GoModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class GoModuleCommand extends GoCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private String module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public GoModuleCommand(String module) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d goModule(access, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (result.equals(\"\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String goModule(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean isLevelExist \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String currentModule \u003d this.module;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cModule\u003e allModules \u003d modules.getAllModules();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (Module module : allModules) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (currentModule.equalsIgnoreCase(module.getModuleName())) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                access.setModuleLevel(currentModule);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                isLevelExist \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    ArrayList\u003cChapter\u003e chapters \u003d storage.loadChapter(module.getModuleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    if (chapters.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                        result \u003d \"This is a new module, you can try to add chapters inside!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    module.setChapters(chapters);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    access.setModule(module);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    result \u003d \"The module folder cannot be found.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!isLevelExist) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            result \u003d \"Sorry, I cannot find this module, please add this module first\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 53,
      "Jane-Ng": 5
    }
  },
  {
    "path": "src/main/java/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of commands available. \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showHelpList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 18,
      "gua-guargia": 2,
      "neojiaern": 1,
      "Jane-Ng": 1
    }
  },
  {
    "path": "src/main/java/commands/HistoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String DATE_PARAMETER \u003d \" DATE\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_DOES_NOT_EXIST \u003d \"You did not have any revision in the last session.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_EXIST \u003d \"Here is the revision completed in the session/in a day:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \": Lists the revision completed in the session/in a day. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Parameters:\" + DATE_PARAMETER + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2020-10-10\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public HistoryCommand(String date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String result \u003d listHistory(storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static void addHistory(Ui ui, Access access, Storage storage, int reviseIndex) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        LocalDate date \u003d java.time.LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storage.createHistory(ui, date.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String moduleName \u003d access.getModule().getModuleName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String chapterName \u003d access.getModule().getChapters().getChapter(reviseIndex).getChapterName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        History history \u003d new History(moduleName, chapterName, 100);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cHistory\u003e histories \u003d storage.loadHistory(date.toString());;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        histories.add(history);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        storage.saveHistory(histories, date.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String listHistory(Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cHistory\u003e histories \u003d storage.loadHistory(date);;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        int count \u003d histories.size();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            result.append(MESSAGE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        result.append(MESSAGE_EXIST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (History h : histories) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (histories.indexOf(h) \u003d\u003d count - 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                result.append(histories.indexOf(h) + 1).append(\".\").append(h);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                result.append(histories.indexOf(h) + 1).append(\".\").append(h).append(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 72
    }
  },
  {
    "path": "src/main/java/commands/ListCardsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.EmptyFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class ListCardsCommand extends ListCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of flashcards available. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws EmptyFileException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d listCards(access);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String listCards(Access access) throws EmptyFileException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d cards.getAllCards();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        int cardCount \u003d cards.getCardCount();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new EmptyFileException(String.format(MESSAGE_DOES_NOT_EXIST, CARD));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        result.append(String.format(MESSAGE_EXIST, CARD));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(\"\\n\").append(allCards.indexOf(c) + 1).append(\".\").append(c);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 6,
      "Jane-Ng": 36
    }
  },
  {
    "path": "src/main/java/commands/ListChaptersCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.EmptyFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class ListChaptersCommand extends ListCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of chapters available. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws EmptyFileException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String result \u003d listChapters(access);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String listChapters(Access access) throws EmptyFileException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cChapter\u003e allChapters \u003d chapters.getAllChapters();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        int chapterCount \u003d chapters.getChapterCount();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (chapterCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new EmptyFileException(String.format(MESSAGE_DOES_NOT_EXIST, CHAPTER));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        result.append(String.format(MESSAGE_EXIST, CHAPTER));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (Chapter c : allChapters) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            result.append(\"\\n\").append(allChapters.indexOf(c) + 1).append(\".\").append(c);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (c.getDueBy() \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                result.append(\" (Corrupted due date. Please revise soon.)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                result.append(\" (due by \").append(c.getDueBy()).append(\")\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 46,
      "Jane-Ng": 1
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.EmptyFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \": Shows a list of modules / chapters / flashcards available. \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_EXIST \u003d \"Here are the %s(s) in your list:\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_DOES_NOT_EXIST \u003d \"There are no %s(s) in your list.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage) throws EmptyFileException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 6,
      "gua-guargia": 2,
      "neojiaern": 1,
      "Jane-Ng": 16,
      "Darticune": 1
    }
  },
  {
    "path": "src/main/java/commands/ListDueCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ListDueCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"due\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all Chapters that are due by the execution \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"date.\\n\" + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String UNABLE_TO_LOAD_EMPTY_DATABASE \u003d \"Sorry, you do not have any flashcards in the database\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"yet. Please try this command again once you have added some flashcards!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e allDueChapters;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e dueDueChapters;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void loadAllDueChapters(Storage storage, Ui ui) throws InvalidFileFormatException, ExclusionFileException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            allDueChapters \u003d storage.loadAllDueChapters(ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidFileFormatException(UNABLE_TO_LOAD_EMPTY_DATABASE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void setDueDueChapters() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (DueChapter chapter : allDueChapters) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            LocalDate deadline \u003d chapter.getChapter().getDueBy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (Scheduler.isDeadlineDue(deadline)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                dueDueChapters.add(chapter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws InvalidFileFormatException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueDueChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        loadAllDueChapters(storage, ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        setDueDueChapters();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.printDueByTodayMessage(dueDueChapters.size(), COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.printDueChapters(dueDueChapters);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Darticune": 60
    }
  },
  {
    "path": "src/main/java/commands/ListModulesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.EmptyFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class ListModulesCommand extends ListCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of modules available. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws EmptyFileException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String result \u003d listModules(access);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private String listModules(Access access) throws EmptyFileException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        assert access.isAdminLevel() : \"Not admin level\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cModule\u003e allModules \u003d modules.getAllModules();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        int moduleCount \u003d modules.getModuleCount();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (moduleCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new EmptyFileException(String.format(MESSAGE_DOES_NOT_EXIST, MODULE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        result.append(String.format(MESSAGE_EXIST, MODULE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (Module m : allModules) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            result.append(\"\\n\").append(allModules.indexOf(m) + 1).append(\".\").append(m);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 41
    }
  },
  {
    "path": "src/main/java/commands/PreviewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class PreviewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"preview\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Forecasts the chapters due in the upcoming week.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final String UNABLE_TO_LOAD_EMPTY_DATABASE \u003d \"Sorry, you do not have any flashcards in the database\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            + \"yet. Please try this command again once you have added some flashcards!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e allDueChapters;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e dueDueChapters;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void loadAllDueChapters(Storage storage, Ui ui) throws ExclusionFileException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            allDueChapters \u003d storage.loadAllDueChapters(ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.showToUser(UNABLE_TO_LOAD_EMPTY_DATABASE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void setDueDueChapters(int increment) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (DueChapter chapter : allDueChapters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            LocalDate deadline \u003d chapter.getChapter().getDueBy();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (Scheduler.isDeadlineDueIn(deadline, increment)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                dueDueChapters.add(chapter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws ExclusionFileException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        loadAllDueChapters(storage, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            dueDueChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueDueChapters(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                ui.printDueByTodayMessage(dueDueChapters.size(), COMMAND_WORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                ui.printDueByIncrementMessage(dueDueChapters.size(), Scheduler.getIncrementedDate(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ui.printDueChapters(dueDueChapters);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 59
    }
  },
  {
    "path": "src/main/java/commands/RemoveCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveCardCommand extends RemoveCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(RemoveCardCommand.class.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \": Removes card based on the index in the list. \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: \" + CARD_PARAMETER + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int removeIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public RemoveCardCommand(int removeIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.removeIndex \u003d removeIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d removeCard(access, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String removeCard(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assert access.isChapterLevel() : \"Not chapter level\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            CardList cards \u003d access.getChapter().getCards();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cCard\u003e allCards \u003d cards.getAllCards();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Card card \u003d allCards.get(removeIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Deleting flashcard: \" + card.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            cards.removeCard(removeIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            storage.saveCards(cards, access.getModule().getModuleName(), access.getChapter().getChapterName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Flashcard successfully deleted.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareResult(CARD, card.toString(), cards.getCardCount());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, CARD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 53
    }
  },
  {
    "path": "src/main/java/commands/RemoveChapterCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveChapterCommand extends RemoveCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(RemoveChapterCommand.class.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \": Removes chapter based on the index in the list. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: \" + CHAPTER_PARAMETER + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int removeIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public RemoveChapterCommand(int removeIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.removeIndex \u003d removeIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d removeChapter(access, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String removeChapter(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assert access.isModuleLevel() : \"Not module level\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cChapter\u003e allChapters \u003d chapters.getAllChapters();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Chapter chapter \u003d allChapters.get(removeIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            File directory \u003d new File(storage.getFilePath() + \"/\" + access.getModule()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + \"/\" + chapter.toString() + \".txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Deleting chapter: \" + chapter.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            boolean isRemoved \u003d storage.deleteDirectory(directory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            boolean isRemovedFromDue \u003d storage.removeChapterFromDue("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    access.getModule().toString(), chapter.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (!isRemoved \u0026\u0026 !isRemovedFromDue) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                throw new IOException(\"There was a problem deleting chapter in directory.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allChapters.remove(removeIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Chapter: \" + chapter.toString() + \" successfully deleted.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareResult(CHAPTER, chapter.toString(), allChapters.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 61
    }
  },
  {
    "path": "src/main/java/commands/RemoveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public abstract class RemoveCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MODULE_PARAMETER \u003d \"MODULE_INDEX\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CHAPTER_PARAMETER \u003d \"CHAPTER_INDEX\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CARD_PARAMETER \u003d \"FLASHCARD_INDEX\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \": Removes module / chapter / flashcard based on the index in the list. \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: \" + MODULE_PARAMETER + \"\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"            \" + CHAPTER_PARAMETER + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"            \" + CARD_PARAMETER + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Got it. I\u0027ve removed this %1$s:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_COUNT \u003d \"Now you have %1$d %2$s(s) in the list.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public abstract void execute(Ui ui, Access access, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    protected String prepareResult(String type, String content, int count) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        result.append(String.format(MESSAGE_SUCCESS, type));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        result.append(content).append(\"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        result.append(String.format(MESSAGE_COUNT, count, type));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 40
    }
  },
  {
    "path": "src/main/java/commands/RemoveModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.admin.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class RemoveModuleCommand extends RemoveCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(RemoveModuleCommand.class.getName());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \": Removes module based on the index in the list. \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: \" + MODULE_PARAMETER + \"\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int removeIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public RemoveModuleCommand(int removeIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.removeIndex \u003d removeIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d removeModule(access, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private String removeModule(Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assert access.isAdminLevel() : \"Not admin level\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ModuleList modules \u003d access.getAdmin().getModules();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cModule\u003e allModules \u003d modules.getAllModules();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            Module module \u003d allModules.get(removeIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            File directory \u003d new File(storage.getFilePath() + \"/\" + module.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Deleting module: \" + module.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            boolean isRemoved \u003d storage.deleteDirectory(directory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (!isRemoved) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                throw new IOException(\"There was a problem deleting module in directory.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allModules.remove(removeIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(\"Module: \" + module.toString() + \" successfully deleted.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareResult(MODULE, module.toString(), allModules.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            String result \u003d String.format(MESSAGE_INVALID_INDEX_RANGE, MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(result);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 58
    }
  },
  {
    "path": "src/main/java/commands/RescheduleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.module.ChapterList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_ACCESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reschedule\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String PARAMETERS \u003d \" CHAPTER_INDEX DATE(yyyy-MM-dd)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reschedules the due date of a chapter.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Parameters:\" + PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2020-12-12\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_SAME_DATE \u003d \"%1$s has the same due date as what you entered: %2$s\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_BEFORE_RESCHEDULE \u003d \"%1$s has the following due date: %2$s\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_AFTER_RESCHEDULE \u003d \"It has been rescheduled to: %1$s\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String ACCESS_LEVEL \u003d \"module\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public RescheduleCommand(int index, LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws IncorrectAccessLevelException, InvalidInputException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!access.isModuleLevel()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    access.getLevel(), ACCESS_LEVEL));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String result \u003d reschedule(access, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ui.showToUser(result);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String reschedule(Access access, Storage storage) throws InvalidInputException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        ChapterList chapters \u003d access.getModule().getChapters();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            Chapter chapter \u003d chapters.getChapter(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            LocalDate dueBy \u003d chapter.getDueBy();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (dueBy !\u003d null \u0026\u0026 date.isEqual(dueBy)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                return String.format(MESSAGE_SAME_DATE, chapter.getChapterName(), date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            chapter.setDueBy(date, storage, access);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(String.format(MESSAGE_BEFORE_RESCHEDULE, chapter.getChapterName(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    (dueBy \u003d\u003d null) ? \"No due date\" : dueBy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            result.append(String.format(MESSAGE_AFTER_RESCHEDULE, date));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return result.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 76
    }
  },
  {
    "path": "src/main/java/commands/ReviseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_INDEX_RANGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " * Starts revision for a particular chapter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class ReviseCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(ReviseCommand.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"revise\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Starts revision based on a particular chapter. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"Parameters: INDEX_OF_CHAPTER\\n\" + \"Example: \" + COMMAND_WORD + \" 2\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have completed revision for \u003c%1$s\u003e.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_NO_CARDS_IN_CHAPTER \u003d \"You currently have no cards in %1$s.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_CHAPTER_NOT_DUE \u003d \"The chapter \u003c%1$s\u003e is not due for revision today.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_ANSWER_PROMPT \u003d \"\\n[enter s to show answer]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_RATING_PROMPT \u003d \"How well did you do for this card?\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"[enter e(easy), m(medium), h(hard), c(cannot answer)]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_SHOW_REVISE_PROMPT \u003d \"Are you sure you want to revise this? (Y/N)\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_START_REVISION \u003d \"The revision for %s will start now:\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String EASY \u003d \"e\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MEDIUM \u003d \"m\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String HARD \u003d \"h\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CANNOT_ANSWER \u003d \"c\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private final int reviseIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public ReviseCommand(int reviseIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.reviseIndex \u003d reviseIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Chapter getChapter(int reviseIndex, Access access) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter chapter;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapter \u003d access.getModule().getChapters().getChapter(reviseIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return chapter;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IndexOutOfBoundsException(String.format(MESSAGE_INVALID_INDEX_RANGE, CHAPTER));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private ArrayList\u003cCard\u003e getCards(Access access, Storage storage, Chapter toRevise)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e allCards;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            allCards \u003d storage.loadCard(access.getModuleLevel(), toRevise.getChapterName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            toRevise.setCards(allCards);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new FileNotFoundException(\"File is not found.\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return allCards;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private int reviseCard(int count, Card c, Ui ui, ArrayList\u003cCard\u003e repeatCards) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.showToUser(\"\\nQuestion \" + count + \":\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ui.showCardRevision(c);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d ui.getInput(MESSAGE_SHOW_RATING_PROMPT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        rateCard(ui, repeatCards, c, input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return ++count;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Chapter toRevise \u003d getChapter(reviseIndex, access);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!Scheduler.isDeadlineDue(toRevise.getDueBy())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (promptNotDue(ui, toRevise)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d getCards(access, storage, toRevise);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e repeatCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int cardCount \u003d allCards.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(\"\\nCard count: \" + cardCount);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_NO_CARDS_IN_CHAPTER, toRevise));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_START_REVISION, toRevise));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            count \u003d reviseCard(count, c, ui, repeatCards);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        repeatRevision(ui, repeatCards, count);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SUCCESS, toRevise));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.info(\"Revision has completed for chapter: \" + toRevise);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        toRevise.setDueBy(Scheduler.computeChapterDeadline(toRevise.getCards()), storage, access);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        CardList newCards \u003d new CardList(allCards);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        storage.saveCards(newCards, access.getModuleLevel(), toRevise.getChapterName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        HistoryCommand.addHistory(ui, access, storage, reviseIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private boolean promptNotDue(Ui ui, Chapter toRevise) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        StringBuilder prompt \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        prompt.append(String.format(MESSAGE_CHAPTER_NOT_DUE, toRevise));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        prompt.append(MESSAGE_SHOW_REVISE_PROMPT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d ui.getInput(prompt.toString()).trim().toUpperCase();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        boolean isInvalid \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        boolean notRevising \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (isInvalid) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            switch (input) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case \"Y\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                notRevising \u003d false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case \"N\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                notRevising \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                input \u003d ui.getInput(\"You have entered an invalid input, please try again.\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                        .trim().toUpperCase();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return notRevising;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static ArrayList\u003cCard\u003e rateCard(Ui ui, ArrayList\u003cCard\u003e repeatCards, Card c, String input) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        boolean isInvalid \u003d true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (isInvalid) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            switch (input.trim().toLowerCase()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case EASY:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                c.setPreviousInterval(Scheduler.computeEasyInterval(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.EASY);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case MEDIUM:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                c.setPreviousInterval(Scheduler.computeMediumInterval(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.MEDIUM);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case HARD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                c.setPreviousInterval(Scheduler.computeHardInterval(c.getPreviousInterval()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.HARD);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            case CANNOT_ANSWER:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                repeatCards.add(c);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                c.setRating(Card.CANNOT_ANSWER);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                isInvalid \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                input \u003d ui.getInput(\"You have entered an invalid input, please try again.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return repeatCards;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private void repeatRevision(Ui ui, ArrayList\u003cCard\u003e cards, int count) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (cards.size() !\u003d 0) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ArrayList\u003cCard\u003e repeatCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            for (Card c : cards) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                count \u003d reviseCard(count, c, ui, repeatCards);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            cards \u003d new ArrayList\u003c\u003e(repeatCards);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 5,
      "gua-guargia": 9,
      "neojiaern": 150,
      "Darticune": 22
    }
  },
  {
    "path": "src/main/java/commands/ShowRateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ShowRateCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showrate\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \": Shows rate percentage in chapter based on individual cards. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Only available at chapter level. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_NO_CARDS_IN_CHAPTER \u003d \"You currently have no cards in %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MESSAGE_SHOW_PERCENTAGE_PROMPT \u003d \"The percentage of card that \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            + \"is labeled \u003c%1$s\u003e is: %2$.2f\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String CANNOT_ANSWER \u003d \"cannot answer\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String EASY \u003d \"easy\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MEDIUM \u003d \"medium\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double easyPercentage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double mediumPercentage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double hardPercentage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private Double cannotAnswerPercentage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int easyCard \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int mediumCard \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int hardCard \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int cannotAnswerCard \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int noCard \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void execute(Ui ui, Access access, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Chapter chapter \u003d access.getChapter();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int cardCount \u003d computePercentage(chapter);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (cardCount \u003d\u003d noCard) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_NO_CARDS_IN_CHAPTER, chapter));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(\"\\nCard count: \" + cardCount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, EASY, easyPercentage));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, MEDIUM, mediumPercentage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, HARD, hardPercentage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ui.showToUser(String.format(MESSAGE_SHOW_PERCENTAGE_PROMPT, CANNOT_ANSWER, cannotAnswerPercentage));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int computePercentage(Chapter chapter) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cCard\u003e allCards \u003d chapter.getCards().getAllCards();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        int cardCount \u003d allCards.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (cardCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return cardCount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (Card c : allCards) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            switch (c.getRating()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            case Card.EASY:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                easyCard++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            case Card.MEDIUM:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                mediumCard++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            case Card.HARD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                hardCard++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                cannotAnswerCard++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        assert ((cannotAnswerCard + hardCard + easyCard + mediumCard) \u003d\u003d cardCount) : \"Wrong card count\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        easyPercentage \u003d ((double)easyCard) / cardCount;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        mediumPercentage \u003d ((double)mediumCard) / cardCount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        hardPercentage \u003d ((double)hardCard) / cardCount;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        cannotAnswerPercentage \u003d ((double)cannotAnswerCard) / cardCount;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return cardCount;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 89
    }
  },
  {
    "path": "src/main/java/common/KajiLog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class KajiLog {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static final String LOG_FILE \u003d \"data/kaji.log\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static FileHandler fh;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            if (fh \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                fh \u003d new FileHandler(LOG_FILE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                fh.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.log(Level.SEVERE, \"File logger is not working.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 33
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String LINE \u003d \"---------------------------------------------------------------------\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String ADMIN \u003d \"admin\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CHAPTER \u003d \"chapter\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String CARD \u003d \"flashcard\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"[Type help to view a list of commands available]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCESS \u003d \"Sorry, you are currently at %1$s\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \", please go to %2$s level first.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_MISSING_ARGS \u003d \"The arguments are missing.\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_INCORRECT_ACCESS \u003d \"%s command can only be called at admin, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            + \"module and chapter level.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_EXTRA_ARGS \u003d \"There should not be any arguments for %s.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"The format for %s command is wrong.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_MISSING_INDEX \u003d \"The index for %s is missing.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_NON_INTEGER \u003d \"The index for %s should be an integer.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX_RANGE \u003d \"The %1$s index needs to be within the range \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            + \"of the total number of %1$ss.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_NO_QUESTION_OR_ANSWER \u003d \"The content for question / answer is empty.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_NO_QUESTION_AND_ANSWER \u003d \"The content for question and answer are both empty.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_NO_NAME \u003d \"The %s name is missing.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static final String MESSAGE_DATE_FORMAT \u003d \"The date should be in the format of yyyy-MM-dd.\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_TYPE \u003d \"There is no such command type.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 1,
      "neojiaern": 20,
      "Jane-Ng": 7
    }
  },
  {
    "path": "src/main/java/exception/DuplicateDataException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class DuplicateDataException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public DuplicateDataException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 7
    }
  },
  {
    "path": "src/main/java/exception/EmptyFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class EmptyFileException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public EmptyFileException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 7
    }
  },
  {
    "path": "src/main/java/exception/ExclusionFileException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class ExclusionFileException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ExclusionFileException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ExclusionFileException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 10
    }
  },
  {
    "path": "src/main/java/exception/IncorrectAccessLevelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class IncorrectAccessLevelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public IncorrectAccessLevelException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 7
    }
  },
  {
    "path": "src/main/java/exception/InvalidFileFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class InvalidFileFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public InvalidFileFormatException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 7
    }
  },
  {
    "path": "src/main/java/exception/InvalidInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public InvalidInputException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jane-Ng": 10
    }
  },
  {
    "path": "src/main/java/manager/admin/Admin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class Admin {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected ModuleList modules;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //if there is no storage"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Admin() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules \u003d new ModuleList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //if there is storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Admin(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.modules \u003d new ModuleList(modules);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ModuleList getModules() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 23
    }
  },
  {
    "path": "src/main/java/manager/admin/ModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.admin;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ModuleList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private final ArrayList\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ModuleList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ModuleList(ArrayList\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cModule\u003e getAllModules() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getModuleCount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Module getModule(int moduleIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return modules.get(moduleIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 29,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/manager/card/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package manager.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private int previousInterval;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private LocalDate dueBy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private int rating;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int CANNOT_ANSWER \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int EASY \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int MEDIUM \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final int HARD \u003d 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Card(String question, String answer) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setAnswer(answer);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setQuestion(question);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setDueBy(null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setPreviousInterval(1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setRating(CANNOT_ANSWER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Card(String question, String answer, int previousInterval, int rating) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setAnswer(answer);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setQuestion(question);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setDueBy(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setPreviousInterval(previousInterval);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        setRating(rating);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setAnswer(String answer) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return \"[Q] \" + question;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return \"[A] \" + answer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public LocalDate getDueBy() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public int getPreviousInterval() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return previousInterval;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setPreviousInterval(int newInterval) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.previousInterval \u003d newInterval;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setDueBy(LocalDate newDueBy) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueBy \u003d newDueBy;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return \"[Q] \" + question + \" | [A] \" + answer;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setRating(int rating) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getRating() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 1,
      "gua-guargia": 24,
      "neojiaern": 16,
      "Jane-Ng": 24,
      "Darticune": 11
    }
  },
  {
    "path": "src/main/java/manager/chapter/CardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class CardList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final ArrayList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public CardList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public CardList(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new ArrayList\u003c\u003e(cards);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        cards.add(card);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void removeCard(int removeIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        cards.remove(removeIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public int getCardCount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Card getCard(int cardIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards.get(cardIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public ArrayList\u003cCard\u003e getAllCards() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 5,
      "neojiaern": 4,
      "Jane-Ng": 28
    }
  },
  {
    "path": "src/main/java/manager/chapter/Chapter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class Chapter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String chapterName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected CardList cards;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    protected LocalDate dueBy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String EASY \u003d \"E\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String MEDIUM \u003d \"M\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String HARD \u003d \"H\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Chapter(String chapterName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new CardList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Chapter(String chapterName, LocalDate dueBy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.cards \u003d new CardList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.dueBy \u003d dueBy;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Chapter(String chapterName, String rating, Storage storage, Access access) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.cards \u003d new CardList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        setNewDeckRating(rating, storage, access);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setNewDeckRating(String rating, Storage storage, Access access) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (rating) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case EASY:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate().plusDays(1), storage, access);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate().plusDays(2), storage, access);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case HARD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate().plusDays(4), storage, access);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            setDueBy(Scheduler.getCurrentDate(), storage, access);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getChapterName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapterName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setChapterName(String chapterName) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public CardList getCards() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setCards(ArrayList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.cards \u003d new CardList(cards);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void setDueBy(LocalDate dueBy, Storage storage, Access access) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.dueBy \u003d dueBy;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        dueBy.isEqual(LocalDate.now());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String module \u003d access.getModule().toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        storage.saveChapterDeadline(Scheduler.convertDueByToString(dueBy), module, chapterName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public LocalDate getDueBy() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapterName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 25,
      "neojiaern": 9,
      "Darticune": 47,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/manager/chapter/DueChapter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package manager.chapter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class DueChapter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private final String parentModule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private final Chapter chapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public DueChapter(String parentModule, Chapter chapter) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.parentModule \u003d parentModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        this.chapter \u003d chapter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public Chapter getChapter() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return chapter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return \"Module: \" + parentModule + \"; Chapter: \" + chapter.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Darticune": 20
    }
  },
  {
    "path": "src/main/java/manager/history/History.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package manager.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class History {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected String chapterName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    protected int percentage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public History(String moduleName, String chapterName, int percentage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        this.percentage \u003d percentage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return moduleName + \"/\" + chapterName + \" (\" + percentage + \"% completed)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 17
    }
  },
  {
    "path": "src/main/java/manager/module/ChapterList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class ChapterList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private final ArrayList\u003cChapter\u003e chapters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ChapterList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ChapterList(ArrayList\u003cChapter\u003e chapters) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapters \u003d chapters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void addChapter(Chapter chapter) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters.add(chapter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cChapter\u003e getAllChapters() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public int getChapterCount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public Chapter getChapter(int chapterIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return chapters.get(chapterIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 29,
      "neojiaern": 4
    }
  },
  {
    "path": "src/main/java/manager/module/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "package manager.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected ChapterList chapters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String moduleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Module(String moduleName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        chapters \u003d new ChapterList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void setModuleName(String moduleName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ChapterList getChapters() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void setChapters(ArrayList\u003cChapter\u003e chapters) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.chapters \u003d new ChapterList(chapters);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 31,
      "Jane-Ng": 4
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.AddCardCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.AddChapterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.AddModuleCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.BackAdminCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.BackCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.BackModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditCardCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditChapterCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.EditModuleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.ExcludeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.GoChapterCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.GoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.GoModuleCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ListModulesCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ListChaptersCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import commands.ListCardsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ListDueCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.PreviewCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import commands.RemoveCardCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import commands.RemoveChapterCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.RemoveCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import commands.RemoveModuleCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ShowRateCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.ADMIN;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CARD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.CHAPTER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_DATE_FORMAT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_EXTRA_ARGS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_INCORRECT_ACCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_ACCESS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_ARGS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_MISSING_INDEX;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MESSAGE_NON_INTEGER;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_NO_NAME;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_NO_QUESTION_AND_ANSWER;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static common.Messages.MESSAGE_NO_QUESTION_OR_ANSWER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.MODULE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String QUESTION_ANSWER_PREFIX \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String QUESTION_PREFIX \u003d \"q:\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static final String ANSWER_PREFIX \u003d \"a:\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public static Command parse(String fullCommand, Access access)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String[] commandTypeAndArgs \u003d splitCommandTypeAndArgs(fullCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String commandType \u003d commandTypeAndArgs[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String commandArgs \u003d commandTypeAndArgs[1].trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Command Type: \" + commandType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareList(commandArgs, access);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareAdd(commandArgs, access);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case RemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareRemove(commandArgs, access);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case ReviseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return prepareRevise(commandArgs, access);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareExit(commandArgs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return prepareHelp(commandArgs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEdit(commandArgs, access);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return prepareBack(commandArgs, access);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case GoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return prepareGo(commandArgs, access);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case ListDueCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return prepareListDue(commandArgs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return prepareHistory(commandArgs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case ShowRateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return prepareShowRate(commandArgs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case PreviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return preparePreview(commandArgs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case ExcludeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return prepareExclude(commandArgs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case RescheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareReschedule(commandArgs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_INVALID_COMMAND_TYPE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareShowRate(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    ShowRateCommand.COMMAND_WORD) + ShowRateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return new ShowRateCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private static Command prepareHistory(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            LocalDate date \u003d java.time.LocalDate.now();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            commandArgs \u003d date.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(commandArgs);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_DATE_FORMAT + HistoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return new HistoryCommand(commandArgs);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareGo(String commandArgs, Access access)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String level \u003d getLevel(access);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + GoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        switch (level) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return new GoModuleCommand(commandArgs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return new GoChapterCommand(commandArgs);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new IncorrectAccessLevelException(\"Go command can only be called \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + \"at admin and module level.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareBack(String commandArgs, Access access)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String level \u003d getLevel(access);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + BackCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        switch (level) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return new BackModuleCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return new BackAdminCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new IncorrectAccessLevelException(\"Back command can only be called \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + \"at module and chapter level.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String[] splitCommandTypeAndArgs(String userCommand) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String[] commandTypeAndParams \u003d userCommand.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (commandTypeAndParams.length !\u003d 2) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            commandTypeAndParams \u003d new String[]{commandTypeAndParams[0], \"\"};"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return commandTypeAndParams;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareList(String commandArgs, Access access)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String level \u003d getLevel(access);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        switch (level) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ListCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                        + ListModulesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return new ListModulesCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ListCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                        + ListChaptersCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return new ListChaptersCommand();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ListCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                        + ListCardsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            return new ListCardsCommand();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assert !access.isChapterLevel() \u0026\u0026 !access.isAdminLevel() \u0026\u0026 !access.isModuleLevel() : access.getLevel();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    ListCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareAdd(String commandArgs, Access access)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String level \u003d getLevel(access);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        switch (level) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return prepareAddModule(commandArgs);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + AddChapterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return prepareAddChapter(commandArgs);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareAddCard(commandArgs);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assert !access.isChapterLevel() \u0026\u0026 !access.isAdminLevel() \u0026\u0026 !access.isModuleLevel() : access.getLevel();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    AddCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareAddCard(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(QUESTION_ANSWER_PREFIX, 2);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String question \u003d parseQuestion(args[0]);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String answer \u003d parseAnswer(args[1]);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (question.isEmpty() || answer.isEmpty()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_NO_QUESTION_OR_ANSWER"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new AddCardCommand(question, answer);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException((String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareAddChapter(String commandArgs) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return new AddChapterCommand(commandArgs);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    private static Command prepareAddModule(String commandArgs) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return new AddModuleCommand(commandArgs);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String getLevel(Access access) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String level;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (access.isAdminLevel()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            level \u003d ADMIN;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            level \u003d MODULE;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else if (access.isChapterLevel()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            level \u003d CHAPTER;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            assert !access.isChapterLevel() \u0026\u0026 !access.isAdminLevel() \u0026\u0026 !access.isModuleLevel() : access.getLevel();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            level \u003d \"No level\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return level;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Command prepareRemove(String commandArgs, Access access) throws InvalidInputException,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int removeIndex;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String type \u003d getType(access);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String messageUsage \u003d \"\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (type.equals(MODULE)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            messageUsage \u003d RemoveModuleCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (type.equals(CHAPTER)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            messageUsage \u003d RemoveChapterCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (type.equals(CARD)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            messageUsage \u003d RemoveCardCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_MISSING_INDEX, type)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + messageUsage);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            removeIndex \u003d Integer.parseInt(commandArgs) - 1;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_NON_INTEGER, type)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + messageUsage);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return new RemoveModuleCommand(removeIndex);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return new RemoveChapterCommand(removeIndex);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            return new RemoveCardCommand(removeIndex);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static String getType(Access access) throws IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (access.isAdminLevel()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            type \u003d MODULE;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (access.isModuleLevel()) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            type \u003d CHAPTER;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (access.isChapterLevel()) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            type \u003d CARD;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(\"Command called at the wrong level.\\n\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEdit(String commandArgs, Access access)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String level \u003d getLevel(access);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        switch (level) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case ADMIN:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEditModule(commandArgs);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case MODULE:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + EditChapterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEditChapter(commandArgs);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        case CHAPTER:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_MISSING_ARGS + EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return prepareEditCard(commandArgs);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assert !access.isChapterLevel() \u0026\u0026 !access.isAdminLevel() \u0026\u0026 !access.isModuleLevel() : access.getLevel();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INCORRECT_ACCESS,"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    EditCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEditModule(String commandArgs)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_MISSING_INDEX, MODULE)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_NO_NAME, MODULE)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (containsCardPrefix(args[1].trim().toLowerCase())) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        ADMIN, CHAPTER));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int editIndex \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditModuleCommand(editIndex, args[1].trim());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_NON_INTEGER, MODULE)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEditChapter(String commandArgs)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_MISSING_INDEX, CHAPTER)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditChapterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_NO_NAME, CHAPTER)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditChapterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (containsCardPrefix(args[1].trim().toLowerCase())) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        MODULE, CHAPTER));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int editIndex \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditChapterCommand(editIndex, args[1].trim());"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_NON_INTEGER, CHAPTER)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditChapterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditChapterCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareEditCard(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_MISSING_INDEX, CARD)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int editIndex \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] questionAndAnswer \u003d args[1].trim().split(QUESTION_ANSWER_PREFIX, 2);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String question \u003d parseQuestion(questionAndAnswer[0]);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String answer \u003d parseAnswer(questionAndAnswer[1]);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (question.isEmpty() \u0026\u0026 answer.isEmpty()) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(MESSAGE_NO_QUESTION_AND_ANSWER + EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new EditCardCommand(editIndex, question, answer);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_NON_INTEGER, CARD)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static boolean containsCardPrefix(String arg) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return arg.contains(\"q:\") || arg.contains(\"a:\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String parseQuestion(String arg) throws InvalidInputException {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!(arg.trim().toLowerCase().startsWith(QUESTION_PREFIX))) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"There needs to be a \\\"q:\\\" prefix before the question.\\n\""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + \"Example: \" + AddCommand.COMMAND_WORD + AddCommand.CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + \"         \" + EditCommand.COMMAND_WORD + EditCommand.CARD_PARAMETERS);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return arg.substring(2).trim();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static String parseAnswer(String arg) throws InvalidInputException {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!(arg.trim().toLowerCase().startsWith(ANSWER_PREFIX))) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(\"There needs to be a \\\"a:\\\" prefix before the answer.\\n\""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + \"Example: \" + AddCommand.COMMAND_WORD + AddCommand.CARD_PARAMETERS + \"\\n\""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + \"         \" + EditCommand.COMMAND_WORD + EditCommand.CARD_PARAMETERS);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return arg.substring(2).trim();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Command prepareRevise(String commandArgs, Access access)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throws InvalidInputException, IncorrectAccessLevelException {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (access.isAdminLevel() || access.isChapterLevel()) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_INVALID_ACCESS,"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    access.getLevel(), MODULE));"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } else if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_MISSING_INDEX, CHAPTER)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        int chapterIndex;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            chapterIndex \u003d Integer.parseInt(commandArgs) - 1;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new IncorrectAccessLevelException(String.format(MESSAGE_NON_INTEGER, CHAPTER)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return new ReviseCommand(chapterIndex);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareExit(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    private static Command prepareHelp(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String parseQuestionInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.QUESTION_PREFIX))) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Questions in the file should begin with [Q].\");"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String question \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (question.isEmpty()) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a question after [Q] in the file.\");"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String parseAnswerInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.ANSWER_PREFIX))) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Answers in the file should begin with [A].\");"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String answer \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (answer.isEmpty()) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a answer after [A] in the file.\");"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parsePreIntervalInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.PREVIOUS_INTERVAL_PREFIX))) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"Previous intervals in the file should begin with [P].\");"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String preInterval \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (preInterval.isEmpty()) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a interval after [P] in the file.\");"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return preInterval;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static Command prepareListDue(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_EXTRA_ARGS, ListDueCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new ListDueCommand();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parseTaskNameInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String name \u003d arg.trim();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a name of the completed task.\");"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static String parsePercentInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        String percent \u003d arg.trim().substring(0,3);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (percent.isEmpty()) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new InvalidFileFormatException("
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                    \"There should be a number to indicate how many tasks have completed.\");"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return percent;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static String parseRatingInFile(String arg) throws InvalidFileFormatException {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!(arg.trim().startsWith(Storage.RATING_PREFIX))) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidFileFormatException(\"Answers in the file should begin with [R].\");"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String rating \u003d arg.substring(3).trim();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (rating.isEmpty()) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new InvalidFileFormatException(\"There should be a rating after [R] in the file.\");"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static Command preparePreview(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_EXTRA_ARGS + PreviewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new PreviewCommand();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private static Command prepareExclude(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new InvalidInputException(MESSAGE_MISSING_ARGS + ExcludeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return new ExcludeCommand(commandArgs);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private static Command prepareReschedule(String commandArgs) throws InvalidInputException {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String[] args \u003d commandArgs.split(\" \", 2);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(String.format(MESSAGE_MISSING_INDEX, CHAPTER)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (args[1].trim().isEmpty()) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"The due date is missing.\\n\""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                        + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            int index \u003d Integer.parseInt(args[0].trim()) - 1;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            LocalDate dueDate \u003d LocalDate.parse(args[1].trim());"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (dueDate.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                throw new InvalidInputException(\"You cannot enter a due date that is before today.\\n\");"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            return new RescheduleCommand(index, dueDate);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_NON_INTEGER, CHAPTER)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    RescheduleCommand.COMMAND_WORD) + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new InvalidInputException(MESSAGE_DATE_FORMAT + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 93,
      "gua-guargia": 107,
      "neojiaern": 82,
      "Jane-Ng": 296,
      "Darticune": 30
    }
  },
  {
    "path": "src/main/java/scheduler/Scheduler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.lang.Math;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "public class Scheduler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double EASY_MULTIPLIER \u003d 4.4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double MEDIUM_MULTIPLIER \u003d 2.2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final double HARD_MULTIPLIER \u003d 1.1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static final int MAX_INTERVAL \u003d 365;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean isDeadlineDue(LocalDate dueBy) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (dueBy \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy.isBefore(getCurrentDate()) || dueBy.isEqual(getCurrentDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean isDeadlineDueIn(LocalDate dueBy, int increment) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (dueBy \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (increment \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return dueBy.isBefore(getCurrentDate()) || dueBy.isEqual(getCurrentDate());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return dueBy.isEqual(getCurrentDate().plusDays(increment));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate getCurrentDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String getIncrementedDate(int increment) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        LocalDate deadline \u003d getCurrentDate().plusDays(increment);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return convertDueByToString(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate parseDate(String savedDate) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (savedDate.equals(\"Invalid Date\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return LocalDate.now();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return LocalDate.parse(savedDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String convertDueByToString(LocalDate dueBy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueBy.format(formatter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeEasyInterval(int previousInterval) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * EASY_MULTIPLIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert newInterval \u003e 0 : \"Invalid new Interval\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeMediumInterval(int previousInterval) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * MEDIUM_MULTIPLIER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert newInterval \u003e 0 : \"Invalid new Interval\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeHardInterval(int previousInterval) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int newInterval \u003d (int) Math.round(previousInterval * HARD_MULTIPLIER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert newInterval \u003e 0 : \"Invalid new Interval\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (newInterval \u003e MAX_INTERVAL) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return previousInterval;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return newInterval;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static int computeChapterInterval(CardList cards) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        double averageInterval \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (Card c : cards.getAllCards()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            averageInterval +\u003d c.getPreviousInterval();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        averageInterval /\u003d cards.getCardCount();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return (int) Math.round(averageInterval);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static LocalDate computeChapterDeadline(CardList cards) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        int interval \u003d computeChapterInterval(cards);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return getCurrentDate().plusDays(interval);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 4,
      "Darticune": 100
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gua-guargia": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import common.KajiLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.DuplicateDataException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import exception.ExclusionFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import exception.InvalidFileFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.history.History;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import manager.chapter.CardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.chapter.Chapter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import manager.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import scheduler.Scheduler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    private static Logger logger \u003d KajiLog.getLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String DELIMITER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String QUESTION_PREFIX \u003d \"[Q]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String ANSWER_PREFIX \u003d \"[A]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public static final String PREVIOUS_INTERVAL_PREFIX \u003d \"[P]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public static final String RATING_PREFIX \u003d \"[R]\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_CREATED \u003d \"Successfully created new %1$s %2$s\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_EXISTS \u003d \"%1$s %2$s already exists\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String MESSAGE_MODULE_CHAPTER \u003d \"Module: %1$s ; Chapter: %2$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String FILE \u003d \"file\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public static final String DIR \u003d \"directory\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    //create the folder --\u003e \u0027data/admin\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void createAdmin(Ui ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ui.showToUser(\"Filepath: \" + filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dataDirExists \u003d f.getParentFile().exists();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dataDirCreated \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!dataDirExists) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            dataDirCreated \u003d f.getParentFile().mkdir();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_EXISTS, DIR.substring(0, 1).toUpperCase(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    f.getParentFile().getName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (dataDirCreated) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(String.format(MESSAGE_CREATED, DIR, f.getParentFile().getName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean adminDirExists \u003d f.exists();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean adminDirCreated \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!adminDirExists) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            adminDirCreated \u003d f.mkdir();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_EXISTS, DIR.substring(0, 1).toUpperCase(), f));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (adminDirCreated) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(String.format(MESSAGE_CREATED, DIR, f));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        createHistoryDir();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void createModule(String moduleName) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean moduleDirExists \u003d f.exists();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean moduleDirCreated \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!moduleDirExists) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            moduleDirCreated \u003d f.mkdir();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(String.format(MESSAGE_EXISTS, DIR, f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (moduleDirCreated) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(String.format(MESSAGE_CREATED, DIR, f));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void createChapter(String chapterName, String moduleName) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName + \"/\" + chapterName + \".txt\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean chapterFileExists \u003d f.exists();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean chapterFileCreated \u003d false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!chapterFileExists) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            chapterFileCreated \u003d f.createNewFile();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(String.format(MESSAGE_EXISTS, FILE, f));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (chapterFileCreated) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            logger.info(String.format(MESSAGE_CREATED, FILE, f));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public ArrayList\u003cModule\u003e loadModule() throws FileNotFoundException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dirExists \u003d f.exists();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!dirExists) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String[] contents \u003d f.list();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d \"List of files and directories in the specified directory:\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String content : contents) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (content.equals(\"exclusions.txt\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result +\u003d \"\\n\" + content;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            modules.add(new Module(content));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.info(result);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public ArrayList\u003cChapter\u003e loadChapter(String module) throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + module);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean dirExists \u003d f.exists();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!dirExists) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cChapter\u003e chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        String[] contents \u003d f.list();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (contents.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            return chapters;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String result \u003d \"List of files and directories in the specified directory:\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String content : contents) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (content.equals(\"dues\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String target \u003d content.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            result +\u003d content;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            String deadline \u003d retrieveChapterDeadline(module, target);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assert !deadline.equals(null) : \"Invalid deadline retrieved\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (deadline.equals(\"Invalid Date\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                chapters.add(new Chapter(target));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            if (deadline.equals(\"Does not exist\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                String dirPath \u003d filePath + \"/\" + module + \"/\" + \"dues\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                String duePath \u003d filePath + \"/\" + module + \"/\" + \"dues\" + \"/\" + target + \"due\" + \".txt\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                boolean success \u003d createChapterDue(duePath, dirPath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                if (!success) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                    throw new IOException(\"Error creating chapter due file\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                chapters.add(new Chapter(target));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            chapters.add(new Chapter(target, Scheduler.parseDate(deadline)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        logger.info(result);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        return chapters;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String[] loadChaptersFromSpecifiedModule(String moduleName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File file \u003d new File(filePath + \"/\" + moduleName);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        boolean moduleExists \u003d file.exists();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!moduleExists) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return file.list();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private String retrieveChapterDeadline(String moduleName, String chapterName) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + moduleName + \"/dues/\" + chapterName + \"due\" + \".txt\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (s.hasNext()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String deadline \u003d s.nextLine();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                s.close();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return deadline;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                s.close();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return \"Invalid Date\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return \"Does not exist\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private ArrayList\u003cString\u003e loadExclusionFile() throws ExclusionFileException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File exclusionFile \u003d new File(getFilePath() + \"/exclusions.txt\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (!exclusionFile.exists()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                if (!exclusionFile.createNewFile()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    throw new ExclusionFileException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    return new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            Scanner exclusionFileScanner \u003d new Scanner(exclusionFile);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            while (exclusionFileScanner.hasNext()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                //to read the card"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String entry \u003d exclusionFileScanner.nextLine();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                excludedChapters.add(entry);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            exclusionFileScanner.close();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return excludedChapters;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new ExclusionFileException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public ArrayList\u003cDueChapter\u003e loadAllDueChapters(Ui ui) throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExclusionFile();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File admin \u003d new File(filePath);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!admin.exists()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String[] modules \u003d admin.list();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cDueChapter\u003e dueChapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return checkAllChaptersForDue(ui, excludedChapters, dueChapters, modules);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private ArrayList\u003cDueChapter\u003e checkAllChaptersForDue(Ui ui, ArrayList\u003cString\u003e excludedChapters,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                                         ArrayList\u003cDueChapter\u003e dueChapters,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                                                         String[] modules) throws FileNotFoundException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String module : modules) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (module.equals(\"exclusions.txt\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            File f2 \u003d new File(filePath + \"/\" + module);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            boolean chapterExists \u003d f2.exists();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (!chapterExists) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String[] chapters \u003d f2.list();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (chapters.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return dueChapters;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            for (String chapter : chapters) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String target \u003d chapter.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String entry \u003d \"Module: \" + module + \"; Chapter: \" + target;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                if (excludedChapters.contains(entry)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                checkChapterDeadline(ui, dueChapters, module, target);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return dueChapters;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void checkChapterDeadline(Ui ui, ArrayList\u003cDueChapter\u003e dueChapters, String module, String target) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String deadline \u003d retrieveChapterDeadline(module, target);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assert !deadline.equals(null) : \"Invalid deadline retrieved\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (deadline.equals(\"Invalid Date\")) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(\"\\nThe chapter:\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_MODULE_CHAPTER, module, target)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + \" has a corrupted deadline. Please revise it ASAP! It will be considered due!\\n\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            dueChapters.add(new DueChapter(module, new Chapter(target, Scheduler.parseDate(deadline))));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else if (deadline.equals(\"Does not exist\")) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            deadline \u003d \"Invalid Date\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(\"\\nThe chapter:\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_MODULE_CHAPTER, module, target)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                    + \" has a corrupted deadline. Please revise it ASAP! It will be considered due!\\n\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            dueChapters.add(new DueChapter(module, new Chapter(target, Scheduler.parseDate(deadline))));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            dueChapters.add(new DueChapter(module, new Chapter(target, Scheduler.parseDate(deadline))));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void chapterExists(String moduleName, String chapterName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File file \u003d new File(filePath + \"/\" + moduleName + \"/\" + chapterName + \".txt\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void updateExclusionFile(ArrayList\u003cString\u003e excludedChapters) throws ExclusionFileException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            FileWriter exclusionFileWriter \u003d new FileWriter(getFilePath() + \"/exclusions.txt\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            for (String excluded : excludedChapters) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                exclusionFileWriter.write(excluded + \"\\n\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            exclusionFileWriter.close();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            throw new ExclusionFileException(\"Sorry, there was an error in accessing the Exclusion File\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void appendModuleToExclusionFile(String moduleName) throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExclusionFile();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String[] chaptersInModule \u003d loadChaptersFromSpecifiedModule(moduleName);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String chapter : chaptersInModule) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (chapter.equals(\"dues\")) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            chapter \u003d chapter.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String chapterEntry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapter;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (!excludedChapters.contains(chapterEntry)) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                excludedChapters.add(chapterEntry);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void appendChapterToExclusionFile(String moduleName, String chapterName) throws FileNotFoundException,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExclusionFile();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        chapterExists(moduleName, chapterName);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterEntry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapterName;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!excludedChapters.contains(chapterEntry)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            excludedChapters.add(chapterEntry);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void removeModuleFromExclusionFile(String moduleName) throws FileNotFoundException, ExclusionFileException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExclusionFile();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String[] chaptersInModule \u003d loadChaptersFromSpecifiedModule(moduleName);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (String chapter : chaptersInModule) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            chapter \u003d chapter.replace(\".txt\", \"\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String chapterEntry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapter;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            excludedChapters.remove(chapterEntry);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void removeChapterFromExclusionFile(String moduleName, String chapterName) throws FileNotFoundException,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ExclusionFileException {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        ArrayList\u003cString\u003e excludedChapters \u003d loadExclusionFile();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String chapterEntry \u003d \"Module: \" + moduleName + \"; Chapter: \" + chapterName;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        excludedChapters.remove(chapterEntry);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        updateExclusionFile(excludedChapters);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public ArrayList\u003cCard\u003e loadCard(String module, String chapter) throws FileNotFoundException {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        File f \u003d new File(filePath + \"/\" + module + \"/\" + chapter + \".txt\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        boolean fileExists \u003d f.exists();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        if (!fileExists) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            //to read the card"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String fileCommand \u003d s.nextLine();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            String[] args \u003d fileCommand.split(DELIMITER, 4);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String question \u003d Parser.parseQuestionInFile(args[0]);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                String answer \u003d Parser.parseAnswerInFile(args[1]);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String interval \u003d Parser.parsePreIntervalInFile(args[2]);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                String rating \u003d Parser.parseRatingInFile(args[3]);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                int preInterval \u003d Integer.parseInt(interval);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                int intRating \u003d Integer.parseInt(rating);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                Card card \u003d new Card(question, answer, preInterval, intRating);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                cards.add(card);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return cards;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void saveCards(CardList cards, String module, String chapter) throws IOException {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(getFilePath() + \"/\" + module + \"/\" + chapter + \".txt\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.getCardCount(); i++) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            int ratingInt \u003d cards.getCard(i).getRating();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            String ratingString \u003d Integer.toString(ratingInt);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            fw.write(cards.getCard(i).toString()"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + \" | [P] \" + cards.getCard(i).getPreviousInterval() + \" | [R] \""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "                    + ratingString + \"\\n\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private boolean createChapterDue(String duePath, String dirPath) throws IOException {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File due \u003d new File(duePath);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        File dir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        boolean isDirValid \u003d dir.exists() \u0026\u0026 dir.isDirectory();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (!isDirValid) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return dir.mkdir() \u0026\u0026 due.createNewFile();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else if (!due.exists()) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return due.createNewFile();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    private void writeDeadlineToChapterDue(String dueBy, String chapterPath) throws IOException {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        FileWriter fw \u003d new FileWriter(chapterPath);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        fw.write(dueBy);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void saveChapterDeadline(String dueBy, String moduleName, String chapterName) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String dirPath \u003d filePath + \"/\" + moduleName + \"/\" + \"dues\";"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String duePath \u003d filePath + \"/\" + moduleName + \"/\" + \"dues\" + \"/\" + chapterName + \"due\" + \".txt\";"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (createChapterDue(duePath, dirPath)) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                writeDeadlineToChapterDue(dueBy, duePath);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                System.out.println(\"Unable to produce ChapterDue\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            System.out.println(\"Error in saving chapter deadline\");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean deleteDirectory(File directoryToBeDeleted) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        File[] allContents \u003d directoryToBeDeleted.listFiles();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        if (allContents !\u003d null) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            for (File file : allContents) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                deleteDirectory(file);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return directoryToBeDeleted.delete();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void renameChapter(String newChapterName, Module module, Chapter chapter) throws DuplicateDataException {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        File chapterFile \u003d new File(getFilePath()"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + module.getModuleName()"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + chapter.getChapterName() + \".txt\");"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        File dueFile \u003d new File(getFilePath()"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + module.getModuleName()"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/dues\""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + chapter.getChapterName() + \"due.txt\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean chapterSuccess \u003d chapterFile.renameTo(new File(getFilePath()"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + module.getModuleName()"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                + \"/\" + newChapterName + \".txt\"));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        boolean dueSuccess \u003d dueFile.renameTo(new File(getFilePath()"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + module.getModuleName()"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/dues\""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "                + \"/\" + newChapterName + \"due.txt\"));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!chapterSuccess || !dueSuccess) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new DuplicateDataException(\"A chapter with this name already exists.\");"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void renameModule(String newModuleName, Module module) throws DuplicateDataException {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        File file \u003d new File(getFilePath() + \"/\" + module.getModuleName());"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        boolean success \u003d file.renameTo(new File(getFilePath() + \"/\" + newModuleName));"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        if (!success) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            throw new DuplicateDataException(\"A module with this name already exists.\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void createHistoryDir() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        File f \u003d new File(\"data/history\");"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        boolean historyDirExists \u003d f.exists();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!historyDirExists) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            f.mkdir();"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void createHistory(Ui ui, String date) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            File f \u003d new File(\"data/history/\" + date + \".txt\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            boolean historyFileExists \u003d f.exists();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            boolean historyFileCreated \u003d false;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (!historyFileExists) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                historyFileCreated \u003d f.createNewFile();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                logger.info(\"the file \" + date + \".txt already exists in history folder\\n\""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                        + \"It stores the revision completed in the session/in a day\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            if (historyFileCreated) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                logger.info(\"Successfully created new file \" + date + \".txt in history folder\\n\""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                        + \"It stores the revision completed in the session/in a day\");"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            ui.showError(\"Error creating the file.\");"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void saveHistory(ArrayList\u003cHistory\u003e histories, String date) throws IOException {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/history/\" + date + \".txt\");"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (History h : histories) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            fw.write(h.toString());"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public ArrayList\u003cHistory\u003e loadHistory(String date) throws FileNotFoundException {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        File f \u003d new File(\"data/history/\" + date + \".txt\");"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        boolean fileExists \u003d f.exists();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        if (!fileExists) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        ArrayList\u003cHistory\u003e histories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            //to read the history"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String revision \u003d s.nextLine();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String[] args \u003d revision.split(\"\\\\(\", 2);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            String[] name \u003d args[0].split(\"/\", 2);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String moduleName \u003d Parser.parseTaskNameInFile(name[0]);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String chapterName \u003d Parser.parseTaskNameInFile(name[1]);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                String percent \u003d Parser.parsePercentInFile(args[1]);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                int percentage \u003d Integer.parseInt(percent);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                History history \u003d new History(moduleName, chapterName, percentage);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                histories.add(history);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            } catch (InvalidFileFormatException e) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        return histories;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public boolean removeChapterFromDue(String module, String chapter) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        File fileToDelete \u003d new File(getFilePath() + \"/\" + module"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "                + \"/dues/\" + chapter + \"due.txt\");"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return deleteDirectory(fileToDelete);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 110,
      "gua-guargia": 104,
      "neojiaern": 59,
      "Jane-Ng": 43,
      "Darticune": 216
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.BackCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import commands.ExcludeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.GoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ListDueCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.RemoveCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import commands.RescheduleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ReviseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "import commands.ShowRateCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import manager.chapter.DueChapter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static commands.ReviseCommand.MESSAGE_SHOW_ANSWER_PROMPT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static common.Messages.LINE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean chooseToRateNewDeck() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Would you like to rate this new Chapter? (Y/N)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        Ui ratingUi \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        while (!userChoice.equalsIgnoreCase(\"Y\") \u0026\u0026 !userChoice.equalsIgnoreCase(\"N\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            ratingUi.showToUser(\"Sorry, that is not a valid input. Please enter \\\"Y\\\" or \\\"N\\\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return userChoice.equalsIgnoreCase(\"Y\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static boolean validDeckRating(String rating) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (rating.toUpperCase()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"M\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case \"H\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public static String getChoiceOfNewDeckRating() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Please rate this new Chapter!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"You have the options of: Easy(E), Medium(M) or Hard(H)\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.println(\"Would your choice be E, M or H?\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        Ui ratingUi \u003d new Ui();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        while (!validDeckRating(userChoice)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            userChoice \u003d ratingUi.readCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return userChoice.toUpperCase();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.print(\"Enter command here: \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String userCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        while (userCommand.trim().isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            out.print(\"Enter command here: \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            userCommand \u003d in.nextLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        return userCommand;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(\"Welcome to Kaji!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void showLevel(Access access) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(access.getLevel());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(LINE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void showToUser(String message) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(message);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void showToUserInline(String message) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        out.print(message);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void showCardRevision(Card c) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(c.getQuestion() + MESSAGE_SHOW_ANSWER_PROMPT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        getAnswerInput(c);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void getAnswerInput(Card c) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d in.nextLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        while (!input.trim().equalsIgnoreCase(\"s\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            out.println(\"You have entered an invalid input, please try again.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            input \u003d in.nextLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(c.getAnswer());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public String getInput(String prompt) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(prompt);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"Exiting the program...\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void showHelpList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"Here is a list of commands available:\" + \"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"1.  \" + ListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"2.  \" + ReviseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"3.  \" + HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"4.  \" + AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"5.  \" + ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(\"6.  \" + EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        out.println(\"7.  \" + RemoveCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"8.  \" + GoCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"9.  \" + BackCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"10. \" + ListDueCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        out.println(\"11. \" + HistoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"12. \" + ShowRateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        out.println(\"13. \" + RescheduleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        out.println(error);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void printDueChapters(ArrayList\u003cDueChapter\u003e dueChapters) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        for (DueChapter dueChapter : dueChapters) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"\\t-\" + dueChapter.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void printDueByTodayMessage(int listSize, String commandType) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"You have no tasks due today!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            if (commandType.equals(\"due\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                showToUser(\"Please use the \\\"preview\\\" command to view upcoming tasks or check back again tomorrow!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\"The chapter\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            System.out.print(\"s\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\" you have due by today \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"are:\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"is:\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public void printDueByIncrementMessage(int listSize, String incrementedDueBy) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"You have no tasks due on \" + incrementedDueBy + \"!\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\"The chapter\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            System.out.print(\"s\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        System.out.print(\" you have due by \" + incrementedDueBy + \" \");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (listSize \u003e 1) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"are:\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"is:\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public boolean isValidExclusionChoice(String choice) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        switch (choice.toLowerCase()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        case ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_CHAPTER:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String chooseModuleOrChapterExclusion(String type) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(ExcludeCommand.EXCLUDE_COMMAND_OPTION_MORE)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Would you like to exclude a module or chapter from your schedule?\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Would you like to include a module or chapter back into your schedule?\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        String choice \u003d readCommand();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        while (!isValidExclusionChoice(choice)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            String message \u003d \"That was not a valid choice. Please enter \\\"\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE + \"\\\" or \\\"\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Darticune"
        },
        "content": "                    + ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_CHAPTER + \"\\\".\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(message);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            choice \u003d readCommand();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return choice.toLowerCase();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getExcludedModuleName(String type) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module will you like to be excluded from your schedule?\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module does the chapter you would like to be excluded belong to?\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getExcludedChapterName(String moduleName) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        showToUser(\"Which chapter in the Module: \" + moduleName + \" would you like to exclude?\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getIncludedModuleName(String type) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        if (type.equals(ExcludeCommand.EXCLUDE_COMMAND_SECONDARY_OPTION_MODULE)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module will you like to include back into your schedule?\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Darticune"
        },
        "content": "            showToUser(\"Which module does the chapter you would like to be included belong to?\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    public String getIncludedChapterName(String moduleName) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        showToUser(\"Which chapter in the Module: \" + moduleName + \" would you like to include?\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        return readCommand().toLowerCase();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 11,
      "gua-guargia": 22,
      "neojiaern": 33,
      "Jane-Ng": 47,
      "Darticune": 141
    }
  },
  {
    "path": "src/test/java/commands/ReviseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "public class ReviseCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void rateCard_cannotAnswer_returnsSizeOne() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String question \u003d \"1+1?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String answer \u003d \"2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(ReviseCommand.rateCard(ui, cards, card, \"c\").size(), 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void rateCard_easy_returnsSizeZero() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String question \u003d \"1+1?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String answer \u003d \"2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        ArrayList\u003cCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Card card \u003d new Card(question, answer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        assertEquals(ReviseCommand.rateCard(ui, cards, card, \"e\").size(), 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 31
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import access.Access;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.IncorrectAccessLevelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_addCommandEmptyArgs_expectException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {\"add\", \"add \"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_addCardInvalidArgs_expectException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsChapterLevel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add wrong args format\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for question and answer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q: | a:\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for question"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q: | a:2\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for answer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:1+1 | a:\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question and answer separator prefix"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:1+1 a:2\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question prefix"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add 1+1 | a:2\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no answer prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:1+1 | 2\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void parse_goCommandEmptyArgs_expectException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        final String[] inputs \u003d {\"go\", \"go \"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    public void parse_backCommandWithArgs_expectException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        final String[] inputs \u003d {\"back args\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gua-guargia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_listCommandWithArgs_expectException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String input \u003d \"list args\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_exitCommandWithArgs_expectException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String input \u003d \"exit args\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_removeCommandEmptyArgs_exception() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            \"remove\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "            \"remove \","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, access));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neojiaern"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    public void parse_removeCommandNonIntegerArgs_exception() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "        String input \u003d \"remove two\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(InvalidInputException.class, () -\u003e parser.parse(input, access));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editCommandEmptyArgs_expectException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {\"edit\", \"edit \"};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editCardInvalidArgs_expectException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsChapterLevel();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit wrong args format\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // card number is not integer"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit two q:1*1 | a:\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no card number"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit q:1*1 | a:\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for question and answer"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1 q: | a:\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question and answer separator prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1 q:1*1 a:1\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no question prefix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1 1+1 | a:\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no answer prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"add q:1+1 | 2\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editModuleInvalidArgs_expectException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsAdminLevel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit wrong args format\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // module number is not integer"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit two cs2113\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no module number"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit cs2113\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for module name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editModuleInvalidCommandFormat_expectException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsAdminLevel();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String input \u003d \"edit 1 q:1+1 | a:\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editChapterInvalidArgs_expectException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit wrong args format\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // chapter number is not integer"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit two chapter 1\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no chapter number"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit chapter 1\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            // no content for chapter name"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            \"edit 1\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    public void parse_editChapterInvalidCommandFormat_expectException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        access.setIsModuleLevel();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        String input \u003d \"edit 1 q:1+1 | a:\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "        assertThrows(IncorrectAccessLevelException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    public void parse_editHistoryInvalidCommandFormat_expectException() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        Access access \u003d new Access();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        final String[] inputs \u003d {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            \"history wrong args format\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            // not date format"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            \"history 20-10-2020\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            // not yyyy-mm-dd but dd-mm-yyyy"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            \"history 10-20-2020\","
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            // not yyyy-mm-dd but mm-dd-yyyy"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            \"history 1\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        for (String input : inputs) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "            assertThrows(InvalidInputException.class, () -\u003e Parser.parse(input, access));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhu-Ze-Yu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jane-Ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ze-Yu": 17,
      "gua-guargia": 19,
      "neojiaern": 17,
      "Jane-Ng": 146
    }
  },
  {
    "path": "src/test/java/scheduler/SchedulerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Darticune"
        },
        "content": "package scheduler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neojiaern"
        },
        "content": "import manager.card.Card;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Darticune"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Darticune"
        },
        "content": "class SchedulerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void isDeadlineDue_deadlineIsDue_true() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertTrue(Scheduler.isDeadlineDue(Scheduler.getCurrentDate().minusDays(1)));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    void isDeadlineDue_deadlineNotDue_false() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Darticune"
        },
        "content": "        assertFalse(Scheduler.isDeadlineDue(Scheduler.getCurrentDate().plusDays(1)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Darticune"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Darticune"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Darticune"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neojiaern": 1,
      "Darticune": 22
    }
  }
]
