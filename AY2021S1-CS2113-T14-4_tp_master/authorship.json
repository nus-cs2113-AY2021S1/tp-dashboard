[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    mainClassName \u003d \"seedu.dietbook.DietBook\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    archiveBaseName \u003d \"dietbook\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    enableAssertions \u003d false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 2,
      "HengFuYuen": 3,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "we are an idiosyncratic and narcissistic batch of self-righteous"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "elitist who defends presumably morally questionable positions."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Also we are cheap!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Heng Fu Yuen | [Github](https://github.com/HengFuYuen) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 4,
      "HengFuYuen": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/calculator/Calculator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "package seedu.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": " * Represents a calculator of food items in foodList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "public class Calculator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalCalorie \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalCarbohydrate \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalProtein \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalFat \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Construct a calculator taking in a foodList. Add up calories,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * carbs, protein, and fats in each food item."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param foodList foodList containing food items to calculate."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public Calculator(ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assert foodList !\u003d null : \"the foodList should not be null.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalCalorie +\u003d foodList.get(i).getCalorie();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalCarbohydrate +\u003d foodList.get(i).getCarbohydrate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalProtein +\u003d foodList.get(i).getProtein();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalFat +\u003d foodList.get(i).getFats();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total calorie."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items in foodList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCalorie() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalCalorie;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total carbs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total carbs of food items in foodList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCarb() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalCarbohydrate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total protein."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total protein of food items in foodList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateProtein() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalProtein;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total fats."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total fats of food items in foodList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateFat() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalFat;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 66,
      "HengFuYuen": 1
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/DietBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.database.DataBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.list.FoodList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Main class of the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * The DietBook program is an application which can store, display and check your daily dietary intake."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DietBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private FoodList foodList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Manager manager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private DataBase dataBase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static boolean isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Constructor for new DietBook."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DietBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        dataBase \u003d new DataBase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager \u003d new Manager(foodList, dataBase);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Main method to run the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        DietBook dietBook \u003d new DietBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        dietBook.ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                String userInput \u003d dietBook.manager.readCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                Command c \u003d dietBook.manager.manage(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                c.execute(dietBook.manager, dietBook.ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            } catch (DietException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                dietBook.ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 3,
      "tikimonarch": 48
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/Manager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.CalculateCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.DataCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.InfoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.NameCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.UserinfoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.list.FoodList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.ActivityLevel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.calculator.Calculator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.database.DataBase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Manager class of the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * The manager class takes in the checked and processed input and carry out the command specified."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Initialization of important classes such as FoodList and Person is done here."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class Manager {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private FoodList foodList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private DataBase dataBase;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Calculator calculator;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private static Scanner s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_CALCULATE \u003d \"calculate\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_DATA \u003d \"data\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_INFO \u003d \"info\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_USERINFO \u003d \"userinfo\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Manager(FoodList foodlist, DataBase dataBase) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.name \u003d \"John Doe\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.person \u003d new Person(this.name, Gender.MALE, 0,0,0,0, ActivityLevel.LOW);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.foodList \u003d foodlist;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.dataBase \u003d dataBase;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.calculator \u003d new Calculator(foodList.getFoods());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return s.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public FoodList getFoodList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.foodList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.person;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void setPerson(String name, Gender gender, int age,int height,int orgWeight,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                          int targWeight, ActivityLevel actLvl) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.person \u003d new Person(name, gender, age, height, orgWeight, targWeight, actLvl);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Calculator getCalculator() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.calculator;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void setCalculator() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.calculator \u003d new Calculator(foodList.getFoods());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DataBase getDataBase() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.dataBase;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in the user input and returns the command to be carried."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return \u003ccode\u003eCommand\u003c/code\u003e for the command specified."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the program does not recognize the command given."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Command manage(String userInput) throws DietException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        Calculator calculator \u003d this.calculator;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        switch (Parser.getCommand(userInput)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_ADD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new AddCommand(Parser.getProcessedAdd(userInput, getFoodList()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_CALCULATE:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new CalculateCommand(calculator.calculateCalorie(), calculator.calculateCarb(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    calculator.calculateProtein(), calculator.calculateFat(), Parser.getCommandParam(userInput));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_CLEAR:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_DATA:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new DataCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new DeleteCommand(Parser.getCommandIndex(userInput));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_EXIT:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_HELP:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_INFO:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new InfoCommand(userInput);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_LIST:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_NAME:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new NameCommand(Parser.getCommandParam(userInput));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_USERINFO:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new UserinfoCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"There\u0027s no such command!\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 6,
      "tikimonarch": 131
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.ActivityLevel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.Gender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a text user interface."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eUi\u003c/code\u003e objects deals with user interaction by showing users the appropriate messages after a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * valid command is executed or when an error occurs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eUi\u003c/code\u003e object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods in the Ui class are organised according to their function in the order of: system related,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // database related, person related, food list related, calculator related and other helper methods."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required to print system related commands or messages."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the welcome message from DietBook when it is fist booted up."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String logo \u003d \" _______  __ ______ ________ _______   ______   ______  __    __\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|   __  \\\\|  |   ___|__    __|   __  \\\\ /  __  \\\\ /  __  \\\\|  | /  /\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  |  |  |  |  |___   |  |  |  |__|  |  |  |  |  |  |  |  |/  /\"  + LINE_SEPARATOR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  |  |  |  |   ___|  |  |  |   __  \u003c|  |  |  |  |  |  |     /\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  |__|  |  |  |___   |  |  |  |__|  |  |__|  |  |  |  |  |\\\\  \\\\\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|_______/|__|______|  |__|  |_______/ \\\\______/ \\\\______/|__| \\\\__\\\\\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(logo + LINE_SEPARATOR"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Hello! Welcome to DietBook!\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"I am Diet, your guide to using DietBook. What is your name?\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Please input in the following format:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  name YOUR_NAME\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Example: name Jack\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message asking the user to input their personal information related to dieting and health"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * which includes gender, age, height, activity level, original weight and target weight."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printAskForUserInfoMessage(String name) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(name, \"Name\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Hi \" + trimString(name) + \"!\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Before we get started, I would like to know about about you so that I can make more \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"accurate calculations for you :). Therefore, could you please share with me the \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"following:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your gender either F for \" + Gender.FEMALE.getDescription() + \" or M for \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + Gender.MALE.getDescription() +  \" or O for \" + Gender.OTHERS.getDescription() + \".\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your age which is a positive integer.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your height in cm.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your original weight in kg, the weight when you first started using DietBook or \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"you current weight.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your current weight in kg.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your target weight in kg, or your current weight if that is also your target weight.\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your activity level, represented by a number from 1 to 5.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  1 \u003d \" + ActivityLevel.NONE.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  2 \u003d \" + ActivityLevel.LOW.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  3 \u003d \" + ActivityLevel.MEDIUM.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  4 \u003d \" + ActivityLevel.HIGH.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  5 \u003d \" + ActivityLevel.EXTREME.getDescription() + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Please input your details in the following format:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT c/CURRENT_WEIGHT t/TARGET_WEIGHT \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"l/ACTIVITY_LEVEL\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Example: info g/F a/21 h/165 o/65 c/65 t/55 l/2\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an exit message when DietBook is closed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the user."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printExitMessage(String name) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(name, \"Name\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Bye \" + trimString(name) + \"! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message given what or where the error is."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param errorMessage Message detailing what or where the error is."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printErrorMessage(String errorMessage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(errorMessage,\"Error message\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\":( \" + trimString(errorMessage));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message that notifies the user that DietBook has been initialised."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printInitialisationCompleteMessage() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Thank you! DietBook has been initialised and you may start by entering any valid commands. \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"If you require a list of valid commands, you can enter: help\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a string representation of a list of the commands that users can use."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printHelpCommandMessage() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Listed below are the valid commands for DietBook:\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For database related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getDatabaseRelatedCommands() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For food list related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getFoodListRelatedCommands() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For user information related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getUserRelatedCommands() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For nutritional intake and recommendation related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getCalculatorRelatedCommands() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For other system related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getSystemRelatedCommands());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required to print database related commands or messages."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the food in the database sorted by the canteen and then the store it is found."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param foodDatabase The string representation of all the food items stored in the database."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDatabase(String foodDatabase) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(foodDatabase,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"Food database\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Here are the food items in the database:\" + LINE_SEPARATOR + foodDatabase);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the food items in the database containing the food name of the food that user wants to"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * add sorted by the canteen and then the store it is found."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * This method is only used if more than one food item in the database contains the food name given."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param matchingFoodDatabase The string representation of the food items stored in the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     database containing the food name given."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printMatchingFoodsInDatabase(String matchingFoodDatabase) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(matchingFoodDatabase,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"Matching food database\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Here are the matching food items in the database:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + matchingFoodDatabase + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Please re-enter with the full name of the food item above in the following format:\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR + \"  add n/FOOD_NAME x/PORTION_SIZE\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required to print user information related commands and messages."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the information related to the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param personInfo The user\u0027s personal information."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printPersonInfo(String personInfo) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(personInfo,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"Person information\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Here is your information:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + personInfo);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the updated information related to the user."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param personInfo The user\u0027s personal information."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printEditedPersonInfo(String personInfo) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(personInfo,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"Updated person information\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Here is your updated information:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + personInfo);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required for printing FoodList related commands and messages."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the food items in the food list in the order that they were added or a message stating"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * that the food list is empty if there are no food items."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param allFood The string representation of all the food items in the food list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFoodList(String allFood) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(allFood,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"String representation of all food in food list\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (trimStringGetLength(allFood) \u003c 1) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"DietBook is currently empty.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"Here are the food items in DietBook:\" + LINE_SEPARATOR + allFood);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints food items recorded into the food list during a given time period in the order that they were"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * added or a message stating no food items were recorded during the given time period."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param foods The string representation of food items in the food list recorded during the time"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     period given."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFoodList(String foods, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(foods,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"String representation of food items in the food list recorded during the time \""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                        + \"period given\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForTimePeriod(start, end);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (trimStringGetLength(foods) \u003c 1) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"No food item was recorded in DietBook\" + stringDateTimePeriod(start, end) + \".\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"Here are the food items recorded in DietBook\" + stringDateTimePeriod(start, end) + \":\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                    + LINE_SEPARATOR + foods);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the food specified has been added to the food list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newFood The string representation of the new food item that was added to the food list."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printNewFood(String newFood) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(newFood,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"String representation of the food that was added\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Got it! I\u0027ve added this food item:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  \" + trimString(newFood));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the food specified has been deleted from the food list."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param deletedFood The string representation of the food that was deleted from the food list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDeletedFood(String deletedFood) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(deletedFood,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"String representation of the food that was deleted\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Noted. I\u0027ve removed this food item:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  \" + trimString(deletedFood));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the food list has been successfully cleared and is now empty."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printClearFoodListMessage() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"All previous data has been deleted...\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"DietBook is now empty.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required to print nutritional intake and recommendation related commands and messages."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the daily recommended calorie intake of the user based on the user\u0027s personal information."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieRecommendation The daily recommended calorie intake of the user."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCalorieRecommendation(String name, int calorieRecommendation) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(name, \"Name\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForCalorieRecommendation(calorieRecommendation);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Hi \" + trimString(name) + \"!\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Here is your daily recommended calorie intake: \" + calorieRecommendation + \"kcal\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of carbohydrates consumed by the user and the list of food items which had"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total carbohydrate intake."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of all the food in the food list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCarbIntakeAndFoods(int carbIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringOneIntakeAndFoodsWithoutTime(carbIntake,\"carbohydrate\","
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"g\", recalculatedFoods));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of carbohydrates consumed by the user within a given time period and a list of"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the foods recorded into the food list during the same time period which had their nutritional"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information recalculated by DietBook if any."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total carbohydrate"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * intake within a given time period."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of food in the food list recorded during the"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCarbIntakeAndFoods(int carbIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                        LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String carbIntakeAndFoodsWithoutTime \u003d stringOneIntakeAndFoodsWithoutTime(carbIntake,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"carbohydrate\", \"g\", recalculatedFoods);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(carbIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories consumed by the user and the list of food items which had"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total calorie intake."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of all the food in the food list."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCalorieIntakeAndFoods(int calorieIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringOneIntakeAndFoodsWithoutTime(calorieIntake,\"calorie\",\"kcal\","
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                recalculatedFoods));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories consumed by the user within a given time period and a list of"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the foods recorded into the food list during the same time period which had their nutritional"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information recalculated by DietBook if any."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total calorie"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * intake within a given time period."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of food in the food list recorded during the"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCalorieIntakeAndFoods(int calorieIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                           LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String calorieIntakeAndFoodsWithoutTime \u003d stringOneIntakeAndFoodsWithoutTime(calorieIntake,"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"calorie\", \"kcal\", recalculatedFoods);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(calorieIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of proteins consumed by the user and the list of food items which had"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total protein intake."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of all the food in the food list."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printProteinIntakeAndFoods(int proteinIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringOneIntakeAndFoodsWithoutTime(proteinIntake,\"protein\",\"g\","
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                recalculatedFoods));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of proteins consumed by the user within a given time period and a list of"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the foods recorded into the food list during the same time period which had their nutritional"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information recalculated by DietBook if any."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total protein"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * intake within a given time period."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of food in the food list recorded during the"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printProteinIntakeAndFoods(int proteinIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                           LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String proteinIntakeAndFoodsWithoutTime \u003d stringOneIntakeAndFoodsWithoutTime(proteinIntake,"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"protein\", \"g\", recalculatedFoods);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(proteinIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of fats consumed by the user and the list of food items which had"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total fat intake."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of all the food in the food list."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFatIntakeAndFoods(int fatIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringOneIntakeAndFoodsWithoutTime(fatIntake,\"fat\",\"g\","
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                recalculatedFoods));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of fats consumed by the user within a given time period and a list of"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the foods recorded into the food list during the same time period which had their nutritional"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information recalculated by DietBook if any."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total fat"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * intake within a given time period."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of food in the food list recorded during the"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFatIntakeAndFoods(int fatIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String fatIntakeAndFoodsWithoutTime \u003d stringOneIntakeAndFoodsWithoutTime(fatIntake,"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"fat\", \"g\", recalculatedFoods);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(fatIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories, carbohydrates, fats and proteins consumed by the user and the"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating the individual intakes."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of all the food in the food list."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of all the food in the food list."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of all the food in the food list."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of all the food in the food list."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printAllIntakeAndFoods(int calorieIntake, int carbIntake, int proteinIntake,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       int fatIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringAllIntakeAndFoodsWithoutTime(carbIntake, calorieIntake,proteinIntake,"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                fatIntake, recalculatedFoods));"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of total amount of calories, carbohydrates, fats and proteins consumed by"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the user within a given time period and a list of the foods recorded into the food list during the"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * same time period which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating the individual intake"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * within a given time period."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of food in the food list recorded during the"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of food in the food list recorded during the"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of food in the food list recorded during the"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of food in the food list recorded during the"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printAllIntakeAndFoods(int calorieIntake, int carbIntake, int proteinIntake,"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       int fatIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String allIntakeAndFoodsWithoutTime \u003d stringAllIntakeAndFoodsWithoutTime(carbIntake, calorieIntake,"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                proteinIntake,fatIntake, recalculatedFoods);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(allIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Helper methods for system related commands or messages"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of system related commands that users can input."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of system related commands that users can input."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getSystemRelatedCommands() {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To view a list of valid commands: help\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To exit DietBook: exit\";"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of nutritional intake and recommendation related commands"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * that users can input."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of nutritional intake and recommendation related commands"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     that users can input."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getCalculatorRelatedCommands() {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To get recommended calorie intake: recommend\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate carbohydrate intake: calculate carbohydrate\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate carbohydrate intake within a time period: calculate carbohydrate \""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate carbohydrate intake from a certain date until now: calculate carbohydrate \""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyy-mm-ddTHH:mm\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate calorie intake: calculate calorie\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate calorie intake within a time period: calculate calorie yyyy-mm-ddTHH:mm \""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate calorie intake from a certain date until now: calculate calorie \""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate protein intake: calculate protein\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate protein intake within a time period: calculate protein yyyy-mm-ddTHH:mm \""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate protein intake from a certain date until now: calculate protein \""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate fat intake: calculate fat\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate fat intake within a time period: calculate fat yyyy-mm-ddTHH:mm \""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate fat intake from a certain date until now: calculate fat \""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate all nutritional intake: calculate all\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate all nutritional intake within a time period: calculate all \""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate all nutritional intake from a certain date until now: calculate all \""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of user information related commands that users can input."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of user information related commands that users can input."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getUserRelatedCommands() {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To show user information: userinfo\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To edit user information: editinfo [n/NAME] [g/GENDER] [a/AGE] [h/HEIGHT] \""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"[o/ORIGINAL_WEIGHT] [c/CURRENT_WEIGHT] [t/TARGET_WEIGHT] [l/ACTIVITY_LEVEL]\""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of food list related commands that users can input."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of food list related commands that users can input."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getFoodListRelatedCommands() {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To add you own food: add x/PORTION_SIZE n/FOOD_NAME k/CALORIE [c/CARBOHYDRATE] \""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"[p/PROTEIN] [f/FAT]\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To view all food in DietBook: list\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To view all food in DietBook recorded within a time period: list yyyy-mm-ddTHH:mm \""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To view all food in DietBook recorded from a certain date until now: list \""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm \" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To delete a food from DietBook: delete INDEX\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To delete all food items from the DietBook: clear\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of database related commands that users can input."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of database related commands that users can input."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getDatabaseRelatedCommands() {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To add a food from the database: add n/FOOD_NAME x/PORTION_SIZE\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To view all food in the database: data\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Helper methods for calculator related commands and messages"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string with a header and recalculatedFoods or a string stating that no food items had their"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * nutritional information recalculated if calculatedFoods is an empty string."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string with a header and recalculatedFoods or a string stating that no food items had their"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated if calculatedFoods is an empty string."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String recalculatedFoodsMessage(String recalculatedFoods) {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String message \u003d \"No food items had their nutritional information recalculated by DietBook.\";"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (trimStringGetLength(recalculatedFoods) \u003e 0) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            message \u003d \"Food items which had their nutritional information recalculated by DietBook: \""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                    + LINE_SEPARATOR + recalculatedFoods;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Return a string representation of  the amount of a nutrient consumed by the user which can be either"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the total amount consumed or amount consumed in a given time period."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientIntake The amount of a particular type of nutrient consumed."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientType A string representation of the type of nutrient consumed."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientUnit A string representation of the unit of the nutrient consumed."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The amount of a nutrient consumed by the user which can be either the total amount consumed"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     or amount consumed in a given time period."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String stringNutritionalIntake(int nutrientIntake, String nutrientType, String nutrientUnit) {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"Total \" + nutrientType + \" intake: \" + nutrientIntake + nutrientUnit;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the total amount of a nutrient consumed by the user and"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientIntake The amount of a particular type of nutrient consumed."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientType A string representation of the type of nutrient consumed."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientUnit A string representation of the unit of the nutrient consumed."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the the total amount of a nutrient consumed by the user and"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     the list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String stringOneIntakeAndFoodsWithoutTime(int nutrientIntake, String nutrientType,"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                                      String nutrientUnit, String recalculatedFoods) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(nutrientType,\"Nutrient Type\");"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(nutrientUnit, \"Nutrient Unit\");"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(nutrientIntake, nutrientType);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(recalculatedFoods,"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"List of foods that had their nutritional information recalculated\");"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringNutrientIntake \u003d stringNutritionalIntake(nutrientIntake, nutrientType, nutrientUnit);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String message \u003d recalculatedFoodsMessage(recalculatedFoods);"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return stringNutrientIntake + LINE_SEPARATOR + message;"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the total amount of a nutrient or all nutrientS consumed by the"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * user  during a given time period and the list of food items recorded during the same time period"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param intakeAndFoodsWithoutTime A string representation of the the total amount of a nutrient or"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     all nutrients consumed by the user and the list of food items which had their nutritional"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     information recalculated by DietBook if any."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the the total amount of a nutrient or all nutrient consumed by the"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     user during a given time period and the list of food items recorded during the same time period"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String stringIntakeAndFoodsWithTime(String intakeAndFoodsWithoutTime,"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                                LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForTimePeriod(start, end);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String timePeriod \u003d \"Time period:\" + stringDateTimePeriod(start, end);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return timePeriod + LINE_SEPARATOR + LINE_SEPARATOR + intakeAndFoodsWithoutTime;"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the total amount of all nutrients consumed by the user and"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of all the food in the food list."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of all the food in the food list."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of all the food in the food list."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of all the food in the food list."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the total amount of all nutrients consumed by the user and"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     the list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String stringAllIntakeAndFoodsWithoutTime(int carbIntake, int calorieIntake, int proteinIntake,"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                                     int fatIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(carbIntake, \"carbohydrate\");"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(calorieIntake, \"calorie\");"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(proteinIntake, \"protein\");"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(fatIntake, \"fat\");"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(recalculatedFoods,"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"List of foods that had their nutritional information recalculated\");"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringCarbIntake \u003d stringNutritionalIntake(carbIntake,\"carbohydrate\", \"g\");"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringCalorieIntake \u003d stringNutritionalIntake(calorieIntake,\"calorie\","
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"kcal\");"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringProteinIntake \u003d stringNutritionalIntake(proteinIntake,\"protein\", \"g\");"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringFatIntake \u003d stringNutritionalIntake(fatIntake,\"fat\", \"g\");"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String message \u003d recalculatedFoodsMessage(recalculatedFoods);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return stringCarbIntake + LINE_SEPARATOR"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + stringCalorieIntake + LINE_SEPARATOR"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + stringProteinIntake + LINE_SEPARATOR"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + stringFatIntake + LINE_SEPARATOR"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + message;"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Other helper methods"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the given message to the user."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param message The message to show the user."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void print(String message) {"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(message, \"Message to print\");"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String divider \u003d"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"__________________________________________________________________________________________\""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"___________________________________________\";"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(divider + LINE_SEPARATOR"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + trimString(message) + LINE_SEPARATOR"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + divider);"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the time period with date time in the format dd MMM yyyy HHmm."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given that needs to be converted into a String."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given that needs to be converted into a String."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The string representation of time period with date time in the format dd MMM yyyy HHmm."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String stringDateTimePeriod(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForTimePeriod(start, end);"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringStart \u003d start.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"));"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringEnd \u003d end.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"));"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \" between \" +  stringStart + \" and \" + stringEnd;"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns an integer representing the length of the string after it has been trimmed for leading and"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * trailing spaces."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param string The string to be trimmed and have its length determined."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return An integer representing the length of the string after it has been trimmed for leading and"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     trailing spaces."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int trimStringGetLength(String string) {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(string, \"String to trim and have length determined\");"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return trimString(string).length();"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string that has been trimmed for leading and trailing spaces."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param string The string to be trimmed for leading and trailing spaces."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string that has been trimmed for leading and trailing spaces."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String trimString(String string) {"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(string, \"String to trim\");"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return string.trim();"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for the string inputs."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param string The input value."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param stringDescription A description of what the input value represents."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForStringInputs(String string, String stringDescription) {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(string, stringDescription);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert trimStringGetLength(string) \u003e 0 : stringDescription + \" should not be an empty string\";"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for the time inputs."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForTimePeriod(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert start !\u003d null : \"Starting date time of the time period given should not be null\";"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert end !\u003d null : \"Ending date time of the time period given should not be null\";"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert !start.isAfter(end) : \"Starting date time should not be later than ending date time \""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"of the time period\";"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert start.isBefore(LocalDateTime.now()) : \"Starting date time of the time period given should \""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"not be in the future\";"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert end.isBefore(LocalDateTime.now()) : \"Ending date time of the time period given should not be\""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \" in the future\";"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for null string inputs."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param string The input value."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param stringDescription A description of what the input value represents."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForNullStringInputs(String string, String stringDescription) {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert string !\u003d null : stringDescription + \" should not be null\";"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for nutritional intake inputs."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientIntake The nutritional intake value."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientType The nutrient type."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForNutritionalIntake(int nutrientIntake, String nutrientType) {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert nutrientIntake \u003e\u003d 0 : \"Total \" + nutrientType + \" intake should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for the calorie recommendation input."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieRecommendation The recommended daily calorie intake for the user."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForCalorieRecommendation(int calorieRecommendation) {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        // A minimum daily intake of 1200 calorie is required to stay healthy."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert calorieRecommendation \u003e\u003d 1200 : \"Daily calorie recommendation should be equals to or greater\""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \" than 1200\";"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        // Highest calorie intake for an athlete currently stands at 12000."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert calorieRecommendation \u003c\u003d 12000 : \"Daily calorie recommendation should be equals to or less \""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"than 12,000\";"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 814
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/checker/InputChecker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.checker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * InputChecker class of the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * This class checks the validity of the user input and throws an exception if input is not as intended/expected."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class InputChecker {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * The value limits are based on current limits observed in th world."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final int AGE_CAP \u003d 125;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final int FOOD_CAP \u003d 100000;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final int HEIGHT_CAP \u003d 273;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final int WEIGHT_CAP \u003d 443;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_ACTIVITY \u003d {\"1\",\"2\",\"3\",\"4\",\"5\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_ADD \u003d {\"n/\",\"x/\",\"k/\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_CALCULATE \u003d {\"fat\", \"carbohydrate\",\"protein\", \"calorie\", \"all\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_GENDER \u003d {\"M\",\"F\",\"O\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_INFO \u003d {\"g/\",\"a/\",\"h/\",\"l/\",\"o/\",\"t/\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input and command to check for any expected parameters after the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param command command in user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when at least one parameter is expected but not present."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkEmpty(String userInput, String command) throws DietException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (userInput.split(command).length \u003c 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                || userInput.split(command)[1].equals(\" \")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Error! Missing command parameters!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in processed user input to check for options specified with an empty field."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when an option is specified but its field is empty."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkEmptyOption(String[] input) throws DietException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (input[1].trim().charAt(1) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                throw new DietException(\"Error! Option specified with empty field!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Error! Option specified with empty field!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the expected number and type of parameter for the add command is present."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when expected parameters are missing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkAddParam(String userInput) throws DietException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_ADD) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (!userInput.contains(param)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                throw new DietException(\"Missing or incorrect add statement\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the expected number and type of parameter for the info command is present."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when expected parameters are missing."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkInfoParam(String userInput) throws DietException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_INFO) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (!userInput.contains(param)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                throw new DietException(\"Missing or incorrect info statement\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in an integer from food to check if the value is within the logical limit."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param foodValue integer value of attributes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when value is not within the limit."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkFoodLimit(int foodValue) throws DietException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (foodValue \u003c 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be less than 0!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (foodValue \u003e FOOD_CAP) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be more than 100,000!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the nutrient type is of the expected input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when it is not one of the expected nutrient type."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkNutrientType(String userInput) throws DietException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        boolean checkContain \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_CALCULATE) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (userInput.contains(param)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                checkContain \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (!checkContain) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Incorrect nutrient type!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the activity level is of the expected input."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when it is not one of the expected activity level."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkActivity(String userInput) throws DietException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        boolean checkContain \u003d false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_ACTIVITY) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (userInput.contains(param)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                checkContain \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (!checkContain) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"No such activity level!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the gender is of the expected input."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when it is not one of the expected gender input."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkGender(String userInput) throws DietException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        boolean checkContain \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_GENDER) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (userInput.contains(param)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                checkContain \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (!checkContain) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please key in the specified gender characters.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in an integer age to check if the value is within the logical limit."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param age integer value of age."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when value is not within the limit."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkAgeLimit(int age) throws DietException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (age \u003c 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be less than 0!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (age \u003e AGE_CAP) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be more than 125!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in an integer height to check if the value is within the logical limit."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param height integer value of height."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when value is not within the limit."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkHeightLimit(int height) throws DietException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (height \u003c 0) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be less than 0!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (height \u003e HEIGHT_CAP) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be more than 273!\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in an integer weight to check if the value is within the logical limit."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param weight integer value of weight."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when value is not within the limit."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkWeightLimit(int weight) throws DietException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (weight \u003c 0) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be less than 0!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (weight \u003e WEIGHT_CAP) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be more than 443!\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 194
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    String foodName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public AddCommand(String foodName) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printNewFood(this.foodName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.setCalculator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 18
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/CalculateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class CalculateCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int calorie;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int carb;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int protein;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int fat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    String param;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public CalculateCommand(int calorie, int carb, int protein, int fat, String param) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.carb \u003d carb;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.param \u003d param;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.setCalculator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        switch (this.param) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case \"all\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printAllIntakeAndFoods();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printAllNutrientIntake(this.calorie, this.carb, this.protein, this.fat);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case \"calorie\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printCalorieIntakeAndFoods();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printCalorieIntake(this.calorie);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case \"carbohydrate\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printCarbIntakeAndFoods();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printCarbohydrateIntake(this.carb);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case \"protein\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printProteinIntakeAndFoods();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printProteinIntake(this.protein);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printFatIntakeAndFoods();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printFatIntake(this.fat);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10,
      "tikimonarch": 36
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printClearFoodListMessage();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.getFoodList().clear();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 12
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * The command parent class for all commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * All commands have an execute method that takes in objects \u003ccode\u003eManager\u003c/code\u003e and \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Each child command class is self-explanatory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public abstract void execute(Manager manager, Ui ui) throws DietException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 17
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/DataCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DataCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.getDataBase().init();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        //ui.printDatabase(manager.getDataBase().getFoodList());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "tikimonarch": 12
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printDeletedFood(manager.getFoodList().delete(this.index));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            manager.setCalculator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"No such index!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 23
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.DietBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printExitMessage(manager.getName());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        DietBook.isExit \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 13
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printHelpCommandMessage();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "tikimonarch": 10
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/InfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class InfoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public InfoCommand(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        Parser.executeProcessedInfo(this.userInput, manager);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printInitialisationCompleteMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "tikimonarch": 19
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printFoodList(manager.getFoodList().toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 11
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/NameCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class NameCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public NameCommand(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.setName(this.name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printAskForUserInfoMessage(manager.getName());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 20
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/UserinfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class UserinfoCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printPersonInfo(manager.getPerson().toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 11
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/database/Canteen.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Canteen {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final ArrayList\u003cStore\u003e storeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Canteen(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.storeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Name of the canteen is for filtering purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return name of canteen"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addStore(Store store) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        storeList.add(store);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cStore\u003e getStoreList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return storeList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 30,
      "HengFuYuen": 1
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/database/DataBase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DataBase {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String START_SYMBOL \u003d \"\u0026%START\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String STOP_SYMBOL \u003d \"\u0026%STOP\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String UP_SYMBOL \u003d \"\u0026%UP\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String DATA_FILE_SEPERATOR \u003d \"\\\\|\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final List\u003cCanteen\u003e canteenList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Instantiate an empty Database object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DataBase() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.canteenList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Loads and parses the resource main/resource/data.txt"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * This data is used to build the internal canteenList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        InputStream dataStream \u003d DataBase.class.getResourceAsStream(\"/data.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assert (dataStream !\u003d null) : \"Could not load resource\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Scanner fileReader \u003d new Scanner(dataStream);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileLine;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        boolean start \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileLine \u003d fileReader.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            // ------ Check if the data base has started scanning ------"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (fileLine.equals(START_SYMBOL)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                start \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (!(start)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (fileLine.equals(STOP_SYMBOL)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            canteenList.add(fillCanteen(fileLine, fileReader));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function is called right after the canteen name is provided"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The very next line that the file reads is the store name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * It will turn call fillStore with that name inserted, when the function fillStore"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * finishes executing, fileRead.nextLine() can either provide a new store name or UP_SYMBOL"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * if the UP_SYMBOL is provided, the function ends and the final Canteen object is returned."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param name name of store"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileSegment the file reader with the next line being a food item or UP_SYMBOL"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Canteen objected with all it\u0027s stores loaded"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Canteen fillCanteen(String name, Scanner fileSegment) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Canteen canteen \u003d new Canteen(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (!(fileLine.equals(UP_SYMBOL))) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            canteen.addStore(fillStore(fileLine,fileSegment));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteen;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function is called right after the store name is provided."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The very next line in the file should be the first food to be added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The function stops when it hits the line of the file that says UP_SYMBOL."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param name name of the store"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileSegment the Scanner object used for the init() function"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return the completed store with all the food loaded"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Store fillStore(String name, Scanner fileSegment) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Store store \u003d new Store(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Food food;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String[] fileData \u003d fileLine.split(DATA_FILE_SEPERATOR);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (!(fileLine.equals(UP_SYMBOL))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            food \u003d new Food(fileData[0], Integer.parseInt(fileData[1]), Integer.parseInt(fileData[2]),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            Integer.parseInt(fileData[3]), Integer.parseInt(fileData[4]));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            store.addFood(food);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileData \u003d fileLine.split(DATA_FILE_SEPERATOR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Debugging function prints out all contents."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void printAllData() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Printing out all data\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (Canteen canteen : canteenList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Canteeh : \" + canteen.getName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            for (Store store : canteen.getStoreList()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                System.out.println(\"Store : \" + store.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                for (Food food : store.getFoodList()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    System.out.println(food);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Finished Printing out all data\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    // -------- Search functions --------"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This method searchs the whole data base and returns the first food item whose name contains the provided string."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * ( CASE SENSITIVE ! )"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food part of the name of the food"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no food contains the name provided"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food searchFoodByName(String food) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getName().contains(food)).findFirst().orElseThrow();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This method searchs the whole data base and returns all of the food whose name contains the provided string."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food part of the name of the food e.g. chicken"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return data stream of all food items"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodContainingName(String food) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getName().contains(food));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Search for the first food that contains the string provided in the first store which matchs the store"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * string provided."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food partial name of the food"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param store partial name of the store"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no food contains the name provided"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food searchFoodByNameByStore(String food, String store) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return searchAllFoodByStore(store)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(food))"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a stream of all the food in the first store that contains the given string."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param store partial name of the store"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return food stream"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no there is no store"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodByStore(String store) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getStoreList().stream())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(store))"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .getFoodList()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .stream();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a stream of all the food in all stores that contains the given string."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param store partial name of the store"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return  food stream"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodOfAllStores(String store) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getStoreList().stream())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(store))"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getFoodList().stream());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns the first food that contains the food String provided that is in the first canteen that contains the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * canteen String provided."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food partial name of the food"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param canteen partial name of the canteen"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no food contains the name provided"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food searchFoodByNameByCanteen(String food, String canteen) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return searchAllFoodByNameByCanteen(food, canteen)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns all food that contains the provided food name in the first canteen that matchs the canteen name."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food partial name of the food"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param canteen partial name of the canteen"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food Stream"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodByNameByCanteen(String food, String canteen) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(canteen))"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .getStoreList()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getFoodList().stream())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(food));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a stream of food whose calorie is below the provided amount."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param calorie the maximum calorie of the food"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return food stream"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodBelowCalorie(int calorie) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getCalorie() \u003c calorie);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns all food within the calorie range."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param minCalorie minimum calories"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param maxCalorie maximum calories"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return food stream"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodInCalorieRange(int minCalorie, int maxCalorie) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getCalorie() \u003c\u003d maxCalorie \u0026\u0026 x.getCalorie() \u003e\u003d minCalorie);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Provides a data stream of all the food in the data base."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return a food stream"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e foodStream() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getStoreList().stream())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getFoodList().stream());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Provide a list of all food in the data base."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 245,
      "HengFuYuen": 2,
      "mxksowie": 17
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/database/Store.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Store {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final ArrayList\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Store(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The name of the store will be used for filtering purposes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return store name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function should only be called when we initialize the data base from the text file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 38,
      "HengFuYuen": 2
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/exception/DietException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DietException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DietException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 12
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Constructor of the Food class"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Store information regarding a food item: name, number of calories in kcal, amount of carbohydrate in grams,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * amount of protein in grams, amount of fats in grams."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int calorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int carbohydrate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int protein;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int fats;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food(String name, int calorie, int carbohydrate, int protein, int fats) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.carbohydrate \u003d carbohydrate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fats \u003d fats;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getFats() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return fats;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getCalorie() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getCarbohydrate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return carbohydrate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getProtein() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return protein;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name + \" | calorie : \" + calorie + \" | protein : \" + protein + \" | carbohydrate : \" + carbohydrate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                + \" | fats : \" + fats;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 48,
      "HengFuYuen": 1
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/FoodEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Data class to store both serving sizes and a food object as a single object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodEntry {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private int portionSize;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private Food food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public FoodEntry(int portionSize, Food food) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.portionSize \u003d portionSize;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public FoodEntry(int portionSize, String name, int calorie, "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            int carbohydrate, int protein, int fat) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.portionSize \u003d portionSize;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.food \u003d new Food(name, calorie, carbohydrate, protein, fat);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public Food getFood() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public int getPortionSize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return portionSize;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return String.format(\"%s -- (%s)\", food.toString(), portionSize);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 2,
      "mxksowie": 35
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/FoodList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Wrapper class for the implementation of foodlist as an arraylist of foodEntry objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Foodlist does not return its ArrayList nor foodEntry objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * This is a stateful object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private ArrayList\u003cFoodEntry\u003e foodEntries;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public FoodList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.foodEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected FoodList(ArrayList\u003cFoodEntry\u003e entries) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.foodEntries \u003d entries;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Adds food of portion size directly into the foodlist as an entry."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * When date functionality is added, this method will need to be overhauled."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * The adding feature will be largely pushed to FoodListManager (to figure out dates)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param portionSize integer to designate number of servings"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param food food object to be added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return string representation of the food object added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFood(int portionSize, Food food) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodEntry toAdd \u003d new FoodEntry(portionSize, food);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        foodEntries.add(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return toAdd.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFood(int portionSize, String name, int calorie, "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            int carbohydrate, int protein, int fat) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodEntry toAdd \u003d new FoodEntry(portionSize, name, calorie, carbohydrate, protein, fat);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        foodEntries.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return toAdd.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Food database search functionality support."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Not expected to function. Added for completeness."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Currently just throws a not found exception when called in this manner."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param portionSize integer to designate number of servings"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param name food object to be added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return string representation of the food object added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @throws FoodNotFoundException custom exception to indicate search for food in database failed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFood(int portionSize, String name) throws FoodNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String delete(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            return FoodListManager.deleteEntry(foodEntries, index).toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public boolean clear() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.foodEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain the food objects in Foodlist as an ArrayList."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * For other classes that wish to operate on the Food items directly."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return Arraylist of ordered Food objects in Foodlist\u0027s foodEntries."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public ArrayList\u003cFood\u003e getFoods() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToFoods(foodEntries);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToString(foodEntries);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 2,
      "mxksowie": 83
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/FoodListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Class with static methods to execute \"complex commands\" on FoodList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * This class handles methods that extend beyond the simple function of an arraylist"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Class contains static methods with logic beyond adding, removing, and instantiating new lists"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * This class may be used to support functional programming by merging these function into functors"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodListManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Internal helper method to convert the items in the arraylist into enumed strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Primarily used to obtain String representations of the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static String listToString(ArrayList\u003cFoodEntry\u003e list) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        String listString \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            FoodEntry entry \u003d list.get(i - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            listString +\u003d i + \". \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                    + entry.toString() + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return listString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Similar to listToString."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Extracts only the Food component from FoodEntries."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static ArrayList\u003cFood\u003e listToFoods(ArrayList\u003cFoodEntry\u003e list) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        ArrayList\u003cFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        list.forEach(x -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            foods.add(x.getFood());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static Food deleteEntry(ArrayList\u003cFoodEntry\u003e list, int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        int indexToDelete \u003d index - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            return list.remove(indexToDelete).getFood();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 2,
      "mxksowie": 47
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/FoodNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodNotFoundException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "mxksowie": 3
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.list.FoodList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.Gender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.ActivityLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.checker.InputChecker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Parser class of the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * The parser class takes in user input and process it into command data that manager can use."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_INFO \u003d \"info\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_CALCULATE \u003d \"calculate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_INFO \u003d {\"g/\",\"a/\",\"h/\",\"l/\",\"o/\",\"t/\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Returns the command of a user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput which is user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return First word which is the command of the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static String getCommand(String userInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Returns the subsequent parameter after the command from the user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return parameter part of the user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static String getCommandParam(String userInput) throws DietException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String command \u003d getCommand(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        InputChecker.checkEmpty(userInput, command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_NAME:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return userInput.split(\"name\")[1].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_CALCULATE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            InputChecker.checkNutrientType(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return userInput.split(\"calculate\")[1].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_ADD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            InputChecker.checkAddParam(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return userInput.substring(userInput.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_INFO:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            InputChecker.checkInfoParam(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return userInput.substring(userInput.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Processes the parameters for \u003ccode\u003eadd\u003c/code\u003e command of user input and adds a \u003ccode\u003eFood\u003c/code\u003e object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param foodList the FoodList object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return name of the food that was added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static String getProcessedAdd(String userInput, FoodList foodList) throws DietException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int portionSize \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String foodName \u003d \"Food Name\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int calorie \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int carb \u003d -1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int protein \u003d -1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int fat \u003d -1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String trimmedParam;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String[] processedParam;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String[] paramList \u003d {\"x/\", \"n/\", \"k/\", \"c/\", \"p/\", \"f/\"};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: paramList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (getCommandParam(userInput).contains(param)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                processedParam \u003d getCommandParam(userInput).split(param);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkEmptyOption(processedParam);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                trimmedParam \u003d processedParam[1].trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                if (processedParam[1].contains(\"/\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    trimmedParam \u003d processedParam[1].substring(0, processedParam[1].indexOf(\"/\") - 2).trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                switch (param) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"x/\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    portionSize \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(portionSize);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"n/\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    foodName \u003d trimmedParam;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"k/\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    calorie \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(calorie);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"c/\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    carb \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(carb);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"p/\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    protein \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(protein);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    fat \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(fat);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return foodList.addFood(portionSize, foodName, calorie, carb, protein, fat);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Processes the parameters for \u003ccode\u003einfo\u003c/code\u003e command of user input and updates the \u003ccode\u003ePerson\u003c/code\u003e object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param manager the manager object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void executeProcessedInfo(String userInput, Manager manager) throws DietException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        Gender gender \u003d Gender.MALE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ActivityLevel actLvl \u003d ActivityLevel.NONE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int age \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int height \u003d 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int orgWeight \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int tarWeight \u003d 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String trimmedParam;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String[] processedParam;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_INFO) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            processedParam \u003d getCommandParam(userInput).split(param);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            InputChecker.checkEmptyOption(processedParam);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            trimmedParam \u003d processedParam[1].trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (processedParam[1].contains(\"/\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                trimmedParam \u003d processedParam[1].substring(0, processedParam[1].indexOf(\"/\") - 2).trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            switch (param) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"g/\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                String processGender \u003d trimmedParam;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkGender(processGender);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                if (processGender.equals(\"M\")) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    gender \u003d Gender.MALE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    gender \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"a/\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                age \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkAgeLimit(age);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"h/\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                height \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkHeightLimit(height);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"o/\":"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                orgWeight \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkWeightLimit(orgWeight);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"t/\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                tarWeight \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkWeightLimit(tarWeight);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                String processActLvl \u003d trimmedParam;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkActivity(processActLvl);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                if (processActLvl.equals(\"1\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.NONE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                } else if (processActLvl.equals(\"2\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.LOW;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                } else if (processActLvl.equals(\"3\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.MEDIUM;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                } else if (processActLvl.equals(\"4\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.HIGH;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.EXTREME;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.setPerson(manager.getName(), gender, age, height, orgWeight, tarWeight, actLvl);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Returns the index after the command of a user input, e.g. delete 3."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return index part of the user input."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static int getCommandIndex(String userInput) throws DietException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String command \u003d getCommand(userInput);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        InputChecker.checkEmpty(userInput, command);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return Integer.parseInt(userInput.split(\" \")[1]);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"OOPS!!! No integer index detected!\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 3,
      "tikimonarch": 204
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/person/ActivityLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents the physical activity level of a person or the amount of exercise a person engages in."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * An \u003ccode\u003eActivityLevel\u003c/code\u003e has a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public enum ActivityLevel {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    NONE(\"You hardly engage in any exercise or have a job that requires little to no physical \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"activity.\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    LOW(\"You engage in some form of light exercise or have a job that requires some \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"physical activity.\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    MEDIUM(\"You engage in moderate amount of exercise or have a job that requires moderate \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"physical activity.\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    HIGH(\"You engage in vigorous exercise or have a physically demanding job.\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    EXTREME(\"You engage in extremely vigorous exercise or have an extremely physically demanding\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \" job.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs an \u003ccode\u003eActivityLevel\u003c/code\u003e given the description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description The description of the activity level."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    ActivityLevel(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the description of the activity level."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The description of the activity level."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 37
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/person/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents the gender of a person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eGender\u003c/code\u003e has a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    FEMALE(\"female\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    MALE(\"male\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    OTHERS(\"others\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eGender\u003c/code\u003e given the description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description The description of the gender."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    Gender(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the description of the gender."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The description of the gender."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 32
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a Person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003ePerson\u003c/code\u003e has a name, gender, age, height, certain activity level, original and desired weight."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The height of the person in cm */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The original weight of the person in kg */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int originalWeight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The target weight of the person in kg */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int targetWeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private ActivityLevel activityLevel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003ePerson\u003c/code\u003e with the given name, gender, age, height, original weight, target"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * weight and activity level."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the person."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param gender The gender of the person."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param age The age of the person."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param height The height of the person."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param originalWeight The original weight of the person."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param targetWeight The target/desired weight that the person wants to achieve."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param activityLevel The activity level of the person or in other words, the amount of exercise the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     person engages in."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Person(String name, Gender gender, int age, int height, int originalWeight, int targetWeight,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                  ActivityLevel activityLevel) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name !\u003d null : \"Name of person should not be null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name.trim().length() \u003e 0 : \"Name of person should not be an empty string\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert gender !\u003d null : \"Gender of person should not be null\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert age \u003e 0 : \"Age of person should be greater than 0\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert age \u003c 125 : \"Age of person should be less than 125\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert height \u003e 0 : \"Height of person should be greater than 0\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert height \u003c 273 : \"Height of person should be less than 273\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert originalWeight \u003e 0 : \"Original weight of person should be greater than 0\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert originalWeight \u003c 443 : \"Original weight of person should be less than 443\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert targetWeight \u003e 0 : \"Target weight of person should be greater than 0\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert targetWeight \u003c 443 : \"Target weight of person should be less than 443\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert activityLevel !\u003d null : \"Activity level of person should not be null\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.name \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.originalWeight \u003d originalWeight;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the name of the person."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The name of the person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the name of the person to the new name given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newName The new/revised name of the person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setName(String newName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newName !\u003d null : \"The revised name of person should not be null\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newName.trim().length() \u003e 0 : \"The revised name of person should not be an empty string\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        name \u003d newName.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the gender of the person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The gender of the person."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the gender of the person to the new gender given."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newGender The new/revised gender of the person."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setGender(Gender newGender) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newGender !\u003d null : \"The revised gender of person should not be null\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        gender \u003d newGender;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the age of the person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The age of the person."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the age of the person to the new age that is given."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newAge The new/revised age of the person."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setAge(int newAge) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newAge \u003e 0 : \"The revised age of person should be greater than 0\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newAge \u003c 125 : \"The revised age of person should be lesser than 125\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        age \u003d newAge;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the height of the person."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The height of the person."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the height of the person to the new height given."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newHeight The new/revised height of the person."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setHeight(int newHeight) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newHeight \u003e 0 : \"The revised height of person should be greater than 0\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newHeight \u003c 273 : \"The revised height of person should be lesser than 273\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        height \u003d newHeight;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the original weight of the person."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The original weight of the person."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getOriginalWeight() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return originalWeight;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the original weight of the person to the new original weight given."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newOriginalWeight The new/revised original weight of the person."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setOriginalWeight(int newOriginalWeight) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newOriginalWeight \u003e 0 : \"The revised original weight of person should be greater than 0\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newOriginalWeight \u003c 443 : \"The revised original weight of person should be lesser than 443\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        originalWeight \u003d newOriginalWeight;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the target weight the person the person wants to achieve."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The target weight the person wants to achieve."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getTargetWeight() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return targetWeight;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the target weight of the person to the new target weight given."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newTargetWeight The new/revised target weight of the person."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setTargetWeight(int newTargetWeight) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newTargetWeight \u003e 0 : \"The revised target weight of person should be greater than 0\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newTargetWeight \u003c 443 : \"The revised target weight of person should be lesser than 443\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        targetWeight \u003d newTargetWeight;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the activity level of the person."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The activity level of the person."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ActivityLevel getActivityLevel() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return activityLevel;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the activity level of the person to the new activity level given."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newActivityLevel The new/revised activity level of the person."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setActivityLevel(ActivityLevel newActivityLevel) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newActivityLevel !\u003d null : \"The revised activity level of person should not be null\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        activityLevel \u003d newActivityLevel;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of all information related to the user."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Information includes name, gender, age, height, original weight, target weight and activity level."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of all information related to the user."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String userInformation \u003d \"  Name: \" + name + System.lineSeparator()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Gender: \" + gender.getDescription() + System.lineSeparator()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Age: \" + age + System.lineSeparator()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Height: \" + height + \"cm\" + System.lineSeparator()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Original weight: \" + originalWeight + \"kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Target weight: \" + targetWeight + \"kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Activity level: \" + activityLevel.getDescription();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return userInformation;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 212
    }
  },
  {
    "path": "src/main/resources/data.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#####################################################################"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    3 LEVEL DATA BASE                                              #"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Canteen -----\u003e Store ------\u003e Food                              #"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Commands :                                                     #"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%START : start reading data from the data base                #"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%STOP : stop reading data from the data base                  #"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%UP    : goes down 1 level e.g. Canteen ---\u003e Store            #"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%DOWN    : goes down 1 level e.g. Canteen ---\u003e Store          #"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%ADD format : adds the item with the given format             #"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#                                                                   #"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Comments : any line that starts with # is ignored              #"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#                                                                   #"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Canteen format : {name}                                        #"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Store format : {name}                                          #"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Food format : {name}|{Calorie}|{Carb}|{Protein}|{Fat}          #"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#####################################################################"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "######################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   Version 0.1 :                                                    #"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   there is only UP, once a store or canteen is                     #"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#  specified we automatically go down 1 level , for this version     #"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   there is no going out of a store and then coming back to add more#"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   Units : Calorie : kcal  : Carbs : g Protein : g : Fats : g       #"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "######################################################################"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%START"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Science canteen"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Halal Mini Wok"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Prawn Mee Soup(Dry)(Large)|490|0|0|0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Prawn Mee Soup(Dry)(Small)|390|0|0|0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Fried Hokkien Prawn Mee(Large)|470|0|0|0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Fried Hokkien Prawn Mee(Small)|350|0|0|0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Clay Pot Chicken|440|0|0|0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Black Pepper Chicken|490|0|0|0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ayam Penyet"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ayam Penyet Set|699|0|0|0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Steamed Chicken Set |475|0|0|0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ikan Grouper Penyet Set|669|0|0|0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Michelin Star Restaurant"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Bouillabaisse with cock crab and poached lobster|520|45|35|56"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Chicken wings with Reblochon pomme purée|450|25|32|66"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Sea bass with prawn tortellini, fennel purée and white wine sauce|530|76|25|43"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%STOP"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 48
    }
  },
  {
    "path": "src/test/java/seedu/calculator/CalculatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "package seedu.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "class CalculatorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateCalorie_foodListOfThreeItems_sumOfCalorie() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(666 + 150 + 290, calculator.calculateCalorie());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateCarb_foodListOfThreeItems_sumOfCarb() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(55 + 16, calculator.calculateCarb());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateProtein_foodListOfThreeItems_sumOfProtein() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(30 + 16, calculator.calculateProtein());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateFat_foodListOfThreeItems_sumOfFat() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(0, calculator.calculateFat());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 52,
      "HengFuYuen": 1
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/FoodListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.list.FoodList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "class FoodListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Food food \u003d new Food(\"Kobe Beef\", 480,50,40,30);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodList foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList.addFood(3, food));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList.addFood(2, \"Sashimi\", 100, 0, 30, 10));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList.delete(1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 3,
      "mxksowie": 16
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_startDateTimeIsNullInput_expectAssertionError() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(null, end));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_endDateTimeIsNullInput_expectAssertionError() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(start, null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_endDateTimeIsBeforeStartTime_expectAssertionError() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-20T23:59\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_endDateTimeIsInTheFuTure_expectAssertionError() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now().plusDays(3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_StartDateTimeIsInTheFuture_expectAssertionError() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.now().plusDays(3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now().plusDays(5);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_sameStartAndEndDateTime_returnsStringOfTimePeriod() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\" between 21 Oct 2020 2359 and 21 Oct 2020 2359\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_validStartAndEndDateTime_returnsStringOfTimePeriod() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-19T23:59\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\" between 19 Oct 2020 2359 and 21 Oct 2020 2359\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_validStartAndEndDateTimeWithSeconds_returnsStringOfTimePeriodWithoutSeconds() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-19T23:59:22\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59:22\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\" between 19 Oct 2020 2359 and 21 Oct 2020 2359\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_nullInput_expectAssertionError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.trimStringGetLength(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_stringWithNoLeadingOrTrailingSpaces_returnsLengthFour() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(4, ui.trimStringGetLength(\"food\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_StringWithLeadingSpaces_returnsLengthFour() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(4, ui.trimStringGetLength(\"    food\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_StringWithTrailingSpaces_returnsLengthFour() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(4, ui.trimStringGetLength(\"food    \"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_StringWithLeadingAndTrailingSpaces_returnsLengthFour() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(4, ui.trimStringGetLength(\"    food    \"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 102
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/database/DataBaseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "class DataBaseTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        DataBase database \u003d new DataBase();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.init();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ----- Print everything in the data base -----"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.printAllData();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- Using stream version to print -----"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"------------ printing using food stream ------------\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.foodStream().forEach(System.out::println);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- Printing out as list -----"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"---------- printing food using list --------------\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.getFoodList().forEach(System.out::println);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search food by name test -----"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- testing the searchFoodByName function -------\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Prawn  ## OutPut: \" + database.searchFoodByName(\"Prawn\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Mee ## OutPut: \" + database.searchFoodByName(\"Mee\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster ## OutPut: \" + database.searchFoodByName(\"lobster\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Prawn ## OutPut: \" + database.searchFoodByName(\"koala bears\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"No such food found! \" + e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search food by store name test ----"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"------- testing the search food by store and by name function --------\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Fried , Halal Mini Wok ## OutPut: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"Fried\", \"Halal Mini Wok\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Chicken , Halal Mini Wok ## OutPut: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"Chicken\", \"Halal Mini Wok\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Chicken , Ayam Penyet ## OutPut: \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"Chicken\", \"Ayam Penyet\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster , Michelin ## OutPut: \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"lobster\", \"Michelin\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: fish , Halal Mini Wok ## OutPut: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"fish\", \"Halal Mini Wok\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"No such food found! \" + e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search all food by store -----"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- testing the search ALL food by store and by name function --------\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Halal Mini Wok -------- \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Halal Mini Wok\").forEach(System.out::println);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Ayam Penyet -------- \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Ayam Penyet\").forEach(System.out::println);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Michelin -------- \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Michelin\").forEach(System.out::println);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Gordan Ramsey\u0027s restaurant -------- \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Gordon Ramsey\u0027s restaurant\").forEach(System.out::println);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"There is no such store! \" + e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search food by Name by canteen ------"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- testing the search food by canteen and by name function --------\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Fried , Science ## OutPut: \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"Fried\", \"Science\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Chicken , Science ## OutPut: \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"Chicken\", \"Science\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster , Science ## OutPut: \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"lobster\", \"Science\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster , Raffles Hotel Suite ## OutPut: \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"lobster\", \"Raffles Hotel Suite\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"There is either no such canteen or no such food in that canteen!\" + e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search all food below calorie ------"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"------- testing the search food below calorie function --------\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\" ---- Input : 400\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.searchAllFoodBelowCalorie(400).forEach(System.out::println);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\" ---- Input : 200\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.searchAllFoodBelowCalorie(200).forEach(System.out::println);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\" ---- Input : 3428\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.searchAllFoodBelowCalorie(3428).forEach(System.out::println);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 89,
      "HengFuYuen": 1,
      "mxksowie": 2
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Food testFood;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testFood \u003d new Food(\"Kobe Beef\", 480,50,40,30);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void footTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(480, testFood.getCalorie());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(50, testFood.getCarbohydrate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(40, testFood.getProtein());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(30, testFood.getFats());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 23,
      "HengFuYuen": 2
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "class PersonTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person \u003d new Person(\"Jack\", Gender.MALE,21,165,75,65,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ActivityLevel.LOW);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getName_person_returnsName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"Jack\", person.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setName_personWithNewName_returnNewName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setName(\"Jackie\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"Jackie\", person.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void gender_person_returnsGender() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(Gender.MALE, person.getGender());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void gender_personWithNewGender_returnsNewGender() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setGender(Gender.FEMALE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(Gender.FEMALE, person.getGender());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getAge_person_returnsAge() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(21, person.getAge());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setAge_personWithNewAge_returnsNewAge() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setAge(24);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(24, person.getAge());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getHeight_person_returnsHeight() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(165, person.getHeight());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setHeight_personWithNewHeight_returnsNewHeight() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setHeight(175);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(175, person.getHeight());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getOriginalWeight_person_returnsOriginalWeight() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(75, person.getOriginalWeight());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setOriginalWeight_personWithNewOriginalWeight_returnsNewOriginalWeight() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setOriginalWeight(70);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(70, person.getOriginalWeight());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getTargetWeight_person_returnsTargetWeight() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(65, person.getTargetWeight());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setTargetWeight_personWithNewTargetWeight_returnsNewTargetWeight() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setTargetWeight(68);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(68, person.getTargetWeight());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getActivityLevel_person_returnsActivityLevel() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(ActivityLevel.LOW, person.getActivityLevel());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setActivityLevel_personWithNewActivityLevel_returnsNewActivityLevel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setActivityLevel(ActivityLevel.HIGH);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(ActivityLevel.HIGH, person.getActivityLevel());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void toString_person_returnsStringRepresentationOfPersonInformation() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"  Name: Jack\" + System.lineSeparator()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Gender: male\" + System.lineSeparator()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Age: 21\" + System.lineSeparator()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Height: 165cm\" + System.lineSeparator()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Original weight: 75kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Target weight: 65kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Activity level: You engage in some form of light exercise or have a job that requires \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"some physical activity.\", person.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 106
    }
  },
  {
    "path": "test.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "dietary book"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1
    }
  }
]
