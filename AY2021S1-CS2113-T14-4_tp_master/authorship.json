[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    mainClassName \u003d \"seedu.dietbook.DietBook\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    archiveBaseName \u003d \"dietbook\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 2,
      "HengFuYuen": 3,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "we are an idiosyncratic and narcissistic batch of self-righteous"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "elitist who defends presumably morally questionable positions."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Also we are cheap!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Heng Fu Yuen | [Github](https://github.com/HengFuYuen) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 4,
      "HengFuYuen": 1,
      "-": 8
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "# DietBook User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "DietBook is a desktop application targeting NUS students living on campus, optimized for use via a **Command Line Interface**. Not only can DietBook track and show the user\u0027s food and nutritional intake, it also provides users with a list of commonly eaten food items around and outside NUS. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "{:toc} "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Download the latest version of `dietbook.jar` from [here](https://github.com/AY2021S1-CS2113-T14-4/tp/releases)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder for your DietBook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Either double-click the jar file to start the application or navigate to the folder containing the jar file on command prompt and run the command `java -jar dietbook.jar`. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. For first time users: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "   1. A CLI, similar to the one shown below, should appear within a few seconds. Follow the instructions provided to setup DietBook or refer to [name](#Entering username: `name`) and [info](#Entering user information: `info`) for more detailed explanations.\u003cbr/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "   ![DietBook Welcome Message](/images/DietBookWelcomeMessage.PNG)  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Start using DietBook by typing any valid command and pressing Enter to execute it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "1. Refer to the [Features](#Features) section below for more details of each command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Notes about the command format:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Words in `UPPER_CASE` are parameters to be supplied by the user.\u003cbr/\u003e "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "e.g. For `delete INDEX`, `delete 1`would be a valid command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Parameters in square brackets are optional. However, if all parameters are optional, at least one parameter needs to be given. In such cases, any one of the parameters would be valid.\u003cbr/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "e.g. For `add x/PORTION_SIZE n/FOOD_NAME k/CALORIE [c/CARBOHYDRATE] [p/PROTEIN] [f/FAT]`, `add x/1 n/Toast k/120`, `add x/1 n/Toast k/120 c/18`,  `add x/1 n/Toast k/120 c/18 p/3`, `add x/1 n/Toast k/120"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " c/18 p/3 f/4` are all valid commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* For commands with multiple parameters, the parameters can be in any order.\u003cbr/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "e.g. For `add n/FOOD_NAME x/PORTION_SIZE`, `add n/mee x/1` and `add x/1 n/mee` are both valid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Command words and parameter indicators are case-sensitive.\u003cbr/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "e.g. `help` is a valid command but `Help` is not.\u003cbr/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "e.g. For `add n/FOOD_NAME x/PORTION_SIZE`, `add n/mee x/1` is valid but `add N/mee x/1` is not."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* A single spacing to separate command words, parameters, command word and parameters is required.\u003cbr/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "e.g. For `calculate all`, `calculate all` is valid but `calculateall` and `calculate` \u0026nbsp; \u0026nbsp; \u0026nbsp; \u0026nbsp; `all`is not.\u003cbr/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "e.g. For `delete INDEX`, `delete 1` is valid if there is a food item with index 1 but`delete1` is not.\u003cbr/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "e.g. For `add n/FOOD_NAME x/PORTION_SIZE`, `add n/mee x/1` is valid but `add n/meex/1` is not.\u003cbr/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Features related to user information"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "#### Entering username: `name`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Stores the user\u0027s name into DietBook during the initial setup."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `name YOUR_NAME`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The name given must not be empty."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* This command is **only used when setting up DietBook for the first time**. Any subsequent editing of the name can be done using the [editinfo](#Editing user information: `editinfo`) command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* `name Tom and Jerry`\u003cbr/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* `name Jack`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Output example for usage example 2:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Hi Jack!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Before we get started, I would like to know about about you so that I can make more "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "accurate calculations for you :). Therefore, could you please share with me the following:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "- Your gender either F for female or M for male or O for others."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "- Your age which is a positive integer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "- Your height in cm."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "- Your original weight in kg, the weight when you first started using DietBook or you current weight."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "- Your current weight in kg."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "- Your target weight in kg, or your current weight if that is also your target weight."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "- Your activity level, represented by a number from 1 to 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  1 \u003d You hardly engage in any exercise or have a job that requires little to no physical activity."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  2 \u003d You engage in some form of light exercise or have a job that requires some physical activity."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  3 \u003d You engage in moderate amount of exercise or have a job that requires moderate physical activity."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  4 \u003d You engage in vigorous exercise or have a physically demanding job."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  5 \u003d You engage in extremely vigorous exercise or have an extremely physically demanding job."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Please input your details in the following format:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT c/CURRENT_WEIGHT t/TARGET_WEIGHT l/ACTIVITY_LEVEL"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Example: info g/F a/21 h/165 o/65 c/65 t/55 l/2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "#### Entering user information : `info`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Stores the user\u0027s personal information into DietBook during the initial setup. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT c/CURRENT_WEIGHT t/TARGET_WEIGHT l/ACTIVITY_LEVEL`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* This command is **only used when setting up DietBook for the first time**. Any subsequent editing of user information can be done using the [editinfo](#Editing user information: `editinfo`) command."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The gender must be either **`M` for male, `F` for female or `O` for others**."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The age must be a positive integer **from 0 to 150, inclusive**."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The height in cm must be a positive integer **from 1 to 300, inclusive**."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The original, current and target weight in kg must be a positive integer ***from 1 to 500, inclusive**."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The activity level must be a positive integer **from 1 to 5, inclusive**."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 1 \u003d You hardly engage in any exercise or have a job that requires little to no physical activity."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 2 \u003d You engage in some form of light exercise or have a job that requires some physical activity."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 3 \u003d You engage in moderate amount of exercise or have a job that requires moderate physical activity."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 4 \u003d You engage in vigorous exercise or have a physically demanding job."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 5 \u003d You engage in extremely vigorous exercise or have an extremely physically demanding job."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* `info g/M a/21 h/175 o/85 c/85 t/75 l/2` stores the user\u0027s gender, age, height, original, current and target weight as well as the activity level to `male`, `21`, `175`, `85`, `85`, `75` and `You engage in some form of light exercise  or have a job that requires some physical activity.` respectively."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Output example:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Thank you! DietBook has been initialised and you may start by entering any valid commands. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "If you require a list of valid commands, you can enter: help"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "#### Viewing user information: `userinfo`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Shows the user information stored in DietBook."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `userinfo` "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Output example: "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Here is your information:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Name: Jack"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Gender: male"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Age: 21"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Height: 175cm"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Original weight: 85kg"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Current weight: 85kg"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Target weight: 75kg"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Activity level: You engage in some form of light exercise or have a job that requires some physical activity."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "#### Editing user information: `editinfo`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Edits the user information stored in DietBook."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Format: `editinfo [n/NAME] [g/GENDER] [a/AGE] [h/HEIGHT] [o/ORIGINAL_WEIGHT] [c/CURRENT_WEIGHT] [t/TARGET_WEIGHT] [l/ACTIVITY_LEVEL]` "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Although all parameters are listed as optional, **at least one of the optional fields needs to be provided**. In this case, any one of the parameters would work."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* If more than one parameter is given, they can be in any order."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The name must not be empty."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The gender must be either **`M` for male, `F` for female or `O` for others**."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The age must be a positive integer **from 0 to 150, inclusive**."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The height must be a positive integer **from 1 to 300, inclusive**."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The original, current and target weight must be a positive integer **from 1 to 500, inclusive**."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* The activity level must be a positive integer **from 1 to 5, inclusive**."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 1 \u003d You hardly engage in any exercise or have a job that requires little to no physical activity."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 2 \u003d You engage in some form of light exercise or have a job that requires some physical activity."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 3 \u003d You engage in moderate amount of exercise or have a job that requires moderate physical activity."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 4 \u003d You engage in vigorous exercise or have a physically demanding job."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  * 5 \u003d You engage in extremely vigorous exercise or have an extremely physically demanding job."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* `editinfo n/John` edits the name of the user to be `John`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "* Both `editinfo c/75 l/4` and `editinfo l/4 c/75` edits the current weight and activity level of the user to be `75` and `You engage in vigorous exercise or have a physically demanding job.` respectively."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Output example for usage example 2: "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Got it! I\u0027ve updated your personal information:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Name: Jack"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Gender: male"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Age: 21"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Height: 175cm"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Original weight: 85kg"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Current weight: 75kg"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Target weight: 75kg"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "  Activity level: You engage in vigorous exercise or have a physically demanding job."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Features related to the food database"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "To add a food from the database: add n/FOOD_NAME x/PORTION_SIZE"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "To view all food in the database: data"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Features related to the food list"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "To add you own food: add x/PORTION_SIZE n/FOOD_NAME k/CALORIE [c/CARBOHYDRATE] [p/PROTEIN] [f/FAT]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "To view all food in DietBook: list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "To view all food in DietBook recorded within a time period: list yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "To view all food in DietBook recorded from a certain date until now: list yyyy-mm-ddTHH:mm "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "To delete a food from DietBook: delete INDEX"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "To delete all food items from the DietBook: clear"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Features related to nutritional intake and recommendation"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "To get recommended calorie intake: recommend"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate carbohydrate intake: calculate carbohydrate"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate carbohydrate intake within a time period: calculate carbohydrate yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate carbohydrate intake from a certain date until now: calculate carbohydrate yyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate calorie intake: calculate calorie"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate calorie intake within a time period: calculate calorie yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate calorie intake from a certain date until now: calculate calorie yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate protein intake: calculate protein"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate protein intake within a time period: calculate protein yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate protein intake from a certain date until now: calculate protein yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate fat intake: calculate fat"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate fat intake within a time period: calculate fat yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate fat intake from a certain date until now: calculate fat yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate all nutritional intake: calculate all"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate all nutritional intake within a time period: calculate all yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To calculate all nutritional intake from a certain date until now: calculate all yyyy-mm-ddTHH:mm"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "### Other features"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To view a list of valid commands: help"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " To exit DietBook: exit"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " Saving"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "#### Adding a todo: `todo`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a new item to the list of todo items."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `todo n/TODO_NAME d/DEADLINE`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* The `DEADLINE` can be in a natural language format."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* The `TODO_NAME` cannot contain punctuation.  "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "`todo n/Write the rest of the User Guide d/next week`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "`todo n/Refactor the User Guide to remove passive voice d/13/04/2020`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "**A**: Either download `dietbook.jar` on the other computer and overwrite the empty data files with the data files from your previous computer or copy the whole DietBook home folder from the previous computer to the new computer."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "---- | ----"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Enter name | **Note**: Used only when setting up DietBook for the first time.\u003cbr/\u003e`name YOUR_NAME` \u003cbr/\u003e e.g.,`name Jack`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Enter info | **Note**: Used only when setting up DietBook for the first time.\u003cbr/\u003e`info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT c/CURRENT_WEIGHT t/TARGET_WEIGHT l/ACTIVITY_LEVEL` \u003cbr/\u003e e.g.,`info g/M a/21 h/175 o/85 c/85 t/75 l/2`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "View user info | `userinfo`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "Edit user info | `editinfo [n/NAME] [g/GENDER] [a/AGE] [h/HEIGHT] [o/ORIGINAL_WEIGHT] [c/CURRENT_WEIGHT] [t/TARGET_WEIGHT] [l/ACTIVITY_LEVEL]` \u003cbr/\u003e e.g.,`editinfo c/75 l/4`"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 208,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/DietBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.database.DataBase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.list.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Main class of the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * The DietBook program is an application which can store, display and check your daily dietary intake."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DietBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private FoodList foodList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Manager manager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private DataBase dataBase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static boolean isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Constructor for new DietBook."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DietBook() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        dataBase \u003d new DataBase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager \u003d new Manager(foodList, dataBase);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Main method to run the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        DietBook dietBook \u003d new DietBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        dietBook.ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                String userInput \u003d dietBook.ui.readCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                Command c \u003d dietBook.manager.manage(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                c.execute(dietBook.manager, dietBook.ui);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            } catch (DietException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                dietBook.ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 2,
      "HengFuYuen": 4,
      "tikimonarch": 45
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/Manager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.CalculateCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.DataCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.InfoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.NameCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.command.UserinfoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.list.FoodList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.ActivityLevel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.dietbook.calculator.Calculator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.database.DataBase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.Gender;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Manager class of the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * The manager class takes in the checked and processed input and carry out the command specified."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Initialization of important classes such as FoodList and Person is done here."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class Manager {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private FoodList foodList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private int commandCount \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private DataBase dataBase;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Calculator calculator;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_CALCULATE \u003d \"calculate\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_DATA \u003d \"data\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_INFO \u003d \"info\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_USERINFO \u003d \"userinfo\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Manager(FoodList foodlist, DataBase dataBase) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.name \u003d \"John Doe\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.person \u003d new Person(this.name, Gender.MALE, 1,1,1,1,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                1, ActivityLevel.LOW);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.foodList \u003d foodlist;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.dataBase \u003d dataBase;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.calculator \u003d new Calculator(foodList.getFoods());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public FoodList getFoodList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.foodList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.person;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setPerson(String name, Gender gender, int age,int height,int orgWeight, int currWeight,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                          int targWeight, ActivityLevel actLvl) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.person.setAll(name, gender, age, height, orgWeight, currWeight, targWeight, actLvl);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Calculator getCalculator() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.calculator;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void setCalculator() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.calculator \u003d new Calculator(foodList.getFoods());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DataBase getDataBase() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.dataBase;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in the user input and returns the command to be carried."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return \u003ccode\u003eCommand\u003c/code\u003e for the command specified."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the program does not recognize the command given."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Command manage(String userInput) throws DietException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        Calculator calculator \u003d this.calculator;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        switch (Parser.getCommand(userInput)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_ADD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new AddCommand(Parser.getProcessedAdd(userInput, getFoodList()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_CALCULATE:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new CalculateCommand(calculator.calculateCalorie(), calculator.calculateCarb(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    calculator.calculateProtein(), calculator.calculateFat(), Parser.getCommandParam(userInput));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_CLEAR:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_DATA:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new DataCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new DeleteCommand(Parser.getCommandIndex(userInput));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_EXIT:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_HELP:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_INFO:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new InfoCommand(userInput);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_LIST:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_NAME:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new NameCommand(Parser.getCommandParam(userInput));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_USERINFO:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return new UserinfoCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"There\u0027s no such command!\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 1,
      "HengFuYuen": 10,
      "tikimonarch": 123
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.ActivityLevel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.Gender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a text user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eUi\u003c/code\u003e objects deals with user interaction by taking in user inputs and showing users the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * appropriate messages after a valid command is executed or when an error occurs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eUi\u003c/code\u003e object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods in the Ui class are organised according to their function in the order of: system related,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // database related, person related, food list related, calculator related and other helper methods."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required to print system related commands or messages."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Reads in and returns the user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the welcome message from DietBook when it is fist booted up."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String logo \u003d getLogo();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(logo + LINE_SEPARATOR"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Hello! Welcome to DietBook!\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"I am Diet, your guide to using DietBook. What is your name?\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Please input in the following format:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  name YOUR_NAME\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Example: name Jack\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message asking the user to input their personal information related to dieting and health"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * which includes gender, age, height, activity level, original weight and target weight."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printAskForUserInfoMessage(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(name, \"Name\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Hi \" + trimString(name) + \"!\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Before we get started, I would like to know about about you so that I can make more \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"accurate calculations for you :). Therefore, could you please share with me the \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"following:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your gender either F for \" + Gender.FEMALE.getDescription() + \" or M for \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + Gender.MALE.getDescription() +  \" or O for \" + Gender.OTHERS.getDescription() + \".\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your age which is a positive integer.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your height in cm.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your original weight in kg, the weight when you first started using DietBook or \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"you current weight.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your current weight in kg.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your target weight in kg, or your current weight if that is also your target weight.\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your activity level, represented by a number from 1 to 5.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  1 \u003d \" + ActivityLevel.NONE.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  2 \u003d \" + ActivityLevel.LOW.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  3 \u003d \" + ActivityLevel.MEDIUM.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  4 \u003d \" + ActivityLevel.HIGH.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  5 \u003d \" + ActivityLevel.EXTREME.getDescription() + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Please input your details in the following format:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT c/CURRENT_WEIGHT t/TARGET_WEIGHT \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"l/ACTIVITY_LEVEL\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Example: info g/F a/21 h/165 o/65 c/65 t/55 l/2\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an exit message when DietBook is closed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printExitMessage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message given what or where the error is."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param errorMessage Message detailing what or where the error is."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printErrorMessage(String errorMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(errorMessage,\"Error message\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\":( \" + trimString(errorMessage));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message that notifies the user that DietBook has been initialised."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printInitialisationCompleteMessage() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Thank you! DietBook has been initialised \" + getStartMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the welcome back message when user reboots up DietBook after the first initialisation."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the user."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printWelcomeBackMessage(String name) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(name, \"Name\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(getLogo() + LINE_SEPARATOR + \"Welcome back to DietBook \" + trimString(name) + \"!\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"All your previous data has been successfully loaded \" + getStartMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a string representation of a list of the commands that users can use."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printHelpCommandMessage() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Listed below are the valid commands for DietBook:\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For user information related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getUserRelatedCommands() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For database related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getDatabaseRelatedCommands() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For food list related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getFoodListRelatedCommands() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For nutritional intake and recommendation related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getCalculatorRelatedCommands() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"For other system related commands\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + getSystemRelatedCommands());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required to print database related commands or messages."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the food in the database sorted by the canteen and then the store it is found."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param foodDatabase The string representation of all the food items stored in the database."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDatabase(String foodDatabase) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(foodDatabase,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"Food database\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Here are the food items in the database:\" + LINE_SEPARATOR + foodDatabase);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the food items in the database containing the food name of the food that user wants to"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * add sorted by the canteen and then the store it is found."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * This method is only used if more than one food item in the database contains the food name given."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param matchingFoodDatabase The string representation of the food items stored in the"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     database containing the food name given."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printMatchingFoodsInDatabase(String matchingFoodDatabase) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(matchingFoodDatabase,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"Matching food database\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Here are the matching food items in the database:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + matchingFoodDatabase + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Please re-enter with the full name of the food item above in the following format:\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR + \"  add n/FOOD_NAME x/PORTION_SIZE\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required to print user information related commands and messages."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the information related to the user."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param personInfo The user\u0027s personal information."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printPersonInfo(String personInfo) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(personInfo,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"Person information\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Here is your information:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + personInfo);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the updated information related to the user."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param personInfo The user\u0027s personal information."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printEditedPersonInfo(String personInfo) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(personInfo,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"Updated person information\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Got it! I\u0027ve updated your personal information:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + personInfo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required for printing FoodList related commands and messages."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the food items in the food list in the order that they were added or a message stating"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * that the food list is empty if there are no food items."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param allFood The string representation of all the food items in the food list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFoodList(String allFood) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(allFood,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"String representation of all food in food list\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (trimStringGetLength(allFood) \u003c 1) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"DietBook is currently empty.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"Here are the food items in DietBook:\" + LINE_SEPARATOR + allFood);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints food items recorded into the food list during a given time period in the order that they were"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * added or a message stating no food items were recorded during the given time period."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param foods The string representation of food items in the food list recorded during the time"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     period given."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFoodList(String foods, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(foods,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"String representation of food items in the food list recorded during the time \""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                        + \"period given\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForTimePeriod(start, end);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (trimStringGetLength(foods) \u003c 1) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"No food item was recorded in DietBook\" + stringDateTimePeriod(start, end) + \".\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"Here are the food items recorded in DietBook\" + stringDateTimePeriod(start, end) + \":\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                    + LINE_SEPARATOR + foods);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the food specified has been added to the food list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newFood The string representation of the new food item that was added to the food list."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printNewFood(String newFood) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(newFood,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"String representation of the food that was added\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Got it! I\u0027ve added this food item:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  \" + trimString(newFood));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the food specified has been deleted from the food list."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param deletedFood The string representation of the food that was deleted from the food list."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDeletedFood(String deletedFood) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(deletedFood,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"String representation of the food that was deleted\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Noted. I\u0027ve removed this food item:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  \" + trimString(deletedFood));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the food list has been successfully cleared and is now empty."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printClearFoodListMessage() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"All previous data has been deleted...\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"DietBook is now empty.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Methods required to print nutritional intake and recommendation related commands and messages."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the daily recommended calorie intake of the user based on the user\u0027s personal information."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieRecommendation The daily recommended calorie intake of the user."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCalorieRecommendation(String name, int calorieRecommendation) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(name, \"Name\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForCalorieRecommendation(calorieRecommendation);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Hi \" + trimString(name) + \"!\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Here is your daily recommended calorie intake: \" + calorieRecommendation + \"kcal\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of carbohydrates consumed by the user and the list of food items which had"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total carbohydrate intake."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of all the food in the food list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCarbIntakeAndFoods(int carbIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringOneIntakeAndFoodsWithoutTime(carbIntake,\"carbohydrate\","
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"g\", recalculatedFoods));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of carbohydrates consumed by the user and a list of the foods which had"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any, given a certain time period."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total carbohydrate"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * intake within a given time period."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of food in the food list recorded during the"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCarbIntakeAndFoods(int carbIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                        LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String carbIntakeAndFoodsWithoutTime \u003d stringOneIntakeAndFoodsWithoutTime(carbIntake,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"carbohydrate\", \"g\", recalculatedFoods);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(carbIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of carbohydrates consumed by the user and a list of the foods which had"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any, given a start date."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total carbohydrate"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * intake given a start date."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of food in the food list recorded from the"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     start date till now."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded from the start date till now which had"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     their nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time to calculate from."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCarbIntakeAndFoods(int carbIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                        LocalDateTime start) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        printCarbIntakeAndFoods(carbIntake, recalculatedFoods, start, end);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories consumed by the user and the list of food items which had"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total calorie intake."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of all the food in the food list."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCalorieIntakeAndFoods(int calorieIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringOneIntakeAndFoodsWithoutTime(calorieIntake,\"calorie\",\"kcal\","
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                recalculatedFoods));"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories consumed by the user and a list of the foods which had their"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * nutritional information recalculated by DietBook if any, given a certain time period."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total calorie"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * intake within a given time period."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of food in the food list recorded during the"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCalorieIntakeAndFoods(int calorieIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                           LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String calorieIntakeAndFoodsWithoutTime \u003d stringOneIntakeAndFoodsWithoutTime(calorieIntake,"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"calorie\", \"kcal\", recalculatedFoods);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(calorieIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories consumed by the user and a list of the foods which had their"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * nutritional information recalculated by DietBook if any, given a start date."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total calorie intake,"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * given a start date."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of food in the food list recorded from the"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     start date till now."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded from the start date till now which had"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     their nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time to calculate from."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCalorieIntakeAndFoods(int calorieIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                        LocalDateTime start) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        printCalorieIntakeAndFoods(calorieIntake, recalculatedFoods, start, end);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of proteins consumed by the user and the list of food items which had"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total protein intake."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of all the food in the food list."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printProteinIntakeAndFoods(int proteinIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringOneIntakeAndFoodsWithoutTime(proteinIntake,\"protein\",\"g\","
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                recalculatedFoods));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of proteins consumed by the user and a list of the foods which had their"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * nutritional information recalculated by DietBook if any, given a certain time period."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total protein"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * intake within a given time period."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of food in the food list recorded during the"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printProteinIntakeAndFoods(int proteinIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                           LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String proteinIntakeAndFoodsWithoutTime \u003d stringOneIntakeAndFoodsWithoutTime(proteinIntake,"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"protein\", \"g\", recalculatedFoods);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(proteinIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of proteins consumed by the user and a list of the foods which had their"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * nutritional information recalculated by DietBook if any, given a start date."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total protein intake,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * given a start date."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of food in the food list recorded from the"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     start date till now."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded from the start date till now which had"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     their nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time to calculate from."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printProteinIntakeAndFoods(int proteinIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                           LocalDateTime start) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        printProteinIntakeAndFoods(proteinIntake, recalculatedFoods, start, end);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of fats consumed by the user and the list of food items which had"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total fat intake."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of all the food in the food list."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFatIntakeAndFoods(int fatIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringOneIntakeAndFoodsWithoutTime(fatIntake,\"fat\",\"g\","
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                recalculatedFoods));"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of fats consumed by the user and a list of the foods which had their"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * nutritional information recalculated by DietBook if any, given a certain time period."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total fat"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * intake within a given time period."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of food in the food list recorded during the"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFatIntakeAndFoods(int fatIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String fatIntakeAndFoodsWithoutTime \u003d stringOneIntakeAndFoodsWithoutTime(fatIntake,"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"fat\", \"g\", recalculatedFoods);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(fatIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of fats consumed by the user and a list of the foods which had their"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * nutritional information recalculated by DietBook if any, given a start date."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating total fat intake,"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * given a start date."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of food in the food list recorded from the start date till"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     now."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded from the start date till now which had"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     their nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time to calculate from."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFatIntakeAndFoods(int fatIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                           LocalDateTime start) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        printFatIntakeAndFoods(fatIntake, recalculatedFoods, start, end);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories, carbohydrates, fats and proteins consumed by the user and the"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating the individual intakes."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of all the food in the food list."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of all the food in the food list."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of all the food in the food list."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of all the food in the food list."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printAllIntakeAndFoods(int calorieIntake, int carbIntake, int proteinIntake,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       int fatIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringAllIntakeAndFoodsWithoutTime(calorieIntake, carbIntake, proteinIntake,"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                fatIntake, recalculatedFoods));"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories, carbohydrates, fats and proteins consumed by the user and a"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * list of the foods which had their nutritional information recalculated by DietBook if any, given a"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * certain time period."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating the individual intakes"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * within a given time period."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of food in the food list recorded during the"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of food in the food list recorded during the"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of food in the food list recorded during the"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of food in the food list recorded during the"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     time period given."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded during the given time period which had their"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printAllIntakeAndFoods(int calorieIntake, int carbIntake, int proteinIntake,"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       int fatIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String allIntakeAndFoodsWithoutTime \u003d stringAllIntakeAndFoodsWithoutTime(calorieIntake,"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                carbIntake, proteinIntake, fatIntake, recalculatedFoods);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(stringIntakeAndFoodsWithTime(allIntakeAndFoodsWithoutTime, start, end));"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories, carbohydrates, fats and proteins consumed by the user and a"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * list of the foods which had their nutritional information recalculated by DietBook if any, given a"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * start date."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Some food items only have partial nutritional information as users did not provide all the"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * information when the food items were added. Hence, DietBook does an internal calculation for the"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the missing information and these calculated values are used when tabulating the individual intakes,"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * given a start date."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of food in the food list recorded from the start"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     date till now."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of food in the food list recorded from the start"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     date till now."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of food in the food list recorded from the start"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     date till now."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of food in the food list recorded from the start date till"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     now."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items recorded from the start date till now which had"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     their nutritional information recalculated by DietBook."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time to calculate from."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printAllIntakeAndFoods(int calorieIntake, int carbIntake, int proteinIntake,"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       int fatIntake, String recalculatedFoods,"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       LocalDateTime start) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        printAllIntakeAndFoods(calorieIntake, carbIntake, proteinIntake, fatIntake, recalculatedFoods, start,"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                end);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Helper methods for system related commands or messages"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the string representation of the logo."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The string representation of the logo."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getLogo() {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String logo \u003d \" _______  __ ______ ________ _______   ______   ______  __    __\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|   __  \\\\|  |   ___|__    __|   __  \\\\ /  __  \\\\ /  __  \\\\|  | /  /\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  |  |  |  |  |___   |  |  |  |__|  |  |  |  |  |  |  |  |/  /\"  + LINE_SEPARATOR"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  |  |  |  |   ___|  |  |  |   __  \u003c|  |  |  |  |  |  |     /\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  |__|  |  |  |___   |  |  |  |__|  |  |__|  |  |  |  |  |\\\\  \\\\\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|_______/|__|______|  |__|  |_______/ \\\\______/ \\\\______/|__| \\\\__\\\\\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return logo;"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string stating that DietBook is ready for use."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string stating that DietBook is ready for use."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getStartMessage() {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"and you may start by entering any valid commands. \""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"If you require a list of valid commands, you can enter: help\";"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of system related commands that users can input."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of system related commands that users can input."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getSystemRelatedCommands() {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To view a list of valid commands: help\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To exit DietBook: exit\";"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of nutritional intake and recommendation related commands"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * that users can input."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of nutritional intake and recommendation related commands"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     that users can input."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getCalculatorRelatedCommands() {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To get recommended calorie intake: recommend\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate carbohydrate intake: calculate carbohydrate\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate carbohydrate intake within a time period: calculate carbohydrate \""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate carbohydrate intake from a certain date until now: calculate carbohydrate \""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyy-mm-ddTHH:mm\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate calorie intake: calculate calorie\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate calorie intake within a time period: calculate calorie yyyy-mm-ddTHH:mm \""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate calorie intake from a certain date until now: calculate calorie \""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate protein intake: calculate protein\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate protein intake within a time period: calculate protein yyyy-mm-ddTHH:mm \""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate protein intake from a certain date until now: calculate protein \""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate fat intake: calculate fat\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate fat intake within a time period: calculate fat yyyy-mm-ddTHH:mm \""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate fat intake from a certain date until now: calculate fat \""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate all nutritional intake: calculate all\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate all nutritional intake within a time period: calculate all \""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To calculate all nutritional intake from a certain date until now: calculate all \""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of user information related commands that users can input."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of user information related commands that users can input."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getUserRelatedCommands() {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To view user information: userinfo\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To edit user information: editinfo [n/NAME] [g/GENDER] [a/AGE] [h/HEIGHT] \""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"[o/ORIGINAL_WEIGHT] [c/CURRENT_WEIGHT] [t/TARGET_WEIGHT] [l/ACTIVITY_LEVEL]\""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of food list related commands that users can input."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of food list related commands that users can input."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getFoodListRelatedCommands() {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To add you own food: add x/PORTION_SIZE n/FOOD_NAME k/CALORIE [c/CARBOHYDRATE] \""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"[p/PROTEIN] [f/FAT]\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To view all food in DietBook: list\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To view all food in DietBook recorded within a time period: list yyyy-mm-ddTHH:mm \""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To view all food in DietBook recorded from a certain date until now: list \""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"yyyy-mm-ddTHH:mm \" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To delete a food from DietBook: delete INDEX\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To delete all food items from the DietBook: clear\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of a list of database related commands that users can input."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of a list of database related commands that users can input."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String getDatabaseRelatedCommands() {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"  To add a food from the database: add n/FOOD_NAME x/PORTION_SIZE\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  To view all food in the database: data\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Helper methods for calculator related commands and messages"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string with a header and recalculatedFoods or a string stating that no food items had their"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * nutritional information recalculated if calculatedFoods is an empty string."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string with a header and recalculatedFoods or a string stating that no food items had their"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     nutritional information recalculated if calculatedFoods is an empty string."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String recalculatedFoodsMessage(String recalculatedFoods) {"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String message \u003d \"No food items had their nutritional information recalculated by DietBook.\";"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (trimStringGetLength(recalculatedFoods) \u003e 0) {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            message \u003d \"Food items which had their nutritional information recalculated by DietBook: \""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                    + LINE_SEPARATOR + recalculatedFoods;"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Return a string representation of  the amount of a nutrient consumed by the user which can be either"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the total amount consumed or amount consumed in a given time period."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientIntake The amount of a particular type of nutrient consumed."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientType A string representation of the type of nutrient consumed."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientUnit A string representation of the unit of the nutrient consumed."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The amount of a nutrient consumed by the user which can be either the total amount consumed"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     or amount consumed in a given time period."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String stringNutritionalIntake(int nutrientIntake, String nutrientType, String nutrientUnit) {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \"Total \" + nutrientType + \" intake: \" + nutrientIntake + nutrientUnit;"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the total amount of a nutrient consumed by the user and"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientIntake The amount of a particular type of nutrient consumed."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientType A string representation of the type of nutrient consumed."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientUnit A string representation of the unit of the nutrient consumed."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the the total amount of a nutrient consumed by the user and"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     the list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String stringOneIntakeAndFoodsWithoutTime(int nutrientIntake, String nutrientType,"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                                      String nutrientUnit, String recalculatedFoods) {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(nutrientType,\"Nutrient Type\");"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(nutrientUnit, \"Nutrient Unit\");"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(nutrientIntake, nutrientType);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(recalculatedFoods,"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"List of foods that had their nutritional information recalculated\");"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringNutrientIntake \u003d stringNutritionalIntake(nutrientIntake, nutrientType, nutrientUnit);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String message \u003d recalculatedFoodsMessage(recalculatedFoods);"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return stringNutrientIntake + LINE_SEPARATOR + message;"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the total amount of a nutrient or all nutrientS consumed by the"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * user  during a given time period and the list of food items recorded during the same time period"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param intakeAndFoodsWithoutTime A string representation of the the total amount of a nutrient or"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     all nutrients consumed by the user and the list of food items which had their nutritional"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     information recalculated by DietBook if any."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the the total amount of a nutrient or all nutrient consumed by the"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     user during a given time period and the list of food items recorded during the same time period"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String stringIntakeAndFoodsWithTime(String intakeAndFoodsWithoutTime,"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                                LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForTimePeriod(start, end);"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String timePeriod \u003d \"Time period:\" + stringDateTimePeriod(start, end);"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return timePeriod + LINE_SEPARATOR + LINE_SEPARATOR + intakeAndFoodsWithoutTime;"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the total amount of all nutrients consumed by the user and"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * the list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbIntake The total amount of carbohydrates of all the food in the food list."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of all the food in the food list."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of all the food in the food list."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of all the food in the food list."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param recalculatedFoods The list of food items which had their nutritional information recalculated by"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     DietBook."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of the total amount of all nutrients consumed by the user and"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     the list of food items which had their nutritional information recalculated by DietBook if any."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String stringAllIntakeAndFoodsWithoutTime(int calorieIntake, int carbIntake, int proteinIntake,"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                                     int fatIntake, String recalculatedFoods) {"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(carbIntake, \"carbohydrate\");"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(calorieIntake, \"calorie\");"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(proteinIntake, \"protein\");"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNutritionalIntake(fatIntake, \"fat\");"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(recalculatedFoods,"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"List of foods that had their nutritional information recalculated\");"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringCarbIntake \u003d stringNutritionalIntake(carbIntake,\"carbohydrate\", \"g\");"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringCalorieIntake \u003d stringNutritionalIntake(calorieIntake,\"calorie\","
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"kcal\");"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringProteinIntake \u003d stringNutritionalIntake(proteinIntake,\"protein\", \"g\");"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringFatIntake \u003d stringNutritionalIntake(fatIntake,\"fat\", \"g\");"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String message \u003d recalculatedFoodsMessage(recalculatedFoods);"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return stringCalorieIntake + LINE_SEPARATOR"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + stringCarbIntake + LINE_SEPARATOR"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + stringProteinIntake + LINE_SEPARATOR"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + stringFatIntake + LINE_SEPARATOR"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + message;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    // Other helper methods"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the given message to the user."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param message The message to show the user."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void print(String message) {"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForStringInputs(message, \"Message to print\");"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String divider \u003d"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"__________________________________________________________________________________________\""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"___________________________________________\";"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(divider + LINE_SEPARATOR"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + trimString(message) + LINE_SEPARATOR"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + divider);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of the time period with date time in the format dd MMM yyyy HHmm."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given that needs to be converted into a String."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given that needs to be converted into a String."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The string representation of time period with date time in the format dd MMM yyyy HHmm."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String stringDateTimePeriod(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForTimePeriod(start, end);"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringStart \u003d start.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"));"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String stringEnd \u003d end.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"));"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return \" between \" +  stringStart + \" and \" + stringEnd;"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns an integer representing the length of the string after it has been trimmed for leading and"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * trailing spaces."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param string The string to be trimmed and have its length determined."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return An integer representing the length of the string after it has been trimmed for leading and"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     trailing spaces."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int trimStringGetLength(String string) {"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(string, \"String to trim and have length determined\");"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return trimString(string).length();"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string that has been trimmed for leading and trailing spaces."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param string The string to be trimmed for leading and trailing spaces."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string that has been trimmed for leading and trailing spaces."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String trimString(String string) {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(string, \"String to trim\");"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return string.trim();"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for the string inputs."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param string The input value."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param stringDescription A description of what the input value represents."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForStringInputs(String string, String stringDescription) {"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNullStringInputs(string, stringDescription);"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert trimStringGetLength(string) \u003e 0 : stringDescription + \" should not be an empty string\";"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for the time inputs."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param start Starting date time of the time period given."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param end Ending date time of the time period given."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForTimePeriod(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert start !\u003d null : \"Starting date time of the time period given should not be null\";"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert end !\u003d null : \"Ending date time of the time period given should not be null\";"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert !start.isAfter(end) : \"Starting date time should not be later than ending date time \""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"of the time period\";"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert !start.isAfter(now) : \"Starting date time of the time period given should \""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"not be in the future\" + start + LocalDateTime.now();"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert !end.isAfter(now) : \"Ending date time of the time period given should not be\""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \" in the future\" + end + LocalDateTime.now();"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for null string inputs."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param string The input value."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param stringDescription A description of what the input value represents."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForNullStringInputs(String string, String stringDescription) {"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert string !\u003d null : stringDescription + \" should not be null\";"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for nutritional intake inputs."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientIntake The nutritional intake value."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param nutrientType The nutrient type."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForNutritionalIntake(int nutrientIntake, String nutrientType) {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert nutrientIntake \u003e\u003d 0 : \"Total \" + nutrientType + \" intake should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions for the calorie recommendation input."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieRecommendation The recommended daily calorie intake for the user."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForCalorieRecommendation(int calorieRecommendation) {"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        // A minimum daily intake of 1200 calorie is required to stay healthy."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert calorieRecommendation \u003e\u003d 1200 : \"Daily calorie recommendation should be equals to or greater\""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \" than 1200\";"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        // Highest calorie intake for an athlete currently stands at 12000."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert calorieRecommendation \u003c\u003d 12000 : \"Daily calorie recommendation should be equals to or less \""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"than 12,000\";"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 961
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/calculator/Calculator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "package seedu.dietbook.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.dietbook.list.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.dietbook.person.Gender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.dietbook.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": " * Represents a calculator of food items in foodList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "public class Calculator {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalCalorie \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalCarbohydrate \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalProtein \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalFat \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Construct a calculator taking in a foodList. Add up calories,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * carbs, protein, and fats in each food item."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param foodList foodList containing food items to calculate."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public Calculator(List\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assert foodList !\u003d null : \"The foodList should not be null.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            assert foodList.get(i).getName().trim().length() !\u003d 0 : \"Food names should not be empty.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalCalorie +\u003d foodList.get(i).getCalorie();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalCarbohydrate +\u003d foodList.get(i).getCarbohydrate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalProtein +\u003d foodList.get(i).getProtein();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalFat +\u003d foodList.get(i).getFat();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total calorie."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items in foodList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCalorie() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalCalorie;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total calorie"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * of the foods with time after a specific time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param startTime the start time for food items to be included."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items with time after"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *         startTime in foodList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCalorie(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        int calorie \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c FoodList.getFoodsAfterDateTime(startTime).size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            calorie +\u003d FoodList.getFoodsAfterDateTime(startTime).get(i).getCalorie();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total calories"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * of the foods with time after a specific time and before a specific time."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param startTime the start time for food items to be included."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param endTime the end time for food items to be included."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items with time after"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *         startTime in foodList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCalorie(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        int calorie \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c FoodList.getFoodsInDateTimeRange(startTime, endTime).size(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            calorie +\u003d FoodList.getFoodsInDateTimeRange(startTime, endTime).get(i).getCalorie();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total carbs."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total carbs of food items in foodList."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCarb() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalCarbohydrate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total carbs"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * of the foods with time after a specific time."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param startTime the start time for food items to be included."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items with time after"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *         startTime in foodList."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCarb(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        int carb \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c FoodList.getFoodsAfterDateTime(startTime).size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            carb +\u003d FoodList.getFoodsAfterDateTime(startTime).get(i).getCarbohydrate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return carb;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total carbs"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * of the foods with time after a specific time and before a specific time."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param startTime the start time for food items to be included."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param endTime the end time for food items to be included."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items with time after"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *         startTime in foodList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCarb(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        int carb \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c FoodList.getFoodsInDateTimeRange(startTime, endTime).size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            carb +\u003d FoodList.getFoodsInDateTimeRange(startTime, endTime).get(i).getCarbohydrate();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return carb;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total protein."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total protein of food items in foodList."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateProtein() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalProtein;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total protein"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * of the foods with time after a specific time."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param startTime the start time for food items to be included."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items with time after"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *         startTime in foodList."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateProtein(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        int protein \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c FoodList.getFoodsAfterDateTime(startTime).size(); i++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            protein +\u003d FoodList.getFoodsAfterDateTime(startTime).get(i).getProtein();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return protein;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total protein"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * of the foods with time after a specific time and before a specific time."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param startTime the start time for food items to be included."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param endTime the end time for food items to be included."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items with time after"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *         startTime in foodList."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateProtein(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        int protein \u003d 0;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c FoodList.getFoodsInDateTimeRange(startTime, endTime).size(); i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            protein +\u003d FoodList.getFoodsInDateTimeRange(startTime, endTime).get(i).getProtein();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return protein;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total fats."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total fats of food items in foodList."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateFat() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalFat;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total fats"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * of the foods with time after a specific time."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param startTime the start time for food items to be included."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items with time after"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *         startTime in foodList."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateFat(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        int fat \u003d 0;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c FoodList.getFoodsAfterDateTime(startTime).size(); i++) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            fat +\u003d FoodList.getFoodsAfterDateTime(startTime).get(i).getFat();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return fat;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total fats"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * of the foods with time after a specific time and before a specific time."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param startTime the start time for food items to be included."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param endTime the end time for food items to be included."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items with time after"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *         startTime in foodList."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateFat(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        int fat \u003d 0;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c FoodList.getFoodsInDateTimeRange(startTime, endTime).size(); i++) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            fat +\u003d FoodList.getFoodsInDateTimeRange(startTime, endTime).get(i).getFat();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return fat;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of recommended daily calorie intake."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * It is calculated based on the gender, activity level, age, height, original weight,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * and targeted weight."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param person person whose recommended daily calorie intake are to return."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of recommended daily calorie intake."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateRecomendation(Person person) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        double requirement \u003d 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        int recomendation;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        double activityScore \u003d 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        switch (person.getActivityLevel()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        case NONE:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            activityScore \u003d 1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            if (person.getGender() \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.11;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            } else if (person.getGender() \u003d\u003d Gender.FEMALE) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.12;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.115;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            if (person.getGender() \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.26;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            } else if (person.getGender() \u003d\u003d Gender.FEMALE) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.27;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.265;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            if (person.getGender() \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.37;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            } else if (person.getGender() \u003d\u003d Gender.FEMALE) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.36;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.365;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        case EXTREME:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            if (person.getGender() \u003d\u003d Gender.MALE) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.48;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            } else if (person.getGender() \u003d\u003d Gender.FEMALE) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.45;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                activityScore \u003d 1.465;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            assert activityScore !\u003d 0 : \"The activityScore should not be 0 if\""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                    + \"the activityLevel are one of five given cases.\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        switch (person.getGender()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        case MALE:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            requirement \u003d 662 - 9.53 * person.getAge() + 15.91 * activityScore * person.getOriginalWeight()"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                    + 539.6 * person.getHeight() / 100;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        case FEMALE:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            requirement \u003d 354 - 6.91 * person.getAge() + 9.36 * activityScore * person.getOriginalWeight()"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                    + 726 * person.getHeight() / 100;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        case OTHERS:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            requirement \u003d 508 - 8.22 * person.getAge() + 12.635 * activityScore * person.getOriginalWeight()"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                    + 632.8 * person.getHeight() / 100;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            assert requirement !\u003d 0 : \"The requirement should not be 0 if the gender is \""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "                    + \"ont of the three given cases.\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        if (person.getCurrentWeight() \u003e person.getTargetWeight()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            recomendation \u003d (int) requirement - 300;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            recomendation \u003d (int) requirement + 100;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return recomendation;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 296,
      "HengFuYuen": 1
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/checker/InputChecker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.checker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * InputChecker class of the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * This class checks the validity of the user input and throws an exception if input is not as intended/expected."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class InputChecker {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * The value limits are based on current limits observed in th world."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final int AGE_CAP \u003d 150;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final int FOOD_CAP \u003d 100000;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final int HEIGHT_CAP \u003d 300;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final int WEIGHT_CAP \u003d 500;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_ACTIVITY \u003d {\"1\",\"2\",\"3\",\"4\",\"5\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_ADD \u003d {\"n/\",\"x/\",\"k/\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_CALCULATE \u003d {\"fat\", \"carbohydrate\",\"protein\", \"calorie\", \"all\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_GENDER \u003d {\"M\",\"F\",\"O\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_INFO \u003d {\"g/\",\"a/\",\"h/\",\"l/\",\"o/\",\"t/\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input and command to check for any expected parameters after the command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param command command in user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when at least one parameter is expected but not present."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkEmpty(String userInput, String command) throws DietException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (userInput.split(command).length \u003c 2"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                || userInput.split(command)[1].equals(\" \")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Error! Missing command parameters!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in processed user input to check for options specified with an empty field."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when an option is specified but its field is empty."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkEmptyOption(String[] input) throws DietException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (input.length \u003e 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (input[1].length() \u003e 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                if (input[1].trim().charAt(1) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    throw new DietException(\"Error! Option specified with empty field!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Error! Option specified with empty field!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the expected number and type of parameter for the add command is present."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when expected parameters are missing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkAddParam(String userInput) throws DietException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_ADD) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (!userInput.contains(param)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                throw new DietException(\"Missing or incorrect add statement\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the expected number and type of parameter for the info command is present."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when expected parameters are missing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkInfoParam(String userInput) throws DietException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_INFO) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (!userInput.contains(param)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                throw new DietException(\"Missing or incorrect info statement\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in an integer from food to check if the value is within the logical limit."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param foodValue integer value of attributes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when value is not within the limit."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkFoodLimit(int foodValue) throws DietException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (foodValue \u003c 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be less than 0!\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (foodValue \u003e FOOD_CAP) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be more than 100,000!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the nutrient type is of the expected input."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when it is not one of the expected nutrient type."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkNutrientType(String userInput) throws DietException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        boolean checkContain \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_CALCULATE) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (userInput.contains(param)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                checkContain \u003d true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (!checkContain) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Incorrect nutrient type!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the activity level is of the expected input."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when it is not one of the expected activity level."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkActivity(String userInput) throws DietException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        boolean checkContain \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_ACTIVITY) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (userInput.equals(param)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                checkContain \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (!checkContain) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"No such activity level!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in user input to check if the gender is of the expected input."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when it is not one of the expected gender input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkGender(String userInput) throws DietException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        boolean checkContain \u003d false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_GENDER) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (userInput.contains(param)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                checkContain \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (!checkContain) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please key in the specified gender characters.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in an integer age to check if the value is within the logical limit."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param age integer value of age."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when value is not within the limit."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkAgeLimit(int age) throws DietException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (age \u003c 0) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be less than 0!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (age \u003e AGE_CAP) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be more than 125!\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in an integer height to check if the value is within the logical limit."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param height integer value of height."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when value is not within the limit."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkHeightLimit(int height) throws DietException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (height \u003c 1) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new DietException(\"Input value cannot be less than 1\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (height \u003e HEIGHT_CAP) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be more than 273!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Takes in an integer weight to check if the value is within the logical limit."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param weight integer value of weight."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when value is not within the limit."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void checkWeightLimit(int weight) throws DietException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (weight \u003c 1) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            throw new DietException(\"Input value cannot be less than 1!\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (weight \u003e WEIGHT_CAP) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Input value cannot be more than 443!\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 8,
      "tikimonarch": 188
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    String foodName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public AddCommand(String foodName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.foodName \u003d foodName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your name first!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (commandCount \u003d\u003d 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your basic information first!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printNewFood(this.foodName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.setCalculator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 24
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/CalculateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class CalculateCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int carb;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int protein;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int fat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    String param;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public CalculateCommand(int calorie, int carb, int protein, int fat, String param) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.carb \u003d carb;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.fat \u003d fat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.param \u003d param;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your name first!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (commandCount \u003d\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your basic information first!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.setCalculator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        switch (this.param) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case \"all\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printAllIntakeAndFoods();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printAllNutrientIntake(this.calorie, this.carb, this.protein, this.fat);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case \"calorie\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printCalorieIntakeAndFoods();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printCalorieIntake(this.calorie);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case \"carbohydrate\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printCarbIntakeAndFoods();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printCarbohydrateIntake(this.carb);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case \"protein\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printProteinIntakeAndFoods();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printProteinIntake(this.protein);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printFatIntakeAndFoods();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            //ui.printFatIntake(this.fat);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 10,
      "tikimonarch": 42
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your name first!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (commandCount \u003d\u003d 2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your basic information first!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printClearFoodListMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.getFoodList().clear();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 18
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * The command parent class for all commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * All commands have an execute method that takes in objects \u003ccode\u003eManager\u003c/code\u003e and \u003ccode\u003eUi\u003c/code\u003e."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Each child command class is self-explanatory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static int commandCount \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public abstract void execute(Manager manager, Ui ui) throws DietException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 19
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/DataCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DataCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your name first!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (commandCount \u003d\u003d 2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your basic information first!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.getDataBase().init();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        //ui.printDatabase(manager.getDataBase().getFoodList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "tikimonarch": 18
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your name first!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (commandCount \u003d\u003d 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your basic information first!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printDeletedFood(manager.getFoodList().delete(this.index));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            manager.setCalculator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"No such index!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 28
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.DietBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printExitMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        DietBook.isExit \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "tikimonarch": 12
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your name first!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (commandCount \u003d\u003d 2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your basic information first!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printHelpCommandMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "tikimonarch": 16
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/InfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.checker.InputChecker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class InfoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public InfoCommand(String userInput) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your name first!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (commandCount !\u003d 2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Basic information has already been input!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        Parser.executeProcessedInfo(this.userInput, manager);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        commandCount++;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui.printInitialisationCompleteMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "tikimonarch": 26
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your name first!\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (commandCount \u003d\u003d 2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your basic information first!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printFoodList(manager.getFoodList().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 17
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/NameCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class NameCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public NameCommand(String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount !\u003d 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Name has already been entered!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        commandCount++;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.setName(this.name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printAskForUserInfoMessage(manager.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 25
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/command/UserinfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import java.io.DataInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class UserinfoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void execute(Manager manager, Ui ui) throws DietException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (commandCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your name first!\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (commandCount \u003d\u003d 2) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"Please enter your basic information first!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui.printPersonInfo(manager.getPerson().toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 19
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/database/Canteen.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Canteen {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final ArrayList\u003cStore\u003e storeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Canteen(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.storeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Name of the canteen is for filtering purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return name of canteen"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addStore(Store store) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        storeList.add(store);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cStore\u003e getStoreList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return storeList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 30,
      "HengFuYuen": 1
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/database/DataBase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DataBase {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String START_SYMBOL \u003d \"\u0026%START\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String STOP_SYMBOL \u003d \"\u0026%STOP\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String UP_SYMBOL \u003d \"\u0026%UP\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String DATA_FILE_SEPERATOR \u003d \"\\\\|\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final List\u003cCanteen\u003e canteenList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Instantiate an empty Database object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DataBase() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.canteenList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Loads and parses the resource main/resource/data.txt"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * This data is used to build the internal canteenList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        InputStream dataStream \u003d DataBase.class.getResourceAsStream(\"/data.txt\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assert (dataStream !\u003d null) : \"Could not load resource\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Scanner fileReader \u003d new Scanner(dataStream);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileLine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        boolean start \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileLine \u003d fileReader.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            // ------ Check if the data base has started scanning ------"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (fileLine.equals(START_SYMBOL)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                start \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (!(start)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (fileLine.equals(STOP_SYMBOL)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            canteenList.add(fillCanteen(fileLine, fileReader));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function is called right after the canteen name is provided"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The very next line that the file reads is the store name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * It will turn call fillStore with that name inserted, when the function fillStore"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * finishes executing, fileRead.nextLine() can either provide a new store name or UP_SYMBOL"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * if the UP_SYMBOL is provided, the function ends and the final Canteen object is returned."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param name name of store"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileSegment the file reader with the next line being a food item or UP_SYMBOL"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Canteen objected with all it\u0027s stores loaded"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Canteen fillCanteen(String name, Scanner fileSegment) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Canteen canteen \u003d new Canteen(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (!(fileLine.equals(UP_SYMBOL))) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            canteen.addStore(fillStore(fileLine,fileSegment));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteen;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function is called right after the store name is provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The very next line in the file should be the first food to be added."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The function stops when it hits the line of the file that says UP_SYMBOL."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param name name of the store"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileSegment the Scanner object used for the init() function"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return the completed store with all the food loaded"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Store fillStore(String name, Scanner fileSegment) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Store store \u003d new Store(name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Food food;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String[] fileData \u003d fileLine.split(DATA_FILE_SEPERATOR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (!(fileLine.equals(UP_SYMBOL))) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            food \u003d new Food(fileData[0], Integer.parseInt(fileData[1]), Integer.parseInt(fileData[2]),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            Integer.parseInt(fileData[3]), Integer.parseInt(fileData[4]));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            store.addFood(food);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileData \u003d fileLine.split(DATA_FILE_SEPERATOR);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Debugging function prints out all contents."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void printAllData() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Printing out all data\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (Canteen canteen : canteenList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Canteeh : \" + canteen.getName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            for (Store store : canteen.getStoreList()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                System.out.println(\"Store : \" + store.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                for (Food food : store.getFoodList()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    System.out.println(food);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Finished Printing out all data\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    // -------- Search functions --------"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This method searchs the whole data base and returns the first food item whose name contains the provided string."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * ( CASE SENSITIVE ! )"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food part of the name of the food"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no food contains the name provided"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food searchFoodByName(String food) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getName().contains(food)).findFirst().orElseThrow();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This method searchs the whole data base and returns all of the food whose name contains the provided string."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food part of the name of the food e.g. chicken"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return data stream of all food items"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodContainingName(String food) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getName().contains(food));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Search for the first food that contains the string provided in the first store which matchs the store"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * string provided."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food partial name of the food"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param store partial name of the store"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no food contains the name provided"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food searchFoodByNameByStore(String food, String store) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return searchAllFoodByStore(store)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(food))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a stream of all the food in the first store that contains the given string."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param store partial name of the store"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return food stream"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no there is no store"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodByStore(String store) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getStoreList().stream())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(store))"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .getFoodList()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .stream();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a stream of all the food in all stores that contains the given string."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param store partial name of the store"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return  food stream"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodOfAllStores(String store) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getStoreList().stream())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(store))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getFoodList().stream());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns the first food that contains the food String provided that is in the first canteen that contains the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * canteen String provided."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food partial name of the food"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param canteen partial name of the canteen"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no food contains the name provided"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food searchFoodByNameByCanteen(String food, String canteen) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return searchAllFoodByNameByCanteen(food, canteen)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns all food that contains the provided food name in the first canteen that matchs the canteen name."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food partial name of the food"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param canteen partial name of the canteen"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food Stream"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodByNameByCanteen(String food, String canteen) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(canteen))"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .getStoreList()"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getFoodList().stream())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(food));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a stream of food whose calorie is below the provided amount."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param calorie the maximum calorie of the food"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return food stream"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodBelowCalorie(int calorie) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getCalorie() \u003c calorie);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns all food within the calorie range."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param minCalorie minimum calories"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param maxCalorie maximum calories"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return food stream"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodInCalorieRange(int minCalorie, int maxCalorie) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getCalorie() \u003c\u003d maxCalorie \u0026\u0026 x.getCalorie() \u003e\u003d minCalorie);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Provides a data stream of all the food in the data base."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return a food stream"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e foodStream() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getStoreList().stream())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getFoodList().stream());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Provide a list of all food in the data base."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 250,
      "mxksowie": 16
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/database/Store.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Store {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final ArrayList\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Store(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The name of the store will be used for filtering purposes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return store name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function should only be called when we initialize the data base from the text file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 38,
      "HengFuYuen": 2
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/database/data.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#####################################################################"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    3 LEVEL DATA BASE                                              #"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Canteen -----\u003e Store ------\u003e Food                              #"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Commands :                                                     #"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%START : start reading data from the data base                #"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%STOP : stop reading data from the data base                  #"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%UP    : goes down 1 level e.g. Canteen ---\u003e Store            #"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%DOWN    : goes down 1 level e.g. Canteen ---\u003e Store          #"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%ADD format : adds the item with the given format             #"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#                                                                   #"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Comments : any line that starts with # is ignored              #"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#                                                                   #"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Canteen format : {name}                                        #"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Store format : {name}                                          #"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Food format : {name}|{Calorie}|{Carb}|{Protein}|{Fat}          #"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#####################################################################"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "######################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   Version 0.1 :                                                    #"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   there is only UP, once a store or canteen is                     #"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#  specified we automatically go down 1 level , for this version     #"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   there is no going out of a store and then coming back to add more#"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   Units : Calorie : kcal  : Carbs : g Protein : g : Fats : g       #"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "######################################################################"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%START"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Science canteen"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Halal Mini Wok"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Prawn Mee Soup(Dry)(Large)|490|0|0|0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Prawn Mee Soup(Dry)(Small)|390|0|0|0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Fried Hokkien Prawn Mee(Large)|470|0|0|0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Fried Hokkien Prawn Mee(Small)|350|0|0|0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Clay Pot Chicken|440|0|0|0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Black Pepper Chicken|490|0|0|0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ayam Penyet"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ayam Penyet Set|699|0|0|0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Steamed Chicken Set |475|0|0|0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ikan Grouper Penyet Set|669|0|0|0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Michelin Star Restaurant"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Bouillabaisse with cock crab and poached lobster|520|45|35|56"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Chicken wings with Reblochon pomme purée|450|25|32|66"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Sea bass with prawn tortellini, fennel purée and white wine sauce|530|76|25|43"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%STOP"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 48
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/exception/DietException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DietException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DietException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 12
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Constructor of the Food class"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Store information regarding a food item: name, number of calories in kcal, amount of carbohydrate in grams,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * amount of protein in grams, amount of fats in grams."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int calorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int carbohydrate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int protein;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int fats;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food(String name, int calorie, int carbohydrate, int protein, int fats) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.carbohydrate \u003d carbohydrate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fats \u003d fats;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public int getFat() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return fats;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getCalorie() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getCarbohydrate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return carbohydrate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getProtein() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return protein;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name + \" | calorie : \" + calorie + \" | protein : \" + protein + \" | carbohydrate : \" + carbohydrate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                + \" | fats : \" + fats;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 49,
      "mxksowie": 1
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/DatedFoodEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class DatedFoodEntry extends FoodEntry implements Comparable\u003cDatedFoodEntry\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Default constructor method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Creates a food entry with a DateTime set to now."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public DatedFoodEntry(int portionSize, String name, int calorie, "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            int carbohydrate, int protein, int fat) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        super(portionSize, name, calorie, carbohydrate, protein, fat);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.dateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Convenience constructor for testing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Also could be for adding food objects directly via DataBase."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public DatedFoodEntry(int portionSize, Food food) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        super(portionSize, food);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.dateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Convenience constructor for testing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Could also be for adding backlogged entries with food objects directly via Database."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public DatedFoodEntry(int portionSize, Food food, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        super(portionSize, food);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assert (dateTime !\u003d null) : \"Should not add null DateTime.\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                + \"Use other constructor to create with LocalDateTime.now() instead.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * For adding backlogged entries."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public DatedFoodEntry(int portionSize, String name, int calorie, "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            int carbohydrate, int protein, int fat, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        super(portionSize, name, calorie, carbohydrate, protein, fat);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assert (dateTime !\u003d null) : \"Should not add null DateTime.\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                + \"Use other constructor to create with LocalDateTime.now() instead.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assert (dateTime.isBefore(LocalDateTime.now())) : \"Attempting to add entry that hasn\u0027t happened yet.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public int compareTo(DatedFoodEntry other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return dateTime.compareTo(other.getDateTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mxksowie": 64
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/FoodEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Data class to store both serving sizes and a food object as a single object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodEntry {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private final int portionSize;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private final Food food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Convenience constructor mainly for testing."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * In the future, this is expected be the constructor for adding entries using food from the database."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public FoodEntry(int portionSize, Food food) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assert (portionSize \u003e 0) : \"Non-positive, invalid portion size not caught.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.portionSize \u003d portionSize;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Default constructor. Creates new food object as part of entry."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public FoodEntry(int portionSize, String name, int calorie, "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            int carbohydrate, int protein, int fat) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assert (portionSize \u003e 0) : \"Non-positive, invalid portion size not caught.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.portionSize \u003d portionSize;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.food \u003d new Food(name, calorie, carbohydrate, protein, fat);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Getter method for the Food object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public Food getFood() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return food;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Getter method for the portionSize object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public int getPortionSize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return portionSize;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return String.format(\"%s -- (%s)\", food.toString(), portionSize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 2,
      "mxksowie": 50
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/FoodList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Wrapper class for the implementation of foodlist as an arraylist of foodEntry objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Foodlist does not return its ArrayList nor foodEntry objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * This is a stateful object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private static ArrayList\u003cFoodEntry\u003e foodEntries;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Default constructor that instantiates FoodList with an empty foodentry arraylist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public FoodList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.foodEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Convenience constructor for testing purposes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected FoodList(ArrayList\u003cFoodEntry\u003e entries) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.foodEntries \u003d entries;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Adds food of portion size directly into the foodlist as an entry."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * When date functionality is added, this method will need to be overhauled."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * The adding feature will be largely pushed to FoodListManager (to figure out dates)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param portionSize integer to designate number of servings"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param food food object to be added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return string representation of the food object added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFood(int portionSize, Food food) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodEntry entry \u003d new DatedFoodEntry(portionSize, food);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        foodEntries.add(entry);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return entry.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Default add method that adds a food entry using the food details and portion size."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFood(int portionSize, String name, int calorie, "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            int carbohydrate, int protein, int fat) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodEntry entry \u003d new DatedFoodEntry(portionSize, name, calorie, carbohydrate, protein, fat);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        foodEntries.add(entry);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return entry.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Food database search functionality support."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Not expected to function. Added for completeness."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Currently just throws a not found exception when called in this manner."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param portionSize integer to designate number of servings"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param name food object to be added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return string representation of the food object added"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @throws FoodNotFoundException custom exception to indicate search for food in database failed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFood(int portionSize, String name) throws FoodNotFoundException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Add add method for baglogged entries."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Allows specificiation of time via LocalDateTime param."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param dateTime User specified time for backlogged entry."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFoodAtDateTime(int portionSize, String name, int calorie, "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            int carbohydrate, int protein, int fat, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodEntry entry \u003d new DatedFoodEntry(portionSize, name, calorie, carbohydrate, protein, fat, dateTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        foodEntries.add(entry);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return entry.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Deletes the the entry of the list at the provided index."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * index starts from 1 (not 0). i.e. is User\u0027s understanding of index."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String delete(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            return FoodListManager.deleteEntry(foodEntries, index).toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Discards previous foodEntry list and creates a new one."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public boolean clear() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.foodEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain the food objects in Foodlist as an ArrayList."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * For other classes that wish to operate on the Food items directly."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return Arraylist of ordered Food objects in Foodlist\u0027s foodEntries."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public List\u003cFood\u003e getFoods() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToFoods(foodEntries);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain list of food objects in FoodList, scaled to portion size."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public List\u003cFood\u003e getPortionedFoods() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToPortionedFoods(foodEntries);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain list of foods consumed after specified timing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public static List\u003cFood\u003e getFoodsAfterDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        List\u003cFoodEntry\u003e entriesAfterDateTime \u003d FoodListManager.filterListByDate(foodEntries, dateTime);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToFoods(entriesAfterDateTime);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain list of foods consumed after specified timing, scaled to portion size."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public List\u003cFood\u003e getPortionedFoodsAfterDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        List\u003cFoodEntry\u003e entriesAfterDateTime \u003d FoodListManager.filterListByDate(foodEntries, dateTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToFoods(entriesAfterDateTime);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain list of foods consumed within the range of a specified timing."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public static List\u003cFood\u003e getFoodsInDateTimeRange(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        List\u003cFoodEntry\u003e entriesInRange \u003d FoodListManager.filterListByDate(foodEntries, start, end);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToFoods(entriesInRange);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain list of foods consumed within the range of a specified timing, scaled to portion size."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public List\u003cFood\u003e getPortionedFoodsInDateTimeRange(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        List\u003cFoodEntry\u003e entriesInRange \u003d FoodListManager.filterListByDate(foodEntries, start, end);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToPortionedFoods(entriesInRange);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToString(foodEntries);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 6,
      "HengFuYuen": 1,
      "mxksowie": 151
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/FoodListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Class with static methods to execute \"complex commands\" on FoodList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * This class handles methods that extend beyond the simple function of an arraylist"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Class contains static methods with logic beyond adding, removing, and instantiating new lists"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * This class may be used to support functional programming by merging these function into functors"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodListManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Internal helper method to convert the items in the arraylist into enumed strings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Primarily used to obtain String representations of the entire list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static String listToString(List\u003cFoodEntry\u003e list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        String listString \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            FoodEntry entry \u003d list.get(i - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            listString +\u003d \"  \" + i + \". \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                    + entry.toString() + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return listString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static FoodEntry deleteEntry(List\u003cFoodEntry\u003e list, int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assert (index \u003e 0) : \"Invalid index (negative/zero) was given.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        int indexToDelete \u003d index - 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            return list.remove(indexToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Method to obtain list of foodentries in string rep."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param list The foodList arrayList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return List of foodEntries in their String rep."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static List\u003cString\u003e listToStrings(List\u003cFoodEntry\u003e list) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Function\u003cFoodEntry, String\u003e function \u003d x -\u003e x.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return ListFunction.applyFunctionToList(list, function);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Extracts the list of foods from the foodentries list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param list list of foodEntries"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return arraylist of Food objects."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static List\u003cFood\u003e listToFoods(List\u003cFoodEntry\u003e list) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Function\u003cFoodEntry, Food\u003e function \u003d x -\u003e x.getFood();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return ListFunction.applyFunctionToList(list, function);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Creates a list of foods that have their nutritional values scaled by portion size."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * This is based on the FoodEntries in the list provided."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param list list of FoodEntries"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return arraylist of Food objects"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static List\u003cFood\u003e listToPortionedFoods(List\u003cFoodEntry\u003e list) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Function\u003cFoodEntry, Food\u003e function \u003d x -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            Food baseFood \u003d x.getFood();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            /**  Explicitly getting return type of getPortionSize() is avoided."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "             * Future updates might see the type change from int to float"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "             * return of getPortionSize() essentially treated as a \"multipliable\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            return new Food(baseFood.getName(), "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                    baseFood.getCalorie() * x.getPortionSize(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                    baseFood.getCarbohydrate() * x.getPortionSize(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                    baseFood.getProtein() * x.getPortionSize(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                    baseFood.getFat() * x.getPortionSize());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return ListFunction.applyFunctionToList(list, function);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain only food entries after a specified dateTime."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static List\u003cFoodEntry\u003e filterListByDate(List\u003cFoodEntry\u003e list, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Predicate\u003cFoodEntry\u003e predicate \u003d x -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            assert (x instanceof DatedFoodEntry) : \"A FoodEntry without a date was unexpectedly added and found\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            DatedFoodEntry datedEntry \u003d (DatedFoodEntry) x;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            return dateTime.isBefore(datedEntry.getDateTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        };"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return ListFunction.filterList(list, predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain only food entries within a specified range of dateTimes."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static List\u003cFoodEntry\u003e filterListByDate(List\u003cFoodEntry\u003e list, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Predicate\u003cFoodEntry\u003e predicate \u003d x -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            assert (x instanceof DatedFoodEntry) : \"A FoodEntry without a date was unexpectedly added and found\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            DatedFoodEntry datedEntry \u003d (DatedFoodEntry) x;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            return start.isBefore(datedEntry.getDateTime()) \u0026\u0026 end.isAfter(datedEntry.getDateTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        };"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return ListFunction.filterList(list, predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "// Potential future work: create a functional interface for the functions instead:"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 2,
      "mxksowie": 109
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/FoodNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodNotFoundException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "mxksowie": 3
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/list/ListFunction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Functional programming support methods for Lists."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class ListFunction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Maps a function across a list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param list list to operate on"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param function function to be mapped across list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return list of mapped items under provided function"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static \u003cT, E\u003e ArrayList\u003cE\u003e applyFunctionToList(List\u003cT\u003e list, Function\u003cT, E\u003e function) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        ArrayList\u003cE\u003e appliedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Consumer\u003cT\u003e addResultToAppliedList \u003d x -\u003e appliedList.add(function.apply(x));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        list.forEach(addResultToAppliedList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return appliedList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Filters the list by the given predicate."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static \u003cT\u003e List\u003cT\u003e filterList(List\u003cT\u003e list, Predicate\u003cT\u003e predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return list.stream().filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mxksowie": 34
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.dietbook.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.list.FoodList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.Gender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.person.ActivityLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.exception.DietException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.Manager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.dietbook.checker.InputChecker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * Parser class of the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * The parser class takes in user input and process it into command data that manager can use."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " * @author tikimonarch"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_INFO \u003d \"info\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_CALCULATE \u003d \"calculate\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public static final String[] PARAM_INFO \u003d {\"g/\",\"a/\",\"h/\",\"l/\",\"o/\",\"t/\",\"c/\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Returns the command of a user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput which is user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return First word which is the command of the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static String getCommand(String userInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Returns the subsequent parameter after the command from the user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return parameter part of the user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static String getCommandParam(String userInput) throws DietException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String command \u003d getCommand(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        InputChecker.checkEmpty(userInput, command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_NAME:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return userInput.split(\"name\")[1].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_CALCULATE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            InputChecker.checkNutrientType(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return userInput.split(\"calculate\")[1].trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_ADD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            InputChecker.checkAddParam(userInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return userInput.substring(userInput.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_INFO:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            InputChecker.checkInfoParam(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return userInput.substring(userInput.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Processes the parameters for \u003ccode\u003eadd\u003c/code\u003e command of user input and adds a \u003ccode\u003eFood\u003c/code\u003e object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param foodList the FoodList object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return name of the food that was added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static String getProcessedAdd(String userInput, FoodList foodList) throws DietException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int portionSize \u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String foodName \u003d \"Food Name\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int calorie \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int carb \u003d -1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int protein \u003d -1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int fat \u003d -1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String trimmedParam;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String[] processedParam;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String[] paramList \u003d {\"x/\", \"n/\", \"k/\", \"c/\", \"p/\", \"f/\"};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: paramList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (getCommandParam(userInput).contains(param)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                processedParam \u003d getCommandParam(userInput).split(param);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkEmptyOption(processedParam);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                trimmedParam \u003d processedParam[1].trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                if (processedParam[1].contains(\"/\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    trimmedParam \u003d processedParam[1].substring(0, processedParam[1].indexOf(\"/\") - 2).trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                switch (param) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"x/\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    portionSize \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(portionSize);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"n/\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    foodName \u003d trimmedParam;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"k/\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    calorie \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(calorie);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"c/\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    carb \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(carb);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                case \"p/\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    protein \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(protein);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    fat \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    InputChecker.checkFoodLimit(fat);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return foodList.addFood(portionSize, foodName, calorie, carb, protein, fat);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Processes the parameters for \u003ccode\u003einfo\u003c/code\u003e command of user input and updates the \u003ccode\u003ePerson\u003c/code\u003e object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param manager the manager object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void executeProcessedInfo(String userInput, Manager manager) throws DietException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        Gender gender \u003d Gender.MALE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ActivityLevel actLvl \u003d ActivityLevel.NONE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int age \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int height \u003d 0;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int orgWeight \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int currWeight \u003d 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int tarWeight \u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String trimmedParam;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String[] processedParam;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        for (String param: PARAM_INFO) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            processedParam \u003d getCommandParam(userInput).split(param);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            InputChecker.checkEmptyOption(processedParam);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            trimmedParam \u003d processedParam[1].trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (processedParam[1].contains(\"/\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                trimmedParam \u003d processedParam[1].substring(0, processedParam[1].indexOf(\"/\") - 2).trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            switch (param) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"g/\":"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                String processGender \u003d trimmedParam;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkGender(processGender);              "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                if (processGender.equals(\"F\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    gender \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                    gender \u003d Gender.OTHERS;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"a/\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                age \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkAgeLimit(age);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"h/\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                height \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkHeightLimit(height);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"o/\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                orgWeight \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkWeightLimit(orgWeight);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            case \"c/\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                currWeight \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                InputChecker.checkWeightLimit(currWeight);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case \"t/\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                tarWeight \u003d Integer.parseInt(trimmedParam);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkWeightLimit(tarWeight);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                String processActLvl \u003d trimmedParam;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                InputChecker.checkActivity(processActLvl);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                if (processActLvl.equals(\"1\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.NONE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                } else if (processActLvl.equals(\"2\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.LOW;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                } else if (processActLvl.equals(\"3\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.MEDIUM;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                } else if (processActLvl.equals(\"4\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.HIGH;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    actLvl \u003d ActivityLevel.EXTREME;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        manager.setPerson(manager.getName(), gender, age, height, orgWeight, currWeight, tarWeight, actLvl);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Returns the index after the command of a user input, e.g. delete 3."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return index part of the user input."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static int getCommandIndex(String userInput) throws DietException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String command \u003d getCommand(userInput);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        InputChecker.checkEmpty(userInput, command);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return Integer.parseInt(userInput.split(\" \")[1]);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"OOPS!!! No integer index detected!\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 12,
      "tikimonarch": 200
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/person/ActivityLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents the physical activity level of a person or the amount of exercise a person engages in."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * An \u003ccode\u003eActivityLevel\u003c/code\u003e has a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public enum ActivityLevel {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    NONE(\"You hardly engage in any exercise or have a job that requires little to no physical \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"activity.\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    LOW(\"You engage in some form of light exercise or have a job that requires some \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"physical activity.\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    MEDIUM(\"You engage in moderate amount of exercise or have a job that requires moderate \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"physical activity.\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    HIGH(\"You engage in vigorous exercise or have a physically demanding job.\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    EXTREME(\"You engage in extremely vigorous exercise or have an extremely physically demanding\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \" job.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs an \u003ccode\u003eActivityLevel\u003c/code\u003e given the description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description The description of the activity level."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    ActivityLevel(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the description of the activity level."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The description of the activity level."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 37
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/person/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents the gender of a person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eGender\u003c/code\u003e has a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    FEMALE(\"female\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    MALE(\"male\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    OTHERS(\"others\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eGender\u003c/code\u003e given the description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description The description of the gender."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    Gender(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the description of the gender."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The description of the gender."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 32
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a Person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003ePerson\u003c/code\u003e has a name, gender, age, height, certain activity level, original and desired weight."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The height of the person in cm */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The original weight of the person when he or she first started using DietBook in kg */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int originalWeight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The current weight of the person in kg */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int currentWeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The target weight of the person in kg */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int targetWeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private ActivityLevel activityLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003ePerson\u003c/code\u003e with the given name, gender, age, height, activity level, original,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * current and target weight."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the person."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param gender The gender of the person."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param age The age of the person."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param height The height of the person."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param originalWeight The original weight of the person when he or she first started using DietBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param currentWeight The current weight of the person."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param targetWeight The target/desired weight that the person wants to achieve."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param activityLevel The activity level of the person or in other words, the amount of exercise the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     person engages in."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Person(String name, Gender gender, int age, int height, int originalWeight,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                  int currentWeight, int targetWeight, ActivityLevel activityLevel) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForPerson(name, gender, age, height, originalWeight, currentWeight,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                targetWeight, activityLevel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.name \u003d name.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.originalWeight \u003d originalWeight;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.currentWeight \u003d currentWeight;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets all the attributes of a person to the new attributes given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newName The new/revised name of the person."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newGender The new/revised gender of the person."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newAge The new/revised age of the person."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newHeight The new/revised height of the person."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newOriginalWeight The new/revised original weight of the person when he or she first started"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     using DietBook."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newCurrentWeight The new/revised current weight of the person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newTargetWeight The new/revised target weight that the person wants to achieve."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newActivityLevel The new/revised activity level of the person or in other words, the amount"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     of exercise the person engages in."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setAll(String newName, Gender newGender, int newAge, int newHeight, int newOriginalWeight,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                             int newCurrentWeight, int newTargetWeight, ActivityLevel newActivityLevel) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        setName(newName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        setGender(newGender);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        setAge(newAge);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        setHeight(newHeight);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        setOriginalWeight(newOriginalWeight);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        setCurrentWeight(newCurrentWeight);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        setTargetWeight(newTargetWeight);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        setActivityLevel(newActivityLevel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the name of the person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The name of the person."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the name of the person to the new name given."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newName The new/revised name of the person."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setName(String newName) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNameInput(newName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        name \u003d newName.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the gender of the person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The gender of the person."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the gender of the person to the new gender given."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newGender The new/revised gender of the person."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setGender(Gender newGender) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForGenderInput(newGender);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        gender \u003d newGender;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the age of the person."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The age of the person."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the age of the person to the new age that is given."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newAge The new/revised age of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setAge(int newAge) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForAgeInput(newAge);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        age \u003d newAge;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the height of the person."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The height of the person."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the height of the person to the new height given."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newHeight The new/revised height of the person."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setHeight(int newHeight) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForHeight(newHeight);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        height \u003d newHeight;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the original weight of the person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The original weight of the person."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getOriginalWeight() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return originalWeight;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the original weight of the person to the new original weight given."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newOriginalWeight The new/revised original weight of the person."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setOriginalWeight(int newOriginalWeight) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForWeight(newOriginalWeight,\"Original weight\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        originalWeight \u003d newOriginalWeight;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the current weight of the person when he or she first started using DietBook."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The current weight of the person when he or she first started using DietBook."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getCurrentWeight() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return currentWeight;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the current weight of the person to the new current weight given."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newCurrentWeight The new/revised current weight of the person."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setCurrentWeight(int newCurrentWeight) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForWeight(newCurrentWeight, \"Current weight\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        currentWeight \u003d newCurrentWeight;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the target weight the person the person wants to achieve."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The target weight the person wants to achieve."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getTargetWeight() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return targetWeight;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the target weight of the person to the new target weight given."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newTargetWeight The new/revised target weight of the person."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setTargetWeight(int newTargetWeight) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForWeight(newTargetWeight, \"Target weight\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        targetWeight \u003d newTargetWeight;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the activity level of the person."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The activity level of the person."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ActivityLevel getActivityLevel() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return activityLevel;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the activity level of the person to the new activity level given."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newActivityLevel The new/revised activity level of the person."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setActivityLevel(ActivityLevel newActivityLevel) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForActivityLevel(newActivityLevel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        activityLevel \u003d newActivityLevel;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of all information related to the user."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Information includes name, gender, age, height, original weight, target weight and activity level."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of all information related to the user."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String userInformation \u003d \"  Name: \" + name + System.lineSeparator()"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Gender: \" + gender.getDescription() + System.lineSeparator()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Age: \" + age + System.lineSeparator()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Height: \" + height + \"cm\" + System.lineSeparator()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Original weight: \" + originalWeight + \"kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Current weight: \" + currentWeight + \"kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Target weight: \" + targetWeight + \"kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Activity level: \" + activityLevel.getDescription();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return userInformation;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions on all possible person inputs parameters."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the person."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param gender The gender of the person."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param age The age of the person."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param height The height of the person."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param originalWeight The original weight of the person when he or she first started using DietBook."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param currentWeight The current weight of the person."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param targetWeight The target/desired weight that the person wants to achieve."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param activityLevel The activity level of the person or in other words, the amount of exercise the"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     person engages in."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForPerson(String name, Gender gender, int age, int height,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                            int originalWeight, int currentWeight, int targetWeight,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                            ActivityLevel activityLevel) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForNameInput(name);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForGenderInput(gender);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForAgeInput(age);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForHeight(height);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForWeight(originalWeight, \"Original weight\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForWeight(currentWeight, \"Current weight\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForWeight(targetWeight, \"Target weight\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        performAssertionsForActivityLevel(activityLevel);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertion on the activity level input."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param activityLevel The activity level of the person or in other words, the amount of exercise the"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     person engages in."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForActivityLevel(ActivityLevel activityLevel) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert activityLevel !\u003d null : \"Activity level of person should not be null\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions the weight related inputs."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param weight Either the original, current or target weight of the person."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param weightType A string describing whether the weight given the original, current or target weight."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForWeight(int weight, String weightType) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int minWeight \u003d 1;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert weight \u003e\u003d minWeight : weightType + \" of person should be greater than 0\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int maxWeight \u003d 500;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert weight \u003c\u003d maxWeight : weightType + \" of person should less than 500\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions on the height input."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param height The height of the person."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForHeight(int height) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int minHeight \u003d 1;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert height \u003e\u003d minHeight : \"Height of person should be greater than 0\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int maxHeight \u003d 300;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert height \u003c\u003d maxHeight : \"Height of person should be less than 300\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertion on the gender input."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param gender The gender of the person."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForGenderInput(Gender gender) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert gender !\u003d null : \"Gender of person should not be null\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions on the name input."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the person."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForNameInput(String name) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name !\u003d null : \"The name of person should not be null\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name.trim().length() \u003e 0 : \"The name of person should not be an empty string\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Performs assertions on the age input."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param age The age of the person."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private void performAssertionsForAgeInput(int age) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int minAge \u003d 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert age \u003e\u003d minAge : \"The age of person should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int maxAge \u003d 150;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert age \u003c\u003d maxAge : \"The age of person should be lesser than 150\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 339
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/saveload/EmptyLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Place holder class for Loader, does not do anything"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Throws IllegalAccessException if there is any attempt to access this class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class EmptyLoader extends Loader {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    protected EmptyLoader(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Optional\u003cString\u003e get(int xposition, int yposition) throws IllegalAccessException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        throw new IllegalAccessException(\"Do not attempt to get from an empty loader!\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    int getHeight() throws IllegalAccessException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        throw new IllegalAccessException(\"Do not attempt to get from an empty loader!\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    int getWidth() throws IllegalAccessException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        throw new IllegalAccessException(\"Do not attempt to get from an empty loader!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 27
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/saveload/FileLoader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Handles reading of stored text file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Note: the first five fields must be same"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class FileLoader extends Loader {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String ROOT_DIRECTORY \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String BASE_FOLDER_NAME \u003d  ROOT_DIRECTORY + File.separator + \"dietbook\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String EMPTY_SYMBOL \u003d \"%NULL\u0026!!LL\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String SEPARATOR_SYMBOL \u003d \"\u0026%SEPERATOR%AAA%\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String FILE_EXTENSION \u003d \".txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String[][] entries;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int width;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    protected FileLoader(String folderName, String fileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        File file \u003d new File(BASE_FOLDER_NAME + File.separator + folderName"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            + File.separator + fileName + FILE_EXTENSION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Scanner reader \u003d new Scanner(file);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        width \u003d Integer.parseInt(reader.nextLine());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        height \u003d Integer.parseInt(reader.nextLine());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        entries \u003d new String[height][width];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String[] line;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int j \u003d 0; j \u003c height; j++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            line \u003d reader.nextLine().split(SEPARATOR_SYMBOL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (width \u003e\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                System.arraycopy(line, 1, entries[j], 0, width);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Get the String entry stored at the specified position in the table if it is present."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param xposition the x position in the table from 1 to the table width"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param yposition the y position in the table from 1 to the table height"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Optional of the String. The Optional is empty is no entry is stored"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws IndexOutOfBoundsException if the x or y given is not as above"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Optional\u003cString\u003e get(int xposition, int yposition) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (this.entries[yposition - 1][xposition - 1].equals(EMPTY_SYMBOL)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                return Optional.of(this.entries[yposition - 1][xposition - 1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new IndexOutOfBoundsException(\"The x or y position provided must be within the the dimensions of the\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + \"saver table!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getWidth() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return width;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 68
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/saveload/FoodSaveLoadManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Server as a in-between class between loader saver and food list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class FoodSaveLoadManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int DEFAULT_SAVER_WIDTH \u003d 5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int DEFAULT_SAVER_HEIGHT \u003d 10;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String FOOD_FOLDER_NAME \u003d \"Food%%UOISDN%%FOLDER\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"MISSING NAME\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String DEFAULT_NUTRITION_VALUE \u003d \"0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Saver saver;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Loader fileLoader;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public FoodSaveLoadManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver \u003d new Saver(DEFAULT_SAVER_WIDTH, DEFAULT_SAVER_HEIGHT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fileLoader \u003d Loader.loadEmpty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Call this function to load a food file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileName name of file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws FileNotFoundException if there is no such save file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void load(String fileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fileLoader \u003d Loader.load(FOOD_FOLDER_NAME, fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void clearLoader() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fileLoader \u003d Loader.loadEmpty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a list of food that is stored in the loader."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return the food list obtained from the data in the loaded file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws IllegalAccessException When this method is called without first loading a food file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cFood\u003e getFoodList() throws IllegalAccessException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        ArrayList\u003cFood\u003e foodlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Food newFood;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int j \u003d 1; j \u003c fileLoader.getHeight() + 1; j++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            newFood \u003d new Food("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    fileLoader.get(1,j).orElse(DEFAULT_NAME),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    Integer.parseInt(fileLoader.get(2,j).orElse(DEFAULT_NUTRITION_VALUE)),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    Integer.parseInt(fileLoader.get(3,j).orElse(DEFAULT_NUTRITION_VALUE)),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    Integer.parseInt(fileLoader.get(4,j).orElse(DEFAULT_NUTRITION_VALUE)),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    Integer.parseInt(fileLoader.get(5,j).orElse(DEFAULT_NUTRITION_VALUE)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            foodlist.add(newFood);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodlist;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * saves a input food list to a file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileName the name of the file to save to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param foodlist list of food objects to be saved"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void save(String fileName, List\u003cFood\u003e foodlist) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.resetSize(DEFAULT_SAVER_WIDTH, foodlist.size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int j \u003d 1; j \u003c foodlist.size() + 1; j++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            saver.add(foodlist.get(j - 1).getName(), 1, j);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            saver.add(Integer.toString(foodlist.get(j - 1).getCalorie()), 2, j);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            saver.add(Integer.toString(foodlist.get(j - 1).getCarbohydrate()), 3, j);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            saver.add(Integer.toString(foodlist.get(j - 1).getProtein()), 4, j);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            saver.add(Integer.toString(foodlist.get(j - 1).getFat()), 5, j);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.save(FOOD_FOLDER_NAME, fileName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 78
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/saveload/Loader.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "abstract class Loader {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static Loader load(String folderName, String fileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return new FileLoader(folderName, fileName);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static Loader loadEmpty() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return new EmptyLoader();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract Optional\u003cString\u003e get(int xposition, int yposition) throws IllegalAccessException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract int getHeight() throws IllegalAccessException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    abstract int getWidth() throws IllegalAccessException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 20
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/saveload/PersonSaveLoadManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * This class is responsible for saving and loading personal information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * It has setters and getters for the following fields :"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * name, gender, age, height, original weight, current weight, target weight, activity level"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * it has a method load which loads from a specified saved file"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * it has a method save which saves the current information to a specified file name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class PersonSaveLoadManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int NUM_OF_ENTRIES \u003d 8;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int TABLE_HEIGHT \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int PERSON_DATA_ROW \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String PERSON_FOLDER_NAME \u003d \"PERSONA_IS_NO_SUCH_PERSOOSOOSNSNSNS\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int NAME_ENTRY_INDEX \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int GENDER_ENTRY_INDEX \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int AGE_ENTRY_INDEX \u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int HEIGHT_ENTRY_INDEX \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int ORIGINAL_WEIGHT_ENTRY_INDEX \u003d 5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int CURRENT_WEIGHT_ENTRY_INDEX \u003d 6;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int TARGET_WEIGHT_ENTRY_INDEX \u003d 7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int ACTIVITY_LEVEL_ENTRY_INDEX \u003d 8;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"Missing Name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String DEFAULT_GENDER \u003d \"Others\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int DEFAULT_AGE \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int DEFAULT_HEIGHT \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int DEFAULT_ORIGINAL_WEIGHT \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int DEFAULT_CURRENT_WEIGHT \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int DEFAULT_TARGET_WEIGHT \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final int DEFAULT_ACTIVITY_LEVEL \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private int originalWeight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private int currentWeight;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private int targetWeight;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private int activityLevel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Saver saver;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Loader fileLoader;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public PersonSaveLoadManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver \u003d new Saver(NUM_OF_ENTRIES, TABLE_HEIGHT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fileLoader \u003d Loader.loadEmpty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.gender \u003d DEFAULT_GENDER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.age \u003d DEFAULT_AGE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.height \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.originalWeight \u003d DEFAULT_ORIGINAL_WEIGHT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.currentWeight \u003d DEFAULT_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.targetWeight \u003d DEFAULT_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.activityLevel \u003d DEFAULT_ACTIVITY_LEVEL;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * loads a saved file and fill up all the fields with the data from the loaded file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * set the field to default is the loaded file does not contain the field"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileName name of the saved file to be loaded to"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws FileNotFoundException there is no save file with the name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws IllegalAccessException the get method is called when the loader is empty, will never happen with the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *     current implementation."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void load(String fileName) throws FileNotFoundException, IllegalAccessException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.reset();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fileLoader \u003d Loader.load(PERSON_FOLDER_NAME, fileName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d this.fileLoader.get(NAME_ENTRY_INDEX, PERSON_DATA_ROW).orElse(DEFAULT_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.gender \u003d this.fileLoader.get(GENDER_ENTRY_INDEX, PERSON_DATA_ROW).orElse(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.age \u003d Integer.parseInt(this.fileLoader.get(AGE_ENTRY_INDEX, PERSON_DATA_ROW).orElse("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                Integer.toString(DEFAULT_AGE)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.height \u003d Integer.parseInt(this.fileLoader.get(HEIGHT_ENTRY_INDEX, PERSON_DATA_ROW).orElse("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                Integer.toString(DEFAULT_HEIGHT)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.originalWeight \u003d Integer.parseInt(this.fileLoader.get(ORIGINAL_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW).orElse("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                Integer.toString(DEFAULT_ORIGINAL_WEIGHT)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.currentWeight \u003d Integer.parseInt(this.fileLoader.get(CURRENT_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW).orElse("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                Integer.toString(DEFAULT_CURRENT_WEIGHT)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.targetWeight \u003d Integer.parseInt(this.fileLoader.get(TARGET_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW).orElse("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                Integer.toString(DEFAULT_TARGET_WEIGHT)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.activityLevel \u003d Integer.parseInt(this.fileLoader.get(ACTIVITY_LEVEL_ENTRY_INDEX, PERSON_DATA_ROW).orElse("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                Integer.toString(DEFAULT_ACTIVITY_LEVEL)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Method saves the current data stored in the fields to the specified file name."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Will over-write files with the same name."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileName name of the file to save to"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void save(String fileName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.reset();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.add(this.name, NAME_ENTRY_INDEX, PERSON_DATA_ROW);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.add(this.gender, GENDER_ENTRY_INDEX, PERSON_DATA_ROW);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.add(Integer.toString(this.age), AGE_ENTRY_INDEX, PERSON_DATA_ROW);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.add(Integer.toString(this.height), HEIGHT_ENTRY_INDEX, PERSON_DATA_ROW);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.add(Integer.toString(this.originalWeight), ORIGINAL_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.add(Integer.toString(this.currentWeight), CURRENT_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.add(Integer.toString(this.targetWeight), TARGET_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.add(Integer.toString(this.currentWeight), ACTIVITY_LEVEL_ENTRY_INDEX, PERSON_DATA_ROW);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.saver.save(PERSON_FOLDER_NAME, fileName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fileLoader \u003d Loader.loadEmpty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.gender \u003d DEFAULT_GENDER;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.age \u003d DEFAULT_AGE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.height \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.originalWeight \u003d DEFAULT_ORIGINAL_WEIGHT;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.currentWeight \u003d DEFAULT_CURRENT_WEIGHT;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.targetWeight \u003d DEFAULT_TARGET_WEIGHT;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.activityLevel \u003d DEFAULT_ACTIVITY_LEVEL;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    // ----- Setters and Getters ------"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getOriginalWeight() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return originalWeight;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getCurrentWeight() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return currentWeight;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getTargetWeight() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return targetWeight;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getActivityLevel() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return activityLevel;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setGender(String gender) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setAge(int age) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setHeight(int height) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setOriginalWeight(int originalWeight) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.originalWeight \u003d originalWeight;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setCurrentWeight(int currentWeight) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.currentWeight \u003d currentWeight;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setTargetWeight(int targetWeight) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setActivityLevel(int activityLevel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 184
    }
  },
  {
    "path": "src/main/java/seedu/dietbook/saveload/Saver.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Saver class allows storage of string data into a table with a given width and height"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * It has a function that can write the data stored in it\u0027s table."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Saver {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String ROOT_DIRECTORY \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String BASE_FOLDER_NAME \u003d  ROOT_DIRECTORY + File.separator + \"dietbook\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String EMPTY_SYMBOL \u003d \"%NULL\u0026!!LL\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String SEPERATOR_SYMBOL \u003d \"\u0026%SEPERATOR%AAA%\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String FILE_EXTENSION \u003d \".txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        File rootDirectory \u003d new File(BASE_FOLDER_NAME);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        rootDirectory.mkdir();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private String[][] entries;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private int width;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Saver(int width, int height) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        setWidthAndHeight(width,height);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        initEntries();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void setWidthAndHeight(int width, int height) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.width \u003d width;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void initEntries() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.entries \u003d new String[height][width];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (int i \u003d 0; i \u003c width; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            for (int j \u003d 0; j \u003c height; j++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                entries[j][i] \u003d EMPTY_SYMBOL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getWidth() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return width;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Clears the entire table and set it to the new size."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param newWidth the new width"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param newHeight the new height"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void resetSize(int newWidth, int newHeight) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        setWidthAndHeight(newWidth, newHeight);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        initEntries();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Clears the entire table."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        initEntries();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Adds the string provided to the position x,y on the table."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param entry the entry to be provided into this position"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param xposition x position"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param yposition y position"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws IndexOutOfBoundsException x or y position is out of bounds"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void add(String entry, int xposition, int yposition) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            this.entries[yposition - 1][xposition - 1] \u003d entry;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new IndexOutOfBoundsException(\"The x or y position provided must be within the the dimensions of the\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + \"saver table!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Deletes the entry in the table."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param xposition x position"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param yposition y position"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws IndexOutOfBoundsException x or y position is out of bounds"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void delete(int xposition, int yposition) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            this.entries[yposition - 1][xposition - 1] \u003d EMPTY_SYMBOL;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new IndexOutOfBoundsException(\"The x or y position provided must be within the the dimensions of the\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + \"saver table!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Gets a entry stored in the table."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param xposition x position"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param yposition y position"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Optional of String that is empty if the position does not contain an entry."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Optional\u003cString\u003e get(int xposition, int yposition) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (this.entries[yposition - 1][xposition - 1].equals(EMPTY_SYMBOL)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                return Optional.of(this.entries[yposition - 1][xposition - 1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            throw new IndexOutOfBoundsException(\"The x or y position provided must be within the the dimensions of the\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + \"saver table!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Saves the data table into a text file in the following format:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * width"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * height"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * (seperator) row 1 entry 1 (seperator) row 1 entry 2 (separator) ...."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * (seperator) row 2 entry 1 (separator) row 2 entry 2 (separator) ...."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * ...."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param folderName name of the folder"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileName name of the file"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void save(String folderName, String fileName) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            File directory \u003d new File(BASE_FOLDER_NAME + File.separator + folderName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            FileWriter writer \u003d new FileWriter(BASE_FOLDER_NAME + File.separator + folderName"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + File.separator + fileName + FILE_EXTENSION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            writer.write(width + \"\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            writer.write(height + \"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            for (int j \u003d 0; j \u003c height; j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                for (int i \u003d 0; i \u003c width; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(SEPERATOR_SYMBOL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    writer.write(entries[j][i]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Oops, the file writer took in a directory for some reason!\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 154
    }
  },
  {
    "path": "src/main/resources/data.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#####################################################################"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    3 LEVEL DATA BASE                                              #"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Canteen -----\u003e Store ------\u003e Food                              #"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Commands :                                                     #"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%START : start reading data from the data base                #"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%STOP : stop reading data from the data base                  #"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%UP    : goes down 1 level e.g. Canteen ---\u003e Store            #"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%DOWN    : goes down 1 level e.g. Canteen ---\u003e Store          #"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%ADD format : adds the item with the given format             #"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#                                                                   #"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Comments : any line that starts with # is ignored              #"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#                                                                   #"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Canteen format : {name}                                        #"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Store format : {name}                                          #"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Food format : {name}|{Calorie}|{Carb}|{Protein}|{Fat}          #"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#####################################################################"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "######################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   Version 0.1 :                                                    #"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   there is only UP, once a store or canteen is                     #"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#  specified we automatically go down 1 level , for this version     #"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   there is no going out of a store and then coming back to add more#"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   Units : Calorie : kcal  : Carbs : g Protein : g : Fats : g       #"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "######################################################################"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%START"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Science canteen"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Halal Mini Wok"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Prawn Mee Soup(Dry)(Large)|490|0|0|0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Prawn Mee Soup(Dry)(Small)|390|0|0|0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Fried Hokkien Prawn Mee(Large)|470|0|0|0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Fried Hokkien Prawn Mee(Small)|350|0|0|0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Clay Pot Chicken|440|0|0|0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Black Pepper Chicken|490|0|0|0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ayam Penyet"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ayam Penyet Set|699|0|0|0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Steamed Chicken Set |475|0|0|0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ikan Grouper Penyet Set|669|0|0|0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Michelin Star Restaurant"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Bouillabaisse with cock crab and poached lobster|520|45|35|56"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Chicken wings with Reblochon pomme purée|450|25|32|66"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Sea bass with prawn tortellini, fennel purée and white wine sauce|530|76|25|43"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%STOP"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 48
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/UiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_startDateTimeIsNullInput_expectAssertionError() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(null, end));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_endDateTimeIsNullInput_expectAssertionError() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(start, null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_endDateTimeIsBeforeStartTime_expectAssertionError() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-20T23:59\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_endDateTimeIsInTheFuTure_expectAssertionError() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now().plusDays(3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_StartDateTimeIsInTheFuture_expectAssertionError() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.now().plusDays(3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now().plusDays(5);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_sameStartAndEndDateTime_returnsStringOfTimePeriod() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\" between 21 Oct 2020 2359 and 21 Oct 2020 2359\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_validStartAndEndDateTime_returnsStringOfTimePeriod() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-19T23:59\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\" between 19 Oct 2020 2359 and 21 Oct 2020 2359\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void stringDateTimePeriod_validStartAndEndDateTimeWithSeconds_returnsStringOfTimePeriodWithoutSeconds() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-19T23:59:22\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59:22\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\" between 19 Oct 2020 2359 and 21 Oct 2020 2359\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ui.stringDateTimePeriod(start, end));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_nullInput_expectAssertionError() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e ui.trimStringGetLength(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_stringWithNoLeadingOrTrailingSpaces_returnsLengthFour() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(4, ui.trimStringGetLength(\"food\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_StringWithLeadingSpaces_returnsLengthFour() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(4, ui.trimStringGetLength(\"    food\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_StringWithTrailingSpaces_returnsLengthFour() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(4, ui.trimStringGetLength(\"food    \"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void trimStringGetLength_StringWithLeadingAndTrailingSpaces_returnsLengthFour() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(4, ui.trimStringGetLength(\"    food    \"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 102
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/calculator/CalculatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "package seedu.dietbook.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.dietbook.person.ActivityLevel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.dietbook.person.Gender;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.dietbook.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "class CalculatorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateCalorie_foodListOfThreeItems_sumOfCalorie() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(666 + 150 + 290, calculator.calculateCalorie());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateCarb_foodListOfThreeItems_sumOfCarb() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(55 + 16, calculator.calculateCarb());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateProtein_foodListOfThreeItems_sumOfProtein() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(30 + 16, calculator.calculateProtein());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateFat_foodListOfThreeItems_sumOfFat() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(0, calculator.calculateFat());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateRecomendedCalorieIntake_aPerson_recomendationOfCalorieIntake() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Person harry \u003d new Person(\"Harry\", Gender.MALE, 19, 182, 66, 69, 75, ActivityLevel.LOW);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Person erica \u003d new Person(\"Erica\", Gender.FEMALE, 20, 168, 52, 50, 45, ActivityLevel.MEDIUM);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(new ArrayList\u003cFood\u003e());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(2728, calculator.calculateRecomendation(harry));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(1752, calculator.calculateRecomendation(erica));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 64,
      "HengFuYuen": 1
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/database/DataBaseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "class DataBaseTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        DataBase database \u003d new DataBase();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.init();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ----- Print everything in the data base -----"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.printAllData();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- Using stream version to print -----"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"------------ printing using food stream ------------\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.foodStream().forEach(System.out::println);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- Printing out as list -----"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"---------- printing food using list --------------\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.getFoodList().forEach(System.out::println);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search food by name test -----"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- testing the searchFoodByName function -------\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Prawn  ## OutPut: \" + database.searchFoodByName(\"Prawn\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Mee ## OutPut: \" + database.searchFoodByName(\"Mee\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster ## OutPut: \" + database.searchFoodByName(\"lobster\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Prawn ## OutPut: \" + database.searchFoodByName(\"koala bears\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"No such food found! \" + e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search food by store name test ----"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"------- testing the search food by store and by name function --------\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Fried , Halal Mini Wok ## OutPut: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"Fried\", \"Halal Mini Wok\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Chicken , Halal Mini Wok ## OutPut: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"Chicken\", \"Halal Mini Wok\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Chicken , Ayam Penyet ## OutPut: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"Chicken\", \"Ayam Penyet\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster , Michelin ## OutPut: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"lobster\", \"Michelin\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: fish , Halal Mini Wok ## OutPut: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"fish\", \"Halal Mini Wok\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"No such food found! \" + e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search all food by store -----"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- testing the search ALL food by store and by name function --------\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Halal Mini Wok -------- \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Halal Mini Wok\").forEach(System.out::println);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Ayam Penyet -------- \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Ayam Penyet\").forEach(System.out::println);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Michelin -------- \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Michelin\").forEach(System.out::println);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Gordan Ramsey\u0027s restaurant -------- \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Gordon Ramsey\u0027s restaurant\").forEach(System.out::println);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"There is no such store! \" + e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search food by Name by canteen ------"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- testing the search food by canteen and by name function --------\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Fried , Science ## OutPut: \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"Fried\", \"Science\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Chicken , Science ## OutPut: \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"Chicken\", \"Science\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster , Science ## OutPut: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"lobster\", \"Science\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster , Raffles Hotel Suite ## OutPut: \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"lobster\", \"Raffles Hotel Suite\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"There is either no such canteen or no such food in that canteen!\" + e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search all food below calorie ------"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"------- testing the search food below calorie function --------\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\" ---- Input : 400\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.searchAllFoodBelowCalorie(400).forEach(System.out::println);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\" ---- Input : 200\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.searchAllFoodBelowCalorie(200).forEach(System.out::println);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\" ---- Input : 3428\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.searchAllFoodBelowCalorie(3428).forEach(System.out::println);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 91
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/food/Food.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int calorie;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int carbohydrate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int protein;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int fats;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food(String name, int calorie, int carbohydrate, int protein, int fats) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.carbohydrate \u003d carbohydrate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fats \u003d fats;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getFat() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return fats;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getCalorie() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getCarbohydrate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return carbohydrate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getProtein() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return protein;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name + \" | calorie : \" + calorie + \" | protein : \" + protein + \" | carbohydrate : \" + carbohydrate"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                + \" | fats : \" + fats;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 44
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Food testFood;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testFood \u003d new Food(\"Kobe Beef\", 480,50,40,30);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void footTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(480, testFood.getCalorie());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(50, testFood.getCarbohydrate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(40, testFood.getProtein());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assertEquals(30, testFood.getFat());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 24,
      "mxksowie": 1
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/list/FoodListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "package seedu.dietbook.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "class FoodListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private FoodList list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private Food food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.list \u003d new FoodList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Food food \u003d new Food(\"Kobe Beef\", 480,50,40,30);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        list.addFood(3, food);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        list.addFood(2, \"Sashimi\", 100, 0, 30, 10);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * getPortionedList() should return list of food with scaled up nutritional values."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * getFoods() should return a list of food (Not food entries)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Essentially 2 tests in 1."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    void foodPortionScaling_standardList_scaledFoodList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodList testList \u003d new FoodList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Food food \u003d new Food(\"Kobe Beef\", 480 * 3, 50 * 3, 40 * 3, 30 * 3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        testList.addFood(1, food);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        testList.addFood(1, \"Sashimi\", 200, 0, 60, 20);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assertEquals(testList.getFoods().toString(), list.getPortionedFoods().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    void deleteItemTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Food food \u003d new Food(\"Kobe Beef\", 480,50,40,30);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodEntry entry \u003d new FoodEntry(3, food);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assertEquals(entry.toString(), list.delete(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    void dateComparisonTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        DatedFoodEntry entry \u003d new DatedFoodEntry(2, food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        DatedFoodEntry pastEntry \u003d new DatedFoodEntry(2, food, LocalDateTime.MIN);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assertTrue(entry.compareTo(pastEntry) \u003e 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    void dateFilterAfterTest() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        LocalDateTime timeNow \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assertTrue(list.getFoodsAfterDateTime(timeNow).size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assertEquals(list.getFoodsAfterDateTime(LocalDateTime.MIN).toString(), "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                list.getFoods().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        // add new entries:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        if (! LocalDateTime.now().isAfter(timeNow)) { // Execution is too fast that now() \u003d timeNow."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                TimeUnit.SECONDS.sleep(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                System.out.println(\"Unexpected Interruption\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        list.addFood(1, food);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assertEquals(food.toString(), list.getFoodsAfterDateTime(timeNow).get(0).toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    void dateFilterRangeTest() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        LocalDateTime timeNow \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        if (! LocalDateTime.now().isAfter(timeNow)) { // Execution is too fast that now() \u003d timeNow."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                TimeUnit.SECONDS.sleep(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                timeNow \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                System.out.println(\"Unexpected Interruption\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assertTrue(list.getFoodsInDateTimeRange(timeNow, LocalDateTime.MAX).size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        assertEquals(list.getPortionedFoodsInDateTimeRange(LocalDateTime.MIN, timeNow).toString(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                 list.getPortionedFoods().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mxksowie": 102
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.dietbook.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "class PersonTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person \u003d new Person(\"Jack\", Gender.MALE,21,165,75,65,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                60, ActivityLevel.LOW);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void gender_setGenderToFemale_returnsCorrectGenderDescription() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setGender(Gender.FEMALE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"female\", person.getGender().getDescription());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void gender_setGenderToMale_returnsCorrectGenderDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setGender(Gender.MALE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"male\", person.getGender().getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void gender_setGenderToOthers_returnsCorrectGenderDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setGender(Gender.OTHERS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"others\", person.getGender().getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void gender_setGenderToNull_expectAssertionError() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e person.setGender(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setActivityLevel_setNewActivityLevelToNone_returnsCorrectActivityLevelDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setActivityLevel(ActivityLevel.NONE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"You hardly engage in any exercise or have a job that requires little to no \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"physical activity.\", person.getActivityLevel().getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setActivityLevel_setActivityLevelToLow_returnsCorrectActivityLevelDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setActivityLevel(ActivityLevel.LOW);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"You engage in some form of light exercise or have a job that requires some \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"physical activity.\", person.getActivityLevel().getDescription());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setActivityLevel_setActivityLevelToMedium_returnsCorrectActivityLevelDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setActivityLevel(ActivityLevel.MEDIUM);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"You engage in moderate amount of exercise or have a job that requires moderate \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"physical activity.\", person.getActivityLevel().getDescription());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setActivityLevel_setActivityLevelToHigh_returnsCorrectActivityLevelDescription() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setActivityLevel(ActivityLevel.HIGH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"You engage in vigorous exercise or have a physically demanding job.\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                person.getActivityLevel().getDescription());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setActivityLevel_setActivityLevelToExtreme_returnsCorrectActivityLevelDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setActivityLevel(ActivityLevel.EXTREME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"You engage in extremely vigorous exercise or have an extremely physically \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"demanding job.\", person.getActivityLevel().getDescription());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setActivityLevel_setActivityLevelToNull_expectsAssertionErrors() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e person.setActivityLevel(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 81
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/saveload/FoodSaveLoadManagerManualTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class FoodSaveLoadManagerManualTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException, IllegalAccessException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        final FoodSaveLoadManager testManager \u003d new FoodSaveLoadManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        List\u003cFood\u003e inputFoodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Food food1 \u003d new Food(\"Apple\", 20000, 20, 5, 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Food food2 \u003d new Food(\"Peach\", 3000, 50, 2, 3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Food food3 \u003d new Food(\"Bacon\", 1000, 20, 10, 99);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Food food4 \u003d new Food(\"Silicon\", 500, 100, 50, 10);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFoodList.add(food1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFoodList.add(food2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFoodList.add(food3);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFoodList.add(food4);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testManager.save(\"Victor\u0027s Food List\", inputFoodList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testManager.load(\"Victor\u0027s Food List\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        List\u003cFood\u003e testFoodList \u003d testManager.getFoodList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(testFoodList.get(0).getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(testFoodList.get(0).getCalorie());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(testFoodList.get(3).getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(testFoodList.get(3).getCalorie());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 33
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/saveload/FoodSaveLoadManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import seedu.dietbook.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class FoodSaveLoadManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private FoodSaveLoadManager testManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private List\u003cFood\u003e inputFoodList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Food food1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Food food2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Food food3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Food food4;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private List\u003cFood\u003e testFoodList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void setUp() throws FileNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testManager \u003d new FoodSaveLoadManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFoodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        food1 \u003d new Food(\"Apple\", 20000,20,5,1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        food2 \u003d new Food(\"Peach\", 3000,50,2,3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        food3 \u003d new Food(\"Bacon\", 1000,20,10,99);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        food4 \u003d new Food(\"Silicon\", 500,100,50,10);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFoodList.add(food1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFoodList.add(food2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFoodList.add(food3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        inputFoodList.add(food4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testManager.save(\"Victor\u0027s Food List\", inputFoodList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testManager.load(\"Victor\u0027s Food List\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void getFoodList_WithoutLoading() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testManager.clearLoader();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertThrows(IllegalAccessException.class, () -\u003e testManager.getFoodList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void getFoodList_FileDoesNotExist() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e testManager.load(\"Over the Moon!\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void getFoodListTest() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testFoodList \u003d testManager.getFoodList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(4, testFoodList.size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(\"Apple\", testFoodList.get(0).getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(20000, testFoodList.get(0).getCalorie());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(\"Silicon\", testFoodList.get(3).getName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(500, testFoodList.get(3).getCalorie());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 62
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/saveload/PersonSaveLoadManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "class PersonSaveLoadManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void setUp() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        PersonSaveLoadManager pslTest \u003d new PersonSaveLoadManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        pslTest.setName(\"Victor Chng\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        pslTest.setActivityLevel(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        pslTest.setGender(\"UnKnown\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        pslTest.setAge(100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        pslTest.setOriginalWeight(200);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        pslTest.setCurrentWeight(300);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        pslTest.setTargetWeight(100);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        pslTest.save(\"pslTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void load_noSuchFile_expectFileNotFoundException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        PersonSaveLoadManager localpslTest \u003d new PersonSaveLoadManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e localpslTest.load(\"pie die pie\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private void load_correctFile_allContentsCorrect() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        PersonSaveLoadManager localpslTest \u003d new PersonSaveLoadManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        localpslTest.load(\"pslTest\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(\"Victor Chng\", localpslTest.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(\"Unknown\", localpslTest.getGender());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(200, localpslTest.getOriginalWeight());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(100, localpslTest.getAge());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(300, localpslTest.getCurrentWeight());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(100, localpslTest.getTargetWeight());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(0, localpslTest.getActivityLevel());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 44
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/saveload/SaveLoadFileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class SaveLoadFileTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException, IllegalAccessException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Saver saver \u003d new Saver(10, 6);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.add(\"banana\", 5, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.add(\"pineapple\", 7, 1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.add(\"cheetan\", 2, 3);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.add(\"beetles\", 1, 4);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.save(\"save_load_test\",\"test1\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Loader fileLoader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fileLoader \u003d Loader.load(\"save_load_test\",\"test1\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fileLoader.get(5, 2).ifPresent(System.out::println);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fileLoader.get(7, 1).ifPresent(System.out::println);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fileLoader.get(2, 3).ifPresent(System.out::println);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fileLoader.get(1, 4).ifPresent(System.out::println);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fileLoader.get(1, 3).ifPresent(System.out::println);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        fileLoader.get(10, 6).ifPresent(System.out::println);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 23
    }
  },
  {
    "path": "src/test/java/seedu/dietbook/saveload/SaverTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.dietbook.saveload;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class SaverTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Saver saver;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver \u003d new Saver(10, 6);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.add(\"banana\", 5, 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.add(\"pineapple\", 7, 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void get() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(Optional.of(\"banana\"), saver.get(5,2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(Optional.of(\"pineapple\"), saver.get(7,1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(Optional.empty(), saver.get(1,1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e saver.get(-1992,3500));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.add(\"Deletion lotion\", 4,2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(Optional.of(\"Deletion lotion\"), saver.get(4,2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        saver.delete(4,2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(Optional.empty(), saver.get(4,2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e saver.delete(-3402,9999));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 37
    }
  },
  {
    "path": "test.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "dietary book"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 1
    }
  }
]
