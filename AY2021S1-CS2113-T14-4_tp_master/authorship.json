[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"yuqiaoluolong"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"},{"lineNumber":14,"author":{"gitId":"yuqiaoluolong"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"    mainClassName \u003d \"seedu.dietbook.DietBook\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":"    archiveBaseName \u003d \"dietbook\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":"    enableAssertions \u003d true"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuqiaoluolong":2,"HengFuYuen":3,"-":44}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"We are a team of students from different faculties in the [National University of Singapore](http://nus.edu.sg/). "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio "},{"lineNumber":6,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](team/johndoe.md)"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | TiKyi Min Khant Naing | [Github](https://github.com/tikimonarch) | [Portfolio](team/tikimonarch.md)"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Elijah Ng | [Github](https://github.com/mxksowie) | [Portfolio](team/elijahng.md)"},{"lineNumber":10,"author":{"gitId":"yuqiaoluolong"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Liu Haoran | [Github](https://github.com/yuqiaoluolong) | [Portfolio](team/liuhaoran.md)"},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Heng Fu Yuen | [Github](https://github.com/HengFuYuen) | [Portfolio](team/hengfuyuen.md)"}],"authorContributionMap":{"yuqiaoluolong":1,"HengFuYuen":3,"tikimonarch":1,"mxksowie":1,"-":5}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"* Table of Contents"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"{:toc} "},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"## Design "},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"### UI component"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"![Ui component](diagrams/UiComponent.png)"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"**API**: [`Ui.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/Ui.java)"},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":"The `UI` component makes use of the following classes:"},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"* [`Ui`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/Ui.java): Responsible for communication between the other classes in the `UI` component and with the `Logic` component."},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"* [`UiHelper`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/UiHelper.java): Responsible for providing helper methods to the other classes in the `UI` component."},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"* [`UiInput`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/UiInput.java): Responsible for reading in the user commands and checking if it is empty."},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"* [`UiOuput`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/UiOutput.java): Responsible for printing the outputs."},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"* [`UiMessage`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/UiMessage.java): Responsible for storing output messages in methods so that they can be retrieved and printed when necessary."},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    "},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"The `UiMessage` class has **dependencies** with the following enumeration classes:"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"* **Rationale**: Increased coupling was sacrificed to reduce code duplicates and increase ease of code extension/editing."},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"* [`FitnessLevel`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/person/FitnessLevel.java): Descriptions of the five `FitnessLevel` are required in `UiMessage#getAskForUserInfoMessage(String name)` as shown in the code snippet below."},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"![FitnessLevel In UiMessage](images/FitnessLevelInUiMessage.PNG)"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"* [`Gender`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/person/Gender.java): Descriptions of the three `Gender` are required in `UiMessage#getAskForUserInfoMessage(String name)`as shown in the code snippet below."},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"![Gender In UiMessage](images/GenderInUiMessage.PNG)"},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"In summary, the `UI` component,"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":"* Takes in user command, ensure that it is not empty before passing it to the `Logic` component for command execution."},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"* Updates the user about any changes in the data after executing the command or errors encountered when executing the commands as instructed by the `Logic` component."},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"### Model Component"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":"Data of the user\u0027s diet is stored in the app\u0027s memory via the model: a `FoodList`."},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":"**API**: [`FoodList.java`] (https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/list/FoodList.java) "},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":"`FoodList` provides the following functions:"},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":"* Stores data on entries made into the dietbook app: portion size, details on the food, and the time of consumption."},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":"* Provides string representations of the data so that the UI can be updated."},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":"* Allows selective retrieval and simple calculations of the data without modifying the stored data."},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"Additionally, it is not dependent on the other components listed. Instead, it is dependent on a common `Food` class, which is used by serval components, including the storage, database, and calculator."},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"![Diagram of FoodList](diagrams/FoodList_Overall.png)"},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":"\u003c!--- Link to Creately file:  https://app.creately.com/diagram/J8IZgmEohx4/edit ---\u003e"},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":"\u003cdetails\u003e"},{"lineNumber":53,"author":{"gitId":"mxksowie"},"content":"    \u003csummary\u003eA more detailed class diagram is availble here\u003c/summary\u003e"},{"lineNumber":54,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":55,"author":{"gitId":"mxksowie"},"content":"![Class diagram of FoodList](diagrams/FoodList_Overall_class.png)"},{"lineNumber":56,"author":{"gitId":"mxksowie"},"content":"\u003c!--- Link to Creately file:  https://app.creately.com/diagram/JsQLCacKi4N/edit ---\u003e"},{"lineNumber":57,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":58,"author":{"gitId":"mxksowie"},"content":"Some attributes and methods of the classes have been truncated for brevity. See the full details in the next subsections on `FoodListManager` and `FoodManager`."},{"lineNumber":59,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":60,"author":{"gitId":"mxksowie"},"content":"\u003c/details\u003e"},{"lineNumber":61,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":62,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":63,"author":{"gitId":"mxksowie"},"content":"The above functions and the lack of dependency are met through the following means:"},{"lineNumber":64,"author":{"gitId":"mxksowie"},"content":"* `FoodList` stores new information added via the creation and maintenance of a list of `FoodEntry` objects. These encapsulate the data being stored. In practice, the objects in the list are `DatedFoodEntry` objects, which additionally support the storage of the date and time."},{"lineNumber":65,"author":{"gitId":"mxksowie"},"content":"* A `FoodListManager` is used to perform logical operations on the list of `FoodEntry` objects. A `FoodManager` is also used as a fascade that obscures calculations and prevents modification of `Food` data stored."},{"lineNumber":66,"author":{"gitId":"mxksowie"},"content":"* The result of an operation is typically a `String` that is meant to be supplied to the UI. In other data retrieval operations, such as those required by calculator, a list of `Food` objects is supplied as a means of data transfer between the components. Other lists of java data types such as `LocalDateTime` and `Integer` are also provided to the storage component."},{"lineNumber":67,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":68,"author":{"gitId":"mxksowie"},"content":"#### FoodListManager"},{"lineNumber":69,"author":{"gitId":"mxksowie"},"content":"\u003cdetails\u003e"},{"lineNumber":70,"author":{"gitId":"mxksowie"},"content":"    \u003csummary\u003e Fascade pattern of `FoodListManager`\u003c/summary\u003e"},{"lineNumber":71,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":72,"author":{"gitId":"mxksowie"},"content":"![Class diagram of FoodListManager](diagrams/FoodList_Manager_class.png)"},{"lineNumber":73,"author":{"gitId":"mxksowie"},"content":"\u003c!--- Link to Creately file:  https://app.creately.com/diagram/JsQLCacKi4N/edit ---\u003e"},{"lineNumber":74,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":75,"author":{"gitId":"mxksowie"},"content":"`FoodListManager` obscures the operations performed on the individual items of the list of `FoodEntry` objects. These operations are performed using a functional programming paradigm to reduce code repetition, since all operations typically take the form of a list mapping or filtering."},{"lineNumber":76,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":77,"author":{"gitId":"mxksowie"},"content":"It is only within `FoodListManager` that forced type conversions from `FoodEntry` to `DatedFoodEntry` are performed. Hence, only `FoodListManager` needs to be aware of the functions in `FoodEntry` and `DatedFoodEntry`."},{"lineNumber":78,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":79,"author":{"gitId":"mxksowie"},"content":"`FoodListManager` also reduces code repetition in `FoodList` by having generic list operations that can be combined to achieve the desired result (e.g. A method in `FoodList` may use `FoodListManager` for filtering followed by conversion to string. Yet another method in `FoodList` may use `FoodListManager` for its filtering function, scaling, and then conversion to string)."},{"lineNumber":80,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":81,"author":{"gitId":"mxksowie"},"content":"\u003c/details\u003e"},{"lineNumber":82,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":83,"author":{"gitId":"mxksowie"},"content":"Overall, `FoodList` fulfils the role of being the app\u0027s Model component by holding consumption data in the app\u0027s memory. It is currently used as a singleton, but is not necessarily limited to such: e.g. a seperate `FoodList` for favorites/recurrent entries or entries that are flagged as unhealthy/healthy can be made and maintained by `Logic`."},{"lineNumber":84,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":85,"author":{"gitId":"mxksowie"},"content":"#### FoodManager"},{"lineNumber":86,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":87,"author":{"gitId":"mxksowie"},"content":"\u003cdetails\u003e"},{"lineNumber":88,"author":{"gitId":"mxksowie"},"content":"    \u003csummary\u003e Fascade pattern of `FoodManager`\u003c/summary\u003e"},{"lineNumber":89,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":90,"author":{"gitId":"mxksowie"},"content":"![Class diagram of FoodManager](diagrams/FoodList_FoodManager_class.png)"},{"lineNumber":91,"author":{"gitId":"mxksowie"},"content":"\u003c!--- Link to Creately file:  https://app.creately.com/diagram/JsQLCacKi4N/edit ---\u003e"},{"lineNumber":92,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":93,"author":{"gitId":"mxksowie"},"content":"`FoodManger` obscures the existence of the class `OptionalFood` from `FoodEntry` and all classes dependent on `Food` from `FoodEntry`."},{"lineNumber":94,"author":{"gitId":"mxksowie"},"content":"It uses an obscured `NutrientCalculator` to handle the missing values from the user by providing a guesstimation/calculation of their value."},{"lineNumber":95,"author":{"gitId":"mxksowie"},"content":"The use of this fascade pattern, however, comes with downsides that will be further discussed in the implementation section."},{"lineNumber":96,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":97,"author":{"gitId":"mxksowie"},"content":"\u003c/details\u003e"},{"lineNumber":98,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":99,"author":{"gitId":"mxksowie"},"content":"### Common classes"},{"lineNumber":100,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":101,"author":{"gitId":"mxksowie"},"content":"There are a few common classes/packages that can be used multiple components. These are `Food`, `StringFormatter`, and `MainLogger`, located in the `seedu.dietbook.food`, `seedu.dietbook.utils`, and `seedu.dietbook.logger` packages respectively."},{"lineNumber":102,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":103,"author":{"gitId":"mxksowie"},"content":"#### Food"},{"lineNumber":104,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":105,"author":{"gitId":"mxksowie"},"content":"`Food` is a data class containing all the relevant nutritional information on a food: calories, carbohydrates, proteins, fats. Being common to multiple components/classes, it is a means of data transfer between classes while reducing direct coupling."},{"lineNumber":106,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":107,"author":{"gitId":"mxksowie"},"content":"#### StringFormatter"},{"lineNumber":108,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":109,"author":{"gitId":"mxksowie"},"content":"`StringFormatter` allows the formatting of strings in a manner similar to Python\u0027s fstrings:"},{"lineNumber":110,"author":{"gitId":"mxksowie"},"content":"Strings can be formatted using the pattern `${map_key}` and a corresponding key to value map."},{"lineNumber":111,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":112,"author":{"gitId":"mxksowie"},"content":"#### Logger"},{"lineNumber":113,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":114,"author":{"gitId":"mxksowie"},"content":"`MainLogger` provides logging support to all classes."},{"lineNumber":115,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":116,"author":{"gitId":"HengFuYuen"},"content":"## Implementation"},{"lineNumber":117,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":118,"author":{"gitId":"HengFuYuen"},"content":"### Enter user information feature"},{"lineNumber":119,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":120,"author":{"gitId":"HengFuYuen"},"content":"#### Implementation"},{"lineNumber":121,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":122,"author":{"gitId":"HengFuYuen"},"content":"This feature allows users to enter their personal information into the system so that they can be used for tracking diet progress and calorie recommendation calculation. This feature and its associated command words is **only used during the initial setup of the application**. Any subsequent editing of the user information can be done using the [Edit user information feature](#edit-user-information-feature)."},{"lineNumber":123,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":124,"author":{"gitId":"HengFuYuen"},"content":"**Commands words used**:"},{"lineNumber":125,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":126,"author":{"gitId":"HengFuYuen"},"content":"* [`name`](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#entering-username-name): Saves the user\u0027s name or nickname into the application. "},{"lineNumber":127,"author":{"gitId":"HengFuYuen"},"content":"* [`info`](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#entering-user-information-info): Saves the user\u0027s age, gender, height, fitness level, original, current and target weight into the application. "},{"lineNumber":128,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":129,"author":{"gitId":"HengFuYuen"},"content":"**Main classes and methods used**: "},{"lineNumber":130,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":131,"author":{"gitId":"HengFuYuen"},"content":"* [`Manager`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/Manager.java): Stores a `Person` object."},{"lineNumber":132,"author":{"gitId":"HengFuYuen"},"content":"    * `Manager#setPerson(String newName, Gender newGender, int newAge, int newHeight, int newOriginalWeight, int newCurrentWeight, int newTargetWeight, FitnessLevel newFitnessLevel)`: Calls a method in `Person` class (listed below) to set the attribute values of the `Person` object."},{"lineNumber":133,"author":{"gitId":"HengFuYuen"},"content":"* [`Person`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/person/Person.java): Stores all user information provided."},{"lineNumber":134,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#setAll(String newName, Gender newGender, int newAge, int newHeight, int newOriginalWeight, int newCurrentWeight, int newTargetWeight, FitnessLevel newFitnessLevel)`: Updates the attribute values of the `Person` object."},{"lineNumber":135,"author":{"gitId":"HengFuYuen"},"content":"                                             "},{"lineNumber":136,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":137,"author":{"gitId":"HengFuYuen"},"content":"**Example usage scenario and how the feature work**:\u003cbr/\u003e"},{"lineNumber":138,"author":{"gitId":"HengFuYuen"},"content":"_Summary_: Only one instance of `Person` is ever instantiated. A default person is instantiated at the start with default attribute values and when the user enters their information for the first time during the set up, all the default values would be updated to the inputted values. Therefore, the command to enter the user information will result in a change in the attribute values and not the creation of a new `Person` object."},{"lineNumber":139,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":140,"author":{"gitId":"HengFuYuen"},"content":"**Step 1**. When the user launches the application for the first time. A default `Person` object will be initialised by `Manager` and the user will be prompted to enter their name."},{"lineNumber":141,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":142,"author":{"gitId":"HengFuYuen"},"content":"_Object Diagram:_\u003cbr/\u003e"},{"lineNumber":143,"author":{"gitId":"HengFuYuen"},"content":"![Enter Info Step1](diagrams/EnterInfoStep1.png)"},{"lineNumber":144,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":145,"author":{"gitId":"HengFuYuen"},"content":"**Step 2**. The user inputs `name Jack` command to enter their name into DietBook. The `name` command calls `Manager#setName(Jack)`, to store the name in `Manager` first. After which, user will be prompted to enter all other details."},{"lineNumber":146,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":147,"author":{"gitId":"HengFuYuen"},"content":"_Object Diagram:_\u003cbr/\u003e"},{"lineNumber":148,"author":{"gitId":"HengFuYuen"},"content":"![Enter Info Step2](diagrams/EnterInfoStep2.png)"},{"lineNumber":149,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":150,"author":{"gitId":"HengFuYuen"},"content":"_Sequence Diagram:_\u003cbr/\u003e"},{"lineNumber":151,"author":{"gitId":"HengFuYuen"},"content":"![Name sequence diagram](diagrams/NameSequenceDiagram.png)"},{"lineNumber":152,"author":{"gitId":"HengFuYuen"},"content":"  "},{"lineNumber":153,"author":{"gitId":"HengFuYuen"},"content":"**Step 3**. The user inputs a command like the following `info g/M a/21 h/175 o/85 c/85 t/75 f/2` to enter all other personal information including age, gender, height, fitness level, original, current and target weight. The `info` command then calls `Parse#executeProcessedInfo(info g/M a/21 h/175 o/85 c/85 t/75 f/2, manager)` before calling `Manager#setPerson(Jack, Gender.MALE, 21, 175, 85, 85, 75, FitnessLevel.LOW)` which proceeds to call `Person#setAll(Jack, Gender.MALE, 21, 175, 85, 85, 75, Fitness.LOW)`."},{"lineNumber":154,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":155,"author":{"gitId":"HengFuYuen"},"content":"_Object Diagram:_\u003cbr/\u003e"},{"lineNumber":156,"author":{"gitId":"HengFuYuen"},"content":"![Enter Info Step3](diagrams/EnterInfoStep3.png) "},{"lineNumber":157,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":158,"author":{"gitId":"HengFuYuen"},"content":"_Sequence Diagram:_\u003cbr/\u003e"},{"lineNumber":159,"author":{"gitId":"HengFuYuen"},"content":"![Info sequence diagram](diagrams/InfoSequenceDiagram.png)"},{"lineNumber":160,"author":{"gitId":"HengFuYuen"},"content":"   "},{"lineNumber":161,"author":{"gitId":"HengFuYuen"},"content":"#### Design considerations:"},{"lineNumber":162,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":163,"author":{"gitId":"HengFuYuen"},"content":"Aspect: Whether to enter name and other information separately or together"},{"lineNumber":164,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":165,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 1 (current choice)**: Enter name and other information separately"},{"lineNumber":166,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Increase user interaction and engagement."},{"lineNumber":167,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Enter information using two commands."},{"lineNumber":168,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":169,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 2**: Enter name and other information together"},{"lineNumber":170,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Enter all information at once."},{"lineNumber":171,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Decrease user interaction and engagement."},{"lineNumber":172,"author":{"gitId":"HengFuYuen"},"content":"    "},{"lineNumber":173,"author":{"gitId":"HengFuYuen"},"content":"Aspect: Single or multiple usage of feature and command words"},{"lineNumber":174,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":175,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 1 (current choice)**: Single usage of feature and command words, requiring any subsequent editing of user information to be done through another command"},{"lineNumber":176,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Increase user interaction and engagement during initial setup. Enable users to edit any information thereafter more conveniently through one command. The two features of entering and editing personal information are clearly differentiated."},{"lineNumber":177,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Three commands need to be implemented, potentially leading to more bugs."},{"lineNumber":178,"author":{"gitId":"HengFuYuen"},"content":"    "},{"lineNumber":179,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 2**: Multiple usage of feature and command words such that any subsequent editing of user information can be to be done the same command"},{"lineNumber":180,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Two commands need to be implemented, likely to have lesser bugs."},{"lineNumber":181,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Decrease user interaction and engagement during initial set up. Subsequent editing needs to be done through two commands and there is no differentiation between the two features of entering and editing personal information."},{"lineNumber":182,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":183,"author":{"gitId":"HengFuYuen"},"content":"Aspect: Whether to use singleton pattern for Person class"},{"lineNumber":184,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":185,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 1 (current choice)**: Did not use singleton pattern for `Person`"},{"lineNumber":186,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Reduce coupling and increase testability."},{"lineNumber":187,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Risk of creating multiple `Person` object by mistake and there might be negative consequence in creating multiple objects."},{"lineNumber":188,"author":{"gitId":"HengFuYuen"},"content":"    "},{"lineNumber":189,"author":{"gitId":"HengFuYuen"},"content":"    However, there is minimal risk of creating multiple `Person` object by mistake and minimal negative consequence in creating multiple objects as long as the `Manager` refers the correct instance of `Person`."},{"lineNumber":190,"author":{"gitId":"HengFuYuen"},"content":"      "},{"lineNumber":191,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 2**: Use singleton pattern for `Person`    "},{"lineNumber":192,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Easy to implement, prevent the instantiation of more than one `Person` object."},{"lineNumber":193,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Increase coupling and reduce testability"},{"lineNumber":194,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":195,"author":{"gitId":"HengFuYuen"},"content":"Aspect: Changing attribute values in `Person` object or creating new `Person` object"},{"lineNumber":196,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":197,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 1 (current choice)**: Changing attribute values in `Person` object "},{"lineNumber":198,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Reduce the number of objects being created to reduce memory usage and reduce the risk of creating multiple objects which can potentially lead to negative consequences and bugs."},{"lineNumber":199,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Unable to write tests as method chains."},{"lineNumber":200,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":201,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 2**: Creating new `Person` object"},{"lineNumber":202,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Ability to write tests as method chains."},{"lineNumber":203,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Creation of many objects, which takes up memory space. Have to ensure that only the correct `Person` instance is kept and referred to."},{"lineNumber":204,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":205,"author":{"gitId":"HengFuYuen"},"content":"### Edit user information feature"},{"lineNumber":206,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":207,"author":{"gitId":"HengFuYuen"},"content":"#### Implementation"},{"lineNumber":208,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":209,"author":{"gitId":"HengFuYuen"},"content":"This feature allows users to edit their personal information after it has been entered into the system during the initial set up using the [Enter user information feature](#enter-user-information-feature). This feature was implemented to allow long term users to update their personal information like age, current weight, etc when necessary and also for careless users to edit their personal information if they have entered it wrongly."},{"lineNumber":210,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":211,"author":{"gitId":"HengFuYuen"},"content":"**Command word used**:"},{"lineNumber":212,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":213,"author":{"gitId":"HengFuYuen"},"content":"* [`editinfo`](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#editing-user-information-editinfo): Edits the user information stored in the application.\u003cbr/\u003e"},{"lineNumber":214,"author":{"gitId":"HengFuYuen"},"content":"The command is implemented in such a way that **one or more changes to the personal information can be made** using a single command. Below are some examples of valid commands. "},{"lineNumber":215,"author":{"gitId":"HengFuYuen"},"content":"    * `editinfo a/22`: Edits the age of the user to `22`"},{"lineNumber":216,"author":{"gitId":"HengFuYuen"},"content":"    * `editinfo a/22 c/80`: Edits the age of the user to `22` and the current weight to `80`."},{"lineNumber":217,"author":{"gitId":"HengFuYuen"},"content":"    * `editinfo n/Jane g/F a/22 h/165 o/70 c/63 t/60 f/3`: Edit the name, gender, age, height, original, current and target weight as well as the fitness level of the user to `Jane`, `female`, `22`,`165`, `70`, `63`, `60` and `You engage in moderate amount of exercise or have a job that requires moderate physical activity.` respectively."},{"lineNumber":218,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":219,"author":{"gitId":"HengFuYuen"},"content":"**Main classes and methods used**: "},{"lineNumber":220,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":221,"author":{"gitId":"HengFuYuen"},"content":"* [`Person`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/person/Person.java): Stores all user information provided."},{"lineNumber":222,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#setName(String newName)`: Updates the name the `Person` object."},{"lineNumber":223,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#setGender(Gender newGender)`: Updates the gender of the `Person` object."},{"lineNumber":224,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#setAge(int newAge)`: Updates the age of the `Person` object."},{"lineNumber":225,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#setHeight(int newHeight)`: Updates the height of the `Person` object."},{"lineNumber":226,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#setOriginalWeight(int newOriginalWeight)`: Updates the original of the `Person` object."},{"lineNumber":227,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#setCurrentWeight(int newCurrentWeight)`: Updates the current weight of the `Person` object.                                             "},{"lineNumber":228,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#setTargetWeight(int newTargetWeight)`: Updates the target weight of the `Person` object.    "},{"lineNumber":229,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#setFitnessLevel(FitnessLevel newFitnessLevel)`: Updates the fitness level of the `Person` object                                       "},{"lineNumber":230,"author":{"gitId":"HengFuYuen"},"content":"                                        "},{"lineNumber":231,"author":{"gitId":"HengFuYuen"},"content":"**Example usage scenario and how the feature work**\u003cbr/\u003e"},{"lineNumber":232,"author":{"gitId":"HengFuYuen"},"content":"_Summary_: The corresponding existing values in `Person` class would be updated to the inputted values, even if the new value given is the same as the existing value."},{"lineNumber":233,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":234,"author":{"gitId":"HengFuYuen"},"content":"**Step 1**. Takes for example the user\u0027s name, age, gender, height, fitness level, original, current and target weight are currently `Jack`, `21`, `male`, `175`,`You engage in some form of light exercise or have a job that requires some physical activity.` ,`85`, `85` and `75` respectively. "},{"lineNumber":235,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":236,"author":{"gitId":"HengFuYuen"},"content":"_Object Diagram:_\u003cbr/\u003e"},{"lineNumber":237,"author":{"gitId":"HengFuYuen"},"content":"![Edit Info Step1](diagrams/EnterInfoStep3.png)"},{"lineNumber":238,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":239,"author":{"gitId":"HengFuYuen"},"content":"**Step 2**. When the user wishes to edit their age and current weight, they can enter a command like the following `editinfo a/22 c/80`. The `editinfo` command would call `Parse#executeEditInfo(editinfo a/22 c/80, manager)` before `Person#setAge(22)` and `Person#setCurrentWeight(80)` is called."},{"lineNumber":240,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":241,"author":{"gitId":"HengFuYuen"},"content":"_Object Diagram:_\u003cbr/\u003e"},{"lineNumber":242,"author":{"gitId":"HengFuYuen"},"content":"![Edit Info Step2](diagrams/EditInfoStep2.png)"},{"lineNumber":243,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":244,"author":{"gitId":"HengFuYuen"},"content":"_Sequence Diagram:_\u003cbr/\u003e"},{"lineNumber":245,"author":{"gitId":"HengFuYuen"},"content":"![Edit Info sequence diagram](diagrams/EditInfoSequenceDiagram.png)"},{"lineNumber":246,"author":{"gitId":"HengFuYuen"},"content":"   "},{"lineNumber":247,"author":{"gitId":"HengFuYuen"},"content":"#### Design considerations:"},{"lineNumber":248,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":249,"author":{"gitId":"HengFuYuen"},"content":"Aspect: Whether one or more changes to the personal information can be made using a single command or through the use of various commands"},{"lineNumber":250,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":251,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 1 (current choice)**: One or more changes to the personal information can be made using a single command"},{"lineNumber":252,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Easier and more convenient for the user when editing multiple pieces of personal information. Less user commands required."},{"lineNumber":253,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Harder to implement."},{"lineNumber":254,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":255,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 2**: Each piece of personal information is changed using separate commands"},{"lineNumber":256,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Easier to implement."},{"lineNumber":257,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Tedious for the user to edit multiple pieces of personal information. More user commands required."},{"lineNumber":258,"author":{"gitId":"HengFuYuen"},"content":"    "},{"lineNumber":259,"author":{"gitId":"HengFuYuen"},"content":"Aspect: Use of multiple or single setter method(s)"},{"lineNumber":260,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":261,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 1 (current choice)**: Use of multiple setter methods each updating an attribute in the `Person` class\u003cbr/\u003e"},{"lineNumber":262,"author":{"gitId":"HengFuYuen"},"content":"E.g.`Person#setName(String newName)`: Updates the name the `Person` object.\u003cbr/\u003e"},{"lineNumber":263,"author":{"gitId":"HengFuYuen"},"content":"E.g.`Person#setGender(Gender newGender)`: Updates the gender of the `Person` object.\u003cbr/\u003e"},{"lineNumber":264,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Easier to implement and uses the KISS principle."},{"lineNumber":265,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: More method calls is required, possibly resulting in more bugs due to wrong method calls."},{"lineNumber":266,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":267,"author":{"gitId":"HengFuYuen"},"content":"* **Alternative 2**: Use of a single setter method that is able to update a variable number of attributes in `Person` class"},{"lineNumber":268,"author":{"gitId":"HengFuYuen"},"content":"    * Pros: Lesser method calls is required, possibly resulting in lesser bugs due to wrong method calls."},{"lineNumber":269,"author":{"gitId":"HengFuYuen"},"content":"    * Cons: Harder to implement."},{"lineNumber":270,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":271,"author":{"gitId":"HengFuYuen"},"content":"Head over to the Design Considerations Section in the [Enter user information feature](#enter-user-information-feature) for more related design considerations."},{"lineNumber":272,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":273,"author":{"gitId":"HengFuYuen"},"content":"### View user information feature"},{"lineNumber":274,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":275,"author":{"gitId":"HengFuYuen"},"content":"#### Implementation"},{"lineNumber":276,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":277,"author":{"gitId":"HengFuYuen"},"content":"This feature allows users to view their personal information stored in system. It was implemented to allow users to validate their personal information so that they can edit it if necessary using the [Edit user information feature](#edit-user-information-feature)."},{"lineNumber":278,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":279,"author":{"gitId":"HengFuYuen"},"content":"**Command word used**:"},{"lineNumber":280,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":281,"author":{"gitId":"HengFuYuen"},"content":"* [`userinfo`](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#viewing-user-information-userinfo): Shows the user information stored in the application."},{"lineNumber":282,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":283,"author":{"gitId":"HengFuYuen"},"content":"**Main classes and methods used**: "},{"lineNumber":284,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":285,"author":{"gitId":"HengFuYuen"},"content":"* [`Person`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/person/Person.java): Stores all user information provided."},{"lineNumber":286,"author":{"gitId":"HengFuYuen"},"content":"    * `Person#toString()`: Returns a string representation of all user information."},{"lineNumber":287,"author":{"gitId":"HengFuYuen"},"content":"                                        "},{"lineNumber":288,"author":{"gitId":"HengFuYuen"},"content":"**Example usage scenario and how the feature work**\u003cbr/\u003e"},{"lineNumber":289,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":290,"author":{"gitId":"HengFuYuen"},"content":"**Step 1**. When the user wishes to view their personal information, they can enter`userinfo`. The"},{"lineNumber":291,"author":{"gitId":"HengFuYuen"},"content":" `userinfo` command would call `Person#toString()`."},{"lineNumber":292,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":293,"author":{"gitId":"HengFuYuen"},"content":"_Sequence Diagram:_\u003cbr/\u003e"},{"lineNumber":294,"author":{"gitId":"HengFuYuen"},"content":"![User Info sequence diagram](diagrams/UserInfoSequenceDiagram.png)"},{"lineNumber":295,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":296,"author":{"gitId":"mxksowie"},"content":"### [Proposed] Supporting missing fields in a user entry"},{"lineNumber":297,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":298,"author":{"gitId":"mxksowie"},"content":"This feature gives the user some flexibility, allowing them to make an entry without full knowledge of the nutritional information of the food that they are eating."},{"lineNumber":299,"author":{"gitId":"mxksowie"},"content":"Due to limitations in what can be estimated, there are only two main scenarios for missing fields: a missing total calorie count or some combination of missing nutritional values (carbohydrates, proteins, fat)."},{"lineNumber":300,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":301,"author":{"gitId":"mxksowie"},"content":"#### Implementation details"},{"lineNumber":302,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":303,"author":{"gitId":"mxksowie"},"content":"**Main components involved**: "},{"lineNumber":304,"author":{"gitId":"mxksowie"},"content":"`Manager`: Parses the user input and creates an `AddCommand` based on the details provided in the user input. It recognises that some combination of the optional inputs are missing and flags them to `FoodList` when calling the `FoodList#addFood(...)` method by using `OptionalFood.EMPTY_VALUE \u003d -1` as the input value."},{"lineNumber":305,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":306,"author":{"gitId":"mxksowie"},"content":"`FoodList`: A food entry is created via the `FoodList#addFood(...)` method, which has some arguments set to `OptionalFood.EMPTY_VALUE \u003d -1`. Hence, when a `FoodEntry` is instantiated, the `FoodManager#createFood(String name, int calorie, int carbohydrate, int protein, int fat)` recognises the flags in the arguments and creates an `OptionalFood` instead of `Food`, for which a reference is kept in `FoodEntry`. When a method requiring `FoodEntry#getFood()` is called, `FoodManager` is called via `FoodManager#retrieveFood(Food food)` to return a `Food` object with guesstimated nutritional values. This guesstimation process is done by the `NutritionCalculator` class."},{"lineNumber":307,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":308,"author":{"gitId":"mxksowie"},"content":"#### Usuage Example"},{"lineNumber":309,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":310,"author":{"gitId":"mxksowie"},"content":"There are essentially two phases to the usuage of `FoodManager` and its associated dependencies: the creation of a `OptionalFood` that has missing values and the retrieval of a guesstimated `Food` object when `FoodEntry#getFood()` needs to be called."},{"lineNumber":311,"author":{"gitId":"mxksowie"},"content":"For brevity, the focus will be on the processes within `FoodList`."},{"lineNumber":312,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":313,"author":{"gitId":"mxksowie"},"content":"![Sequence diagram of Food creation](diagrams/FoodList_FoodCreation_sequence.png)"},{"lineNumber":314,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":315,"author":{"gitId":"mxksowie"},"content":"**Creation**:"},{"lineNumber":316,"author":{"gitId":"mxksowie"},"content":"1. `FoodList#addFood(int portionSize,String name, int calorie, int carbohydrate, int protein, int fat)` (or its variant for backlogs: `FoodList#addFoodAtDateTime(...)`) is called by the Logic component to add a new entry with missing nutritional inputs. The missing inputs are encapsulated by `OptionalFood.EMPTY_VALUE \u003d -1` flags."},{"lineNumber":317,"author":{"gitId":"mxksowie"},"content":"1. `FoodList#addFood(...)` instantiates a new instance of `DatedFoodEntry`, passing on the arguments and flags to it instead. `DatedFoodEntry` uses `FoodManager#createFood(String name, int calorie, int carbohydrate, int protein, int fat)` to instantiate a `Food` object. Because there are missing values, `FoodManager` actually instantiates `OptionalFood`, a child class of `Food` instead. A reference to this `OptionalFood` object is stored in the `DatedFoodEntry`. The newly instantiated `DatedFoodEntry` is also stored in the list of `FoodEntry` objects in `FoodList`."},{"lineNumber":318,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":319,"author":{"gitId":"mxksowie"},"content":"![Sequence diagram of Food retrieval](diagrams/FoodList_FoodRetrieval_sequence.png)"},{"lineNumber":320,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":321,"author":{"gitId":"mxksowie"},"content":"**Retrieval**:"},{"lineNumber":322,"author":{"gitId":"mxksowie"},"content":"1. The method `FoodEntry#getFood()` is only called within functions of `FoodListManager`. When a method such as `FoodList#getPortionedFoods()` is called, `FoodListManager#convertListToPortionedFoods(List list)` is subsequently called."},{"lineNumber":323,"author":{"gitId":"mxksowie"},"content":"1. `FoodListManager#convertListToPortionedFoods(List list)` calls `ListFunctions#applyFunctionToList(List list, Function function)`, and passes `FoodEntry#getFood()` within the function argument."},{"lineNumber":324,"author":{"gitId":"mxksowie"},"content":"1. `ListFunctions#applyFunctionToList(List list, Function function)` executes the function containing `FoodEntry#getFood()` in its `forEach` stream."},{"lineNumber":325,"author":{"gitId":"mxksowie"},"content":"1. `FoodEntry#getFood()` calls the method `FoodManager#retrieveFood(Food food)`, passing its `Food` object as an argument."},{"lineNumber":326,"author":{"gitId":"mxksowie"},"content":"1. `FoodManager#retrieveFood(Food food)` checks whether the `Food` object is an instance of `OptionalFood`. If it is an `OptionalFood`, then it is handled differently based on the missing information. Otherwise, the `Food` object is simply returned."},{"lineNumber":327,"author":{"gitId":"mxksowie"},"content":"1. The missing information in `OptionalFood` is calculated using `NutritionCalculator` based on what is missing: if calorie is missing, then `NutritionCalcular.calculateCalorieFromNutrients(int carbohydrate, int protein, int fat)`is called, otherwise `NutritionCalculator.calculateNutrientsFromCalorie(int calorie, int carbohydrate, int protein, int fat)` is called instead to calculate the missing nutrient masses."},{"lineNumber":328,"author":{"gitId":"mxksowie"},"content":"1. With the calculated information, a new `Food` object containing the estimates is created and returned by `FoodManager#retrieveFood(Food food)`, leaving the original reference to the `Food` object in `FoodEntry` unmodified in any case."},{"lineNumber":329,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":330,"author":{"gitId":"mxksowie"},"content":"#### Future work"},{"lineNumber":331,"author":{"gitId":"mxksowie"},"content":"Only simple methods of estimating the missing information is used by `NutritionCalculator`. We can allow the user the weight the split of missing nutritional values differently (it is currently all weighed equally and split by calorie contribution). This ought to be performed by the `Calculator` component since that is its main role. However, due to the fascade pattern being used in this implementation, the difficulty to add this feature is increased: in order to maintain the status of `FoodList` being non-dependent on the other components, it is recommended that functions to split the nutrients be passed to FoodManager instead (i.e. use a functional paradigm)."},{"lineNumber":332,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":333,"author":{"gitId":"mxksowie"},"content":"Additionally, storage of the `FoodList` should support the storage and retrieval of such missing values. Currently, only the estimated versions of the Foods are stored, and information on its status as a Food  that had missing values (an `OptionalFood`) is lost."},{"lineNumber":334,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":335,"author":{"gitId":"mxksowie"},"content":"#### Design Considerations"},{"lineNumber":336,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":337,"author":{"gitId":"mxksowie"},"content":"* **Alternative 1** (Current choice): Fascade pattern using `FoodManager` to obscure the details and processes behind the handling of a `Food` object with missing values. It is noted that the `OptionalFood` class is obscured in this process, despite being a child class of the common class `Food`."},{"lineNumber":338,"author":{"gitId":"mxksowie"},"content":"    * Pros: All higher level components and dependencies do not need to deal with the existence of a new common class `OptionalFood` or check for the possibility of missing values within `Food`. This implementation limits the existence of instances of `OptionalFood` to within the `FoodEntry` class."},{"lineNumber":339,"author":{"gitId":"mxksowie"},"content":"    * Cons: New test suite for `FoodEntry` and `FoodManager` had to be created and maintained due to the use of this design pattern. It also makes future work with other components that want to interact with `FoodManager` more difficult (see Future Work section)."},{"lineNumber":340,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":341,"author":{"gitId":"mxksowie"},"content":"* **Alternative 2**: An adapter pattern with a similar implementation could be used. In this case, `FoodManager` could be exposed as a seperate set of API that should be invoked whenever an `OptionalFood` needs to be handled. `FoodManager` becomes an adapter that components such as `FoodListManager` or other classes use when there is the possibility of an `OptionalFood` object."},{"lineNumber":342,"author":{"gitId":"mxksowie"},"content":"    * Pros: It becomes easier to extend the features of `FoodManager` since it is exposed and can vary independently. It is also easier to test."},{"lineNumber":343,"author":{"gitId":"mxksowie"},"content":"    * Cons: Other higher level classes need to be aware of `FoodManager` and potentially even `OptionalFood` if the latter is allowed to be passed around outside of `FoodList`."},{"lineNumber":344,"author":{"gitId":"mxksowie"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":345,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":346,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":347,"author":{"gitId":"snowbanana12345"},"content":"## Save/Load Feature"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"snowbanana12345"},"content":"The Save/Load feature is implemented by the saveload package."},{"lineNumber":350,"author":{"gitId":"snowbanana12345"},"content":"At the base of the package, there is the `Saver`"},{"lineNumber":351,"author":{"gitId":"snowbanana12345"},"content":"and `Loader` class."},{"lineNumber":352,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":353,"author":{"gitId":"snowbanana12345"},"content":"### Design"},{"lineNumber":354,"author":{"gitId":"snowbanana12345"},"content":"![Alt text](UML_diaghrams/save_load_feature/design.png)"},{"lineNumber":355,"author":{"gitId":"snowbanana12345"},"content":"Note only the Saver and Loader class is flexible. They can be adapted to new situations without modifying"},{"lineNumber":356,"author":{"gitId":"snowbanana12345"},"content":"the code. The FoodSaveLoadManager and PersonSaveLoadManager are written specifically for this version. They"},{"lineNumber":357,"author":{"gitId":"snowbanana12345"},"content":"will have to be modified/replaced for future versions."},{"lineNumber":358,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":359,"author":{"gitId":"snowbanana12345"},"content":"#### Saver class"},{"lineNumber":360,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":361,"author":{"gitId":"snowbanana12345"},"content":"Stores data in a internal table with length and height specified."},{"lineNumber":362,"author":{"gitId":"snowbanana12345"},"content":"Handles the storage of its data by writing to a text file."},{"lineNumber":363,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":364,"author":{"gitId":"snowbanana12345"},"content":"##### Constructor"},{"lineNumber":365,"author":{"gitId":"snowbanana12345"},"content":"Specifies the length and height of the internal Saver table"},{"lineNumber":366,"author":{"gitId":"snowbanana12345"},"content":"##### Main Methods"},{"lineNumber":367,"author":{"gitId":"snowbanana12345"},"content":"* `Saver#save()` saves the current data to the file in the folder with the given file name"},{"lineNumber":368,"author":{"gitId":"snowbanana12345"},"content":"* `Saver#add()` Store String data in the x,y position in the table"},{"lineNumber":369,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":370,"author":{"gitId":"snowbanana12345"},"content":"#### Loader class"},{"lineNumber":371,"author":{"gitId":"snowbanana12345"},"content":"Loads data from a text file and stores it in a internal table just like the saver"},{"lineNumber":372,"author":{"gitId":"snowbanana12345"},"content":"##### Constructor"},{"lineNumber":373,"author":{"gitId":"snowbanana12345"},"content":"`static method Loader.load(folder name , file name)` : creates a Loader object with "},{"lineNumber":374,"author":{"gitId":"snowbanana12345"},"content":"a table storing the data found in the text file"},{"lineNumber":375,"author":{"gitId":"snowbanana12345"},"content":"##### Main Methods"},{"lineNumber":376,"author":{"gitId":"snowbanana12345"},"content":"* `Loader#get()` retrives the data stored in the loader"},{"lineNumber":377,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":378,"author":{"gitId":"snowbanana12345"},"content":"#### FoodPortionDateSaveLoadManager class"},{"lineNumber":379,"author":{"gitId":"snowbanana12345"},"content":"Built on top of Saver and Loader class to implement save/load functionality"},{"lineNumber":380,"author":{"gitId":"snowbanana12345"},"content":"for list of food items the user has input into the dietbook. Contains a instance"},{"lineNumber":381,"author":{"gitId":"snowbanana12345"},"content":"of both `Saver` and `Loader`. It has its own folder to work with,"},{"lineNumber":382,"author":{"gitId":"snowbanana12345"},"content":"the user only has to specify the file name. To save the contents of a `FoodList`, call "},{"lineNumber":383,"author":{"gitId":"snowbanana12345"},"content":"`FoodPortionDateSaveLoadManager#saveFoodList(FoodList foodlist, String fileName)` "},{"lineNumber":384,"author":{"gitId":"snowbanana12345"},"content":"To load a file, call `FoodPortionDateSaveLoadManager#load()` first to load the contents of the file into"},{"lineNumber":385,"author":{"gitId":"snowbanana12345"},"content":"the `FoodPortionDateSaveLoadManager` and then call `FoodPortionDateSaveLoadManager#saveFoodList()` to"},{"lineNumber":386,"author":{"gitId":"snowbanana12345"},"content":"return the `FoodList` with those contents. "},{"lineNumber":387,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":388,"author":{"gitId":"snowbanana12345"},"content":"##### Main Methods"},{"lineNumber":389,"author":{"gitId":"snowbanana12345"},"content":"* `FoodPortionDateSaveLoadManager#saveFoodList()` saves the contents of the `FoodList` object"},{"lineNumber":390,"author":{"gitId":"snowbanana12345"},"content":"* `FoodPortionDateSaveLoadManager#load()` loads the file and store the contents "},{"lineNumber":391,"author":{"gitId":"snowbanana12345"},"content":"* `FoodPortionDateSaveLoadManager#saveFoodList()` returns a `FoodList` with the contents of the \u0027FoodPortionDateSaveLoadManager\u0027"},{"lineNumber":392,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":393,"author":{"gitId":"snowbanana12345"},"content":"#### PersonSaveLoadManager class"},{"lineNumber":394,"author":{"gitId":"snowbanana12345"},"content":"Built on top of Saver and Loader class to implement save/load functionality for user information"},{"lineNumber":395,"author":{"gitId":"snowbanana12345"},"content":"Same as `FoodPortionDateSaveLoadManager`, it has its own folder to work with, the user only has to specify the file name"},{"lineNumber":396,"author":{"gitId":"snowbanana12345"},"content":"Unlike the `FoodPortionDateSaveLoadManager`, it stores the data inside itself and can be updated."},{"lineNumber":397,"author":{"gitId":"snowbanana12345"},"content":"##### Main Methods"},{"lineNumber":398,"author":{"gitId":"snowbanana12345"},"content":"* `PersonSaveLoadManager#save()` save the current state into the file"},{"lineNumber":399,"author":{"gitId":"snowbanana12345"},"content":"* `PersonSaveLoadManager#load()` loads the file "},{"lineNumber":400,"author":{"gitId":"snowbanana12345"},"content":"* Setters and Getters for all the personal data in this current version"},{"lineNumber":401,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":402,"author":{"gitId":"snowbanana12345"},"content":"#### UML diaghram"},{"lineNumber":403,"author":{"gitId":"snowbanana12345"},"content":"##### `FoodPortionDateSaveLoadManager#save()`"},{"lineNumber":404,"author":{"gitId":"snowbanana12345"},"content":"![Alt text](UML_diaghrams/save_load_feature/FoodPortionDateSaveLoadManager_save.png)"},{"lineNumber":405,"author":{"gitId":"snowbanana12345"},"content":"##### `FoodPortionDateSaveLoadManager#load()`"},{"lineNumber":406,"author":{"gitId":"snowbanana12345"},"content":"![Alt text](UML_diaghrams/save_load_feature/FoodPortionDateSaveLoadManager_load.png)"},{"lineNumber":407,"author":{"gitId":"snowbanana12345"},"content":"similiar diaghrams for `PersonSaveLoadManager`"},{"lineNumber":408,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":409,"author":{"gitId":"snowbanana12345"},"content":"## DataBase feature"},{"lineNumber":410,"author":{"gitId":"snowbanana12345"},"content":"`DataBase` stores a list of food items that can be found in NUS and can be accessed by user"},{"lineNumber":411,"author":{"gitId":"snowbanana12345"},"content":"The data is organized into a Canteen contains a number of Stores each of which contains a list of food items"},{"lineNumber":412,"author":{"gitId":"snowbanana12345"},"content":"It also offers a number of filtering and searching methods. The data base resource is a text file which"},{"lineNumber":413,"author":{"gitId":"snowbanana12345"},"content":"can be manually updated. "},{"lineNumber":414,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":415,"author":{"gitId":"snowbanana12345"},"content":"### DataBase class"},{"lineNumber":416,"author":{"gitId":"snowbanana12345"},"content":"Stores a `List` of `Canteen` objects. Each `Canteen` object stores a `List` of `Store` object,"},{"lineNumber":417,"author":{"gitId":"snowbanana12345"},"content":"each `Store` object contains a `List` of `Food` objects. Currently has a number of filtering and searching"},{"lineNumber":418,"author":{"gitId":"snowbanana12345"},"content":"methods. These methods can easily be modified and new ones implemented depending on the needs of the application. "},{"lineNumber":419,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":420,"author":{"gitId":"snowbanana12345"},"content":"##### Main Methods"},{"lineNumber":421,"author":{"gitId":"snowbanana12345"},"content":"* `DataBase#init()` reads from the data text resource and loads the contents into itself"},{"lineNumber":422,"author":{"gitId":"snowbanana12345"},"content":"* searching methods Examples "},{"lineNumber":423,"author":{"gitId":"snowbanana12345"},"content":"    * `DataBase#searchFoodByIndex()` returns the `Food` with the provided index"},{"lineNumber":424,"author":{"gitId":"snowbanana12345"},"content":"    * `DataBase#searchFoodByName()` returns the first `Food` object that contains the string provided"},{"lineNumber":425,"author":{"gitId":"snowbanana12345"},"content":"    * `DataBase#searchAllFoodContainingName()` returns a `Stream\u003cFood\u003e` that contains all `Food` containing the string provided"},{"lineNumber":426,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":427,"author":{"gitId":"snowbanana12345"},"content":"### Manually editing the text resource"},{"lineNumber":428,"author":{"gitId":"snowbanana12345"},"content":"As of this version, there is no dev mode for an administrator or a user to add new items to the"},{"lineNumber":429,"author":{"gitId":"snowbanana12345"},"content":"data base. This can be done manually by directly editing the data.txt resource."},{"lineNumber":430,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":431,"author":{"gitId":"snowbanana12345"},"content":"##### Format of data.txt resource"},{"lineNumber":432,"author":{"gitId":"snowbanana12345"},"content":"The `DataBase#init()` method reads the data.txt file line by line"},{"lineNumber":433,"author":{"gitId":"snowbanana12345"},"content":"**\u0026%START** and **\u0026%STOP** the `DataBase#init()` method will read anything between these two indicators"},{"lineNumber":434,"author":{"gitId":"snowbanana12345"},"content":"initially the data base is in the `_*canteen*_` state, the next line it reads will be the canteen name"},{"lineNumber":435,"author":{"gitId":"snowbanana12345"},"content":"when it moves from the canteen name line to the next line, it is in the `_*store*_` state,"},{"lineNumber":436,"author":{"gitId":"snowbanana12345"},"content":"again the next line it reads will be the store name, when it moves from the store name line to the next line,"},{"lineNumber":437,"author":{"gitId":"snowbanana12345"},"content":"now it is in the `_*food*_` state. In this state, input a line in the format `{food name}|{calorie}|{carbohydrate}|{protein}|{fats}`,"},{"lineNumber":438,"author":{"gitId":"snowbanana12345"},"content":"this will add a food item. Any number of food lines can be written and the database will be in the `_*food*_` state."},{"lineNumber":439,"author":{"gitId":"snowbanana12345"},"content":"To go back up to the store state, write a line of **\u0026%UP**. If a store name is given in the next line, the database"},{"lineNumber":440,"author":{"gitId":"snowbanana12345"},"content":"will again be in the `_*food*_` state. To go back up to the canteen state write 2 consecutive lines of **\u0026%UP**."},{"lineNumber":441,"author":{"gitId":"snowbanana12345"},"content":"##### Example "},{"lineNumber":442,"author":{"gitId":"snowbanana12345"},"content":"|data.txt line|explanation|before state|after state|"},{"lineNumber":443,"author":{"gitId":"snowbanana12345"},"content":"|-----------------------------------------------------|-----------------------------------------------------------|-----------------|---------------|"},{"lineNumber":444,"author":{"gitId":"snowbanana12345"},"content":"|\u0026%START| starts the reading | not reading | canteen |"},{"lineNumber":445,"author":{"gitId":"snowbanana12345"},"content":"| canteen1 | set the current canteen name to canteen1 | canteen | store |"},{"lineNumber":446,"author":{"gitId":"snowbanana12345"},"content":"| store 1 | sets the current store name to store1 | store | food |"},{"lineNumber":447,"author":{"gitId":"snowbanana12345"},"content":"| food1 | adds a food with the data of food1 | food | food |"},{"lineNumber":448,"author":{"gitId":"snowbanana12345"},"content":"| food2 | adds a food with the data of food2 | food | food |"},{"lineNumber":449,"author":{"gitId":"snowbanana12345"},"content":"| \u0026%UP | goes up to store | food | store |"},{"lineNumber":450,"author":{"gitId":"snowbanana12345"},"content":"| store 2 | sets the current store name to store2 | store | food |"},{"lineNumber":451,"author":{"gitId":"snowbanana12345"},"content":"| food 3 | adds a food with the data of food3 | food | food |"},{"lineNumber":452,"author":{"gitId":"snowbanana12345"},"content":"| \u0026%UP | goes up to store | food | store |"},{"lineNumber":453,"author":{"gitId":"snowbanana12345"},"content":"| \u0026%UP | goes up to canteen | store | canteen |"},{"lineNumber":454,"author":{"gitId":"snowbanana12345"},"content":"|\u0026%STOP | stops the reading | canteen | not reading |"},{"lineNumber":455,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":456,"author":{"gitId":"snowbanana12345"},"content":"### UML diagram "},{"lineNumber":457,"author":{"gitId":"snowbanana12345"},"content":"##### `DataBase#init()`"},{"lineNumber":458,"author":{"gitId":"snowbanana12345"},"content":"![Alt text](UML_diaghrams/database_feature/DataBase_init.png)"},{"lineNumber":459,"author":{"gitId":"snowbanana12345"},"content":"##### `DataBase#search()`"},{"lineNumber":460,"author":{"gitId":"snowbanana12345"},"content":"![Alt_text](UML_diaghrams/database_feature/DataBase_search.png)"},{"lineNumber":461,"author":{"gitId":"-"},"content":""},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"## Product scope"},{"lineNumber":464,"author":{"gitId":"-"},"content":"### Target user profile"},{"lineNumber":465,"author":{"gitId":"-"},"content":""},{"lineNumber":466,"author":{"gitId":"HengFuYuen"},"content":"NUS students living on campus who would like to track their diet."},{"lineNumber":467,"author":{"gitId":"-"},"content":""},{"lineNumber":468,"author":{"gitId":"-"},"content":"### Value proposition"},{"lineNumber":469,"author":{"gitId":"-"},"content":""},{"lineNumber":470,"author":{"gitId":"HengFuYuen"},"content":"DietBook is designed to **track the food and different kinds of nutritional intake** of the user. It can also provide the user with a **daily calorie recommendation** based on their personal information. As the application mainly targets _NUS students staying on campus, it has a **database prepopulated with food items commonly found around NUS**. This allows for such food items to be easily added to the list of food items consumed for tracking."},{"lineNumber":471,"author":{"gitId":"-"},"content":""},{"lineNumber":472,"author":{"gitId":"-"},"content":"## User Stories"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"|Version| As a ... | I want to ... | So that I can ...|"},{"lineNumber":475,"author":{"gitId":"-"},"content":"|--------|----------|---------------|------------------|"},{"lineNumber":476,"author":{"gitId":"HengFuYuen"},"content":"|v1.0 v2.0|person with an ideal weight in mind|input my target weight and relevant information|get daily calorie intake recommendations|"},{"lineNumber":477,"author":{"gitId":"HengFuYuen"},"content":"|v1.0|careless or long term user|be able to view my personal information|make changes when necessary|"},{"lineNumber":478,"author":{"gitId":"HengFuYuen"},"content":"|v2.0|careless user|be able to edit my personal information|make changes if I input the wrong information|"},{"lineNumber":479,"author":{"gitId":"HengFuYuen"},"content":"|v2.0|potential long term user|be able to edit my personal information|make changes to information like age, weight and fitness level as it can changes over time|"},{"lineNumber":480,"author":{"gitId":"HengFuYuen"},"content":"|v2.0|user that wants to track weight changes|be able to view the weight I started off with, my current weight and the weight I desire|take note of my progress|"},{"lineNumber":481,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":""},{"lineNumber":483,"author":{"gitId":"-"},"content":"## Non-Functional Requirements"},{"lineNumber":484,"author":{"gitId":"-"},"content":""},{"lineNumber":485,"author":{"gitId":"HengFuYuen"},"content":"1. Should work on any mainstream OS as long as `Java 11` is installed in the system."},{"lineNumber":486,"author":{"gitId":"HengFuYuen"},"content":"1. A user who can type fast and prefer typing over mouse/voice commands should be able to accomplish the same tasks faster when using Command Line Interface, the interface implemented by that DietBook, as compared to other modes of inputs."},{"lineNumber":487,"author":{"gitId":"-"},"content":""},{"lineNumber":488,"author":{"gitId":"-"},"content":"## Glossary"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"HengFuYuen"},"content":"* _Mainstream OD_ - Windows, Linux, Unix, OS-X"},{"lineNumber":491,"author":{"gitId":"HengFuYuen"},"content":"* _Food items_ - Includes both food and drinks "},{"lineNumber":492,"author":{"gitId":"HengFuYuen"},"content":"* _Nutrient / Nutritional intake_ - Includes carbohydrates, fats, proteins and calories"},{"lineNumber":493,"author":{"gitId":"HengFuYuen"},"content":"* _Information / Personal information_ - Includes name, age, gender, height, fitness level, original, current and target weight."},{"lineNumber":494,"author":{"gitId":"HengFuYuen"},"content":"* _Database_ - Contains a list of commonly found food items in the National University of Singapore"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"-"},"content":"## Instructions for manual testing"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"HengFuYuen"},"content":"Given below are instructions to test the app manually."},{"lineNumber":499,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":500,"author":{"gitId":"HengFuYuen"},"content":"### Entering user information"},{"lineNumber":501,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":502,"author":{"gitId":"HengFuYuen"},"content":"1. Entering name or nickname into the application"},{"lineNumber":503,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `name Tom and Jerry`\u003cbr/\u003e"},{"lineNumber":504,"author":{"gitId":"HengFuYuen"},"content":"    Expected: The name `Tom and Jerry` will be stored in the system and a message prompting the user to enter all other details will be displayed."},{"lineNumber":505,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `name *1*`\u003cbr/\u003e"},{"lineNumber":506,"author":{"gitId":"HengFuYuen"},"content":"    Expected: The name `*1*` will be stored in the system and a message prompting the user to enter all other details will be displayed."},{"lineNumber":507,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `name Ja/ck`\u003cbr/\u003e"},{"lineNumber":508,"author":{"gitId":"HengFuYuen"},"content":"    Expected: No name will not be stored in the system and an error message will be displayed."},{"lineNumber":509,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `nameJack`\u003cbr/\u003e"},{"lineNumber":510,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":511,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `name`\u003cbr/\u003e"},{"lineNumber":512,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":513,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `Name Jack`\u003cbr/\u003e"},{"lineNumber":514,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":515,"author":{"gitId":"HengFuYuen"},"content":"    "},{"lineNumber":516,"author":{"gitId":"HengFuYuen"},"content":"1. Entering other personal information into the application (all seven pieces of information is required e.g. age, height, etc)"},{"lineNumber":517,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `info g/M a/21 h/175 o/85 c/85 t/75 f/2`\u003cbr/\u003e"},{"lineNumber":518,"author":{"gitId":"HengFuYuen"},"content":"    Expected: All information is stored in the system and a message stating that initialising is complete will be displayed."},{"lineNumber":519,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `info o/85 a/21 f/2 h/175 g/M c/85 t/75` (where parameters can be entered in any order)\u003cbr/\u003e"},{"lineNumber":520,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":521,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `info g/Ma/21h/175 o/85 c/85 t/75 f/2` (where there are no spaces between the different parameters)\u003cbr/\u003e"},{"lineNumber":522,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":523,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `Info o/85 a/21 F/2 h/175 g/M c/85 t/75` (where any letter of the command word or parameter tags are capitalised)\u003cbr/\u003e"},{"lineNumber":524,"author":{"gitId":"HengFuYuen"},"content":"    Expected: The information is not stored in the system and an error message will be displayed."},{"lineNumber":525,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `infog/M a/21 h/175 o/85 c/85 t/75 f/2` \u003cbr/\u003e"},{"lineNumber":526,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":527,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `info g/M a/21 h/175 o/85 c/85 t/75 f/2 z/9` (where extra parameters,parameter tags or words are present)\u003cbr/\u003e"},{"lineNumber":528,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":529,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `info g//F a/21 h/175 o/85 c/85 t/75 f/2` (where `/` or any other special characters is used inappropriately)\u003cbr/\u003e"},{"lineNumber":530,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":531,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `info g/f a/160 h/500 o/900 c/85 t/75.6 f/7`(where age, height, weights, gender and fitness level are not within the valid ranges or not valid - refer to [User Guide](UserGuide.md) for more information)\u003cbr/\u003e "},{"lineNumber":532,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":533,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `info a/21` (where any of the required parameters are missing)\u003cbr/\u003e"},{"lineNumber":534,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."},{"lineNumber":535,"author":{"gitId":"HengFuYuen"},"content":"    "},{"lineNumber":536,"author":{"gitId":"HengFuYuen"},"content":"### Editing user information"},{"lineNumber":537,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":538,"author":{"gitId":"HengFuYuen"},"content":"1. Editing user information store in the application (one or more change(s) is/are allowed)\u003cbr/\u003e"},{"lineNumber":539,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `editinfo n/Jane`\u003cbr/\u003e"},{"lineNumber":540,"author":{"gitId":"HengFuYuen"},"content":"    Expected: User\u0027s personal information is displayed and the name of the user is updated to `Jane`."},{"lineNumber":541,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `editinfo a/22 c/80` (where variable number of information is changed)\u003cbr/\u003e"},{"lineNumber":542,"author":{"gitId":"HengFuYuen"},"content":"    Excepted: User\u0027s personal information is displayed and the age of the user is updated to `22` while the current weight is updated to `80`."},{"lineNumber":543,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `editinfo`\u003cbr/\u003e"},{"lineNumber":544,"author":{"gitId":"HengFuYuen"},"content":"    Expected: User\u0027s personal information is not updated and an error message is displayed."},{"lineNumber":545,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":546,"author":{"gitId":"HengFuYuen"},"content":"Refer to [Entering User Information Section under Instructions for manual testing](#entering-user-information) for **similar** test cases that can be used for testing."},{"lineNumber":547,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":548,"author":{"gitId":"HengFuYuen"},"content":"### Viewing user information"},{"lineNumber":549,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":550,"author":{"gitId":"HengFuYuen"},"content":"1. Viewing user personal information stored in the application "},{"lineNumber":551,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `userinfo`\u003cbr/\u003e"},{"lineNumber":552,"author":{"gitId":"HengFuYuen"},"content":"    Expected: User\u0027s personal information is displayed."},{"lineNumber":553,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `userinfo userinfo`\u003cbr/\u003e"},{"lineNumber":554,"author":{"gitId":"HengFuYuen"},"content":"    Expected: User\u0027s personal information will not be displayed. Error message will be shown to user."},{"lineNumber":555,"author":{"gitId":"HengFuYuen"},"content":"    1. Test case: `Userinfo`\u003cbr/\u003e"},{"lineNumber":556,"author":{"gitId":"HengFuYuen"},"content":"    Expected: Similar to previous."}],"authorContributionMap":{"snowbanana12345":113,"HengFuYuen":286,"mxksowie":131,"-":26}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"# DietBook"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"[![CI status](https://github.com/AY2021S1-CS2113-T14-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2113-T14-4/tp/actions)"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"DietBook is a Command Line Interface (CLI) desktop application designed to **track your food and nutritional intake** as well as provide you with your **daily calorie recommendation**. As the application mainly targets _NUS students staying on campus_, it has a **database prepopulated with food items commonly found around NUS**. This allows for such food items to be easily added to the list of food items consumed for tracking."},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"**Useful links:**"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"* If you would like to use DietBook, head over to [User Guide](UserGuide.md) to get started."},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":"* If you would like to know more about developing DietBook, head over to [Developer Guide](DeveloperGuide.md)."},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"* If you would like to know more about the developers, head over to [About Us](AboutUs.md)."},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":"**Acknowledgements:**"},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"* Libraries used: [JUnit5](https://github.com/junit-team/junit5)"},{"lineNumber":16,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"HengFuYuen":14,"-":2}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"# DietBook User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"DietBook is a desktop application, optimized for use via a **Command Line Interface** (CLI). It is designed to **track your food and nutritional intake** as well as provide you with your **daily calorie recommendation**. As the application mainly targets _NUS students staying on campus_, it has a **database prepopulated with food items commonly found around NUS**. This allows for such food items to be easily added to the list of food items consumed for tracking."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"* Table of Contents"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"{:toc} "},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Quick Start"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":"1. Ensure that you have **Java 11** installed."},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"1. Download the latest version of `dietbook.jar` from [here](https://github.com/AY2021S1-CS2113-T14-4/tp/releases)."},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":"1. Copy the file to the folder you want to use as the home folder for your DietBook."},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":"1. Navigate to the folder containing the jar file on command prompt and run the command `java -jar dietbook.jar`. "},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":"1. Enable full-screen for a better experience but rest assure that DietBook will still function normally even in non full-screen mode."},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"1. For **first time users**: \u003cbr/\u003e"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"A CLI, similar to the one shown below, should appear within a few seconds. Follow the instructions provided to setup DietBook or refer to [name](#entering-username-name) and [info](#entering-user-information-info) for more detailed explanations.\u003cbr/\u003e"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"![DietBook Welcome Message](images/DietBookWelcomeMessage.PNG)  "},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"1. Start using DietBook by typing any valid command and pressing Enter to execute it."},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"1. Refer to the [Features](#features) section below for more details of each command or jump to [Command Summary](#command-summary) section for a list of valid commands."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":":warning: **Please take note of the following:**"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"* Words in `UPPER_CASE` are **parameters to be supplied** by the user.\u003cbr/\u003e "},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"e.g. For `name YOUR_NAME_OR_NICKNAME`, `name Jack` would be a valid command."},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"  "},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"* Parameters in **square brackets are optional**. However, if all parameters are optional, **at least one parameter needs to be given**. In such cases, any one of the parameters would be valid.\u003cbr/\u003e"},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"e.g. For `editinfo [n/NAME] [g/GENDER] [a/AGE] [h/HEIGHT] [o/ORIGINAL_WEIGHT] [c/CURRENT_WEIGHT] [t/TARGET_WEIGHT] [f/FITNESS_LEVEL]`, `editinfo a/31` and `editinfo h/173 o/87` are valid commands but `editinfo` is not."},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"* For commands with multiple parameters, the parameters can be in any order **only if the parameters are attached to a parameter tag** like `n/`, `a/`, etc. Otherwise, they **must be entered in the sequence as shown** in this guide, the [Help Command](#to-view-a-list-of-valid-commands-help) or the [Summary Command](#command-summary).\u003cbr/\u003e"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"e.g. For `calculate NUTRIENT_TYPE [yyyy-mm-ddTHH:mm] [yyyy-mm-ddTHH:mm]`,`calculate fat 2020-07-03T23:59 2020-09-03T23:59` is valid but `calculate 2020-07-03T23:59 fat 2020-09-03T23:59` is not.\u003cbr/\u003e"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":"e.g. For `add i/INDEX x/PORTION_SIZE [yyyy-mm-ddTHH:mm]`, `add x/1 i/1 2020-09-03T23:59` is valid but `add i/1 2020-09-03T23:59 x/1 ` is not as time needs to be entered as the last parameter. "},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":"* Command words and parameter indicators are **case-sensitive**.\u003cbr/\u003e"},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"e.g. `help` is a valid command but `Help` is not.\u003cbr/\u003e"},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"e.g. For `add i/INDEX x/PORTION_SIZE [yyyy-mm-ddTHH:mm]`, `add i/1 x/1 2020-07-03T23:59` is valid but `add I/1 x/1 2020-07-03T23:59` is not."},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":39,"author":{"gitId":"HengFuYuen"},"content":"* **Spacing** to separate command word and parameters is required.\u003cbr/\u003e "},{"lineNumber":40,"author":{"gitId":"HengFuYuen"},"content":"e.g. For `calculate NUTRIENT_TYPE`, `calculate all` is valid but `calculateall` is not."},{"lineNumber":41,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":42,"author":{"gitId":"HengFuYuen"},"content":"* Inappropriate usage of `/`, the forward slash, may lead to invalid commands. Only use **one** `/` in parameter tags like `n/`, `a/`, etc and avoid using `/` otherwise."},{"lineNumber":43,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":44,"author":{"gitId":"HengFuYuen"},"content":"### Features related to user information"},{"lineNumber":45,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":46,"author":{"gitId":"HengFuYuen"},"content":"#### Entering username: `name`"},{"lineNumber":47,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":"Stores the user\u0027s name or nickname into DietBook during the initial setup."},{"lineNumber":49,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":50,"author":{"gitId":"HengFuYuen"},"content":"Format: `name YOUR_NAME_OR_NICKNAME`"},{"lineNumber":51,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":52,"author":{"gitId":"HengFuYuen"},"content":"* The name given **must not be empty**."},{"lineNumber":53,"author":{"gitId":"HengFuYuen"},"content":"* The name **can contain any numbers and characters except for `/`**, the forward slash."},{"lineNumber":54,"author":{"gitId":"HengFuYuen"},"content":"    * FYI: DietBook accepts all characters from Dec 33 - 126 of the [ASCII table](http://www.asciitable.com/), **except Dec 47**, the forward slash `/`."},{"lineNumber":55,"author":{"gitId":"HengFuYuen"},"content":"* This command is **only used when setting up DietBook for the first time**. Any subsequent editing of the name can be done using the [editinfo](#editing-user-information-editinfo) command."},{"lineNumber":56,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":57,"author":{"gitId":"HengFuYuen"},"content":"Example of usage:"},{"lineNumber":58,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":59,"author":{"gitId":"HengFuYuen"},"content":"* `name Jack`"},{"lineNumber":60,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":61,"author":{"gitId":"HengFuYuen"},"content":"Output example:"},{"lineNumber":62,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":63,"author":{"gitId":"HengFuYuen"},"content":"Hi Jack!"},{"lineNumber":64,"author":{"gitId":"HengFuYuen"},"content":"Before we get started, I would like to know about about you so that I can make more"},{"lineNumber":65,"author":{"gitId":"HengFuYuen"},"content":"accurate calculations for you :). Therefore, could you please share with me the following:"},{"lineNumber":66,"author":{"gitId":"HengFuYuen"},"content":"- Your gender either F for female or M for male or O for others."},{"lineNumber":67,"author":{"gitId":"HengFuYuen"},"content":"- Your age which is a positive integer."},{"lineNumber":68,"author":{"gitId":"HengFuYuen"},"content":"- Your height in cm."},{"lineNumber":69,"author":{"gitId":"HengFuYuen"},"content":"- Your original weight in kg, the weight when you first started using DietBook or you current weight."},{"lineNumber":70,"author":{"gitId":"HengFuYuen"},"content":"- Your current weight in kg."},{"lineNumber":71,"author":{"gitId":"HengFuYuen"},"content":"- Your target weight in kg, or your current weight if that is also your target weight."},{"lineNumber":72,"author":{"gitId":"HengFuYuen"},"content":"- Your fitness level, represented by a number from 1 to 5."},{"lineNumber":73,"author":{"gitId":"HengFuYuen"},"content":"  1 \u003d You hardly engage in any exercise or have a job that requires little to no physical activity."},{"lineNumber":74,"author":{"gitId":"HengFuYuen"},"content":"  2 \u003d You engage in some form of light exercise or have a job that requires some physical activity."},{"lineNumber":75,"author":{"gitId":"HengFuYuen"},"content":"  3 \u003d You engage in moderate amount of exercise or have a job that requires moderate physical activity."},{"lineNumber":76,"author":{"gitId":"HengFuYuen"},"content":"  4 \u003d You engage in vigorous exercise or have a physically demanding job."},{"lineNumber":77,"author":{"gitId":"HengFuYuen"},"content":"  5 \u003d You engage in extremely vigorous exercise or have an extremely physically demanding job."},{"lineNumber":78,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":79,"author":{"gitId":"HengFuYuen"},"content":"Please input your details in the following format:"},{"lineNumber":80,"author":{"gitId":"HengFuYuen"},"content":"  info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT c/CURRENT_WEIGHT t/TARGET_WEIGHT f/FITNESS_LEVEL"},{"lineNumber":81,"author":{"gitId":"HengFuYuen"},"content":"  Example: info g/F a/21 h/165 o/65 c/65 t/55 f/2"},{"lineNumber":82,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":83,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":84,"author":{"gitId":"HengFuYuen"},"content":"#### Entering user information: `info`"},{"lineNumber":85,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":86,"author":{"gitId":"HengFuYuen"},"content":"Stores the user\u0027s personal information into DietBook during the initial setup. "},{"lineNumber":87,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":88,"author":{"gitId":"HengFuYuen"},"content":"Format: `info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT c/CURRENT_WEIGHT t/TARGET_WEIGHT f/FITNESS_LEVEL`"},{"lineNumber":89,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":90,"author":{"gitId":"HengFuYuen"},"content":"* This command is **only used when setting up DietBook for the first time**. Any subsequent editing of user information can be done using the [editinfo](#editing-user-information-editinfo) command."},{"lineNumber":91,"author":{"gitId":"HengFuYuen"},"content":"* The gender must be either **`M` for male, `F` for female or `O` for others**."},{"lineNumber":92,"author":{"gitId":"HengFuYuen"},"content":"* The age must be a positive **integer from 0 to 150, inclusive**."},{"lineNumber":93,"author":{"gitId":"HengFuYuen"},"content":"* The height in cm must be a positive **integer from 1 to 300, inclusive**."},{"lineNumber":94,"author":{"gitId":"HengFuYuen"},"content":"* The original, current and target weight in kg must be a positive **integer from 1 to 500, inclusive**."},{"lineNumber":95,"author":{"gitId":"HengFuYuen"},"content":"* The fitness level must be a positive **integer from 1 to 5, inclusive**."},{"lineNumber":96,"author":{"gitId":"HengFuYuen"},"content":"  * 1 \u003d You hardly engage in any exercise or have a job that requires little to no physical activity."},{"lineNumber":97,"author":{"gitId":"HengFuYuen"},"content":"  * 2 \u003d You engage in some form of light exercise or have a job that requires some physical activity."},{"lineNumber":98,"author":{"gitId":"HengFuYuen"},"content":"  * 3 \u003d You engage in moderate amount of exercise or have a job that requires moderate physical activity."},{"lineNumber":99,"author":{"gitId":"HengFuYuen"},"content":"  * 4 \u003d You engage in vigorous exercise or have a physically demanding job."},{"lineNumber":100,"author":{"gitId":"HengFuYuen"},"content":"  * 5 \u003d You engage in extremely vigorous exercise or have an extremely physically demanding job."},{"lineNumber":101,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":102,"author":{"gitId":"HengFuYuen"},"content":"Example of usage:"},{"lineNumber":103,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":104,"author":{"gitId":"HengFuYuen"},"content":"* `info g/M a/21 h/175 o/85 c/85 t/75 f/2` stores the user\u0027s gender, age, height, original, current and target weight as well as the fitness level to `male`, `21`, `175`, `85`, `85`, `75` and `You engage in some form of light exercise  or have a job that requires some physical activity.` respectively."},{"lineNumber":105,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":106,"author":{"gitId":"HengFuYuen"},"content":"Output example:"},{"lineNumber":107,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":108,"author":{"gitId":"HengFuYuen"},"content":"Thank you! DietBook has been initialised and you may start by entering any valid commands."},{"lineNumber":109,"author":{"gitId":"HengFuYuen"},"content":"If you require a list of valid commands, you can enter: help"},{"lineNumber":110,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"HengFuYuen"},"content":"#### Viewing user information: `userinfo`"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"HengFuYuen"},"content":"Shows the user information stored in DietBook."},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"HengFuYuen"},"content":"Format: `userinfo` "},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"HengFuYuen"},"content":"Output example: "},{"lineNumber":119,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":120,"author":{"gitId":"HengFuYuen"},"content":"Here is your information:"},{"lineNumber":121,"author":{"gitId":"HengFuYuen"},"content":"  Name: Jack"},{"lineNumber":122,"author":{"gitId":"HengFuYuen"},"content":"  Gender: male"},{"lineNumber":123,"author":{"gitId":"HengFuYuen"},"content":"  Age: 21"},{"lineNumber":124,"author":{"gitId":"HengFuYuen"},"content":"  Height: 175cm"},{"lineNumber":125,"author":{"gitId":"HengFuYuen"},"content":"  Original weight: 85kg"},{"lineNumber":126,"author":{"gitId":"HengFuYuen"},"content":"  Current weight: 85kg"},{"lineNumber":127,"author":{"gitId":"HengFuYuen"},"content":"  Target weight: 75kg"},{"lineNumber":128,"author":{"gitId":"HengFuYuen"},"content":"  Fitness level: You engage in some form of light exercise or have a job that requires some physical activity."},{"lineNumber":129,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":130,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":131,"author":{"gitId":"HengFuYuen"},"content":"#### Editing user information: `editinfo`"},{"lineNumber":132,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":133,"author":{"gitId":"HengFuYuen"},"content":"Edits the user information stored in DietBook."},{"lineNumber":134,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":135,"author":{"gitId":"HengFuYuen"},"content":"Format: `editinfo [n/NAME] [g/GENDER] [a/AGE] [h/HEIGHT] [o/ORIGINAL_WEIGHT] [c/CURRENT_WEIGHT] [t/TARGET_WEIGHT] [f/FITNESS_LEVEL]` "},{"lineNumber":136,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":137,"author":{"gitId":"HengFuYuen"},"content":"* Although all parameters are listed as optional, **at least one of the optional fields needs to be provided**. In this case, any one of the parameters would work."},{"lineNumber":138,"author":{"gitId":"HengFuYuen"},"content":"* Existing values will be updated to the input values, even if the new value given is the same as the existing value."},{"lineNumber":139,"author":{"gitId":"HengFuYuen"},"content":"* The name given **must not be empty**."},{"lineNumber":140,"author":{"gitId":"HengFuYuen"},"content":"* The name **can contain any numbers and characters except for `/`**, the forward slash."},{"lineNumber":141,"author":{"gitId":"HengFuYuen"},"content":"    * FYI: DietBook accepts all characters from Dec 33 - 126 of the [ASCII table](http://www.asciitable.com/), **except Dec 47**, the forward slash `/`."},{"lineNumber":142,"author":{"gitId":"HengFuYuen"},"content":"* The gender must be either **`M` for male, `F` for female or `O` for others**."},{"lineNumber":143,"author":{"gitId":"HengFuYuen"},"content":"* The age must be a positive **integer from 0 to 150, inclusive**."},{"lineNumber":144,"author":{"gitId":"HengFuYuen"},"content":"* The height must be a positive **integer from 1 to 300, inclusive**."},{"lineNumber":145,"author":{"gitId":"HengFuYuen"},"content":"* The original, current and target weight must be a positive **integer from 1 to 500, inclusive**."},{"lineNumber":146,"author":{"gitId":"HengFuYuen"},"content":"* The fitness level must be a positive **integer from 1 to 5, inclusive**."},{"lineNumber":147,"author":{"gitId":"HengFuYuen"},"content":"  * 1 \u003d You hardly engage in any exercise or have a job that requires little to no physical activity."},{"lineNumber":148,"author":{"gitId":"HengFuYuen"},"content":"  * 2 \u003d You engage in some form of light exercise or have a job that requires some physical activity."},{"lineNumber":149,"author":{"gitId":"HengFuYuen"},"content":"  * 3 \u003d You engage in moderate amount of exercise or have a job that requires moderate physical activity."},{"lineNumber":150,"author":{"gitId":"HengFuYuen"},"content":"  * 4 \u003d You engage in vigorous exercise or have a physically demanding job."},{"lineNumber":151,"author":{"gitId":"HengFuYuen"},"content":"  * 5 \u003d You engage in extremely vigorous exercise or have an extremely physically demanding job."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"HengFuYuen"},"content":"* Both `editinfo c/75 f/4` and `editinfo f/4 c/75` edits the current weight and fitness level of the user to be `75` and `You engage in vigorous exercise or have a physically demanding job.` respectively."},{"lineNumber":156,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":157,"author":{"gitId":"HengFuYuen"},"content":"Output example: "},{"lineNumber":158,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":159,"author":{"gitId":"HengFuYuen"},"content":"Got it! I\u0027ve updated your personal information:"},{"lineNumber":160,"author":{"gitId":"HengFuYuen"},"content":"  Name: Jack"},{"lineNumber":161,"author":{"gitId":"HengFuYuen"},"content":"  Gender: male"},{"lineNumber":162,"author":{"gitId":"HengFuYuen"},"content":"  Age: 21"},{"lineNumber":163,"author":{"gitId":"HengFuYuen"},"content":"  Height: 175cm"},{"lineNumber":164,"author":{"gitId":"HengFuYuen"},"content":"  Original weight: 85kg"},{"lineNumber":165,"author":{"gitId":"HengFuYuen"},"content":"  Current weight: 75kg"},{"lineNumber":166,"author":{"gitId":"HengFuYuen"},"content":"  Target weight: 75kg"},{"lineNumber":167,"author":{"gitId":"HengFuYuen"},"content":"  Fitness level: You engage in vigorous exercise or have a physically demanding job."},{"lineNumber":168,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":169,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":170,"author":{"gitId":"HengFuYuen"},"content":"### Features related to the food database"},{"lineNumber":171,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":172,"author":{"gitId":"tikimonarch"},"content":"#### To view all food in the database: `data`"},{"lineNumber":173,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":174,"author":{"gitId":"tikimonarch"},"content":"Displays a list of provided food database."},{"lineNumber":175,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":176,"author":{"gitId":"tikimonarch"},"content":"Format: `data`"},{"lineNumber":177,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":178,"author":{"gitId":"tikimonarch"},"content":"Output example:"},{"lineNumber":179,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":180,"author":{"gitId":"tikimonarch"},"content":"Here are the food items in the database:"},{"lineNumber":181,"author":{"gitId":"snowbanana12345"},"content":"  1. Prawn Mee Soup(Dry)(Large) | calorie : 490 | protein : 20 | carbohydrate : 30 | fats : 26"},{"lineNumber":182,"author":{"gitId":"snowbanana12345"},"content":"  2. Prawn Mee Soup(Dry)(Small) | calorie : 390 | protein : 15 | carbohydrate : 25 | fats : 19"},{"lineNumber":183,"author":{"gitId":"snowbanana12345"},"content":"  3. Fried Hokkien Prawn Mee(Large) | calorie : 470 | protein : 20 | carbohydrate : 40 | fats : 20"},{"lineNumber":184,"author":{"gitId":"snowbanana12345"},"content":"  4. Fried Hokkien Prawn Mee(Small) | calorie : 350 | protein : 15 | carbohydrate : 30 | fats : 15"},{"lineNumber":185,"author":{"gitId":"snowbanana12345"},"content":"  5. Clay Pot Chicken | calorie : 440 | protein : 15 | carbohydrate : 34 | fats : 15"},{"lineNumber":186,"author":{"gitId":"snowbanana12345"},"content":"  6. Black Pepper Chicken | calorie : 490 | protein : 16 | carbohydrate : 34 | fats : 16"},{"lineNumber":187,"author":{"gitId":"snowbanana12345"},"content":"  7. Ayam Penyet Set | calorie : 699 | protein : 30 | carbohydrate : 45 | fats : 30"},{"lineNumber":188,"author":{"gitId":"snowbanana12345"},"content":"  8. Steamed Chicken Set  | calorie : 475 | protein : 20 | carbohydrate : 35 | fats : 20"},{"lineNumber":189,"author":{"gitId":"snowbanana12345"},"content":"  9. Ikan Grouper Penyet Set | calorie : 669 | protein : 40 | carbohydrate : 50 | fats : 50"},{"lineNumber":190,"author":{"gitId":"snowbanana12345"},"content":"  10. kimchi fried rice | calorie : 520 | protein : 35 | carbohydrate : 45 | fats : 56"},{"lineNumber":191,"author":{"gitId":"snowbanana12345"},"content":"  11. ginseng chicken | calorie : 450 | protein : 32 | carbohydrate : 25 | fats : 66"},{"lineNumber":192,"author":{"gitId":"snowbanana12345"},"content":"  12. ramen | calorie : 530 | protein : 25 | carbohydrate : 76 | fats : 43"},{"lineNumber":193,"author":{"gitId":"snowbanana12345"},"content":"  13. gong cha green tea | calorie : 100 | protein : 0 | carbohydrate : 0 | fats : 0"},{"lineNumber":194,"author":{"gitId":"snowbanana12345"},"content":"  14. gong cha ooloong tea | calorie : 100 | protein : 0 | carbohydrate : 0 | fats : 0"},{"lineNumber":195,"author":{"gitId":"snowbanana12345"},"content":"  15. gong cha bubble tea | calorie : 200 | protein : 0 | carbohydrate : 0 | fats : 0"},{"lineNumber":196,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":197,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":198,"author":{"gitId":"snowbanana12345"},"content":"#### To add food from the database: `add` "},{"lineNumber":199,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":200,"author":{"gitId":"tikimonarch"},"content":"Adds a desired food in the database into the DietBook."},{"lineNumber":201,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":202,"author":{"gitId":"snowbanana12345"},"content":"Format: `add i/FOOD_INDEX x/PORTION_SIZE [yyyy-mm-ddTHH:MM]`"},{"lineNumber":203,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":204,"author":{"gitId":"snowbanana12345"},"content":"Note : optional date time input, if not provided, the entry will have the current date time stamp"},{"lineNumber":205,"author":{"gitId":"snowbanana12345"},"content":"Inputting a future date time is not allowed."},{"lineNumber":206,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":207,"author":{"gitId":"tikimonarch"},"content":"Example of Usage:"},{"lineNumber":208,"author":{"gitId":"snowbanana12345"},"content":"* `add i/1 x/1` adds the food in the data base with index 1 with a portion of 1 at the current time"},{"lineNumber":209,"author":{"gitId":"snowbanana12345"},"content":"* `add i/3 x/2 2020-11-02T12:30` adds the food with index 3 with a portion of 2 at date and time 2 nov 2020 12:30"},{"lineNumber":210,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":211,"author":{"gitId":"tikimonarch"},"content":"Output example:"},{"lineNumber":212,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":213,"author":{"gitId":"snowbanana12345"},"content":"  1. Prawn Mee Soup(Dry)(Large) | calorie : 490 | protein : 20 | carbohydrate : 30 | fats : 26 -- (1) [09 Nov 2020 2238]"},{"lineNumber":214,"author":{"gitId":"snowbanana12345"},"content":"  2. Fried Hokkien Prawn Mee(Large) | calorie : 470 | protein : 20 | carbohydrate : 40 | fats : 20 -- (2) [02 Nov 2020 1230]"},{"lineNumber":215,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":216,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":217,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":218,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":219,"author":{"gitId":"HengFuYuen"},"content":"### Features related to the food list"},{"lineNumber":220,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":221,"author":{"gitId":"HengFuYuen"},"content":"#### To add you own food: `add`"},{"lineNumber":222,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":223,"author":{"gitId":"HengFuYuen"},"content":"Format: `add x/PORTION_SIZE n/FOOD_NAME k/CALORIE [c/CARBOHYDRATE] [p/PROTEIN] [f/FAT]`"},{"lineNumber":224,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":225,"author":{"gitId":"HengFuYuen"},"content":"Examples of usage : "},{"lineNumber":226,"author":{"gitId":"HengFuYuen"},"content":"* Example 1 : `add x/1 n/Salty Chicken Rice k/300 c/10 p/20 f/50`"},{"lineNumber":227,"author":{"gitId":"snowbanana12345"},"content":"* Output of Example 1 : "},{"lineNumber":228,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":229,"author":{"gitId":"snowbanana12345"},"content":"Got it! I\u0027ve added this food item:"},{"lineNumber":230,"author":{"gitId":"snowbanana12345"},"content":"  Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":231,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":232,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":233,"author":{"gitId":"HengFuYuen"},"content":"* Example 2 : `add x/2 n/Chilli Pepper Crab k/400 c/10 p/10 f/20`"},{"lineNumber":234,"author":{"gitId":"snowbanana12345"},"content":"* Output of Example 2 :"},{"lineNumber":235,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":236,"author":{"gitId":"snowbanana12345"},"content":"Got it! I\u0027ve added this food item:"},{"lineNumber":237,"author":{"gitId":"snowbanana12345"},"content":"  Chilli Pepper Crab | calorie : 400 | protein : 10 | carbohydrate : 10 | fats : 20 -- (2)"},{"lineNumber":238,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"HengFuYuen"},"content":"#### To view all food in DietBook: `list`"},{"lineNumber":241,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":242,"author":{"gitId":"HengFuYuen"},"content":"Example of usage : list"},{"lineNumber":243,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":244,"author":{"gitId":"HengFuYuen"},"content":"Output :"},{"lineNumber":245,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":246,"author":{"gitId":"snowbanana12345"},"content":"Here are the food items in DietBook:"},{"lineNumber":247,"author":{"gitId":"snowbanana12345"},"content":"  1. Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":248,"author":{"gitId":"snowbanana12345"},"content":"  2. Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":249,"author":{"gitId":"snowbanana12345"},"content":"  3. Chilli Pepper Crab | calorie : 400 | protein : 10 | carbohydrate : 10 | fats : 20 -- (2)"},{"lineNumber":250,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":251,"author":{"gitId":"HengFuYuen"},"content":"#### To view all food in DietBook recorded within a time period: `list`"},{"lineNumber":252,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":253,"author":{"gitId":"HengFuYuen"},"content":"Format: `list yyyy-mm-ddTHH:mm yyyy-mm-ddTHH:mm`"},{"lineNumber":254,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":255,"author":{"gitId":"HengFuYuen"},"content":"Example of usage : list 2020-10-29T11:30 2020-10-29T16:40"},{"lineNumber":256,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":257,"author":{"gitId":"snowbanana12345"},"content":"* Output :"},{"lineNumber":258,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":259,"author":{"gitId":"snowbanana12345"},"content":"Here are the food items recorded in DietBook between 29 Oct 2020 1130 and 29 Oct 2020 1640:"},{"lineNumber":260,"author":{"gitId":"snowbanana12345"},"content":"  1. Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":261,"author":{"gitId":"snowbanana12345"},"content":"  2. Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":262,"author":{"gitId":"snowbanana12345"},"content":"  3. Chilli Pepper Crab | calorie : 400 | protein : 10 | carbohydrate : 10 | fats : 20 -- (2)"},{"lineNumber":263,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":264,"author":{"gitId":"snowbanana12345"},"content":"        "},{"lineNumber":265,"author":{"gitId":"HengFuYuen"},"content":"#### To view all food in DietBook recorded from a certain date until now: `list yyyy-mm-ddTHH:mm`"},{"lineNumber":266,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":267,"author":{"gitId":"HengFuYuen"},"content":"Example of usage : list 1066-10-14T08:00"},{"lineNumber":268,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":269,"author":{"gitId":"HengFuYuen"},"content":"Output :"},{"lineNumber":270,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":271,"author":{"gitId":"snowbanana12345"},"content":"Here are the food items recorded in DietBook between 14 Oct 1066 0800 and 29 Oct 2020 1317:"},{"lineNumber":272,"author":{"gitId":"snowbanana12345"},"content":"  1. Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":273,"author":{"gitId":"snowbanana12345"},"content":"  2. Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":274,"author":{"gitId":"snowbanana12345"},"content":"  3. Chilli Pepper Crab | calorie : 400 | protein : 10 | carbohydrate : 10 | fats : 20 -- (2)"},{"lineNumber":275,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":276,"author":{"gitId":"HengFuYuen"},"content":"#### To delete a food from DietBook: `delete INDEX`"},{"lineNumber":277,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":278,"author":{"gitId":"HengFuYuen"},"content":"Example of usage : delete 2"},{"lineNumber":279,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":280,"author":{"gitId":"HengFuYuen"},"content":"Output : "},{"lineNumber":281,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":282,"author":{"gitId":"snowbanana12345"},"content":"Noted. I\u0027ve removed this food item:"},{"lineNumber":283,"author":{"gitId":"snowbanana12345"},"content":"  Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":284,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":285,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":286,"author":{"gitId":"HengFuYuen"},"content":"The list after delete is done :"},{"lineNumber":287,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":288,"author":{"gitId":"snowbanana12345"},"content":"Here are the food items in DietBook:"},{"lineNumber":289,"author":{"gitId":"snowbanana12345"},"content":"  1. Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":290,"author":{"gitId":"snowbanana12345"},"content":"  2. Chilli Pepper Crab | calorie : 400 | protein : 10 | carbohydrate : 10 | fats : 20 -- (2)"},{"lineNumber":291,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":292,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":293,"author":{"gitId":"HengFuYuen"},"content":"#### To delete all food items from the DietBook: clear"},{"lineNumber":294,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":295,"author":{"gitId":"HengFuYuen"},"content":"Example of usage : clear "},{"lineNumber":296,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":297,"author":{"gitId":"HengFuYuen"},"content":"Output : "},{"lineNumber":298,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":299,"author":{"gitId":"snowbanana12345"},"content":"All previous data has been deleted..."},{"lineNumber":300,"author":{"gitId":"snowbanana12345"},"content":"DietBook is now empty."},{"lineNumber":301,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":302,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":303,"author":{"gitId":"HengFuYuen"},"content":"Before clearing : "},{"lineNumber":304,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":305,"author":{"gitId":"snowbanana12345"},"content":"Here are the food items in DietBook:"},{"lineNumber":306,"author":{"gitId":"snowbanana12345"},"content":"  1. Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":307,"author":{"gitId":"snowbanana12345"},"content":"  2. Chilli Pepper Crab | calorie : 400 | protein : 10 | carbohydrate : 10 | fats : 20 -- (2)"},{"lineNumber":308,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":309,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":310,"author":{"gitId":"HengFuYuen"},"content":"After clearing : "},{"lineNumber":311,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":312,"author":{"gitId":"snowbanana12345"},"content":"DietBook is currently empty."},{"lineNumber":313,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":314,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":315,"author":{"gitId":"yuqiaoluolong"},"content":"### Features related to nutritional intake calculation"},{"lineNumber":316,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":317,"author":{"gitId":"yuqiaoluolong"},"content":"#### Calculating nutrition intake: calculate"},{"lineNumber":318,"author":{"gitId":"yuqiaoluolong"},"content":"Calculate the amount of nutrition in the foods in intake list."},{"lineNumber":319,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":320,"author":{"gitId":"yuqiaoluolong"},"content":"Format: `calculate NUTRITION_NAME [START_TIME] [END_TIME]`"},{"lineNumber":321,"author":{"gitId":"yuqiaoluolong"},"content":"* The NUTRITION_NAME should be one of the five cases, which are: `calorie`, `carbohydrate`, `protein`, `fat`, and `all`."},{"lineNumber":322,"author":{"gitId":"yuqiaoluolong"},"content":"    * `calorie`: calculate the total amount of calorie from the foods in the intake list."},{"lineNumber":323,"author":{"gitId":"yuqiaoluolong"},"content":"    * `carbohydrate`: calculate the total amount of carbohydrate from the foods in the intake list."},{"lineNumber":324,"author":{"gitId":"yuqiaoluolong"},"content":"    * `protein`: calculate the total amount of protein from the foods in the intake list."},{"lineNumber":325,"author":{"gitId":"yuqiaoluolong"},"content":"    * `fat`: calculate the total amount of fat from the foods in the intake list."},{"lineNumber":326,"author":{"gitId":"yuqiaoluolong"},"content":"    * `all`: calculate the total amount of all five nutrition elements."},{"lineNumber":327,"author":{"gitId":"yuqiaoluolong"},"content":"* Although two time inputs are listed as optional, the END_TIME is only meaningful inputted with the START_TIME."},{"lineNumber":328,"author":{"gitId":"yuqiaoluolong"},"content":"    * `calculate NUTRITION_NAME`: calculate the amount of nutrition from all foods in the intake list."},{"lineNumber":329,"author":{"gitId":"yuqiaoluolong"},"content":"    * `calculate NUTRITION_NAME [START_TIME]`: calculate the amount of nutrition from the foods after a time in the intake list."},{"lineNumber":330,"author":{"gitId":"yuqiaoluolong"},"content":"    * `calculate NUTRITION_NAME [START_TIME] [END_TIME]`: calculate the amount of nutrition from the foods within a time period in the intake list."},{"lineNumber":331,"author":{"gitId":"yuqiaoluolong"},"content":"* Two time time inputs should be in the format `yyyy-mm-ddTHH:mm`. For example: `2020-10-29T08:00`."},{"lineNumber":332,"author":{"gitId":"yuqiaoluolong"},"content":"* The recalculated foods feature are supported. When user adds foods without carbohydrate, protein, and fat, the amount of these three nutrition elements would be recalculated assuming that they contribute to the amount of calories equally."},{"lineNumber":333,"author":{"gitId":"yuqiaoluolong"},"content":"    * example: `add x/1 n/Salty Chicken Rice k/300`"},{"lineNumber":334,"author":{"gitId":"yuqiaoluolong"},"content":"    * output: `Got it! I\u0027ve added this food item:"},{"lineNumber":335,"author":{"gitId":"yuqiaoluolong"},"content":"                 Salty Chicken Rice | calorie : 300 |  protein : - |  carbohydrate : - |  fats : - -- (1)`"},{"lineNumber":336,"author":{"gitId":"yuqiaoluolong"},"content":"    * example: `calculate fat`"},{"lineNumber":337,"author":{"gitId":"yuqiaoluolong"},"content":"    * output: `Total fat intake: 11g`"},{"lineNumber":338,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":339,"author":{"gitId":"yuqiaoluolong"},"content":"example usage:"},{"lineNumber":340,"author":{"gitId":"yuqiaoluolong"},"content":"* `calculate carbohydrate 2020-10-29T08:00 2020-10-29T17:00`"},{"lineNumber":341,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":342,"author":{"gitId":"yuqiaoluolong"},"content":"Output example:"},{"lineNumber":343,"author":{"gitId":"yuqiaoluolong"},"content":"```"},{"lineNumber":344,"author":{"gitId":"yuqiaoluolong"},"content":"Time period: between 29 Oct 2020 0800 and 29 Oct 2020 1700"},{"lineNumber":345,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":346,"author":{"gitId":"yuqiaoluolong"},"content":"Total carbohydrate intake: 80g"},{"lineNumber":347,"author":{"gitId":"yuqiaoluolong"},"content":"```"},{"lineNumber":348,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":349,"author":{"gitId":"yuqiaoluolong"},"content":"#### Calculating recommended calorie daily intake: recommend"},{"lineNumber":350,"author":{"gitId":"yuqiaoluolong"},"content":"Calculate the recommendation based on the person infomation."},{"lineNumber":351,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":352,"author":{"gitId":"yuqiaoluolong"},"content":"Format: recommend"},{"lineNumber":353,"author":{"gitId":"yuqiaoluolong"},"content":"Example of usage: recommend"},{"lineNumber":354,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":355,"author":{"gitId":"HengFuYuen"},"content":"Output : "},{"lineNumber":356,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":357,"author":{"gitId":"snowbanana12345"},"content":"Hi Jack!"},{"lineNumber":358,"author":{"gitId":"snowbanana12345"},"content":"  Here is your daily recommended calorie intake: 2607kcal"},{"lineNumber":359,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":360,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":361,"author":{"gitId":"snowbanana12345"},"content":"We use the following list as an example, to set up the list we have the following sequence of inputs"},{"lineNumber":362,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":363,"author":{"gitId":"snowbanana12345"},"content":"add x/1 n/Salty Chicken Rice k/300 c/10 p/20 f/50"},{"lineNumber":364,"author":{"gitId":"snowbanana12345"},"content":"add x/2 n/Chilli Pepper Crab k/400 c/10 p/10 f/20"},{"lineNumber":365,"author":{"gitId":"snowbanana12345"},"content":"add x/1 n/Steak Buns k/500 c/20 p/50 f/10"},{"lineNumber":366,"author":{"gitId":"snowbanana12345"},"content":"add x/3 n/Sweat potato tea k/300 c/30 p/0 f/0"},{"lineNumber":367,"author":{"gitId":"snowbanana12345"},"content":"add x/1 n/Chicken Wing Noodles k/400 c/10 p/30 f/10"},{"lineNumber":368,"author":{"gitId":"snowbanana12345"},"content":"list"},{"lineNumber":369,"author":{"gitId":"HengFuYuen"},"content":"```"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":372,"author":{"gitId":"snowbanana12345"},"content":"Here are the food items in DietBook:"},{"lineNumber":373,"author":{"gitId":"snowbanana12345"},"content":"  1. Salty Chicken Rice | calorie : 300 | protein : 20 | carbohydrate : 10 | fats : 50 -- (1)"},{"lineNumber":374,"author":{"gitId":"snowbanana12345"},"content":"  2. Chilli Pepper Crab | calorie : 400 | protein : 10 | carbohydrate : 10 | fats : 20 -- (2)"},{"lineNumber":375,"author":{"gitId":"snowbanana12345"},"content":"  3. Steak Buns | calorie : 500 | protein : 50 | carbohydrate : 20 | fats : 10 -- (1)"},{"lineNumber":376,"author":{"gitId":"snowbanana12345"},"content":"  4. Sweat potato tea | calorie : 300 | protein : 0 | carbohydrate : 30 | fats : 0 -- (3)"},{"lineNumber":377,"author":{"gitId":"snowbanana12345"},"content":"  5. Chicken Wing Noodles | calorie : 400 | protein : 30 | carbohydrate : 10 | fats : 10 -- (1)"},{"lineNumber":378,"author":{"gitId":"snowbanana12345"},"content":"```"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":381,"author":{"gitId":"HengFuYuen"},"content":"### Other features"},{"lineNumber":382,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":383,"author":{"gitId":"HengFuYuen"},"content":"#### To view a list of valid commands: `help`"},{"lineNumber":384,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":385,"author":{"gitId":"tikimonarch"},"content":"Displays the helping guide for commands."},{"lineNumber":386,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":387,"author":{"gitId":"tikimonarch"},"content":"Format: `help`"},{"lineNumber":388,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":389,"author":{"gitId":"tikimonarch"},"content":"Output example: "},{"lineNumber":390,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":391,"author":{"gitId":"tikimonarch"},"content":"Listed below are the valid commands for DietBook:"},{"lineNumber":392,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":393,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":394,"author":{"gitId":"HengFuYuen"},"content":"  userinfo    | To view user information:"},{"lineNumber":395,"author":{"gitId":"HengFuYuen"},"content":"              | userinfo"},{"lineNumber":396,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":397,"author":{"gitId":"HengFuYuen"},"content":"  editinfo    | To edit user information:"},{"lineNumber":398,"author":{"gitId":"HengFuYuen"},"content":"              | editinfo [n/NAME] [g/GENDER] [a/AGE] [h/HEIGHT] [o/ORIGINAL_WEIGHT] [c/CURRENT_WEIGHT] [t/TARGET_WEIGHT] [f/FITNESS_LEVEL]"},{"lineNumber":399,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":400,"author":{"gitId":"HengFuYuen"},"content":"  add         | To add a food from the database:"},{"lineNumber":401,"author":{"gitId":"HengFuYuen"},"content":"              | add i/INDEX x/PORTION_SIZE [yyyy-mm-ddTHH:mm]"},{"lineNumber":402,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":403,"author":{"gitId":"HengFuYuen"},"content":"  data        | To view all food in the database:"},{"lineNumber":404,"author":{"gitId":"HengFuYuen"},"content":"              | data"},{"lineNumber":405,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":406,"author":{"gitId":"HengFuYuen"},"content":"  add         | To add a food not in the database:"},{"lineNumber":407,"author":{"gitId":"HengFuYuen"},"content":"              | add x/PORTION_SIZE n/FOOD_NAME k/CALORIE [c/CARBOHYDRATE] [p/PROTEIN] [f/FAT] [yyyy-mm-ddTHH:mm]"},{"lineNumber":408,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":409,"author":{"gitId":"HengFuYuen"},"content":"  list        | To view all food in DietBook:"},{"lineNumber":410,"author":{"gitId":"HengFuYuen"},"content":"              | list [yyyy-mm-ddTHH:mm] [yyyy-mm-ddTHH:mm]"},{"lineNumber":411,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":412,"author":{"gitId":"HengFuYuen"},"content":"  delete      | To delete a food from DietBook:"},{"lineNumber":413,"author":{"gitId":"HengFuYuen"},"content":"              | delete INDEX"},{"lineNumber":414,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":415,"author":{"gitId":"HengFuYuen"},"content":"  clear       | To delete all food items from the DietBook:"},{"lineNumber":416,"author":{"gitId":"HengFuYuen"},"content":"              | clear"},{"lineNumber":417,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":418,"author":{"gitId":"HengFuYuen"},"content":"  recommend   | To get recommended calorie intake:"},{"lineNumber":419,"author":{"gitId":"HengFuYuen"},"content":"              | recommend"},{"lineNumber":420,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":421,"author":{"gitId":"HengFuYuen"},"content":"  calculate   | To calculate nutritional intake:"},{"lineNumber":422,"author":{"gitId":"HengFuYuen"},"content":"              | calculate NUTRIENT_TYPE [yyyy-mm-ddTHH:mm] [yyyy-mm-ddTHH:mm]"},{"lineNumber":423,"author":{"gitId":"HengFuYuen"},"content":"              |   Valid NUTRIENT_TYPE: carb, calorie, fat, protein, all"},{"lineNumber":424,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":425,"author":{"gitId":"HengFuYuen"},"content":"  help        | To view a list of valid commands:"},{"lineNumber":426,"author":{"gitId":"HengFuYuen"},"content":"              | help"},{"lineNumber":427,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":428,"author":{"gitId":"HengFuYuen"},"content":"  exit        | To exit DietBook:"},{"lineNumber":429,"author":{"gitId":"HengFuYuen"},"content":"              | exit"},{"lineNumber":430,"author":{"gitId":"HengFuYuen"},"content":"__________________________________________________________________________________________________________________________________________"},{"lineNumber":431,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":432,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":433,"author":{"gitId":"tikimonarch"},"content":"#### To exit DietBook: `exit`"},{"lineNumber":434,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":435,"author":{"gitId":"tikimonarch"},"content":"Exits the DietBook."},{"lineNumber":436,"author":{"gitId":"tikimonarch"},"content":" "},{"lineNumber":437,"author":{"gitId":"tikimonarch"},"content":"Format: `exit`"},{"lineNumber":438,"author":{"gitId":"tikimonarch"},"content":" "},{"lineNumber":439,"author":{"gitId":"tikimonarch"},"content":"Output example:"},{"lineNumber":440,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":441,"author":{"gitId":"tikimonarch"},"content":"Bye! Hope to see you again soon!"},{"lineNumber":442,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":443,"author":{"gitId":"tikimonarch"},"content":" "},{"lineNumber":444,"author":{"gitId":"tikimonarch"},"content":"#### Saving the DietBook:"},{"lineNumber":445,"author":{"gitId":"tikimonarch"},"content":" "},{"lineNumber":446,"author":{"gitId":"tikimonarch"},"content":"Saves the DietBook data when the exit command have been input. The saved data is in 2 files: UserInfo.txt and FoodList.txt."},{"lineNumber":447,"author":{"gitId":"tikimonarch"},"content":"*Also saves data whenever there is a change in either Person or FoodList data after commands such as `add`, `clear`,`delete` and `editinfo`with no message printed."},{"lineNumber":448,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":449,"author":{"gitId":"tikimonarch"},"content":"Output example:"},{"lineNumber":450,"author":{"gitId":"HengFuYuen"},"content":" "},{"lineNumber":451,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":452,"author":{"gitId":"tikimonarch"},"content":"Your data has been saved successfully."},{"lineNumber":453,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":454,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":455,"author":{"gitId":"tikimonarch"},"content":"#### Loading existing FoodList and Person data into the DietBook:"},{"lineNumber":456,"author":{"gitId":"tikimonarch"},"content":" "},{"lineNumber":457,"author":{"gitId":"tikimonarch"},"content":"Saved data of FoodList and Person loaded if available."},{"lineNumber":458,"author":{"gitId":"tikimonarch"},"content":"*New file created when saving if no existing data."},{"lineNumber":459,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":460,"author":{"gitId":"tikimonarch"},"content":"Output example:"},{"lineNumber":461,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":462,"author":{"gitId":"tikimonarch"},"content":"*With existing data"},{"lineNumber":463,"author":{"gitId":"tikimonarch"},"content":" "},{"lineNumber":464,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":465,"author":{"gitId":"tikimonarch"},"content":"Loading personal information..."},{"lineNumber":466,"author":{"gitId":"tikimonarch"},"content":"Loading personal food data..."},{"lineNumber":467,"author":{"gitId":"tikimonarch"},"content":"_____________________________________________________________________________________________________________________________________"},{"lineNumber":468,"author":{"gitId":"tikimonarch"},"content":"_______  __ ______ ________ _______   ______   ______  __    __"},{"lineNumber":469,"author":{"gitId":"tikimonarch"},"content":"|   __  \\|  |   ___|__    __|   __  \\ /  __  \\ /  __  \\|  | /  /"},{"lineNumber":470,"author":{"gitId":"tikimonarch"},"content":"|  |  |  |  |  |___   |  |  |  |__|  |  |  |  |  |  |  |  |/  /"},{"lineNumber":471,"author":{"gitId":"tikimonarch"},"content":"|  |  |  |  |   ___|  |  |  |   __  \u003c|  |  |  |  |  |  |     /"},{"lineNumber":472,"author":{"gitId":"tikimonarch"},"content":"|  |__|  |  |  |___   |  |  |  |__|  |  |__|  |  |  |  |  |\\  \\"},{"lineNumber":473,"author":{"gitId":"tikimonarch"},"content":"|_______/|__|______|  |__|  |_______/ \\______/ \\______/|__| \\__\\"},{"lineNumber":474,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":475,"author":{"gitId":"tikimonarch"},"content":"Welcome back to DietBook tik!"},{"lineNumber":476,"author":{"gitId":"tikimonarch"},"content":"All your previous data has been successfully loaded and you may start by entering any valid commands. "},{"lineNumber":477,"author":{"gitId":"tikimonarch"},"content":"If you require a list of valid commands, you can enter: help"},{"lineNumber":478,"author":{"gitId":"tikimonarch"},"content":"_____________________________________________________________________________________________________________________________________"},{"lineNumber":479,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":480,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":481,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":482,"author":{"gitId":"tikimonarch"},"content":" *Without existing data"},{"lineNumber":483,"author":{"gitId":"tikimonarch"},"content":" "},{"lineNumber":484,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":485,"author":{"gitId":"tikimonarch"},"content":"Loading personal information..."},{"lineNumber":486,"author":{"gitId":"tikimonarch"},"content":"_____________________________________________________________________________________________________________________________________"},{"lineNumber":487,"author":{"gitId":"tikimonarch"},"content":"Person data file not found! Creating new personal data...."},{"lineNumber":488,"author":{"gitId":"tikimonarch"},"content":"_____________________________________________________________________________________________________________________________________"},{"lineNumber":489,"author":{"gitId":"tikimonarch"},"content":"Loading personal food data..."},{"lineNumber":490,"author":{"gitId":"tikimonarch"},"content":"_____________________________________________________________________________________________________________________________________"},{"lineNumber":491,"author":{"gitId":"tikimonarch"},"content":"FoodList data file not found! Creating new food list..."},{"lineNumber":492,"author":{"gitId":"tikimonarch"},"content":"_____________________________________________________________________________________________________________________________________"},{"lineNumber":493,"author":{"gitId":"tikimonarch"},"content":"_____________________________________________________________________________________________________________________________________"},{"lineNumber":494,"author":{"gitId":"tikimonarch"},"content":"_______  __ ______ ________ _______   ______   ______  __    __"},{"lineNumber":495,"author":{"gitId":"tikimonarch"},"content":"|   __  \\|  |   ___|__    __|   __  \\ /  __  \\ /  __  \\|  | /  /"},{"lineNumber":496,"author":{"gitId":"tikimonarch"},"content":"|  |  |  |  |  |___   |  |  |  |__|  |  |  |  |  |  |  |  |/  /"},{"lineNumber":497,"author":{"gitId":"tikimonarch"},"content":"|  |  |  |  |   ___|  |  |  |   __  \u003c|  |  |  |  |  |  |     /"},{"lineNumber":498,"author":{"gitId":"tikimonarch"},"content":"|  |__|  |  |  |___   |  |  |  |__|  |  |__|  |  |  |  |  |\\  \\"},{"lineNumber":499,"author":{"gitId":"tikimonarch"},"content":"|_______/|__|______|  |__|  |_______/ \\______/ \\______/|__| \\__\\"},{"lineNumber":500,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":501,"author":{"gitId":"tikimonarch"},"content":"Hello! Welcome to DietBook!"},{"lineNumber":502,"author":{"gitId":"tikimonarch"},"content":"I am Diet, your guide to using DietBook. How may I address you?"},{"lineNumber":503,"author":{"gitId":"tikimonarch"},"content":"Please input your name or nickname in the following format:"},{"lineNumber":504,"author":{"gitId":"tikimonarch"},"content":"  name YOUR_NAME_OR_NICKNAME "},{"lineNumber":505,"author":{"gitId":"tikimonarch"},"content":"  Example: name Jack\";"},{"lineNumber":506,"author":{"gitId":"tikimonarch"},"content":"_____________________________________________________________________________________________________________________________________"},{"lineNumber":507,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":508,"author":{"gitId":"tikimonarch"},"content":"```"},{"lineNumber":509,"author":{"gitId":"-"},"content":""},{"lineNumber":510,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another computer? "},{"lineNumber":513,"author":{"gitId":"-"},"content":""},{"lineNumber":514,"author":{"gitId":"HengFuYuen"},"content":"**A**: Either download `dietbook.jar` on the other computer and overwrite the empty data files with the data files from your previous computer or copy the whole DietBook home folder from the previous computer to the new computer."},{"lineNumber":515,"author":{"gitId":"snowbanana12345"},"content":"data from v2.1 is **NOT** compatible with earlier data. The data is found in `C/Users/{User name}/dietbook`. As of v2.1 the food list data is found in the folder"},{"lineNumber":516,"author":{"gitId":"snowbanana12345"},"content":"`Food##PORTION###dDATE##folder` and the Personal data is found in the folder `PERSONA_IS_NO_SUCH_PERSOOSOOSNSNSNS`."},{"lineNumber":517,"author":{"gitId":"-"},"content":""},{"lineNumber":518,"author":{"gitId":"-"},"content":"## Command Summary"},{"lineNumber":519,"author":{"gitId":"-"},"content":""},{"lineNumber":520,"author":{"gitId":"HengFuYuen"},"content":"Action | Format, Examples"},{"lineNumber":521,"author":{"gitId":"HengFuYuen"},"content":"---- | ----"},{"lineNumber":522,"author":{"gitId":"HengFuYuen"},"content":"Enter name | **Note**: Used only when setting up DietBook for the first time.\u003cbr/\u003e`name YOUR_NAME_OR_NICKNAME` \u003cbr/\u003e e.g.,`name Jack`"},{"lineNumber":523,"author":{"gitId":"HengFuYuen"},"content":"Enter info | **Note**: Used only when setting up DietBook for the first time.\u003cbr/\u003e`info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT c/CURRENT_WEIGHT t/TARGET_WEIGHT f/FITNESS_LEVEL` \u003cbr/\u003e e.g.,`info g/M a/21 h/175 o/85 c/85 t/75 f/2`"},{"lineNumber":524,"author":{"gitId":"HengFuYuen"},"content":"View user info | `userinfo`"},{"lineNumber":525,"author":{"gitId":"HengFuYuen"},"content":"Edit user info | `editinfo [n/NAME] [g/GENDER] [a/AGE] [h/HEIGHT] [o/ORIGINAL_WEIGHT] [c/CURRENT_WEIGHT] [t/TARGET_WEIGHT] [f/FITNESS_LEVEL]` \u003cbr/\u003e e.g.,`editinfo c/75 f/4`"},{"lineNumber":526,"author":{"gitId":"yuqiaoluolong"},"content":"Calculate recommended calorie intake | `recommend`"},{"lineNumber":527,"author":{"gitId":"yuqiaoluolong"},"content":"Calculate nutrition intake | `calculate NUTRITION_NAME [START_TIME] [END_TIME]` \u003cbr/\u003e e.g.,`calculate fat`"}],"authorContributionMap":{"snowbanana12345":99,"yuqiaoluolong":39,"HengFuYuen":260,"tikimonarch":102,"-":27}},{"path":"docs/team/elijahng.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"---"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"title: Elijah Ng\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"---"},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"\u003c!--- Would require jerkyll to display nicely ---\u003e"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":"# Overview"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"DietBook is a Command Line Interface (CLI) desktop application designed mainly _NUS students staying on campus_. It helps users **track their food and nutritional intake** as well as provide them with their **daily calorie recommendation**. It also has a **database prepopulated with food items commonly found around NUS** so that thse food items can be easily added to the list of food items consumed for tracking. DietBook is written mainly in Java."},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":"# Summary of Contributions"},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":"My main contribution is the [`seedu.dietbook.list`](https://github.com/AY2021S1-CS2113-T14-4/tp/tree/master/src/main/java/seedu/dietbook/list) package, which functions as the model for the application, supporting storing and retrieval of data from memory."},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"## Code Contributed"},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"[Reposense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmxksowie)"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"## Enhancements Implemented"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"- Implemented [`FoodList`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/list/FoodList.java), `FoodListManager` and `ListFunctions` to store and retrieve data on the user\u0027s diet. This directly supports the command `add` and `list`. It also indirectly supports other commands such as `calculate` or storage/loading of data. A functional programming paradigm was compilmentarily used to reduce code repetition."},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"- Implemented `DatedFoodEntry` and `FoodManager` to store the relevant data and provide DateTime functionalities (filtering/sorting by datetime) as well as support optional inputs in the `add` command. A fascade pattern was used to design this segment of code and obscure details via [`FoodManager`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/list/FoodManager.java). The `FoodManager` also supports with estimation of the missing inputs due to optional support."},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"- Implemented class pathing and the use of Gradle resource files for the [database](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/database/DataBase.java)."},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"- added a common utility class [`StringFormater`](https://github.com/AY2021S1-CS2113-T14-4/tp/tree/master/src/main/java/seedu/dietbook/utils) that supports Python fstring-like formatting."},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":"## Contributions to documentation"},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"- Added the `Model` section under `design` of the developer guide, this includes all UML diagrams in this section."},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"- Added section in `implementation` of the developer guide describing the implementation of optional fields and estimated nutritional information, this includes all UML diagrams in this section."},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"## Contributions to team-based tasks:"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"- Helped in last minute bug fix to database for v1.0 release. Helped team to use class pathing and Gradle build tasks to put together a jar with .txt files."},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"- Helped with catching bugs, such as issue with missing spaces in `add` command. Also performed master branch clean-up and bug fixes such as in #103"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"- Authored 10 issues with the issue tracker."},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":"- Contributed to weekly discussions on features and implementation."},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"## Review/mentoring contributions"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"- Helped team mates with bug fixing their code segments, such as that in the bug created in #71. Followed up offline too."},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"- Examples of helping to catch errors or suggest changes in PR reviews: #14, #162, and #184"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"- Followed up with team mates on code issues: static referencing of calculator, use of class pathing and gradle resource files."},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":""}],"authorContributionMap":{"mxksowie":38}},{"path":"docs/team/hengfuyuen.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"# Heng Fu Yuen - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"## Overview"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"DietBook is a Command Line Interface (CLI) desktop application designed mainly _NUS students staying on campus_. It helps users **track their food and nutritional intake** as well as provide them with their **daily calorie recommendation**. It also has a **database prepopulated with food items commonly found around NUS** so that thse food items can be easily added to the list of food items consumed for tracking. DietBook is written mainly in Java."},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"### Summary of Contributions"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"#### Code contributed"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":"* Code contributed: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dhengfuyuen\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"* Authored more than 30 [PRs](https://github.com/AY2021S1-CS2113-T14-4/tp/pulls?q\u003dis%3Apr+author%3AHengFuYuen+)"},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":"#### Features implemented"},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"* Implemented [`Person.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/person/Person.java), [`FitnessLevel.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/person/FitnessLevel.java) and [`Gender.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/person/Gender.java) to support four commands `name`, `info`, `userinfo` and `editinfo`"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"    * Implemented relevant assertions, logging and JUnit for the above three classes."},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"* Implemented [`Ui.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/Ui.java), [`UiHelper.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/UiHelper.java), [`UiInput.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/UiInput.java), [`UiOuput.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/UiOutput.java), [`UiMessage.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/ui/UiMessage.java) to support the `Ui Component` which is responsible for taking in user commands, communicating with `Logic` to execute the command and printing out the relevant output or error messages"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"    * Implemented relevant assertions, exceptions, logging and JUnit tests for the above five classes. "},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"#### Documentation"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"* **User Guide**\u003cbr/\u003e"},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"    * Added four features related to user information - [Entering username](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#entering-username-name), [Entering user information](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#entering-user-information-info), [Viewing user information](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#viewing-user-information-userinfo) and [Editing user information](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#editing-user-information-editinfo): [#72](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/72/files) [#77](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/77/files) [#94](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/94/files) [#178](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/178/files)"},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"    * Added `name`, `info`, `userinfo` and `editinfo` commands to the [Command Summary](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#command-summary): [#72](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/72/files) [#77](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/77/files) [#178](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/178/files)"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"    * Updated the [Introduction](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#introduction), [Quick start](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#quick-start), and [FAQ](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#faq): [#72](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/72/files) [#77](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/77/files) [#94](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/94/files) [#178](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/178/files)"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"    * Added notes about command format under [Features](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#features): [#72](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/72/files) [#77](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/77/files) [#94](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/94/files) [#178](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/178/files) [#190](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/190/files)"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"* **Developer Guide**"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"    * Added the [UI Component](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#ui-component) in the Design section: [#94](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/94/files) [#97](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/97/files) [#194](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/194) [#176](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/176)"},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"    * Added the descriptions and diagrams for three features in the implementation section - [Enter user information feature](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#enter-user-information-feature), [Edit user information feature](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#edit-user-information-feature) and [View user information feature](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#view-user-information-feature): [#94](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/94/files) [#97](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/97/files) [#100](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/100/files) [#194](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/194) [#176](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/176)"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"    * Added five [User Stories](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#user-stories) related to user information features: [#194](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/194)"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":"    * Updated instructions for manual testing section for three features - [Entering user information](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#entering-user-information), [Editing user information](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#editing-user-information) feature and [Viewing user information](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#viewing-user-information): [#194](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/194)"},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"    * Updated the [Target User Profile](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#target-user-profile), [Value Proposition](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#value-proposition), [Non-Functional Requirement](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#non-functional-requirements) and [Glossary](https://ay2021s1-cs2113-t14-4.github.io/tp/DeveloperGuide.html#glossary): [#194](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/194)"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"* **Product website**"},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"    * Updated the product [Home page](https://ay2021s1-cs2113-t14-4.github.io/tp/) [#171](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/171) [#188](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/188/files)"},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":"    * Added a trivial introduction in [AboutUs Page](https://ay2021s1-cs2113-t14-4.github.io/tp/AboutUs.html): [#176](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/176)"},{"lineNumber":39,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":40,"author":{"gitId":"HengFuYuen"},"content":"#### Contributions to team-based tasks"},{"lineNumber":41,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":42,"author":{"gitId":"HengFuYuen"},"content":"* Initiate weekly meetings"},{"lineNumber":43,"author":{"gitId":"HengFuYuen"},"content":"* Helped in managing `v2.1` submissions"},{"lineNumber":44,"author":{"gitId":"HengFuYuen"},"content":"* Helped in managing `v1.0` release"},{"lineNumber":45,"author":{"gitId":"HengFuYuen"},"content":"* Managed release [DietBook v2.0](https://github.com/AY2021S1-CS2113-T14-4/tp/releases/tag/v2.0.2) on GitHub"},{"lineNumber":46,"author":{"gitId":"HengFuYuen"},"content":"* Authored more than 45 [Issues](https://github.com/AY2021S1-CS2113-T14-4/tp/issues/created_by/HengFuYuen) in the team repo issue tracker"},{"lineNumber":47,"author":{"gitId":"HengFuYuen"},"content":"* Helped in bug catching/fixing (examples: [#40](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/40) [#104](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/104) [#61](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/61) [#105](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/105) [#199](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/199/files))"},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":"* Configure the build.gradle file [#46](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/46/files) [#68](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/68)"},{"lineNumber":49,"author":{"gitId":"HengFuYuen"},"content":"* Helped in setting up the tP Organisation and Team Repo - Set up a `developers` team in the organisation, enabled the issue tracker, updated the labels in issue tracker and created the milestones used for managing the project"},{"lineNumber":50,"author":{"gitId":"HengFuYuen"},"content":"* Refer to [Documentation](#documentation) section for contributions to user guide, developer guide, etc that are not specific to a feature"},{"lineNumber":51,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":52,"author":{"gitId":"HengFuYuen"},"content":"#### Review/mentoring contributions"},{"lineNumber":53,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":54,"author":{"gitId":"HengFuYuen"},"content":"* Reviewed more than 30 [PRs](https://github.com/AY2021S1-CS2113-T14-4/tp/pulls?q\u003dis%3Apr+is%3Aopen+reviewed-by%3A%40me+) most of which contains only trivial comments"},{"lineNumber":55,"author":{"gitId":"HengFuYuen"},"content":"* Reviewed about 5-10 PRs with non-trivial review comments (examples: [#14](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/14) [#40](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/40) [#71](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/71) [#166](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/166) [#191](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/191))"},{"lineNumber":56,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":57,"author":{"gitId":"HengFuYuen"},"content":"#### Contributions beyond the project team"},{"lineNumber":58,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":59,"author":{"gitId":"HengFuYuen"},"content":"* Participated in forum discussions (examples: [#13](https://github.com/nus-cs2113-AY2021S1/forum/issues/13) [#52](https://github.com/nus-cs2113-AY2021S1/forum/issues/52) [#87](https://github.com/nus-cs2113-AY2021S1/forum/issues/87))"},{"lineNumber":60,"author":{"gitId":"HengFuYuen"},"content":"* Reported [seven bugs and suggestions](https://github.com/AY2021S1-CS2113T-W11-4/tp/issues?q\u003dis%3Aissue+HengFuYuen) for another team during the PE Dry run"},{"lineNumber":61,"author":{"gitId":"HengFuYuen"},"content":"* Reported [Major bug](https://github.com/AY2021S1-CS2113-T16-4/tp/issues/61) for differnt team during the PE Dry run"}],"authorContributionMap":{"HengFuYuen":61}},{"path":"docs/team/liuhaoran.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yuqiaoluolong"},"content":"# Liu Haoran - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":3,"author":{"gitId":"yuqiaoluolong"},"content":"## Overview"},{"lineNumber":4,"author":{"gitId":"yuqiaoluolong"},"content":"DietBook is a Command Line Interface (CLI) desktop application designed mainly _NUS students staying on campus_. It helps users **track their food and nutritional intake** as well as provide them with their **daily calorie recommendation**."},{"lineNumber":5,"author":{"gitId":"yuqiaoluolong"},"content":"It also supports a **database** containing a list of common food can be found in the restaurants within campus. Users can add foods in the database into the list of consumed food items conveniently. The language used is mainly Java."},{"lineNumber":6,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":7,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":8,"author":{"gitId":"yuqiaoluolong"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":10,"author":{"gitId":"yuqiaoluolong"},"content":"#### Code contributed"},{"lineNumber":11,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":12,"author":{"gitId":"yuqiaoluolong"},"content":"* Code contributed: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyuqiaoluolong\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dzoom\u0026zA\u003dyuqiaoluolong\u0026zR\u003dAY2021S1-CS2113-T14-4%2Ftp%5Bmaster%5D\u0026zACS\u003d199.19225487503434\u0026zS\u003d2020-09-27\u0026zFS\u003d\u0026zU\u003d2020-11-09\u0026zMG\u003dfalse\u0026zFTF\u003dcommit\u0026zFGS\u003dgroupByRepos\u0026zFR\u003dfalse)"},{"lineNumber":13,"author":{"gitId":"yuqiaoluolong"},"content":"* Authored more than 10 [PRs](https://github.com/AY2021S1-CS2113-T14-4/tp/pulls?q\u003dis%3Apr+author%3Ayuqiaoluolong+)"},{"lineNumber":14,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":15,"author":{"gitId":"yuqiaoluolong"},"content":"#### Features implemented"},{"lineNumber":16,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":17,"author":{"gitId":"yuqiaoluolong"},"content":"* Implemented [`Calculator.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/calculator/Calculator.java) and [`CalculatorData.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/calculator/CalculatorData.java) to support four commands `calculate` and `recommend`"},{"lineNumber":18,"author":{"gitId":"yuqiaoluolong"},"content":"    * Implemented relevant assertions and JUnit test for the above two classes."},{"lineNumber":19,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":20,"author":{"gitId":"yuqiaoluolong"},"content":"####Enhancements implemented: "},{"lineNumber":21,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":22,"author":{"gitId":"yuqiaoluolong"},"content":"* Enhanced the calculator calss for three times: "},{"lineNumber":23,"author":{"gitId":"yuqiaoluolong"},"content":"    * version 2 supporting recommendation calculation: [#71](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/71)"},{"lineNumber":24,"author":{"gitId":"yuqiaoluolong"},"content":"    * added the date and time to support the calculation of total intake within a period of time: [#162](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/162)"},{"lineNumber":25,"author":{"gitId":"yuqiaoluolong"},"content":"    * added the minimum and maximum caps for recommendations: [#191](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/191)"},{"lineNumber":26,"author":{"gitId":"yuqiaoluolong"},"content":"* Improve the code quality once: "},{"lineNumber":27,"author":{"gitId":"yuqiaoluolong"},"content":"    * avoid long methods: [#180](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/180)."},{"lineNumber":28,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":29,"author":{"gitId":"yuqiaoluolong"},"content":"#### Contributions to documentation"},{"lineNumber":30,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":31,"author":{"gitId":"yuqiaoluolong"},"content":"* **User Guide**\u003cbr/\u003e"},{"lineNumber":32,"author":{"gitId":"yuqiaoluolong"},"content":"    * Edited one feature related to calculator - [Features related to nutritional intake calculation and recommendation](https://ay2021s1-cs2113-t14-4.github.io/tp/UserGuide.html#features-related-to-nutritional-intake-calculation-and-recommendation): [#197](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/197) and [#202](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/202)"},{"lineNumber":33,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":34,"author":{"gitId":"yuqiaoluolong"},"content":"* **Product website**"},{"lineNumber":35,"author":{"gitId":"yuqiaoluolong"},"content":"    * Added a trivial introduction in [AboutUs Page](https://ay2021s1-cs2113-t14-4.github.io/tp/AboutUs.html): [#200](https://github.com/AY2021S1-CS2113-T14-4/tp/pull/176)"},{"lineNumber":36,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":37,"author":{"gitId":"yuqiaoluolong"},"content":"#### Review/mentoring contributions"},{"lineNumber":38,"author":{"gitId":"yuqiaoluolong"},"content":"* Reviewed 13 [PRs](https://github.com/AY2021S1-CS2113-T14-4/tp/pulls?q\u003dis%3Apr+reviewed-by%3Ayuqiaoluolong) and most of them contains only trivial comments"},{"lineNumber":39,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":40,"author":{"gitId":"yuqiaoluolong"},"content":"#### Contributions beyond the project team"},{"lineNumber":41,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":42,"author":{"gitId":"yuqiaoluolong"},"content":"* Reported [two bugs and suggestions](https://github.com/AY2021S1-CS2113T-F12-2/tp/issues?q\u003dis%3Aissue+yuqiaoluolong) for another team during the PE Dry run"}],"authorContributionMap":{"yuqiaoluolong":42}},{"path":"docs/team/tikimonarch.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"# Tikyi Min Khant Naing - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"## Overview"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"DietBook is a Command Line Interface (CLI) desktop application designed mainly _NUS students staying on campus_. It helps users **track their food and nutritional intake** as well as provide them with their **daily calorie recommendation**. It also has a **database prepopulated with food items commonly found around NUS** so that thse food items can be easily added to the list of food items consumed for tracking. DietBook is written mainly in Java."},{"lineNumber":5,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"### Summary of Contributions"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"#### Code contributed"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"* Code contributed: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#search\u003dtikimonarch\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"* Authored more than 15 [PRs](https://github.com/AY2021S1-CS2113-T14-4/tp/pulls?q\u003dis%3Apr+author%3Atikimonarch+)"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"* Authored the main managing code for all the features of the entire app."},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"#### Features implemented"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"* Implemented the [`checker package`](https://github.com/AY2021S1-CS2113-T14-4/tp/tree/master/src/main/java/seedu/dietbook/checker)"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"* Implemented the [`command package`](https://github.com/AY2021S1-CS2113-T14-4/tp/tree/master/src/main/java/seedu/dietbook/command) "},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"* Implemented the [`exception package`](https://github.com/AY2021S1-CS2113-T14-4/tp/tree/master/src/main/java/seedu/dietbook/exception)"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"* Implemented the [`parser package`](https://github.com/AY2021S1-CS2113-T14-4/tp/tree/master/src/main/java/seedu/dietbook/parser)"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"* Implemented [`DietBook.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/DietBook.java)"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"* Implemented [`Manager.java`](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/src/main/java/seedu/dietbook/Manager.java)"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"#### Documentation"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"* **User Guide**\u003cbr/\u003e"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"    * Added data base features section- [Database features](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/docs/UserGuide.md#features-related-to-the-food-database)"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"    * Added other features section [Other features](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/docs/UserGuide.md#other-features)"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"#### Contributions to team-based tasks"},{"lineNumber":30,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":31,"author":{"gitId":"tikimonarch"},"content":"* Attend weekly meetings"},{"lineNumber":32,"author":{"gitId":"tikimonarch"},"content":"* Helped in several bug fixing reported by the team "},{"lineNumber":33,"author":{"gitId":"tikimonarch"},"content":"* Setting up of the tP Organisation and Team Repo"},{"lineNumber":34,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":35,"author":{"gitId":"tikimonarch"},"content":"#### Review contributions"},{"lineNumber":36,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":37,"author":{"gitId":"tikimonarch"},"content":"* Reviewed more than 15 [PRs](https://github.com/AY2021S1-CS2113-T14-4/tp/pulls?q\u003dis%3Apr+is%3Aclose+reviewed-by%3A%40me+) most of which contains only trivial comments"},{"lineNumber":38,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":39,"author":{"gitId":"tikimonarch"},"content":"#### Contributions beyond the project team"},{"lineNumber":40,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":41,"author":{"gitId":"tikimonarch"},"content":"* Reported [4 bugs and suggestions](https://github.com/AY2021S1-CS2113T-W11-2/tp/issues?q\u003dis%3Aissue+tikimonarch) for another team during the PE Dry run"},{"lineNumber":42,"author":{"gitId":"tikimonarch"},"content":""}],"authorContributionMap":{"tikimonarch":42}},{"path":"docs/team/zhongming.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"## Zhong Ming - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"## Overview"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"ietBook is a Command Line Interface (CLI) desktop application designed mainly _NUS students staying on campus_. It helps users **track their food and nutritional intake** as well as provide them with their **daily calorie recommendation**. It also has a **database prepopulated with food items commonly found around NUS** so that thse food items can be easily added to the list of food items consumed for tracking. DietBook is written mainly in Java."},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"### Summary of Contributions"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"#### Code contributed"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"* [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dsnowbanana12345\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"* Back end coding [PRs](https://github.com/AY2021S1-CS2113-T14-4/tp/pulls?q\u003dis%3Apr+author%3Asnowbanana12345)"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"#### Features implemented"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"* Implemented [dataBase package](https://github.com/AY2021S1-CS2113-T14-4/tp/tree/master/src/main/java/seedu/dietbook/database)"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"and [database resource](https://github.com/AY2021S1-CS2113-T14-4/tp/tree/master/src/main/resources)"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"* Implemented[saveload package](https://github.com/AY2021S1-CS2113-T14-4/tp/tree/master/src/main/java/seedu/dietbook/saveload)"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"#### Documentation"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"**User Guide**"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"* Edit [database section](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/docs/UserGuide.md#features-related-to-the-food-database) for V2.1"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"**Developer Guide**"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"* Added the [saveload section](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/docs/DeveloperGuide.md#saveload-feature) with the UML diagrams"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"* added the [database section](https://github.com/AY2021S1-CS2113-T14-4/tp/blob/master/docs/DeveloperGuide.md#database-feature) with the UML diagrams"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"and instructions on how to manually edit the data base text file."},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"#### Contributions to team-based tasks"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"* Attend weekly meetings"}],"authorContributionMap":{"snowbanana12345":31}},{"path":"src/main/java/seedu/dietbook/DietBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.database.DataBase;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.list.FoodList;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.Command;"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.person.FitnessLevel;"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.person.Gender;"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.saveload.PersonSaveLoadManager;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.saveload.FoodPortionDateSaveLoadManager;"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"//@@author tikimonarch"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":" * Main class of the program."},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":" * The DietBook program is an application which can store, display and check your daily dietary intake."},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":" *"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":" * @author tikimonarch"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":" */"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"public class DietBook {"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"    private FoodList foodList;"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"    private Ui ui;"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"    private Manager manager;"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"    private DataBase dataBase;"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"    private PersonSaveLoadManager loadPerson;"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"    private FoodPortionDateSaveLoadManager loadFood;"},{"lineNumber":30,"author":{"gitId":"tikimonarch"},"content":"    public static boolean isExit \u003d false;"},{"lineNumber":31,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":32,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tikimonarch"},"content":"     * Constructor for new DietBook."},{"lineNumber":34,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tikimonarch"},"content":"    public DietBook() {"},{"lineNumber":36,"author":{"gitId":"tikimonarch"},"content":"        ui \u003d new Ui();"},{"lineNumber":37,"author":{"gitId":"tikimonarch"},"content":"        loadFood \u003d new FoodPortionDateSaveLoadManager();"},{"lineNumber":38,"author":{"gitId":"tikimonarch"},"content":"        loadPerson \u003d new PersonSaveLoadManager();"},{"lineNumber":39,"author":{"gitId":"tikimonarch"},"content":"        foodList \u003d new FoodList();"},{"lineNumber":40,"author":{"gitId":"tikimonarch"},"content":"        dataBase \u003d new DataBase();"},{"lineNumber":41,"author":{"gitId":"tikimonarch"},"content":"        dataBase.init();"},{"lineNumber":42,"author":{"gitId":"tikimonarch"},"content":"        manager \u003d new Manager(foodList, dataBase);"},{"lineNumber":43,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":45,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"tikimonarch"},"content":"     * Method to load Person data."},{"lineNumber":47,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"tikimonarch"},"content":"    public void loadPerson() {"},{"lineNumber":49,"author":{"gitId":"tikimonarch"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"tikimonarch"},"content":"            System.out.println(\"Loading personal information...\");"},{"lineNumber":51,"author":{"gitId":"tikimonarch"},"content":"            loadPerson.load(\"UserInfo.txt\");"},{"lineNumber":52,"author":{"gitId":"tikimonarch"},"content":"            FitnessLevel fitLvl \u003d FitnessLevel.NONE;"},{"lineNumber":53,"author":{"gitId":"tikimonarch"},"content":"            int fitLvlInt \u003d loadPerson.getFitnessLevel();"},{"lineNumber":54,"author":{"gitId":"tikimonarch"},"content":"            if (fitLvlInt \u003d\u003d 1) {"},{"lineNumber":55,"author":{"gitId":"tikimonarch"},"content":"                fitLvl \u003d FitnessLevel.NONE;"},{"lineNumber":56,"author":{"gitId":"tikimonarch"},"content":"            } else if (fitLvlInt \u003d\u003d 2) {"},{"lineNumber":57,"author":{"gitId":"tikimonarch"},"content":"                fitLvl \u003d FitnessLevel.LOW;"},{"lineNumber":58,"author":{"gitId":"tikimonarch"},"content":"            } else if (fitLvlInt \u003d\u003d 3) {"},{"lineNumber":59,"author":{"gitId":"tikimonarch"},"content":"                fitLvl \u003d FitnessLevel.MEDIUM;"},{"lineNumber":60,"author":{"gitId":"tikimonarch"},"content":"            } else if (fitLvlInt \u003d\u003d 4) {"},{"lineNumber":61,"author":{"gitId":"tikimonarch"},"content":"                fitLvl \u003d FitnessLevel.HIGH;"},{"lineNumber":62,"author":{"gitId":"tikimonarch"},"content":"            } else if (fitLvlInt \u003d\u003d 5) {"},{"lineNumber":63,"author":{"gitId":"tikimonarch"},"content":"                fitLvl \u003d FitnessLevel.EXTREME;"},{"lineNumber":64,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":66,"author":{"gitId":"tikimonarch"},"content":"            Gender gender;"},{"lineNumber":67,"author":{"gitId":"tikimonarch"},"content":"            String genderString \u003d loadPerson.getGender();"},{"lineNumber":68,"author":{"gitId":"tikimonarch"},"content":"            if (genderString.equals(\"Male\")) {"},{"lineNumber":69,"author":{"gitId":"tikimonarch"},"content":"                gender \u003d Gender.MALE;"},{"lineNumber":70,"author":{"gitId":"tikimonarch"},"content":"            } else if (genderString.equals(\"Female\")) {"},{"lineNumber":71,"author":{"gitId":"tikimonarch"},"content":"                gender \u003d Gender.FEMALE;"},{"lineNumber":72,"author":{"gitId":"tikimonarch"},"content":"            } else {"},{"lineNumber":73,"author":{"gitId":"tikimonarch"},"content":"                gender \u003d Gender.OTHERS;"},{"lineNumber":74,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"tikimonarch"},"content":"            manager.getPerson().setAll(loadPerson.getName(), gender, loadPerson.getAge(),"},{"lineNumber":76,"author":{"gitId":"tikimonarch"},"content":"                    loadPerson.getHeight(), loadPerson.getOriginalWeight(), loadPerson.getCurrentWeight(),"},{"lineNumber":77,"author":{"gitId":"tikimonarch"},"content":"                    loadPerson.getTargetWeight(), fitLvl);"},{"lineNumber":78,"author":{"gitId":"tikimonarch"},"content":"            Manager.commandCount \u003d 3;"},{"lineNumber":79,"author":{"gitId":"tikimonarch"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":80,"author":{"gitId":"tikimonarch"},"content":"            ui.printErrorMessage(\"Person data file not found! Creating new personal data....\");"},{"lineNumber":81,"author":{"gitId":"tikimonarch"},"content":"        } catch (IllegalAccessException e) {"},{"lineNumber":82,"author":{"gitId":"tikimonarch"},"content":"            ui.printErrorMessage(e.getMessage());"},{"lineNumber":83,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":86,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"tikimonarch"},"content":"     * Method to load DietBook FoodList data."},{"lineNumber":88,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"tikimonarch"},"content":"    public void loadFood() {"},{"lineNumber":90,"author":{"gitId":"tikimonarch"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"tikimonarch"},"content":"            System.out.println(\"Loading personal food data...\");"},{"lineNumber":92,"author":{"gitId":"tikimonarch"},"content":"            loadFood.load(\"FoodList.txt\");"},{"lineNumber":93,"author":{"gitId":"tikimonarch"},"content":"            manager.setFoodList(loadFood.getFoodList());"},{"lineNumber":94,"author":{"gitId":"tikimonarch"},"content":"            Manager.commandCount \u003d 3;"},{"lineNumber":95,"author":{"gitId":"tikimonarch"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":96,"author":{"gitId":"tikimonarch"},"content":"            ui.printErrorMessage(\"FoodList data file not found! Creating new food list...\");"},{"lineNumber":97,"author":{"gitId":"tikimonarch"},"content":"        } catch (IllegalAccessException e) {"},{"lineNumber":98,"author":{"gitId":"tikimonarch"},"content":"            ui.printErrorMessage(e.getMessage());"},{"lineNumber":99,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":101,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":103,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"tikimonarch"},"content":"     * Main method to run the program."},{"lineNumber":105,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"tikimonarch"},"content":"    public static void main(String[] args) {"},{"lineNumber":107,"author":{"gitId":"tikimonarch"},"content":"        DietBook dietBook \u003d new DietBook();"},{"lineNumber":108,"author":{"gitId":"tikimonarch"},"content":"        dietBook.loadPerson();"},{"lineNumber":109,"author":{"gitId":"tikimonarch"},"content":"        dietBook.loadFood();"},{"lineNumber":110,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003e 2) {"},{"lineNumber":111,"author":{"gitId":"tikimonarch"},"content":"            dietBook.ui.printWelcomeBackMessage(dietBook.manager.getPerson().getName());"},{"lineNumber":112,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003c\u003d 2) {"},{"lineNumber":113,"author":{"gitId":"tikimonarch"},"content":"            dietBook.ui.printWelcomeMessage();"},{"lineNumber":114,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":116,"author":{"gitId":"tikimonarch"},"content":"        while (!isExit) {"},{"lineNumber":117,"author":{"gitId":"tikimonarch"},"content":"            try {"},{"lineNumber":118,"author":{"gitId":"tikimonarch"},"content":"                String userInput \u003d dietBook.ui.getCommand();"},{"lineNumber":119,"author":{"gitId":"tikimonarch"},"content":"                Command c \u003d dietBook.manager.manage(userInput);"},{"lineNumber":120,"author":{"gitId":"tikimonarch"},"content":"                c.execute(dietBook.manager, dietBook.ui);"},{"lineNumber":121,"author":{"gitId":"tikimonarch"},"content":"            } catch (DietException e) {"},{"lineNumber":122,"author":{"gitId":"tikimonarch"},"content":"                dietBook.ui.printErrorMessage(e.getMessage());"},{"lineNumber":123,"author":{"gitId":"tikimonarch"},"content":"            } catch (Exception e) {"},{"lineNumber":124,"author":{"gitId":"tikimonarch"},"content":"                dietBook.ui.printErrorMessage(\"Oops something went wrong!\");"},{"lineNumber":125,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":5,"tikimonarch":123}},{"path":"src/main/java/seedu/dietbook/Manager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.calculator.Calculator;"},{"lineNumber":4,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.calculator.CalculatorData;"},{"lineNumber":5,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.AddCommand;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.CalculateCommand;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.ClearCommand;"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.Command;"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.DataCommand;"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.EditInfoCommand;"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.HelpCommand;"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.InfoCommand;"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.ListCommand;"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.NameCommand;"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.RecommendCommand;"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.command.UserinfoCommand;"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.database.DataBase;"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":21,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.list.FoodList;"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.parser.Parser;"},{"lineNumber":23,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.person.FitnessLevel;"},{"lineNumber":24,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.person.Gender;"},{"lineNumber":25,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.person.Person;"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.saveload.FoodPortionDateSaveLoadManager;"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.saveload.PersonSaveLoadManager;"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":30,"author":{"gitId":"tikimonarch"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"tikimonarch"},"content":" * Manager class of the program."},{"lineNumber":32,"author":{"gitId":"tikimonarch"},"content":" * The manager class takes in the checked and processed input and carry out the command specified."},{"lineNumber":33,"author":{"gitId":"tikimonarch"},"content":" * Initialization of important classes such as FoodList and Person is done here."},{"lineNumber":34,"author":{"gitId":"tikimonarch"},"content":" *"},{"lineNumber":35,"author":{"gitId":"tikimonarch"},"content":" * @author tikimonarch"},{"lineNumber":36,"author":{"gitId":"tikimonarch"},"content":" */"},{"lineNumber":37,"author":{"gitId":"tikimonarch"},"content":"public class Manager {"},{"lineNumber":38,"author":{"gitId":"tikimonarch"},"content":"    private Person person;"},{"lineNumber":39,"author":{"gitId":"tikimonarch"},"content":"    private FoodList foodList;"},{"lineNumber":40,"author":{"gitId":"tikimonarch"},"content":"    private String name;"},{"lineNumber":41,"author":{"gitId":"tikimonarch"},"content":"    public static int commandCount \u003d 1;"},{"lineNumber":42,"author":{"gitId":"tikimonarch"},"content":"    private DataBase dataBase;"},{"lineNumber":43,"author":{"gitId":"yuqiaoluolong"},"content":"    private CalculatorData data \u003d new CalculatorData();"},{"lineNumber":44,"author":{"gitId":"tikimonarch"},"content":"    private Calculator calculator;"},{"lineNumber":45,"author":{"gitId":"tikimonarch"},"content":"    private PersonSaveLoadManager personSave \u003d new PersonSaveLoadManager();"},{"lineNumber":46,"author":{"gitId":"tikimonarch"},"content":"    private FoodPortionDateSaveLoadManager foodSave \u003d new FoodPortionDateSaveLoadManager();"},{"lineNumber":47,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":48,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_ADD \u003d \"add\";"},{"lineNumber":49,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_CALCULATE \u003d \"calculate\";"},{"lineNumber":50,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_CLEAR \u003d \"clear\";"},{"lineNumber":51,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_DATA \u003d \"data\";"},{"lineNumber":52,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";"},{"lineNumber":53,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_EDIT_INFO \u003d \"editinfo\";"},{"lineNumber":54,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_EXIT \u003d \"exit\";"},{"lineNumber":55,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_HELP \u003d \"help\";"},{"lineNumber":56,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_INFO \u003d \"info\";"},{"lineNumber":57,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_LIST \u003d \"list\";"},{"lineNumber":58,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_NAME \u003d \"name\";"},{"lineNumber":59,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_RECOMMEND \u003d \"recommend\";"},{"lineNumber":60,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_USERINFO \u003d \"userinfo\";"},{"lineNumber":61,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":62,"author":{"gitId":"tikimonarch"},"content":"    public Manager(FoodList foodlist, DataBase dataBase) {"},{"lineNumber":63,"author":{"gitId":"tikimonarch"},"content":"        this.name \u003d \"John Doe\";"},{"lineNumber":64,"author":{"gitId":"HengFuYuen"},"content":"        this.person \u003d new Person(this.name, Gender.MALE, 1,1,1,1,"},{"lineNumber":65,"author":{"gitId":"HengFuYuen"},"content":"                1, FitnessLevel.LOW);"},{"lineNumber":66,"author":{"gitId":"tikimonarch"},"content":"        this.foodList \u003d foodlist;"},{"lineNumber":67,"author":{"gitId":"tikimonarch"},"content":"        this.dataBase \u003d dataBase;"},{"lineNumber":68,"author":{"gitId":"yuqiaoluolong"},"content":"        this.data.inputData(this.foodList);"},{"lineNumber":69,"author":{"gitId":"yuqiaoluolong"},"content":"        this.calculator \u003d new Calculator(this.data);"},{"lineNumber":70,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":72,"author":{"gitId":"tikimonarch"},"content":"    public FoodList getFoodList() {"},{"lineNumber":73,"author":{"gitId":"tikimonarch"},"content":"        return this.foodList;"},{"lineNumber":74,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":76,"author":{"gitId":"tikimonarch"},"content":"    public void setFoodList(FoodList foodList) {"},{"lineNumber":77,"author":{"gitId":"tikimonarch"},"content":"        this.foodList \u003d foodList;"},{"lineNumber":78,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":80,"author":{"gitId":"tikimonarch"},"content":"    public Person getPerson() {"},{"lineNumber":81,"author":{"gitId":"tikimonarch"},"content":"        return this.person;"},{"lineNumber":82,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":84,"author":{"gitId":"HengFuYuen"},"content":"    public void setPerson(String name, Gender gender, int age,int height,int orgWeight, int currWeight,"},{"lineNumber":85,"author":{"gitId":"HengFuYuen"},"content":"                          int targWeight, FitnessLevel fitLvl) {"},{"lineNumber":86,"author":{"gitId":"HengFuYuen"},"content":"        this.person.setAll(name, gender, age, height, orgWeight, currWeight, targWeight, fitLvl);"},{"lineNumber":87,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":89,"author":{"gitId":"tikimonarch"},"content":"    public Calculator getCalculator() {"},{"lineNumber":90,"author":{"gitId":"tikimonarch"},"content":"        return this.calculator;"},{"lineNumber":91,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":93,"author":{"gitId":"yuqiaoluolong"},"content":"    public void setCalculator() {"},{"lineNumber":94,"author":{"gitId":"yuqiaoluolong"},"content":"        this.data.inputData(foodList);"},{"lineNumber":95,"author":{"gitId":"yuqiaoluolong"},"content":"        this.calculator.update(this.data);"},{"lineNumber":96,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":98,"author":{"gitId":"tikimonarch"},"content":"    public DataBase getDataBase() {"},{"lineNumber":99,"author":{"gitId":"tikimonarch"},"content":"        return this.dataBase;"},{"lineNumber":100,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":102,"author":{"gitId":"tikimonarch"},"content":"    public String getName() {"},{"lineNumber":103,"author":{"gitId":"tikimonarch"},"content":"        return this.name;"},{"lineNumber":104,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":106,"author":{"gitId":"tikimonarch"},"content":"    public void setName(String name) {"},{"lineNumber":107,"author":{"gitId":"tikimonarch"},"content":"        this.name \u003d name;"},{"lineNumber":108,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":110,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"tikimonarch"},"content":"     * Takes in the user input and returns the command to be carried."},{"lineNumber":112,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":114,"author":{"gitId":"tikimonarch"},"content":"     * @return \u003ccode\u003eCommand\u003c/code\u003e for the command specified."},{"lineNumber":115,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when the program does not recognize the command given."},{"lineNumber":116,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"tikimonarch"},"content":"    public Command manage(String userInput) throws DietException {"},{"lineNumber":118,"author":{"gitId":"tikimonarch"},"content":"        Calculator calculator \u003d this.calculator;"},{"lineNumber":119,"author":{"gitId":"tikimonarch"},"content":"        switch (Parser.getCommand(userInput)) {"},{"lineNumber":120,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_ADD:"},{"lineNumber":121,"author":{"gitId":"tikimonarch"},"content":"            return new AddCommand(userInput);"},{"lineNumber":122,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_CALCULATE:"},{"lineNumber":123,"author":{"gitId":"tikimonarch"},"content":"            return new CalculateCommand(calculator.calculateCalorie(), calculator.calculateCarb(),"},{"lineNumber":124,"author":{"gitId":"tikimonarch"},"content":"                    calculator.calculateProtein(), calculator.calculateFat(), Parser.getCommandParam(userInput));"},{"lineNumber":125,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_CLEAR:"},{"lineNumber":126,"author":{"gitId":"tikimonarch"},"content":"            return new ClearCommand(userInput);"},{"lineNumber":127,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_DATA:"},{"lineNumber":128,"author":{"gitId":"tikimonarch"},"content":"            return new DataCommand(userInput);"},{"lineNumber":129,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_DELETE:"},{"lineNumber":130,"author":{"gitId":"tikimonarch"},"content":"            return new DeleteCommand(userInput, Parser.getCommandIndex(userInput));"},{"lineNumber":131,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_EDIT_INFO:"},{"lineNumber":132,"author":{"gitId":"tikimonarch"},"content":"            return new EditInfoCommand(userInput);"},{"lineNumber":133,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_EXIT:"},{"lineNumber":134,"author":{"gitId":"tikimonarch"},"content":"            return new ExitCommand(userInput);"},{"lineNumber":135,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_HELP:"},{"lineNumber":136,"author":{"gitId":"tikimonarch"},"content":"            return new HelpCommand(userInput);"},{"lineNumber":137,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_INFO:"},{"lineNumber":138,"author":{"gitId":"tikimonarch"},"content":"            return new InfoCommand(userInput);"},{"lineNumber":139,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_LIST:"},{"lineNumber":140,"author":{"gitId":"tikimonarch"},"content":"            return new ListCommand(userInput);"},{"lineNumber":141,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_NAME:"},{"lineNumber":142,"author":{"gitId":"tikimonarch"},"content":"            return new NameCommand(Parser.getCommandParam(userInput));"},{"lineNumber":143,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_RECOMMEND:"},{"lineNumber":144,"author":{"gitId":"tikimonarch"},"content":"            return new RecommendCommand(getPerson(), userInput);"},{"lineNumber":145,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_USERINFO:"},{"lineNumber":146,"author":{"gitId":"tikimonarch"},"content":"            return new UserinfoCommand(userInput);"},{"lineNumber":147,"author":{"gitId":"tikimonarch"},"content":"        default:"},{"lineNumber":148,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"There\u0027s no such command!\");"},{"lineNumber":149,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":152,"author":{"gitId":"tikimonarch"},"content":"    public void save() {"},{"lineNumber":153,"author":{"gitId":"tikimonarch"},"content":"        FitnessLevel fitLvl \u003d getPerson().getFitnessLevel();"},{"lineNumber":154,"author":{"gitId":"tikimonarch"},"content":"        int fitLvlInt \u003d 1;"},{"lineNumber":155,"author":{"gitId":"tikimonarch"},"content":"        if (fitLvl.equals(FitnessLevel.NONE)) {"},{"lineNumber":156,"author":{"gitId":"tikimonarch"},"content":"            fitLvlInt \u003d 1;"},{"lineNumber":157,"author":{"gitId":"tikimonarch"},"content":"        } else if (fitLvl.equals(FitnessLevel.LOW)) {"},{"lineNumber":158,"author":{"gitId":"tikimonarch"},"content":"            fitLvlInt \u003d 2;"},{"lineNumber":159,"author":{"gitId":"tikimonarch"},"content":"        } else if (fitLvl.equals(FitnessLevel.MEDIUM)) {"},{"lineNumber":160,"author":{"gitId":"tikimonarch"},"content":"            fitLvlInt \u003d 3;"},{"lineNumber":161,"author":{"gitId":"tikimonarch"},"content":"        } else if (fitLvl.equals(FitnessLevel.HIGH)) {"},{"lineNumber":162,"author":{"gitId":"tikimonarch"},"content":"            fitLvlInt \u003d 4;"},{"lineNumber":163,"author":{"gitId":"tikimonarch"},"content":"        } else if (fitLvl.equals(FitnessLevel.EXTREME)) {"},{"lineNumber":164,"author":{"gitId":"tikimonarch"},"content":"            fitLvlInt \u003d 5;"},{"lineNumber":165,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":167,"author":{"gitId":"tikimonarch"},"content":"        Gender gender \u003d getPerson().getGender();"},{"lineNumber":168,"author":{"gitId":"tikimonarch"},"content":"        String genderString;"},{"lineNumber":169,"author":{"gitId":"tikimonarch"},"content":"        if (gender.equals(Gender.MALE)) {"},{"lineNumber":170,"author":{"gitId":"tikimonarch"},"content":"            genderString \u003d \"Male\";"},{"lineNumber":171,"author":{"gitId":"tikimonarch"},"content":"        } else if (gender.equals(Gender.FEMALE)) {"},{"lineNumber":172,"author":{"gitId":"tikimonarch"},"content":"            genderString \u003d \"Female\";"},{"lineNumber":173,"author":{"gitId":"tikimonarch"},"content":"        } else {"},{"lineNumber":174,"author":{"gitId":"tikimonarch"},"content":"            genderString \u003d \"Others\";"},{"lineNumber":175,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":177,"author":{"gitId":"tikimonarch"},"content":"        personSave.setActivityLevel(fitLvlInt);"},{"lineNumber":178,"author":{"gitId":"tikimonarch"},"content":"        personSave.setAge(getPerson().getAge());"},{"lineNumber":179,"author":{"gitId":"tikimonarch"},"content":"        personSave.setCurrentWeight(getPerson().getCurrentWeight());"},{"lineNumber":180,"author":{"gitId":"tikimonarch"},"content":"        personSave.setGender(genderString);"},{"lineNumber":181,"author":{"gitId":"tikimonarch"},"content":"        personSave.setHeight(getPerson().getHeight());"},{"lineNumber":182,"author":{"gitId":"tikimonarch"},"content":"        personSave.setName(getPerson().getName());"},{"lineNumber":183,"author":{"gitId":"tikimonarch"},"content":"        personSave.setOriginalWeight(getPerson().getOriginalWeight());"},{"lineNumber":184,"author":{"gitId":"tikimonarch"},"content":"        personSave.setTargetWeight(getPerson().getTargetWeight());"},{"lineNumber":185,"author":{"gitId":"tikimonarch"},"content":"        personSave.save(\"UserInfo.txt\");"},{"lineNumber":186,"author":{"gitId":"tikimonarch"},"content":"        foodSave.saveFoodList(getFoodList(), \"FoodList.txt\");"},{"lineNumber":187,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":189,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"yuqiaoluolong":14,"HengFuYuen":7,"tikimonarch":168}},{"path":"src/main/java/seedu/dietbook/calculator/Calculator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yuqiaoluolong"},"content":"package seedu.dietbook.calculator;"},{"lineNumber":2,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":3,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.person.Gender;"},{"lineNumber":4,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.person.Person;"},{"lineNumber":5,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":6,"author":{"gitId":"yuqiaoluolong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"yuqiaoluolong"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":9,"author":{"gitId":"yuqiaoluolong"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yuqiaoluolong"},"content":" * Represents a calculator of food items in foodList."},{"lineNumber":11,"author":{"gitId":"yuqiaoluolong"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yuqiaoluolong"},"content":"public class Calculator {"},{"lineNumber":13,"author":{"gitId":"yuqiaoluolong"},"content":"    private int totalCalorie \u003d 0;"},{"lineNumber":14,"author":{"gitId":"yuqiaoluolong"},"content":"    private int totalCarb \u003d 0;"},{"lineNumber":15,"author":{"gitId":"yuqiaoluolong"},"content":"    private int totalProtein \u003d 0;"},{"lineNumber":16,"author":{"gitId":"yuqiaoluolong"},"content":"    private int totalFat \u003d 0;"},{"lineNumber":17,"author":{"gitId":"yuqiaoluolong"},"content":"    CalculatorData data \u003d null;"},{"lineNumber":18,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":19,"author":{"gitId":"yuqiaoluolong"},"content":"    public Calculator() {"},{"lineNumber":20,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yuqiaoluolong"},"content":"    "},{"lineNumber":22,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yuqiaoluolong"},"content":"     * Construct a calculator taking in a foodList. Add up calories,"},{"lineNumber":24,"author":{"gitId":"yuqiaoluolong"},"content":"     * carbs, protein, and fats in each food item."},{"lineNumber":25,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param data a CalculatorData class instance containing data"},{"lineNumber":27,"author":{"gitId":"yuqiaoluolong"},"content":"     *             of food items to calculate."},{"lineNumber":28,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"yuqiaoluolong"},"content":"    public Calculator(CalculatorData data) {"},{"lineNumber":30,"author":{"gitId":"yuqiaoluolong"},"content":"        assert data !\u003d null : \"The foodList should not be null.\";"},{"lineNumber":31,"author":{"gitId":"yuqiaoluolong"},"content":"        this.data \u003d data;"},{"lineNumber":32,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":34,"author":{"gitId":"yuqiaoluolong"},"content":"    public void update(CalculatorData data) {"},{"lineNumber":35,"author":{"gitId":"yuqiaoluolong"},"content":"        this.data \u003d data;"},{"lineNumber":36,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":38,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total calorie."},{"lineNumber":40,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total calorie of food items in foodList."},{"lineNumber":42,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateCalorie() {"},{"lineNumber":44,"author":{"gitId":"yuqiaoluolong"},"content":"        totalCalorie \u003d 0;"},{"lineNumber":45,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e calories \u003d data.getTotalCalorie();"},{"lineNumber":46,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int calorie : calories) {"},{"lineNumber":47,"author":{"gitId":"yuqiaoluolong"},"content":"            totalCalorie +\u003d calorie;"},{"lineNumber":48,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalCalorie;"},{"lineNumber":50,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":52,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total calorie"},{"lineNumber":54,"author":{"gitId":"yuqiaoluolong"},"content":"     * of the foods with time after a specific time."},{"lineNumber":55,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param startTime the start time for food items to be included."},{"lineNumber":57,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total calorie of food items with time after"},{"lineNumber":59,"author":{"gitId":"yuqiaoluolong"},"content":"     *         startTime in foodList."},{"lineNumber":60,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateCalorie(LocalDateTime startTime) {"},{"lineNumber":62,"author":{"gitId":"yuqiaoluolong"},"content":"        totalCalorie \u003d 0;"},{"lineNumber":63,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e calories \u003d data.getTotalCalorie(startTime);"},{"lineNumber":64,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int calorie : calories) {"},{"lineNumber":65,"author":{"gitId":"yuqiaoluolong"},"content":"            totalCalorie +\u003d calorie;"},{"lineNumber":66,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalCalorie;"},{"lineNumber":68,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":70,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total calories"},{"lineNumber":72,"author":{"gitId":"yuqiaoluolong"},"content":"     * of the foods with time after a specific time and before a specific time."},{"lineNumber":73,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param startTime the start time for food items to be included."},{"lineNumber":75,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param endTime the end time for food items to be included."},{"lineNumber":76,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total calorie of food items with time after"},{"lineNumber":78,"author":{"gitId":"yuqiaoluolong"},"content":"     *         startTime in foodList."},{"lineNumber":79,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateCalorie(LocalDateTime startTime, LocalDateTime endTime) {"},{"lineNumber":81,"author":{"gitId":"yuqiaoluolong"},"content":"        totalCalorie \u003d 0;"},{"lineNumber":82,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e calories \u003d data.getTotalCalorie(startTime, endTime);"},{"lineNumber":83,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int calorie : calories) {"},{"lineNumber":84,"author":{"gitId":"yuqiaoluolong"},"content":"            totalCalorie +\u003d calorie;"},{"lineNumber":85,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalCalorie;"},{"lineNumber":87,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":89,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total carbs."},{"lineNumber":91,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total carbs of food items in foodList."},{"lineNumber":93,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateCarb() {"},{"lineNumber":95,"author":{"gitId":"yuqiaoluolong"},"content":"        totalCarb \u003d 0;"},{"lineNumber":96,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e carbs \u003d data.getTotalCarb();"},{"lineNumber":97,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int carb : carbs) {"},{"lineNumber":98,"author":{"gitId":"yuqiaoluolong"},"content":"            totalCarb +\u003d carb;"},{"lineNumber":99,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalCarb;"},{"lineNumber":101,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":103,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total carbs"},{"lineNumber":105,"author":{"gitId":"yuqiaoluolong"},"content":"     * of the foods with time after a specific time."},{"lineNumber":106,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param startTime the start time for food items to be included."},{"lineNumber":108,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total calorie of food items with time after"},{"lineNumber":110,"author":{"gitId":"yuqiaoluolong"},"content":"     *         startTime in foodList."},{"lineNumber":111,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateCarb(LocalDateTime startTime) {"},{"lineNumber":113,"author":{"gitId":"yuqiaoluolong"},"content":"        totalCarb \u003d 0;"},{"lineNumber":114,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e carbs \u003d data.getTotalCarb(startTime);"},{"lineNumber":115,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int carb : carbs) {"},{"lineNumber":116,"author":{"gitId":"yuqiaoluolong"},"content":"            totalCarb +\u003d carb;"},{"lineNumber":117,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalCarb;"},{"lineNumber":119,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":121,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total carbs"},{"lineNumber":123,"author":{"gitId":"yuqiaoluolong"},"content":"     * of the foods with time after a specific time and before a specific time."},{"lineNumber":124,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param startTime the start time for food items to be included."},{"lineNumber":126,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param endTime the end time for food items to be included."},{"lineNumber":127,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":128,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total calorie of food items with time after"},{"lineNumber":129,"author":{"gitId":"yuqiaoluolong"},"content":"     *         startTime in foodList."},{"lineNumber":130,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateCarb(LocalDateTime startTime, LocalDateTime endTime) {"},{"lineNumber":132,"author":{"gitId":"yuqiaoluolong"},"content":"        totalCarb \u003d 0;"},{"lineNumber":133,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e carbs \u003d data.getTotalCarb(startTime, endTime);"},{"lineNumber":134,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int carb : carbs) {"},{"lineNumber":135,"author":{"gitId":"yuqiaoluolong"},"content":"            totalCarb +\u003d carb;"},{"lineNumber":136,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalCarb;"},{"lineNumber":138,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":140,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total protein."},{"lineNumber":142,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total protein of food items in foodList."},{"lineNumber":144,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateProtein() {"},{"lineNumber":146,"author":{"gitId":"yuqiaoluolong"},"content":"        totalProtein \u003d 0;"},{"lineNumber":147,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e proteins \u003d data.getTotalProtein();"},{"lineNumber":148,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int protein : proteins) {"},{"lineNumber":149,"author":{"gitId":"yuqiaoluolong"},"content":"            totalProtein +\u003d protein;"},{"lineNumber":150,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalProtein;"},{"lineNumber":152,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":154,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total protein"},{"lineNumber":156,"author":{"gitId":"yuqiaoluolong"},"content":"     * of the foods with time after a specific time."},{"lineNumber":157,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param startTime the start time for food items to be included."},{"lineNumber":159,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total calorie of food items with time after"},{"lineNumber":161,"author":{"gitId":"yuqiaoluolong"},"content":"     *         startTime in foodList."},{"lineNumber":162,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateProtein(LocalDateTime startTime) {"},{"lineNumber":164,"author":{"gitId":"yuqiaoluolong"},"content":"        totalProtein \u003d 0;"},{"lineNumber":165,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e proteins \u003d data.getTotalProtein(startTime);"},{"lineNumber":166,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int protein : proteins) {"},{"lineNumber":167,"author":{"gitId":"yuqiaoluolong"},"content":"            totalProtein +\u003d protein;"},{"lineNumber":168,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalProtein;"},{"lineNumber":170,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":172,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total protein"},{"lineNumber":174,"author":{"gitId":"yuqiaoluolong"},"content":"     * of the foods with time after a specific time and before a specific time."},{"lineNumber":175,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param startTime the start time for food items to be included."},{"lineNumber":177,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param endTime the end time for food items to be included."},{"lineNumber":178,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total calorie of food items with time after"},{"lineNumber":180,"author":{"gitId":"yuqiaoluolong"},"content":"     *         startTime in foodList."},{"lineNumber":181,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateProtein(LocalDateTime startTime, LocalDateTime endTime) {"},{"lineNumber":183,"author":{"gitId":"yuqiaoluolong"},"content":"        totalProtein \u003d 0;"},{"lineNumber":184,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e proteins \u003d data.getTotalProtein(startTime, endTime);"},{"lineNumber":185,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int protein : proteins) {"},{"lineNumber":186,"author":{"gitId":"yuqiaoluolong"},"content":"            totalProtein +\u003d protein;"},{"lineNumber":187,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalProtein;"},{"lineNumber":189,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":191,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total fats."},{"lineNumber":193,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":194,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total fats of food items in foodList."},{"lineNumber":195,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateFat() {"},{"lineNumber":197,"author":{"gitId":"yuqiaoluolong"},"content":"        totalFat \u003d 0;"},{"lineNumber":198,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e fats \u003d data.getTotalFat();"},{"lineNumber":199,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int fat : fats) {"},{"lineNumber":200,"author":{"gitId":"yuqiaoluolong"},"content":"            totalFat +\u003d fat;"},{"lineNumber":201,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalFat;"},{"lineNumber":203,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":205,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total fats"},{"lineNumber":207,"author":{"gitId":"yuqiaoluolong"},"content":"     * of the foods with time after a specific time."},{"lineNumber":208,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":209,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param startTime the start time for food items to be included."},{"lineNumber":210,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":211,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total calorie of food items with time after"},{"lineNumber":212,"author":{"gitId":"yuqiaoluolong"},"content":"     *         startTime in foodList."},{"lineNumber":213,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateFat(LocalDateTime startTime) {"},{"lineNumber":215,"author":{"gitId":"yuqiaoluolong"},"content":"        totalFat \u003d 0;"},{"lineNumber":216,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e fats \u003d data.getTotalFat(startTime);"},{"lineNumber":217,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int fat : fats) {"},{"lineNumber":218,"author":{"gitId":"yuqiaoluolong"},"content":"            totalFat +\u003d fat;"},{"lineNumber":219,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalFat;"},{"lineNumber":221,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":223,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":224,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of total fats"},{"lineNumber":225,"author":{"gitId":"yuqiaoluolong"},"content":"     * of the foods with time after a specific time and before a specific time."},{"lineNumber":226,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":227,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param startTime the start time for food items to be included."},{"lineNumber":228,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param endTime the end time for food items to be included."},{"lineNumber":229,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":230,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of total calorie of food items with time after"},{"lineNumber":231,"author":{"gitId":"yuqiaoluolong"},"content":"     *         startTime in foodList."},{"lineNumber":232,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":233,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateFat(LocalDateTime startTime, LocalDateTime endTime) {"},{"lineNumber":234,"author":{"gitId":"yuqiaoluolong"},"content":"        totalFat \u003d 0;"},{"lineNumber":235,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e fats \u003d data.getTotalFat(startTime, endTime);"},{"lineNumber":236,"author":{"gitId":"yuqiaoluolong"},"content":"        for (int fat : fats) {"},{"lineNumber":237,"author":{"gitId":"yuqiaoluolong"},"content":"            totalFat +\u003d fat;"},{"lineNumber":238,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"yuqiaoluolong"},"content":"        return totalFat;"},{"lineNumber":240,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":242,"author":{"gitId":"yuqiaoluolong"},"content":"    /**"},{"lineNumber":243,"author":{"gitId":"yuqiaoluolong"},"content":"     * Returns an int type variable containing the value of recommended daily calorie intake."},{"lineNumber":244,"author":{"gitId":"yuqiaoluolong"},"content":"     * It is calculated based on the gender, activity level, age, height, original weight,"},{"lineNumber":245,"author":{"gitId":"yuqiaoluolong"},"content":"     * and targeted weight."},{"lineNumber":246,"author":{"gitId":"yuqiaoluolong"},"content":"     *"},{"lineNumber":247,"author":{"gitId":"yuqiaoluolong"},"content":"     * @param person person whose recommended daily calorie intake are to return."},{"lineNumber":248,"author":{"gitId":"yuqiaoluolong"},"content":"     * @return the value of recommended daily calorie intake."},{"lineNumber":249,"author":{"gitId":"yuqiaoluolong"},"content":"     */"},{"lineNumber":250,"author":{"gitId":"yuqiaoluolong"},"content":"    public int calculateRecommendation(Person person) {"},{"lineNumber":251,"author":{"gitId":"yuqiaoluolong"},"content":"        double requirement \u003d 0;"},{"lineNumber":252,"author":{"gitId":"yuqiaoluolong"},"content":"        int recommendation;"},{"lineNumber":253,"author":{"gitId":"yuqiaoluolong"},"content":"        double fitnessScore;"},{"lineNumber":254,"author":{"gitId":"yuqiaoluolong"},"content":"        fitnessScore \u003d getFitnessScore(person);"},{"lineNumber":255,"author":{"gitId":"yuqiaoluolong"},"content":"        switch (person.getGender()) {"},{"lineNumber":256,"author":{"gitId":"yuqiaoluolong"},"content":"        case MALE:"},{"lineNumber":257,"author":{"gitId":"yuqiaoluolong"},"content":"            requirement \u003d 662 - 9.53 * person.getAge() + 15.91 * fitnessScore * person.getCurrentWeight()"},{"lineNumber":258,"author":{"gitId":"yuqiaoluolong"},"content":"                    + 539.6 * person.getHeight() / 100;"},{"lineNumber":259,"author":{"gitId":"yuqiaoluolong"},"content":"            break;"},{"lineNumber":260,"author":{"gitId":"yuqiaoluolong"},"content":"        case FEMALE:"},{"lineNumber":261,"author":{"gitId":"yuqiaoluolong"},"content":"            requirement \u003d 354 - 6.91 * person.getAge() + 9.36 * fitnessScore * person.getCurrentWeight()"},{"lineNumber":262,"author":{"gitId":"yuqiaoluolong"},"content":"                    + 726 * person.getHeight() / 100;"},{"lineNumber":263,"author":{"gitId":"yuqiaoluolong"},"content":"            break;"},{"lineNumber":264,"author":{"gitId":"yuqiaoluolong"},"content":"        case OTHERS:"},{"lineNumber":265,"author":{"gitId":"yuqiaoluolong"},"content":"            requirement \u003d 508 - 8.22 * person.getAge() + 12.635 * fitnessScore * person.getCurrentWeight()"},{"lineNumber":266,"author":{"gitId":"yuqiaoluolong"},"content":"                    + 632.8 * person.getHeight() / 100;"},{"lineNumber":267,"author":{"gitId":"yuqiaoluolong"},"content":"            break;"},{"lineNumber":268,"author":{"gitId":"yuqiaoluolong"},"content":"        default:"},{"lineNumber":269,"author":{"gitId":"yuqiaoluolong"},"content":"            assert requirement !\u003d 0 : \"The requirement should not be 0 if the gender is \""},{"lineNumber":270,"author":{"gitId":"yuqiaoluolong"},"content":"                    + \"one of the three given cases.\";"},{"lineNumber":271,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"yuqiaoluolong"},"content":"        if (person.getCurrentWeight() \u003e person.getTargetWeight()) {"},{"lineNumber":273,"author":{"gitId":"yuqiaoluolong"},"content":"            recommendation \u003d (int) requirement - 300;"},{"lineNumber":274,"author":{"gitId":"yuqiaoluolong"},"content":"        } else {"},{"lineNumber":275,"author":{"gitId":"yuqiaoluolong"},"content":"            recommendation \u003d (int) requirement + 100;"},{"lineNumber":276,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"yuqiaoluolong"},"content":"        recommendation \u003d checkCaps(recommendation);"},{"lineNumber":278,"author":{"gitId":"yuqiaoluolong"},"content":"        return recommendation;"},{"lineNumber":279,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":281,"author":{"gitId":"yuqiaoluolong"},"content":"    private double getFitnessScore(Person person) {"},{"lineNumber":282,"author":{"gitId":"yuqiaoluolong"},"content":"        double fitnessScore \u003d 0;"},{"lineNumber":283,"author":{"gitId":"HengFuYuen"},"content":"        switch (person.getFitnessLevel()) {"},{"lineNumber":284,"author":{"gitId":"yuqiaoluolong"},"content":"        case NONE:"},{"lineNumber":285,"author":{"gitId":"yuqiaoluolong"},"content":"            fitnessScore \u003d 1;"},{"lineNumber":286,"author":{"gitId":"yuqiaoluolong"},"content":"            break;"},{"lineNumber":287,"author":{"gitId":"yuqiaoluolong"},"content":"        case LOW:"},{"lineNumber":288,"author":{"gitId":"yuqiaoluolong"},"content":"            if (person.getGender() \u003d\u003d Gender.MALE) {"},{"lineNumber":289,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.11;"},{"lineNumber":290,"author":{"gitId":"yuqiaoluolong"},"content":"            } else if (person.getGender() \u003d\u003d Gender.FEMALE) {"},{"lineNumber":291,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.12;"},{"lineNumber":292,"author":{"gitId":"yuqiaoluolong"},"content":"            } else {"},{"lineNumber":293,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.115;"},{"lineNumber":294,"author":{"gitId":"yuqiaoluolong"},"content":"            }"},{"lineNumber":295,"author":{"gitId":"yuqiaoluolong"},"content":"            break;"},{"lineNumber":296,"author":{"gitId":"yuqiaoluolong"},"content":"        case MEDIUM:"},{"lineNumber":297,"author":{"gitId":"yuqiaoluolong"},"content":"            if (person.getGender() \u003d\u003d Gender.MALE) {"},{"lineNumber":298,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.26;"},{"lineNumber":299,"author":{"gitId":"yuqiaoluolong"},"content":"            } else if (person.getGender() \u003d\u003d Gender.FEMALE) {"},{"lineNumber":300,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.27;"},{"lineNumber":301,"author":{"gitId":"yuqiaoluolong"},"content":"            } else {"},{"lineNumber":302,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.265;"},{"lineNumber":303,"author":{"gitId":"yuqiaoluolong"},"content":"            }"},{"lineNumber":304,"author":{"gitId":"yuqiaoluolong"},"content":"            break;"},{"lineNumber":305,"author":{"gitId":"yuqiaoluolong"},"content":"        case HIGH:"},{"lineNumber":306,"author":{"gitId":"yuqiaoluolong"},"content":"            if (person.getGender() \u003d\u003d Gender.MALE) {"},{"lineNumber":307,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.37;"},{"lineNumber":308,"author":{"gitId":"yuqiaoluolong"},"content":"            } else if (person.getGender() \u003d\u003d Gender.FEMALE) {"},{"lineNumber":309,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.36;"},{"lineNumber":310,"author":{"gitId":"yuqiaoluolong"},"content":"            } else {"},{"lineNumber":311,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.365;"},{"lineNumber":312,"author":{"gitId":"yuqiaoluolong"},"content":"            }"},{"lineNumber":313,"author":{"gitId":"yuqiaoluolong"},"content":"            break;"},{"lineNumber":314,"author":{"gitId":"yuqiaoluolong"},"content":"        case EXTREME:"},{"lineNumber":315,"author":{"gitId":"yuqiaoluolong"},"content":"            if (person.getGender() \u003d\u003d Gender.MALE) {"},{"lineNumber":316,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.48;"},{"lineNumber":317,"author":{"gitId":"yuqiaoluolong"},"content":"            } else if (person.getGender() \u003d\u003d Gender.FEMALE) {"},{"lineNumber":318,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.45;"},{"lineNumber":319,"author":{"gitId":"yuqiaoluolong"},"content":"            } else {"},{"lineNumber":320,"author":{"gitId":"yuqiaoluolong"},"content":"                fitnessScore \u003d 1.465;"},{"lineNumber":321,"author":{"gitId":"yuqiaoluolong"},"content":"            }"},{"lineNumber":322,"author":{"gitId":"yuqiaoluolong"},"content":"            break;"},{"lineNumber":323,"author":{"gitId":"yuqiaoluolong"},"content":"        default:"},{"lineNumber":324,"author":{"gitId":"yuqiaoluolong"},"content":"            assert fitnessScore !\u003d 0 : \"The activityScore should not be 0 if\""},{"lineNumber":325,"author":{"gitId":"yuqiaoluolong"},"content":"                    + \"the activityLevel are one of five given cases.\";"},{"lineNumber":326,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":327,"author":{"gitId":"yuqiaoluolong"},"content":"        return fitnessScore;"},{"lineNumber":328,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":330,"author":{"gitId":"yuqiaoluolong"},"content":"    private int checkCaps(int recommendation) {"},{"lineNumber":331,"author":{"gitId":"yuqiaoluolong"},"content":"        if (recommendation \u003c 1000) {"},{"lineNumber":332,"author":{"gitId":"yuqiaoluolong"},"content":"            recommendation \u003d 1000;"},{"lineNumber":333,"author":{"gitId":"yuqiaoluolong"},"content":"        } else if (recommendation \u003e 20000) {"},{"lineNumber":334,"author":{"gitId":"yuqiaoluolong"},"content":"            recommendation \u003d 20000;"},{"lineNumber":335,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"yuqiaoluolong"},"content":"        return recommendation;"},{"lineNumber":337,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"yuqiaoluolong"},"content":"}"}],"authorContributionMap":{"yuqiaoluolong":337,"HengFuYuen":1}},{"path":"src/main/java/seedu/dietbook/calculator/CalculatorData.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yuqiaoluolong"},"content":"package seedu.dietbook.calculator;"},{"lineNumber":2,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":3,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.list.FoodList;"},{"lineNumber":5,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":6,"author":{"gitId":"yuqiaoluolong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"yuqiaoluolong"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"yuqiaoluolong"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":10,"author":{"gitId":"yuqiaoluolong"},"content":"public class CalculatorData {"},{"lineNumber":11,"author":{"gitId":"yuqiaoluolong"},"content":"    FoodList list;"},{"lineNumber":12,"author":{"gitId":"yuqiaoluolong"},"content":"    List\u003cFood\u003e foods \u003d null;"},{"lineNumber":13,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":14,"author":{"gitId":"yuqiaoluolong"},"content":"    public CalculatorData() {"},{"lineNumber":15,"author":{"gitId":"yuqiaoluolong"},"content":"        this.list \u003d new FoodList();"},{"lineNumber":16,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":18,"author":{"gitId":"yuqiaoluolong"},"content":"    public CalculatorData(FoodList foodList) {"},{"lineNumber":19,"author":{"gitId":"yuqiaoluolong"},"content":"        this.list \u003d foodList;"},{"lineNumber":20,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":22,"author":{"gitId":"yuqiaoluolong"},"content":"    public void inputData(FoodList foodList) {"},{"lineNumber":23,"author":{"gitId":"yuqiaoluolong"},"content":"        this.list \u003d foodList;"},{"lineNumber":24,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":26,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalCalorie() {"},{"lineNumber":27,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoods();"},{"lineNumber":28,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e calories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":30,"author":{"gitId":"yuqiaoluolong"},"content":"            calories.add(food.getCalorie());"},{"lineNumber":31,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"yuqiaoluolong"},"content":"        return calories;"},{"lineNumber":33,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":35,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalCalorie(LocalDateTime startTime) {"},{"lineNumber":36,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoodsAfterDateTime(startTime);"},{"lineNumber":37,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e calories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":39,"author":{"gitId":"yuqiaoluolong"},"content":"            calories.add(food.getCalorie());"},{"lineNumber":40,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"yuqiaoluolong"},"content":"        return calories;"},{"lineNumber":42,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":44,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalCalorie(LocalDateTime startTime, LocalDateTime endTime) {"},{"lineNumber":45,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoodsInDateTimeRange(startTime, endTime);"},{"lineNumber":46,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e calories \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":48,"author":{"gitId":"yuqiaoluolong"},"content":"            calories.add(food.getCalorie());"},{"lineNumber":49,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"yuqiaoluolong"},"content":"        return calories;"},{"lineNumber":51,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":53,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalCarb() {"},{"lineNumber":54,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoods();"},{"lineNumber":55,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e carbs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":57,"author":{"gitId":"yuqiaoluolong"},"content":"            carbs.add(food.getCarbohydrate());"},{"lineNumber":58,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"yuqiaoluolong"},"content":"        return carbs;"},{"lineNumber":60,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":62,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalCarb(LocalDateTime startTime) {"},{"lineNumber":63,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoodsAfterDateTime(startTime);"},{"lineNumber":64,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e carbs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":66,"author":{"gitId":"yuqiaoluolong"},"content":"            carbs.add(food.getCalorie());"},{"lineNumber":67,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"yuqiaoluolong"},"content":"        return carbs;"},{"lineNumber":69,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":71,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalCarb(LocalDateTime startTime, LocalDateTime endTime) {"},{"lineNumber":72,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoodsInDateTimeRange(startTime, endTime);"},{"lineNumber":73,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e carbs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":75,"author":{"gitId":"yuqiaoluolong"},"content":"            carbs.add(food.getCarbohydrate());"},{"lineNumber":76,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"yuqiaoluolong"},"content":"        return carbs;"},{"lineNumber":78,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":80,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalProtein() {"},{"lineNumber":81,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoods();"},{"lineNumber":82,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e proteins \u003d new ArrayList\u003c\u003e();"},{"lineNumber":83,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":84,"author":{"gitId":"yuqiaoluolong"},"content":"            proteins.add(food.getProtein());"},{"lineNumber":85,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"yuqiaoluolong"},"content":"        return proteins;"},{"lineNumber":87,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":89,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalProtein(LocalDateTime startTime) {"},{"lineNumber":90,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoodsAfterDateTime(startTime);"},{"lineNumber":91,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e proteins \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":93,"author":{"gitId":"yuqiaoluolong"},"content":"            proteins.add(food.getProtein());"},{"lineNumber":94,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"yuqiaoluolong"},"content":"        return proteins;"},{"lineNumber":96,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":98,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalProtein(LocalDateTime startTime, LocalDateTime endTime) {"},{"lineNumber":99,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoodsInDateTimeRange(startTime, endTime);"},{"lineNumber":100,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e proteins \u003d new ArrayList\u003c\u003e();"},{"lineNumber":101,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":102,"author":{"gitId":"yuqiaoluolong"},"content":"            proteins.add(food.getProtein());"},{"lineNumber":103,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"yuqiaoluolong"},"content":"        return proteins;"},{"lineNumber":105,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":107,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalFat() {"},{"lineNumber":108,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoods();"},{"lineNumber":109,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e fats \u003d new ArrayList\u003c\u003e();"},{"lineNumber":110,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":111,"author":{"gitId":"yuqiaoluolong"},"content":"            fats.add(food.getFat());"},{"lineNumber":112,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"yuqiaoluolong"},"content":"        return fats;"},{"lineNumber":114,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":116,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalFat(LocalDateTime startTime) {"},{"lineNumber":117,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoodsAfterDateTime(startTime);"},{"lineNumber":118,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e fats \u003d new ArrayList\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":120,"author":{"gitId":"yuqiaoluolong"},"content":"            fats.add(food.getFat());"},{"lineNumber":121,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"yuqiaoluolong"},"content":"        return fats;"},{"lineNumber":123,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":125,"author":{"gitId":"yuqiaoluolong"},"content":"    public List\u003cInteger\u003e getTotalFat(LocalDateTime startTime, LocalDateTime endTime) {"},{"lineNumber":126,"author":{"gitId":"yuqiaoluolong"},"content":"        this.foods \u003d list.getPortionedFoodsInDateTimeRange(startTime, endTime);"},{"lineNumber":127,"author":{"gitId":"yuqiaoluolong"},"content":"        List\u003cInteger\u003e fats \u003d new ArrayList\u003c\u003e();"},{"lineNumber":128,"author":{"gitId":"yuqiaoluolong"},"content":"        for (Food food : foods) {"},{"lineNumber":129,"author":{"gitId":"yuqiaoluolong"},"content":"            fats.add(food.getFat());"},{"lineNumber":130,"author":{"gitId":"yuqiaoluolong"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"yuqiaoluolong"},"content":"        return fats;"},{"lineNumber":132,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"yuqiaoluolong"},"content":"}"}],"authorContributionMap":{"yuqiaoluolong":133}},{"path":"src/main/java/seedu/dietbook/checker/InputChecker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.checker;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"//@@author tikimonarch"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":" * InputChecker class of the program."},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":" * This class checks the validity of the user input and throws an exception if input is not as intended/expected."},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":" *"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":" * @author tikimonarch"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":" */"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"public class InputChecker {"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"     * The value limits are based on current limits observed in th world."},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"    public static final int AGE_CAP \u003d 150;"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"    public static final int FOOD_CAP \u003d 100000;"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"    public static final int HEIGHT_CAP \u003d 300;"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"    public static final int WEIGHT_CAP \u003d 500;"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"    public static final int TIME_FORMAT_LENGTH \u003d 16;"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] PARAM_FITNESS \u003d {\"1\",\"2\",\"3\",\"4\",\"5\"};"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] PARAM_ADD \u003d {\"n/\",\"x/\",\"k/\"};"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] PARAM_ADD_DATA \u003d {\"i/\",\"x/\"};"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] FULL_PARAM_ADD \u003d {\"n/\",\"x/\",\"k/\",\"c/\",\"p/\",\"f/\", \"i/\"};"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] PARAM_CALCULATE \u003d {\"fat\", \"carb\",\"protein\", \"calorie\", \"all\"};"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] SINGLE_COMMAND \u003d {\"clear\", \"data\",\"exit\", \"help\", \"recommend\", \"userinfo\"};"},{"lineNumber":30,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] PARAM_GENDER \u003d {\"M\",\"F\",\"O\"};"},{"lineNumber":31,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] PARAM_INFO \u003d {\"g/\",\"a/\",\"h/\",\"f/\",\"o/\",\"t/\",\"c/\"};"},{"lineNumber":32,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] PARAM_EDIT_INFO \u003d {\"n/\",\"g/\",\"a/\",\"h/\",\"f/\",\"o/\",\"t/\",\"c/\"};"},{"lineNumber":33,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":34,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input and command to check for any expected parameters after the command."},{"lineNumber":36,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":38,"author":{"gitId":"tikimonarch"},"content":"     * @param command command in user input."},{"lineNumber":39,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when at least one parameter is expected but not present."},{"lineNumber":40,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"tikimonarch"},"content":"    public static void checkEmpty(String userInput, String command) throws DietException {"},{"lineNumber":42,"author":{"gitId":"tikimonarch"},"content":"        if (userInput.split(command).length \u003c 2"},{"lineNumber":43,"author":{"gitId":"tikimonarch"},"content":"                || userInput.split(command)[1].trim().equals(\"\")) {"},{"lineNumber":44,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Error! Missing command parameters!\");"},{"lineNumber":45,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":48,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input and check if there are multiple slashes."},{"lineNumber":50,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":52,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when there are more than 1 slash at any one instance."},{"lineNumber":53,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"tikimonarch"},"content":"    public static void checkSlashes(String userInput) throws DietException {"},{"lineNumber":55,"author":{"gitId":"tikimonarch"},"content":"        String parameter \u003d Parser.getCommandParam(userInput);"},{"lineNumber":56,"author":{"gitId":"tikimonarch"},"content":"        long noOfOptions \u003d parameter.chars().filter(num -\u003e num \u003d\u003d \u0027/\u0027).count();"},{"lineNumber":57,"author":{"gitId":"tikimonarch"},"content":"        int slashTracker \u003d parameter.indexOf(\"/\");"},{"lineNumber":58,"author":{"gitId":"tikimonarch"},"content":"        for (int i \u003d 0; i \u003c noOfOptions; i++) {"},{"lineNumber":59,"author":{"gitId":"tikimonarch"},"content":"            if (parameter.charAt(slashTracker + 1) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":60,"author":{"gitId":"tikimonarch"},"content":"                throw new DietException(\"Multiple forward slashes should not be in the input!\");"},{"lineNumber":61,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"tikimonarch"},"content":"            slashTracker \u003d parameter.indexOf(\"/\", slashTracker + 1);"},{"lineNumber":63,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":66,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check for single word commands."},{"lineNumber":68,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"tikimonarch"},"content":"     * @param input user input."},{"lineNumber":70,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when a single word command has \"options\" attached."},{"lineNumber":71,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"tikimonarch"},"content":"    public static void checkSingleCommand(String input) throws DietException {"},{"lineNumber":73,"author":{"gitId":"tikimonarch"},"content":"        boolean isSingleCommand \u003d false;"},{"lineNumber":74,"author":{"gitId":"tikimonarch"},"content":"        for (String command: SINGLE_COMMAND) {"},{"lineNumber":75,"author":{"gitId":"tikimonarch"},"content":"            if (input.trim().equals(command)) {"},{"lineNumber":76,"author":{"gitId":"tikimonarch"},"content":"                isSingleCommand \u003d true;"},{"lineNumber":77,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"tikimonarch"},"content":"        if (!isSingleCommand) {"},{"lineNumber":80,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Error! This command has no option!\");"},{"lineNumber":81,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":84,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"tikimonarch"},"content":"     * Takes in processed user input to check for options specified with an empty field."},{"lineNumber":86,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"tikimonarch"},"content":"     * @param input user input."},{"lineNumber":88,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when an option is specified but its field is empty."},{"lineNumber":89,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"tikimonarch"},"content":"    public static void checkEmptyOption(String[] input, String param) throws DietException {"},{"lineNumber":91,"author":{"gitId":"tikimonarch"},"content":"        if (input.length \u003e 1) {"},{"lineNumber":92,"author":{"gitId":"tikimonarch"},"content":"            if ((input[1].trim().length() \u003e 1 \u0026\u0026 input[1].trim().charAt(1) \u003d\u003d \u0027/\u0027) || input[1].trim().equals(\"\")) {"},{"lineNumber":93,"author":{"gitId":"tikimonarch"},"content":"                throw new DietException(\"Error! Option \u0027\" + param + \"\u0027 specified with empty field!\");"},{"lineNumber":94,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"tikimonarch"},"content":"        } else {"},{"lineNumber":96,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Error! Option specified with empty field!\");"},{"lineNumber":97,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":100,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if at least 1 option is present."},{"lineNumber":102,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"tikimonarch"},"content":"     * @param input user input."},{"lineNumber":104,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when an option is not present."},{"lineNumber":105,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"tikimonarch"},"content":"    public static void checkForOption(String input) throws DietException {"},{"lineNumber":107,"author":{"gitId":"tikimonarch"},"content":"        String parameter \u003d Parser.getCommandParam(input);"},{"lineNumber":108,"author":{"gitId":"tikimonarch"},"content":"        boolean isValidOption \u003d false;"},{"lineNumber":109,"author":{"gitId":"tikimonarch"},"content":"        if (parameter.contains(\"/\")) {"},{"lineNumber":110,"author":{"gitId":"tikimonarch"},"content":"            String checker \u003d parameter.substring(parameter.indexOf(\"/\") - 1,parameter.indexOf(\"/\") + 1);"},{"lineNumber":111,"author":{"gitId":"tikimonarch"},"content":"            for (String param: PARAM_EDIT_INFO) {"},{"lineNumber":112,"author":{"gitId":"tikimonarch"},"content":"                if (checker.equals(param)) {"},{"lineNumber":113,"author":{"gitId":"tikimonarch"},"content":"                    isValidOption \u003d true;"},{"lineNumber":114,"author":{"gitId":"tikimonarch"},"content":"                }"},{"lineNumber":115,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"tikimonarch"},"content":"            if (!isValidOption) {"},{"lineNumber":117,"author":{"gitId":"tikimonarch"},"content":"                throw new DietException(\"Error! No such option \u0027\" + checker + \"\u0027!\");"},{"lineNumber":118,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"tikimonarch"},"content":"        } else {"},{"lineNumber":120,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Error! No option present!\");"},{"lineNumber":121,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":124,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if all option specified are at least one of the expected option."},{"lineNumber":126,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"tikimonarch"},"content":"     * @param input user input."},{"lineNumber":128,"author":{"gitId":"tikimonarch"},"content":"     * @param paramList the expected list of options."},{"lineNumber":129,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when an option is not of the expected."},{"lineNumber":130,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"tikimonarch"},"content":"    public static void checkValidOptions(String input, String[] paramList) throws DietException {"},{"lineNumber":132,"author":{"gitId":"tikimonarch"},"content":"        String parameter \u003d Parser.getCommandParam(input);"},{"lineNumber":133,"author":{"gitId":"tikimonarch"},"content":"        long noOfOptions \u003d parameter.chars().filter(num -\u003e num \u003d\u003d \u0027/\u0027).count();"},{"lineNumber":134,"author":{"gitId":"tikimonarch"},"content":"        int slashTracker \u003d parameter.indexOf(\"/\");"},{"lineNumber":135,"author":{"gitId":"tikimonarch"},"content":"        boolean isValidOption;"},{"lineNumber":136,"author":{"gitId":"tikimonarch"},"content":"        for (int i \u003d 0; i \u003c noOfOptions; i++) {"},{"lineNumber":137,"author":{"gitId":"tikimonarch"},"content":"            isValidOption \u003d false;"},{"lineNumber":138,"author":{"gitId":"tikimonarch"},"content":"            String checker \u003d parameter.substring(slashTracker - 1, slashTracker + 1);"},{"lineNumber":139,"author":{"gitId":"tikimonarch"},"content":"            for (String param: paramList) {"},{"lineNumber":140,"author":{"gitId":"tikimonarch"},"content":"                if (checker.equals(param)) {"},{"lineNumber":141,"author":{"gitId":"tikimonarch"},"content":"                    isValidOption \u003d true;"},{"lineNumber":142,"author":{"gitId":"tikimonarch"},"content":"                }"},{"lineNumber":143,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":144,"author":{"gitId":"tikimonarch"},"content":"            if (!isValidOption) {"},{"lineNumber":145,"author":{"gitId":"tikimonarch"},"content":"                throw new DietException(\"Error! No such option \u0027\" + checker + \"\u0027!\");"},{"lineNumber":146,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"tikimonarch"},"content":"            slashTracker \u003d parameter.indexOf(\"/\", slashTracker + 1);"},{"lineNumber":148,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":151,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"tikimonarch"},"content":"     * Takes in the parameter in which number is expected and checks for validity."},{"lineNumber":153,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"tikimonarch"},"content":"     * @param number number to be checked."},{"lineNumber":155,"author":{"gitId":"tikimonarch"},"content":"     * @param param the parameter of the number being checked."},{"lineNumber":156,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when a number is not valid."},{"lineNumber":157,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"tikimonarch"},"content":"    public static void checkValidNumber(String number, String param) throws DietException {"},{"lineNumber":159,"author":{"gitId":"tikimonarch"},"content":"        try {"},{"lineNumber":160,"author":{"gitId":"tikimonarch"},"content":"            int check \u003d Integer.parseInt(number);"},{"lineNumber":161,"author":{"gitId":"tikimonarch"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":162,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Invalid value for option \u0027\" + param + \"\u0027!\");"},{"lineNumber":163,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":166,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check for repeated options."},{"lineNumber":168,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"tikimonarch"},"content":"     * @param command command part of user input."},{"lineNumber":170,"author":{"gitId":"tikimonarch"},"content":"     * @param options option part of user input command."},{"lineNumber":171,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when there are options repeatedly specified."},{"lineNumber":172,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"tikimonarch"},"content":"    public static void checkRepeatedOption(String command, String options) throws DietException {"},{"lineNumber":174,"author":{"gitId":"tikimonarch"},"content":"        String[] paramList \u003d FULL_PARAM_ADD;"},{"lineNumber":175,"author":{"gitId":"tikimonarch"},"content":"        if (command.equals(\"info\")) {"},{"lineNumber":176,"author":{"gitId":"tikimonarch"},"content":"            paramList \u003d PARAM_INFO;"},{"lineNumber":177,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"tikimonarch"},"content":"        for (String param: paramList) {"},{"lineNumber":179,"author":{"gitId":"tikimonarch"},"content":"            int countOccurrence \u003d options.length() - options.replace(param, \"\").length();"},{"lineNumber":180,"author":{"gitId":"tikimonarch"},"content":"            if (countOccurrence \u003e 2) {"},{"lineNumber":181,"author":{"gitId":"tikimonarch"},"content":"                throw new DietException(\"There are repeated options!\");"},{"lineNumber":182,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":186,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if date format is present."},{"lineNumber":188,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":190,"author":{"gitId":"tikimonarch"},"content":"     * @return boolean whereby true if date present, false otherwise."},{"lineNumber":191,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"tikimonarch"},"content":"    public static boolean checkDate(String userInput) throws DietException {"},{"lineNumber":193,"author":{"gitId":"tikimonarch"},"content":"        String[] processedInput \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":194,"author":{"gitId":"tikimonarch"},"content":"        try {"},{"lineNumber":195,"author":{"gitId":"tikimonarch"},"content":"            String time \u003d processedInput[processedInput.length - 1];"},{"lineNumber":196,"author":{"gitId":"tikimonarch"},"content":"            LocalDateTime.parse(time);"},{"lineNumber":197,"author":{"gitId":"tikimonarch"},"content":"            if (time.length() !\u003d TIME_FORMAT_LENGTH) {"},{"lineNumber":198,"author":{"gitId":"tikimonarch"},"content":"                throw new DietException(\"Wrong date time format!\");"},{"lineNumber":199,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":200,"author":{"gitId":"tikimonarch"},"content":"            return true;"},{"lineNumber":201,"author":{"gitId":"tikimonarch"},"content":"        } catch (DietException e) {"},{"lineNumber":202,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(e.getMessage());"},{"lineNumber":203,"author":{"gitId":"tikimonarch"},"content":"        } catch (Exception e) {"},{"lineNumber":204,"author":{"gitId":"tikimonarch"},"content":"            return false;"},{"lineNumber":205,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":208,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"tikimonarch"},"content":"     * Takes in string format of date time to check if date format is correct."},{"lineNumber":210,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":211,"author":{"gitId":"tikimonarch"},"content":"     * @param dateString string form of a potential date time."},{"lineNumber":212,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException if date format is wrong."},{"lineNumber":213,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"tikimonarch"},"content":"    public static void checkDateValidity(String dateString) throws DietException {"},{"lineNumber":215,"author":{"gitId":"tikimonarch"},"content":"        try {"},{"lineNumber":216,"author":{"gitId":"tikimonarch"},"content":"            LocalDateTime.parse(dateString);"},{"lineNumber":217,"author":{"gitId":"tikimonarch"},"content":"        } catch (Exception e) {"},{"lineNumber":218,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Wrong date time format!\");"},{"lineNumber":219,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":222,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"tikimonarch"},"content":"     * Takes in a date time object and see if it is a future date."},{"lineNumber":224,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"tikimonarch"},"content":"     * @param time a date time class object."},{"lineNumber":226,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException if date is in the future."},{"lineNumber":227,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"tikimonarch"},"content":"    public static void checkFutureDate(LocalDateTime time) throws DietException {"},{"lineNumber":229,"author":{"gitId":"tikimonarch"},"content":"        if (time.isAfter(LocalDateTime.now())) {"},{"lineNumber":230,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"The date cannot be in the future!\");"},{"lineNumber":231,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":232,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":234,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":235,"author":{"gitId":"tikimonarch"},"content":"     * Takes in the start and end date time objects and see if the end time is earlier than start time."},{"lineNumber":236,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":237,"author":{"gitId":"tikimonarch"},"content":"     * @param startTime a date time class object, the start time."},{"lineNumber":238,"author":{"gitId":"tikimonarch"},"content":"     * @param endTime a date time class object, the end time."},{"lineNumber":239,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException if end date time is before the start date time."},{"lineNumber":240,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":241,"author":{"gitId":"tikimonarch"},"content":"    public static void checkEndDate(LocalDateTime startTime, LocalDateTime endTime) throws DietException {"},{"lineNumber":242,"author":{"gitId":"tikimonarch"},"content":"        if (startTime.isAfter(endTime)) {"},{"lineNumber":243,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"The start date, time cannot be later than the end date, time!\");"},{"lineNumber":244,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":247,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":248,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if the expected number and type of parameter for the add command is present."},{"lineNumber":249,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":250,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":251,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when expected parameters are missing."},{"lineNumber":252,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":253,"author":{"gitId":"tikimonarch"},"content":"    public static void checkAddParam(String userInput) throws DietException {"},{"lineNumber":254,"author":{"gitId":"tikimonarch"},"content":"        String[] paramList \u003d PARAM_ADD;"},{"lineNumber":255,"author":{"gitId":"tikimonarch"},"content":"        if (userInput.contains(\"i/\")) {"},{"lineNumber":256,"author":{"gitId":"tikimonarch"},"content":"            paramList \u003d PARAM_ADD_DATA;"},{"lineNumber":257,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"tikimonarch"},"content":"        for (String param: paramList) {"},{"lineNumber":259,"author":{"gitId":"tikimonarch"},"content":"            if (!userInput.contains(param)) {"},{"lineNumber":260,"author":{"gitId":"tikimonarch"},"content":"                throw new DietException(\"Missing or incorrect add statement\");"},{"lineNumber":261,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":262,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":263,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":264,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":265,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":266,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if the format of the delete is correct."},{"lineNumber":267,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":268,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":269,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when format of delete command is wrong."},{"lineNumber":270,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":271,"author":{"gitId":"tikimonarch"},"content":"    public static void checkDeleteCommand(String userInput) throws DietException {"},{"lineNumber":272,"author":{"gitId":"tikimonarch"},"content":"        String[] processedInput \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":273,"author":{"gitId":"tikimonarch"},"content":"        if (processedInput.length \u003e 2) {"},{"lineNumber":274,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Wrong delete command format!\");"},{"lineNumber":275,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":276,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":278,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":279,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if the expected number of parameter is present for the calculate command."},{"lineNumber":280,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":281,"author":{"gitId":"tikimonarch"},"content":"     * @param param parameter part of user input."},{"lineNumber":282,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when number of parameter is not as expected."},{"lineNumber":283,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":284,"author":{"gitId":"tikimonarch"},"content":"    public static void checkCalculateParam(String[] param) throws DietException {"},{"lineNumber":285,"author":{"gitId":"tikimonarch"},"content":"        if (param.length \u003e 3) {"},{"lineNumber":286,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Incorrect calculate command format!\");"},{"lineNumber":287,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":288,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":289,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":290,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":291,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if the expected number and type of parameter for the info command is present."},{"lineNumber":292,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":293,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":294,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when expected parameters are missing."},{"lineNumber":295,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":296,"author":{"gitId":"tikimonarch"},"content":"    public static void checkInfoParam(String userInput) throws DietException {"},{"lineNumber":297,"author":{"gitId":"tikimonarch"},"content":"        for (String param: PARAM_INFO) {"},{"lineNumber":298,"author":{"gitId":"tikimonarch"},"content":"            if (!userInput.contains(param)) {"},{"lineNumber":299,"author":{"gitId":"tikimonarch"},"content":"                throw new DietException(\"Missing or incorrect info statement\");"},{"lineNumber":300,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":301,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":302,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":304,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":305,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if the expected number of parameter is present for the list command."},{"lineNumber":306,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":307,"author":{"gitId":"tikimonarch"},"content":"     * @param param parameter part of user input."},{"lineNumber":308,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when number of parameter is not as expected."},{"lineNumber":309,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":310,"author":{"gitId":"tikimonarch"},"content":"    public static void checkList(String[] param) throws DietException {"},{"lineNumber":311,"author":{"gitId":"tikimonarch"},"content":"        if (param.length \u003e 3) {"},{"lineNumber":312,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Incorrect list command format!\");"},{"lineNumber":313,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":314,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":316,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":317,"author":{"gitId":"tikimonarch"},"content":"     * Takes in an integer from food to check if the value is within the logical limit."},{"lineNumber":318,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":319,"author":{"gitId":"tikimonarch"},"content":"     * @param foodValue integer value of attributes."},{"lineNumber":320,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when value is not within the limit."},{"lineNumber":321,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":322,"author":{"gitId":"tikimonarch"},"content":"    public static void checkFoodLimit(int foodValue) throws DietException {"},{"lineNumber":323,"author":{"gitId":"tikimonarch"},"content":"        if (foodValue \u003c 0) {"},{"lineNumber":324,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Portion size, carb, protein or fat value cannot be less than 0!\");"},{"lineNumber":325,"author":{"gitId":"tikimonarch"},"content":"        } else if (foodValue \u003e FOOD_CAP) {"},{"lineNumber":326,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Portion size, carb, protein or fat value cannot be more than 100,000!\");"},{"lineNumber":327,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":330,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":331,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if the nutrient type is of the expected input."},{"lineNumber":332,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":333,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":334,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when it is not one of the expected nutrient type."},{"lineNumber":335,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":336,"author":{"gitId":"tikimonarch"},"content":"    public static void checkNutrientType(String userInput) throws DietException {"},{"lineNumber":337,"author":{"gitId":"tikimonarch"},"content":"        boolean checkContain \u003d false;"},{"lineNumber":338,"author":{"gitId":"tikimonarch"},"content":"        for (String param: PARAM_CALCULATE) {"},{"lineNumber":339,"author":{"gitId":"tikimonarch"},"content":"            if (userInput.contains(param)) {"},{"lineNumber":340,"author":{"gitId":"tikimonarch"},"content":"                checkContain \u003d true;"},{"lineNumber":341,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":342,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":343,"author":{"gitId":"tikimonarch"},"content":"        if (!checkContain) {"},{"lineNumber":344,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Incorrect nutrient type!\");"},{"lineNumber":345,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":346,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":347,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":348,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":349,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if the fitness level is of the expected input."},{"lineNumber":350,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":351,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":352,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when it is not one of the expected fitness level."},{"lineNumber":353,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":354,"author":{"gitId":"tikimonarch"},"content":"    public static void checkFitness(String userInput) throws DietException {"},{"lineNumber":355,"author":{"gitId":"tikimonarch"},"content":"        boolean checkContain \u003d false;"},{"lineNumber":356,"author":{"gitId":"tikimonarch"},"content":"        for (String param: PARAM_FITNESS) {"},{"lineNumber":357,"author":{"gitId":"tikimonarch"},"content":"            if (userInput.equals(param)) {"},{"lineNumber":358,"author":{"gitId":"tikimonarch"},"content":"                checkContain \u003d true;"},{"lineNumber":359,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":360,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":361,"author":{"gitId":"tikimonarch"},"content":"        if (!checkContain) {"},{"lineNumber":362,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"No such fitness level!\");"},{"lineNumber":363,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":364,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":366,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":367,"author":{"gitId":"tikimonarch"},"content":"     * Takes in user input to check if the gender is of the expected input."},{"lineNumber":368,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":369,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":370,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when it is not one of the expected gender input."},{"lineNumber":371,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":372,"author":{"gitId":"tikimonarch"},"content":"    public static void checkGender(String userInput) throws DietException {"},{"lineNumber":373,"author":{"gitId":"tikimonarch"},"content":"        boolean checkContain \u003d false;"},{"lineNumber":374,"author":{"gitId":"tikimonarch"},"content":"        for (String param: PARAM_GENDER) {"},{"lineNumber":375,"author":{"gitId":"tikimonarch"},"content":"            if (userInput.contains(param)) {"},{"lineNumber":376,"author":{"gitId":"tikimonarch"},"content":"                checkContain \u003d true;"},{"lineNumber":377,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":378,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":379,"author":{"gitId":"tikimonarch"},"content":"        if (!checkContain) {"},{"lineNumber":380,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please key in the specified gender characters.\");"},{"lineNumber":381,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":382,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":383,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":384,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":385,"author":{"gitId":"tikimonarch"},"content":"     * Takes in an integer age to check if the value is within the logical limit."},{"lineNumber":386,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":387,"author":{"gitId":"tikimonarch"},"content":"     * @param age integer value of age."},{"lineNumber":388,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when value is not within the limit."},{"lineNumber":389,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":390,"author":{"gitId":"tikimonarch"},"content":"    public static void checkAgeLimit(int age) throws DietException {"},{"lineNumber":391,"author":{"gitId":"tikimonarch"},"content":"        if (age \u003c 0) {"},{"lineNumber":392,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Age value cannot be less than 0!\");"},{"lineNumber":393,"author":{"gitId":"tikimonarch"},"content":"        } else if (age \u003e AGE_CAP) {"},{"lineNumber":394,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Age value cannot be more than \" + AGE_CAP + \"!\");"},{"lineNumber":395,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":396,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":397,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":398,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":399,"author":{"gitId":"tikimonarch"},"content":"     * Takes in an integer height to check if the value is within the logical limit."},{"lineNumber":400,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":401,"author":{"gitId":"tikimonarch"},"content":"     * @param height integer value of height."},{"lineNumber":402,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when value is not within the limit."},{"lineNumber":403,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":404,"author":{"gitId":"tikimonarch"},"content":"    public static void checkHeightLimit(int height) throws DietException {"},{"lineNumber":405,"author":{"gitId":"tikimonarch"},"content":"        if (height \u003c 1) {"},{"lineNumber":406,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Height value cannot be less than 1\");"},{"lineNumber":407,"author":{"gitId":"tikimonarch"},"content":"        } else if (height \u003e HEIGHT_CAP) {"},{"lineNumber":408,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Height value cannot be more than \" + HEIGHT_CAP + \"!\");"},{"lineNumber":409,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":410,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":411,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":412,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":413,"author":{"gitId":"tikimonarch"},"content":"     * Takes in an integer weight to check if the value is within the logical limit."},{"lineNumber":414,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":415,"author":{"gitId":"tikimonarch"},"content":"     * @param weight integer value of weight."},{"lineNumber":416,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when value is not within the limit."},{"lineNumber":417,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":418,"author":{"gitId":"tikimonarch"},"content":"    public static void checkWeightLimit(int weight) throws DietException {"},{"lineNumber":419,"author":{"gitId":"tikimonarch"},"content":"        if (weight \u003c 1) {"},{"lineNumber":420,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Weight value cannot be less than 1!\");"},{"lineNumber":421,"author":{"gitId":"tikimonarch"},"content":"        } else if (weight \u003e WEIGHT_CAP) {"},{"lineNumber":422,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Weight value cannot be more than \" + WEIGHT_CAP + \"!\");"},{"lineNumber":423,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":424,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":425,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":426,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"tikimonarch":426}},{"path":"src/main/java/seedu/dietbook/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":5,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"public class AddCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"    String input;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"    public AddCommand(String input) {"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"        this.input \u003d input;"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkSlashes(this.input);"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"        ui.printNewFood(Parser.getProcessedAdd(this.input, manager.getFoodList(), manager.getDataBase()));"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"        manager.save();"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":26}},{"path":"src/main/java/seedu/dietbook/command/CalculateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"public class CalculateCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"    int calorie;"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"    int carb;"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"    int protein;"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"    int fat;"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"    String param;"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"    public CalculateCommand(int calorie, int carb, int protein, int fat, String param) {"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"        this.calorie \u003d calorie;"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"        this.carb \u003d carb;"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"        this.protein \u003d protein;"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"        this.fat \u003d fat;"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        this.param \u003d param;"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"        LocalDateTime startTime \u003d LocalDateTime.now();"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"        LocalDateTime endTime \u003d LocalDateTime.now();"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":30,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":31,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":32,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":33,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"tikimonarch"},"content":"        manager.setCalculator();"},{"lineNumber":35,"author":{"gitId":"tikimonarch"},"content":"        String[] processedParam \u003d this.param.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkCalculateParam(processedParam);"},{"lineNumber":37,"author":{"gitId":"tikimonarch"},"content":"        if (processedParam.length \u003d\u003d 2) {"},{"lineNumber":38,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkDateValidity(processedParam[1]);"},{"lineNumber":39,"author":{"gitId":"tikimonarch"},"content":"            startTime \u003d LocalDateTime.parse(processedParam[1]);"},{"lineNumber":40,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkFutureDate(startTime);"},{"lineNumber":41,"author":{"gitId":"tikimonarch"},"content":"            this.calorie \u003d manager.getCalculator().calculateCalorie(startTime);"},{"lineNumber":42,"author":{"gitId":"tikimonarch"},"content":"            this.carb \u003d manager.getCalculator().calculateCarb(startTime);"},{"lineNumber":43,"author":{"gitId":"tikimonarch"},"content":"            this.protein \u003d manager.getCalculator().calculateProtein(startTime);"},{"lineNumber":44,"author":{"gitId":"tikimonarch"},"content":"            this.fat \u003d manager.getCalculator().calculateFat(startTime);"},{"lineNumber":45,"author":{"gitId":"tikimonarch"},"content":"        } else if (processedParam.length \u003d\u003d 3) {"},{"lineNumber":46,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkDateValidity(processedParam[1]);"},{"lineNumber":47,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkDateValidity(processedParam[2]);"},{"lineNumber":48,"author":{"gitId":"tikimonarch"},"content":"            startTime \u003d LocalDateTime.parse(processedParam[1]);"},{"lineNumber":49,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkFutureDate(startTime);"},{"lineNumber":50,"author":{"gitId":"tikimonarch"},"content":"            endTime \u003d LocalDateTime.parse(processedParam[2]);"},{"lineNumber":51,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkEndDate(startTime, endTime);"},{"lineNumber":52,"author":{"gitId":"tikimonarch"},"content":"            this.calorie \u003d manager.getCalculator().calculateCalorie(startTime, endTime);"},{"lineNumber":53,"author":{"gitId":"tikimonarch"},"content":"            this.carb \u003d manager.getCalculator().calculateCarb(startTime, endTime);"},{"lineNumber":54,"author":{"gitId":"tikimonarch"},"content":"            this.protein \u003d manager.getCalculator().calculateProtein(startTime, endTime);"},{"lineNumber":55,"author":{"gitId":"tikimonarch"},"content":"            this.fat \u003d manager.getCalculator().calculateFat(startTime, endTime);"},{"lineNumber":56,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":58,"author":{"gitId":"tikimonarch"},"content":"        switch (processedParam[0]) {"},{"lineNumber":59,"author":{"gitId":"tikimonarch"},"content":"        case \"all\":"},{"lineNumber":60,"author":{"gitId":"tikimonarch"},"content":"            if (processedParam.length \u003d\u003d 1) {"},{"lineNumber":61,"author":{"gitId":"tikimonarch"},"content":"                ui.printAllIntake(this.calorie, this.carb, this.protein, this.fat);"},{"lineNumber":62,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 2) {"},{"lineNumber":63,"author":{"gitId":"tikimonarch"},"content":"                ui.printAllIntake(this.calorie, this.carb, this.protein, this.fat, startTime);"},{"lineNumber":64,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 3) {"},{"lineNumber":65,"author":{"gitId":"tikimonarch"},"content":"                ui.printAllIntake(this.calorie, this.carb, this.protein, this.fat, startTime, endTime);"},{"lineNumber":66,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"tikimonarch"},"content":"            break;"},{"lineNumber":68,"author":{"gitId":"tikimonarch"},"content":"        case \"calorie\":"},{"lineNumber":69,"author":{"gitId":"tikimonarch"},"content":"            if (processedParam.length \u003d\u003d 1) {"},{"lineNumber":70,"author":{"gitId":"tikimonarch"},"content":"                ui.printCalorieIntake(this.calorie);"},{"lineNumber":71,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 2) {"},{"lineNumber":72,"author":{"gitId":"tikimonarch"},"content":"                ui.printCalorieIntake(this.calorie, startTime);"},{"lineNumber":73,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 3) {"},{"lineNumber":74,"author":{"gitId":"yuqiaoluolong"},"content":"                calorie \u003d manager.getCalculator().calculateCalorie(startTime, endTime);"},{"lineNumber":75,"author":{"gitId":"tikimonarch"},"content":"                ui.printCalorieIntake(this.calorie, startTime, endTime);"},{"lineNumber":76,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"tikimonarch"},"content":"            break;"},{"lineNumber":78,"author":{"gitId":"tikimonarch"},"content":"        case \"carb\":"},{"lineNumber":79,"author":{"gitId":"tikimonarch"},"content":"            if (processedParam.length \u003d\u003d 1) {"},{"lineNumber":80,"author":{"gitId":"tikimonarch"},"content":"                ui.printCarbIntake(this.carb);"},{"lineNumber":81,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 2) {"},{"lineNumber":82,"author":{"gitId":"tikimonarch"},"content":"                ui.printCarbIntake(this.carb, startTime);"},{"lineNumber":83,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 3) {"},{"lineNumber":84,"author":{"gitId":"tikimonarch"},"content":"                ui.printCarbIntake(this.carb, startTime, endTime);"},{"lineNumber":85,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"tikimonarch"},"content":"            break;"},{"lineNumber":87,"author":{"gitId":"tikimonarch"},"content":"        case \"protein\":"},{"lineNumber":88,"author":{"gitId":"tikimonarch"},"content":"            if (processedParam.length \u003d\u003d 1) {"},{"lineNumber":89,"author":{"gitId":"tikimonarch"},"content":"                ui.printProteinIntake(this.protein);"},{"lineNumber":90,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 2) {"},{"lineNumber":91,"author":{"gitId":"tikimonarch"},"content":"                ui.printProteinIntake(this.protein, startTime);"},{"lineNumber":92,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 3) {"},{"lineNumber":93,"author":{"gitId":"tikimonarch"},"content":"                ui.printProteinIntake(this.protein, startTime, endTime);"},{"lineNumber":94,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"tikimonarch"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"tikimonarch"},"content":"        case \"fat\":"},{"lineNumber":97,"author":{"gitId":"tikimonarch"},"content":"            if (processedParam.length \u003d\u003d 1) {"},{"lineNumber":98,"author":{"gitId":"tikimonarch"},"content":"                ui.printFatIntake(this.fat);"},{"lineNumber":99,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 2) {"},{"lineNumber":100,"author":{"gitId":"tikimonarch"},"content":"                ui.printFatIntake(this.fat, startTime);"},{"lineNumber":101,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedParam.length \u003d\u003d 3) {"},{"lineNumber":102,"author":{"gitId":"tikimonarch"},"content":"                ui.printFatIntake(this.fat, startTime, endTime);"},{"lineNumber":103,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"tikimonarch"},"content":"            break;"},{"lineNumber":105,"author":{"gitId":"tikimonarch"},"content":"        default:"},{"lineNumber":106,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"No such nutrient type!\");"},{"lineNumber":107,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"yuqiaoluolong":2,"HengFuYuen":1,"tikimonarch":106}},{"path":"src/main/java/seedu/dietbook/command/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"public class ClearCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"    String input;"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"    public ClearCommand(String input) {"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"        this.input \u003d input;"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkSingleCommand(this.input);"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        ui.printClearFoodListMessage();"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"        manager.getFoodList().clear();"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"        manager.save();"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":26}},{"path":"src/main/java/seedu/dietbook/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":" * The command parent class for all commands."},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":" * All commands have an execute method that takes in objects \u003ccode\u003eManager\u003c/code\u003e and \u003ccode\u003eUi\u003c/code\u003e."},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":" * Each child command class is self-explanatory."},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":" *"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":" * @author tikimonarch"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"public abstract class Command {"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    public abstract void execute(Manager manager, Ui ui) throws DietException;"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":16}},{"path":"src/main/java/seedu/dietbook/command/DataCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"public class DataCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"    String input;"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"    public DataCommand(String input) {"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"        this.input \u003d input;"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkSingleCommand(this.input);"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        ui.printDatabase(manager.getDataBase().getFoodListString());"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":24}},{"path":"src/main/java/seedu/dietbook/command/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":5,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"    int index;"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"    String input;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"    public DeleteCommand(String input, int index) {"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"        this.input \u003d input;"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"        this.index \u003d index;"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkDeleteCommand(this.input);"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"            ui.printDeletedFood(manager.getFoodList().delete(this.index));"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"            manager.setCalculator();"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"No such index!\");"},{"lineNumber":30,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"tikimonarch"},"content":"        manager.save();"},{"lineNumber":32,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":32}},{"path":"src/main/java/seedu/dietbook/command/EditInfoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"public class EditInfoCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"    String userInput;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"    public EditInfoCommand(String userInput) {"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkSlashes(this.userInput);"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"        Parser.executeEditInfo(this.userInput, manager);"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"        ui.printEditedPersonInfo(manager.getPerson().toString());"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"        manager.save();"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":27}},{"path":"src/main/java/seedu/dietbook/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.DietBook;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":5,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"    String input;"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"    public ExitCommand(String input) {"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"        this.input \u003d input;"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"        manager.save();"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"        ui.dataSuccessfullySavedMessage();"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkSingleCommand(this.input);"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"        ui.printExitMessage();"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"        DietBook.isExit \u003d true;"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":29}},{"path":"src/main/java/seedu/dietbook/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"//@@author tikimonarch"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"    private String input;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"    public HelpCommand(String input) {"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"        this.input \u003d input;"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkSingleCommand(this.input);"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"        ui.printHelpCommandMessage();"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":25}},{"path":"src/main/java/seedu/dietbook/command/InfoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"//@@author tikimonarch"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"public class InfoCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"    String userInput;"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"    public InfoCommand(String userInput) {"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount !\u003d 2) {"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Basic information has already been input!\");"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkSlashes(this.userInput);"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"        Parser.executeProcessedInfo(this.userInput, manager);"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"        Manager.commandCount++;"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"        ui.printInitialisationCompleteMessage();"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":28}},{"path":"src/main/java/seedu/dietbook/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.list.FoodList;"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"    String userInput;"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"    public ListCommand(String userInput) {"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"        this.userInput \u003d userInput;"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"        LocalDateTime startTime;"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"        LocalDateTime endTime;"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        FoodList foodList \u003d manager.getFoodList();"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"        String[] processedInput \u003d this.userInput.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkList(processedInput);"},{"lineNumber":30,"author":{"gitId":"tikimonarch"},"content":"        if (processedInput.length \u003d\u003d 1) {"},{"lineNumber":31,"author":{"gitId":"tikimonarch"},"content":"            ui.printFoodList(manager.getFoodList().toDatedString());"},{"lineNumber":32,"author":{"gitId":"tikimonarch"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"tikimonarch"},"content":"            if (processedInput.length \u003d\u003d 2) {"},{"lineNumber":34,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkDateValidity(processedInput[1]);"},{"lineNumber":35,"author":{"gitId":"tikimonarch"},"content":"                startTime \u003d LocalDateTime.parse(processedInput[1]);"},{"lineNumber":36,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkFutureDate(startTime);"},{"lineNumber":37,"author":{"gitId":"tikimonarch"},"content":"                ui.printFoodList(foodList.getAfterDateTimeToString(startTime), startTime);"},{"lineNumber":38,"author":{"gitId":"tikimonarch"},"content":"            } else if (processedInput.length \u003d\u003d 3) {"},{"lineNumber":39,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkDateValidity(processedInput[1]);"},{"lineNumber":40,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkDateValidity(processedInput[2]);"},{"lineNumber":41,"author":{"gitId":"tikimonarch"},"content":"                startTime \u003d LocalDateTime.parse(processedInput[1]);"},{"lineNumber":42,"author":{"gitId":"tikimonarch"},"content":"                endTime \u003d LocalDateTime.parse(processedInput[2]);"},{"lineNumber":43,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkFutureDate(startTime);"},{"lineNumber":44,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkEndDate(startTime, endTime);"},{"lineNumber":45,"author":{"gitId":"tikimonarch"},"content":"                ui.printFoodList(foodList.getInDateTimeRangeToString(startTime,endTime), startTime, endTime);"},{"lineNumber":46,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":48}},{"path":"src/main/java/seedu/dietbook/command/NameCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"public class NameCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"    String name;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"    public NameCommand(String name) {"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"        this.name \u003d name;"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount !\u003d 1) {"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Name has already been entered!\");"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"        Manager.commandCount++;"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        manager.setName(this.name);"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        ui.printAskForUserInfoMessage(manager.getName());"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":24}},{"path":"src/main/java/seedu/dietbook/command/RecommendCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.person.Person;"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"public class RecommendCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"    private Person person;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"    private String input;"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"    public RecommendCommand(Person person, String input) {"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"        this.person \u003d person;"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"        this.input \u003d input;"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkSingleCommand(this.input);"},{"lineNumber":26,"author":{"gitId":"yuqiaoluolong"},"content":"        int recommendation \u003d manager.getCalculator().calculateRecommendation(this.person);"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"        ui.printCalorieRecommendation(this.person.getName(), recommendation);"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"yuqiaoluolong":1,"HengFuYuen":1,"tikimonarch":27}},{"path":"src/main/java/seedu/dietbook/command/UserinfoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.command;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"public class UserinfoCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"    private String input;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"    public UserinfoCommand(String input) {"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"        this.input \u003d input;"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":"    public void execute(Manager manager, Ui ui) throws DietException {"},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":"        if (Manager.commandCount \u003d\u003d 1) {"},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your name first!\");"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":"        } else if (Manager.commandCount \u003d\u003d 2) {"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"Please enter your basic information first!\");"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkSingleCommand(this.input);"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"        ui.printPersonInfo(manager.getPerson().toString());"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"tikimonarch":25}},{"path":"src/main/java/seedu/dietbook/database/Canteen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.database;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"public class Canteen {"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"    private final String name;"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"    private final ArrayList\u003cStore\u003e storeList;"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"    public Canteen(String name) {"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"        this.name \u003d name;"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"        this.storeList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"     * Name of the canteen is for filtering purposes."},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"     * @return name of canteen"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"    public String getName() {"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"        return name;"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    public void addStore(Store store) {"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"        storeList.add(store);"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"    public List\u003cStore\u003e getStoreList() {"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"        return storeList;"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":30,"HengFuYuen":1}},{"path":"src/main/java/seedu/dietbook/database/DataBase.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.database;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"import java.io.InputStream;"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"public class DataBase {"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    private static final String START_SYMBOL \u003d \"\u0026%START\";"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    private static final String STOP_SYMBOL \u003d \"\u0026%STOP\";"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    private static final String UP_SYMBOL \u003d \"\u0026%UP\";"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DATA_FILE_SEPERATOR \u003d \"\\\\|\";"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    private final List\u003cCanteen\u003e canteenList;"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"     * Instantiate an empty Database object."},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    public DataBase() {"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"        this.canteenList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"     * Loads and parses the resource main/resource/data.txt"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"     * This data is used to build the internal canteenList."},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":"    public void init() {"},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"        InputStream dataStream \u003d DataBase.class.getResourceAsStream(\"/data.txt\");"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"        assert (dataStream !\u003d null) : \"Could not load resource\";"},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"        Scanner fileReader \u003d new Scanner(dataStream);"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"        String fileLine;"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"        boolean start \u003d false;"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"        while (fileReader.hasNext()) {"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"            fileLine \u003d fileReader.nextLine();"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"            // ------ Check if the data base has started scanning ------"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"            if (fileLine.equals(START_SYMBOL)) {"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"                start \u003d true;"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"                continue;"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"            if (!(start)) {"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"                continue;"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"            if (fileLine.equals(STOP_SYMBOL)) {"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"                break;"},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":"            canteenList.add(fillCanteen(fileLine, fileReader));"},{"lineNumber":54,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":57,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"snowbanana12345"},"content":"     * This function is called right after the canteen name is provided"},{"lineNumber":59,"author":{"gitId":"snowbanana12345"},"content":"     * The very next line that the file reads is the store name"},{"lineNumber":60,"author":{"gitId":"snowbanana12345"},"content":"     * It will turn call fillStore with that name inserted, when the function fillStore"},{"lineNumber":61,"author":{"gitId":"snowbanana12345"},"content":"     * finishes executing, fileRead.nextLine() can either provide a new store name or UP_SYMBOL"},{"lineNumber":62,"author":{"gitId":"snowbanana12345"},"content":"     * if the UP_SYMBOL is provided, the function ends and the final Canteen object is returned."},{"lineNumber":63,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"snowbanana12345"},"content":"     * @param name name of store"},{"lineNumber":65,"author":{"gitId":"snowbanana12345"},"content":"     * @param fileSegment the file reader with the next line being a food item or UP_SYMBOL"},{"lineNumber":66,"author":{"gitId":"snowbanana12345"},"content":"     * @return Canteen objected with all it\u0027s stores loaded"},{"lineNumber":67,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"snowbanana12345"},"content":"    private Canteen fillCanteen(String name, Scanner fileSegment) {"},{"lineNumber":69,"author":{"gitId":"snowbanana12345"},"content":"        Canteen canteen \u003d new Canteen(name);"},{"lineNumber":70,"author":{"gitId":"snowbanana12345"},"content":"        String fileLine \u003d fileSegment.nextLine();"},{"lineNumber":71,"author":{"gitId":"snowbanana12345"},"content":"        while (!(fileLine.equals(UP_SYMBOL))) {"},{"lineNumber":72,"author":{"gitId":"snowbanana12345"},"content":"            canteen.addStore(fillStore(fileLine,fileSegment));"},{"lineNumber":73,"author":{"gitId":"snowbanana12345"},"content":"            fileLine \u003d fileSegment.nextLine();"},{"lineNumber":74,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"snowbanana12345"},"content":"        return canteen;"},{"lineNumber":76,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":78,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"snowbanana12345"},"content":"     * This function is called right after the store name is provided."},{"lineNumber":80,"author":{"gitId":"snowbanana12345"},"content":"     * The very next line in the file should be the first food to be added."},{"lineNumber":81,"author":{"gitId":"snowbanana12345"},"content":"     * The function stops when it hits the line of the file that says UP_SYMBOL."},{"lineNumber":82,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"snowbanana12345"},"content":"     * @param name name of the store"},{"lineNumber":84,"author":{"gitId":"snowbanana12345"},"content":"     * @param fileSegment the Scanner object used for the init() function"},{"lineNumber":85,"author":{"gitId":"snowbanana12345"},"content":"     * @return the completed store with all the food loaded"},{"lineNumber":86,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"snowbanana12345"},"content":"    private Store fillStore(String name, Scanner fileSegment) {"},{"lineNumber":88,"author":{"gitId":"snowbanana12345"},"content":"        Store store \u003d new Store(name);"},{"lineNumber":89,"author":{"gitId":"snowbanana12345"},"content":"        Food food;"},{"lineNumber":90,"author":{"gitId":"snowbanana12345"},"content":"        String fileLine \u003d fileSegment.nextLine();"},{"lineNumber":91,"author":{"gitId":"snowbanana12345"},"content":"        String[] fileData \u003d fileLine.split(DATA_FILE_SEPERATOR);"},{"lineNumber":92,"author":{"gitId":"snowbanana12345"},"content":"        while (!(fileLine.equals(UP_SYMBOL))) {"},{"lineNumber":93,"author":{"gitId":"snowbanana12345"},"content":"            food \u003d new Food(fileData[0], Integer.parseInt(fileData[1]), Integer.parseInt(fileData[2]),"},{"lineNumber":94,"author":{"gitId":"snowbanana12345"},"content":"            Integer.parseInt(fileData[3]), Integer.parseInt(fileData[4]));"},{"lineNumber":95,"author":{"gitId":"snowbanana12345"},"content":"            store.addFood(food);"},{"lineNumber":96,"author":{"gitId":"snowbanana12345"},"content":"            fileLine \u003d fileSegment.nextLine();"},{"lineNumber":97,"author":{"gitId":"snowbanana12345"},"content":"            fileData \u003d fileLine.split(DATA_FILE_SEPERATOR);"},{"lineNumber":98,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"snowbanana12345"},"content":"        return store;"},{"lineNumber":100,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":102,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"snowbanana12345"},"content":"     * Debugging function prints out all contents."},{"lineNumber":104,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"snowbanana12345"},"content":"    public void printAllData() {"},{"lineNumber":106,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\"Printing out all data\");"},{"lineNumber":107,"author":{"gitId":"snowbanana12345"},"content":"        for (Canteen canteen : canteenList) {"},{"lineNumber":108,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Canteeh : \" + canteen.getName());"},{"lineNumber":109,"author":{"gitId":"snowbanana12345"},"content":"            for (Store store : canteen.getStoreList()) {"},{"lineNumber":110,"author":{"gitId":"snowbanana12345"},"content":"                System.out.println(\"Store : \" + store.getName());"},{"lineNumber":111,"author":{"gitId":"snowbanana12345"},"content":"                for (Food food : store.getFoodList()) {"},{"lineNumber":112,"author":{"gitId":"snowbanana12345"},"content":"                    System.out.println(food);"},{"lineNumber":113,"author":{"gitId":"snowbanana12345"},"content":"                }"},{"lineNumber":114,"author":{"gitId":"snowbanana12345"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\"Finished Printing out all data\");"},{"lineNumber":117,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":119,"author":{"gitId":"snowbanana12345"},"content":"    // ----- Food search functions -------"},{"lineNumber":120,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":121,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"snowbanana12345"},"content":"     * This method searchs the whole data base and returns the first food item whose name contains the provided string."},{"lineNumber":123,"author":{"gitId":"snowbanana12345"},"content":"     * ( CASE SENSITIVE ! )"},{"lineNumber":124,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"snowbanana12345"},"content":"     * @param food part of the name of the food"},{"lineNumber":126,"author":{"gitId":"snowbanana12345"},"content":"     * @return Food"},{"lineNumber":127,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"snowbanana12345"},"content":"    public Food searchFoodByName(String food) {"},{"lineNumber":129,"author":{"gitId":"snowbanana12345"},"content":"        return foodStream().filter(x -\u003e x.getName().contains(food)).findFirst().orElseThrow();"},{"lineNumber":130,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":132,"author":{"gitId":"snowbanana12345"},"content":"    public Food searchFoodByIndex(int index) {"},{"lineNumber":133,"author":{"gitId":"snowbanana12345"},"content":"        return foodStream().skip(index - 1).findFirst().orElseThrow();"},{"lineNumber":134,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":136,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"snowbanana12345"},"content":"     * This method searchs the whole data base and returns all of the food whose name contains the provided string."},{"lineNumber":138,"author":{"gitId":"snowbanana12345"},"content":"     * @param food part of the name of the food e.g. chicken"},{"lineNumber":139,"author":{"gitId":"snowbanana12345"},"content":"     * @return data stream of all food items"},{"lineNumber":140,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"snowbanana12345"},"content":"    public Stream\u003cFood\u003e searchAllFoodContainingName(String food) {"},{"lineNumber":142,"author":{"gitId":"snowbanana12345"},"content":"        return foodStream().filter(x -\u003e x.getName().contains(food));"},{"lineNumber":143,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":145,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"snowbanana12345"},"content":"     * Search for the first food that contains the string provided in the first store which matchs the store"},{"lineNumber":147,"author":{"gitId":"snowbanana12345"},"content":"     * string provided."},{"lineNumber":148,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":149,"author":{"gitId":"snowbanana12345"},"content":"     * @param food partial name of the food"},{"lineNumber":150,"author":{"gitId":"snowbanana12345"},"content":"     * @param store partial name of the store"},{"lineNumber":151,"author":{"gitId":"snowbanana12345"},"content":"     * @return Food object"},{"lineNumber":152,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"snowbanana12345"},"content":"    public Food searchFoodByNameByStore(String food, String store) {"},{"lineNumber":154,"author":{"gitId":"snowbanana12345"},"content":"        return searchAllFoodByStore(store)"},{"lineNumber":155,"author":{"gitId":"snowbanana12345"},"content":"                .filter(x -\u003e x.getName().contains(food))"},{"lineNumber":156,"author":{"gitId":"snowbanana12345"},"content":"                .findFirst()"},{"lineNumber":157,"author":{"gitId":"snowbanana12345"},"content":"                .orElseThrow();"},{"lineNumber":158,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":160,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"snowbanana12345"},"content":"     * Returns a stream of all the food in the first store that contains the given string."},{"lineNumber":162,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":163,"author":{"gitId":"snowbanana12345"},"content":"     * @param store partial name of the store"},{"lineNumber":164,"author":{"gitId":"snowbanana12345"},"content":"     * @return food stream"},{"lineNumber":165,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"snowbanana12345"},"content":"    public Stream\u003cFood\u003e searchAllFoodByStore(String store) {"},{"lineNumber":167,"author":{"gitId":"snowbanana12345"},"content":"        return canteenList.stream()"},{"lineNumber":168,"author":{"gitId":"snowbanana12345"},"content":"                .flatMap(x -\u003e x.getStoreList().stream())"},{"lineNumber":169,"author":{"gitId":"snowbanana12345"},"content":"                .filter(x -\u003e x.getName().contains(store))"},{"lineNumber":170,"author":{"gitId":"snowbanana12345"},"content":"                .findFirst()"},{"lineNumber":171,"author":{"gitId":"snowbanana12345"},"content":"                .orElseThrow()"},{"lineNumber":172,"author":{"gitId":"snowbanana12345"},"content":"                .getFoodList()"},{"lineNumber":173,"author":{"gitId":"snowbanana12345"},"content":"                .stream();"},{"lineNumber":174,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":176,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"snowbanana12345"},"content":"     * Returns a stream of all the food in all stores that contains the given string."},{"lineNumber":178,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"snowbanana12345"},"content":"     * @param store partial name of the store"},{"lineNumber":180,"author":{"gitId":"snowbanana12345"},"content":"     * @return  food stream"},{"lineNumber":181,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"snowbanana12345"},"content":"    public Stream\u003cFood\u003e searchAllFoodOfAllStores(String store) {"},{"lineNumber":183,"author":{"gitId":"snowbanana12345"},"content":"        return canteenList.stream()"},{"lineNumber":184,"author":{"gitId":"snowbanana12345"},"content":"                .flatMap(x -\u003e x.getStoreList().stream())"},{"lineNumber":185,"author":{"gitId":"snowbanana12345"},"content":"                .filter(x -\u003e x.getName().contains(store))"},{"lineNumber":186,"author":{"gitId":"snowbanana12345"},"content":"                .flatMap(x -\u003e x.getFoodList().stream());"},{"lineNumber":187,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":189,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":190,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"snowbanana12345"},"content":"     * Returns the first food that contains the food String provided that is in the first canteen that contains the"},{"lineNumber":192,"author":{"gitId":"snowbanana12345"},"content":"     * canteen String provided."},{"lineNumber":193,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":194,"author":{"gitId":"snowbanana12345"},"content":"     * @param food partial name of the food"},{"lineNumber":195,"author":{"gitId":"snowbanana12345"},"content":"     * @param canteen partial name of the canteen"},{"lineNumber":196,"author":{"gitId":"snowbanana12345"},"content":"     * @return Food object"},{"lineNumber":197,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"snowbanana12345"},"content":"    public Food searchFoodByNameByCanteen(String food, String canteen) {"},{"lineNumber":199,"author":{"gitId":"snowbanana12345"},"content":"        return searchAllFoodByNameByCanteen(food, canteen)"},{"lineNumber":200,"author":{"gitId":"snowbanana12345"},"content":"                .findFirst()"},{"lineNumber":201,"author":{"gitId":"snowbanana12345"},"content":"                .orElseThrow();"},{"lineNumber":202,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":204,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"snowbanana12345"},"content":"     * Returns all food that contains the provided food name in the first canteen that matchs the canteen name."},{"lineNumber":206,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":207,"author":{"gitId":"snowbanana12345"},"content":"     * @param food partial name of the food"},{"lineNumber":208,"author":{"gitId":"snowbanana12345"},"content":"     * @param canteen partial name of the canteen"},{"lineNumber":209,"author":{"gitId":"snowbanana12345"},"content":"     * @return Food Stream"},{"lineNumber":210,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"snowbanana12345"},"content":"    public Stream\u003cFood\u003e searchAllFoodByNameByCanteen(String food, String canteen) {"},{"lineNumber":212,"author":{"gitId":"snowbanana12345"},"content":"        return canteenList.stream()"},{"lineNumber":213,"author":{"gitId":"snowbanana12345"},"content":"                .filter(x -\u003e x.getName().contains(canteen))"},{"lineNumber":214,"author":{"gitId":"snowbanana12345"},"content":"                .findFirst()"},{"lineNumber":215,"author":{"gitId":"snowbanana12345"},"content":"                .orElseThrow()"},{"lineNumber":216,"author":{"gitId":"snowbanana12345"},"content":"                .getStoreList()"},{"lineNumber":217,"author":{"gitId":"snowbanana12345"},"content":"                .stream()"},{"lineNumber":218,"author":{"gitId":"snowbanana12345"},"content":"                .flatMap(x -\u003e x.getFoodList().stream())"},{"lineNumber":219,"author":{"gitId":"snowbanana12345"},"content":"                .filter(x -\u003e x.getName().contains(food));"},{"lineNumber":220,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":222,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"snowbanana12345"},"content":"     * Returns a stream of food whose calorie is below the provided amount."},{"lineNumber":224,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"snowbanana12345"},"content":"     * @param calorie the maximum calorie of the food"},{"lineNumber":226,"author":{"gitId":"snowbanana12345"},"content":"     * @return food stream"},{"lineNumber":227,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"snowbanana12345"},"content":"    public Stream\u003cFood\u003e searchAllFoodBelowCalorie(int calorie) {"},{"lineNumber":229,"author":{"gitId":"snowbanana12345"},"content":"        return foodStream().filter(x -\u003e x.getCalorie() \u003c calorie);"},{"lineNumber":230,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":232,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"snowbanana12345"},"content":"     * Returns all food within the calorie range."},{"lineNumber":234,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":235,"author":{"gitId":"snowbanana12345"},"content":"     * @param minCalorie minimum calories"},{"lineNumber":236,"author":{"gitId":"mxksowie"},"content":"     * @param maxCalorie maximum calories"},{"lineNumber":237,"author":{"gitId":"snowbanana12345"},"content":"     * @return food stream"},{"lineNumber":238,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":239,"author":{"gitId":"snowbanana12345"},"content":"    public Stream\u003cFood\u003e searchAllFoodInCalorieRange(int minCalorie, int maxCalorie) {"},{"lineNumber":240,"author":{"gitId":"snowbanana12345"},"content":"        return foodStream().filter(x -\u003e x.getCalorie() \u003c\u003d maxCalorie \u0026\u0026 x.getCalorie() \u003e\u003d minCalorie);"},{"lineNumber":241,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":243,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":244,"author":{"gitId":"snowbanana12345"},"content":"     * Provides a data stream of all the food in the data base."},{"lineNumber":245,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":246,"author":{"gitId":"snowbanana12345"},"content":"     * @return a food stream"},{"lineNumber":247,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":248,"author":{"gitId":"snowbanana12345"},"content":"    public Stream\u003cFood\u003e foodStream() {"},{"lineNumber":249,"author":{"gitId":"snowbanana12345"},"content":"        return canteenList.stream()"},{"lineNumber":250,"author":{"gitId":"snowbanana12345"},"content":"                .flatMap(x -\u003e x.getStoreList().stream())"},{"lineNumber":251,"author":{"gitId":"snowbanana12345"},"content":"                .flatMap(x -\u003e x.getFoodList().stream());"},{"lineNumber":252,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":254,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":255,"author":{"gitId":"mxksowie"},"content":"     * Provide a list of all food in the data base."},{"lineNumber":256,"author":{"gitId":"snowbanana12345"},"content":"     * @return List of food"},{"lineNumber":257,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":258,"author":{"gitId":"snowbanana12345"},"content":"    public List\u003cFood\u003e getFoodList() {"},{"lineNumber":259,"author":{"gitId":"snowbanana12345"},"content":"        return foodStream().collect(Collectors.toList());"},{"lineNumber":260,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":262,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":263,"author":{"gitId":"snowbanana12345"},"content":"     * Provide a list o all food in the data base in numbered String form."},{"lineNumber":264,"author":{"gitId":"snowbanana12345"},"content":"     * @return String"},{"lineNumber":265,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"snowbanana12345"},"content":"    public String getFoodListString() {"},{"lineNumber":267,"author":{"gitId":"snowbanana12345"},"content":"        List\u003cFood\u003e foodlist \u003d foodStream().collect(Collectors.toList());"},{"lineNumber":268,"author":{"gitId":"snowbanana12345"},"content":"        StringBuilder foodListString \u003d new StringBuilder();"},{"lineNumber":269,"author":{"gitId":"snowbanana12345"},"content":"        int foodnum \u003d 0;"},{"lineNumber":270,"author":{"gitId":"snowbanana12345"},"content":"        for (Food food : foodlist) {"},{"lineNumber":271,"author":{"gitId":"snowbanana12345"},"content":"            foodnum++;"},{"lineNumber":272,"author":{"gitId":"snowbanana12345"},"content":"            foodListString.append(\"  \").append(foodnum).append(\". \").append(food.toString()).append(\"\\n\");"},{"lineNumber":273,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":274,"author":{"gitId":"snowbanana12345"},"content":"        return foodListString.toString();"},{"lineNumber":275,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":260,"mxksowie":16}},{"path":"src/main/java/seedu/dietbook/database/Store.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.database;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"public class Store {"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"    private final String name;"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"    private final ArrayList\u003cFood\u003e foodList;"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    public Store(String name) {"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"        this.name \u003d name;"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"        this.foodList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"     * The name of the store will be used for filtering purposes."},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"     * @return store name"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    public String getName() {"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"        return name;"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"     * This function should only be called when we initialize the data base from the text file."},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"    public void addFood(Food food) {"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"        foodList.add(food);"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"    public List\u003cFood\u003e getFoodList() {"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"        return foodList;"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":39}},{"path":"src/main/java/seedu/dietbook/database/data.txt","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"#####################################################################"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":"#    3 LEVEL DATA BASE                                              #"},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"#    Canteen -----\u003e Store ------\u003e Food                              #"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"#    Commands :                                                     #"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%START : start reading data from the data base                #"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%STOP : stop reading data from the data base                  #"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%UP    : goes down 1 level e.g. Canteen ---\u003e Store            #"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%DOWN    : goes down 1 level e.g. Canteen ---\u003e Store          #"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%ADD format : adds the item with the given format             #"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"#                                                                   #"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"#    Comments : any line that starts with # is ignored              #"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"#                                                                   #"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"#    Canteen format : {name}                                        #"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"#    Store format : {name}                                          #"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"#    Food format : {name}|{Calorie}|{Carb}|{Protein}|{Fat}          #"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"#####################################################################"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"######################################################################"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"#   Version 0.1 :                                                    #"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"#   there is only UP, once a store or canteen is                     #"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"#  specified we automatically go down 1 level , for this version     #"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"#   there is no going out of a store and then coming back to add more#"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"#   Units : Calorie : kcal  : Carbs : g Protein : g : Fats : g       #"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"######################################################################"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"\u0026%START"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"Science canteen"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"Halal Mini Wok"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"Prawn Mee Soup(Dry)(Large)|490|0|0|0"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"Prawn Mee Soup(Dry)(Small)|390|0|0|0"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"Fried Hokkien Prawn Mee(Large)|470|0|0|0"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"Fried Hokkien Prawn Mee(Small)|350|0|0|0"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"Clay Pot Chicken|440|0|0|0"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"Black Pepper Chicken|490|0|0|0"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"Ayam Penyet"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"Ayam Penyet Set|699|0|0|0"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"Steamed Chicken Set |475|0|0|0"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"Ikan Grouper Penyet Set|669|0|0|0"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"Korean"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"kimchi fried rice|520|45|35|56"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"ginseng chicken|450|25|32|66"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"ramen|530|76|25|43"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"Gong Cha"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"gong cha green tea|100|0|0|0"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"gong cha ooloong tea|100|0|0|0"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"gong cha bubble tea|200|0|0|0"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"\u0026%STOP"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":""}],"authorContributionMap":{"snowbanana12345":53}},{"path":"src/main/java/seedu/dietbook/exception/DietException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.exception;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"public class DietException extends Exception {"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"    public DietException(String message) {"},{"lineNumber":5,"author":{"gitId":"tikimonarch"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"        return getMessage();"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"tikimonarch":12}},{"path":"src/main/java/seedu/dietbook/food/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.food;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":" * Constructor of the Food class"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":" * Store information regarding a food item: name, number of calories in kcal, amount of carbohydrate in grams,"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":" * amount of protein in grams, amount of fats in grams."},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":" */"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"public class Food {"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"    private final String name;"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"    private final int calorie;"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"    private final int carbohydrate;"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    private final int protein;"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    private final int fats;"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"    public Food(String name, int calorie, int carbohydrate, int protein, int fats) {"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"        this.name \u003d name;"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"        this.calorie \u003d calorie;"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"        this.carbohydrate \u003d carbohydrate;"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"        this.protein \u003d protein;"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"        this.fats \u003d fats;"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"    public int getFat() {"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"        return fats;"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"    public String getName() {"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"        return name;"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"    public int getCalorie() {"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"        return calorie;"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"    public int getCarbohydrate() {"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"        return carbohydrate;"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"    public int getProtein() {"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"        return protein;"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"        return name + \" | calorie : \" + calorie + \" | protein : \" + protein + \" | carbohydrate : \" + carbohydrate"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"                + \" | fats : \" + fats;"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":49,"mxksowie":1}},{"path":"src/main/java/seedu/dietbook/list/DatedFoodEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"public class DatedFoodEntry extends FoodEntry implements Comparable\u003cDatedFoodEntry\u003e {"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"    public static final DateTimeFormatter DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\");"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":"    /** "},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":"     * Default constructor method."},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"     * Creates a food entry with a DateTime set to now."},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"    public DatedFoodEntry(int portionSize, String name, int calorie, "},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"            int carbohydrate, int protein, int fat) {"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"        super(portionSize, name, calorie, carbohydrate, protein, fat);"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"        this.dateTime \u003d LocalDateTime.now();"},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"     * Convenience constructor for testing."},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":"     * Also could be for adding food objects directly via DataBase."},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"    public DatedFoodEntry(int portionSize, Food food) {"},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":"        super(portionSize, food);"},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"        this.dateTime \u003d LocalDateTime.now();"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":"     * Convenience constructor for testing."},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"     * Could also be for adding backlogged entries with food objects directly via Database."},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"    public DatedFoodEntry(int portionSize, Food food, LocalDateTime dateTime) {"},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"        super(portionSize, food);"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"        assert (dateTime !\u003d null) : \"Should not add null DateTime.\""},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"                + \"Use other constructor to create with LocalDateTime.now() instead.\";"},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":"     * For adding backlogged entries."},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":"    public DatedFoodEntry(int portionSize, String name, int calorie, "},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":"            int carbohydrate, int protein, int fat, LocalDateTime dateTime) {"},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"        super(portionSize, name, calorie, carbohydrate, protein, fat);"},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"        assert (dateTime !\u003d null) : \"Should not add null DateTime.\""},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":"                + \"Use other constructor to create with LocalDateTime.now() instead.\";"},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":"        assert (dateTime.isBefore(LocalDateTime.now())) : \"Attempting to add entry that hasn\u0027t happened yet.\";"},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":53,"author":{"gitId":"mxksowie"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":54,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":55,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":57,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"mxksowie"},"content":"     * Getter method for LocalDateTime object."},{"lineNumber":59,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"mxksowie"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":61,"author":{"gitId":"mxksowie"},"content":"        return dateTime;"},{"lineNumber":62,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":64,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"mxksowie"},"content":"     * To String representation of a dated food entry that also contains a date."},{"lineNumber":66,"author":{"gitId":"mxksowie"},"content":"     * Do not want to overwrite super method so that option to print with and without date is possible."},{"lineNumber":67,"author":{"gitId":"mxksowie"},"content":"     * @return string rep of entry in the form of (entry details) [datetime]"},{"lineNumber":68,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"mxksowie"},"content":"    public String toDatedString() {"},{"lineNumber":70,"author":{"gitId":"mxksowie"},"content":"        return String.format(\"%s [%s]\", super.toString(), dateTime.format(DATE_TIME_FORMAT));"},{"lineNumber":71,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":73,"author":{"gitId":"mxksowie"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"mxksowie"},"content":"    public int compareTo(DatedFoodEntry other) {"},{"lineNumber":75,"author":{"gitId":"mxksowie"},"content":"        return dateTime.compareTo(other.getDateTime());"},{"lineNumber":76,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"mxksowie"},"content":"    "},{"lineNumber":78,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":78}},{"path":"src/main/java/seedu/dietbook/list/FoodEntry.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":" * Data class to store both serving sizes and a food object as a single object."},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":" */"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"public class FoodEntry {"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"    private final int portionSize;"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":"    private final Food food;"},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"     * Convenience constructor mainly for testing."},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"     * In the future, this is expected be the constructor for adding entries using food from the database."},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"    public FoodEntry(int portionSize, Food food) {"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"        assert (portionSize \u003e 0) : \"Non-positive, invalid portion size not caught.\";"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"        this.portionSize \u003d portionSize;"},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"        this.food \u003d food;"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":"     * Default constructor. Creates new food object as part of entry."},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"    public FoodEntry(int portionSize, String name, int calorie, "},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":"            int carbohydrate, int protein, int fat) {"},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"        assert (portionSize \u003e 0) : \"Non-positive, invalid portion size not caught.\";"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"        this.portionSize \u003d portionSize;"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"        this.food \u003d FoodManager.createFood(name, calorie, carbohydrate, protein, fat);"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"     * Getter method for the Food object."},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"    public Food getFood() {"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"        return FoodManager.retrieveFood(food);"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":"     * Getter method for the portionSize object."},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":"    public int getPortionSize() {"},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":"        return portionSize;"},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"        return String.format(\"%s -- (%s)\", food.toString(), portionSize);"},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"HengFuYuen":2,"mxksowie":50}},{"path":"src/main/java/seedu/dietbook/list/FoodList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":5,"author":{"gitId":"yuqiaoluolong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":" * Wrapper class for the implementation of foodlist as an arraylist of foodEntry objects."},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":" * Foodlist does not return its ArrayList nor foodEntry objects."},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":" * This is a stateful object."},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":" */"},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"public class FoodList {"},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"    private List\u003cFoodEntry\u003e foodEntries;"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"     * Default constructor that instantiates FoodList with an empty foodentry arraylist."},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"    public FoodList() {"},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"        this.foodEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"     * Convenience constructor for testing purposes."},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":"     * This is an unsafe method of building the FoodList as FoodEntry added may not be an instance of DatedFoodEntry."},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"    protected FoodList(ArrayList\u003cFoodEntry\u003e entries) {"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"        this.foodEntries \u003d entries;"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"     * Adds food of portion size directly into the foodlist as an entry."},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"     * Mainly for adding food directly from the data base of foods."},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"     * @param portionSize integer to designate number of servings"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"     * @param food food object to be added"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"     * @return string representation of the entry added"},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":"    public String addFood(int portionSize, Food food) {"},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entry \u003d new DatedFoodEntry(portionSize, food);"},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":"        foodEntries.add(entry);"},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":"        return entry.toString();"},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"     * Default add method that adds a food entry using the food details and portion size."},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"    public String addFood(int portionSize, String name, int calorie, "},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":"            int carbohydrate, int protein, int fat) {"},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entry \u003d new DatedFoodEntry(portionSize, name, calorie, carbohydrate, protein, fat);"},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":"        foodEntries.add(entry);"},{"lineNumber":53,"author":{"gitId":"mxksowie"},"content":"        return entry.toString();"},{"lineNumber":54,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":56,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":57,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":58,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"mxksowie"},"content":"     * Add add method for backlogged entries."},{"lineNumber":60,"author":{"gitId":"mxksowie"},"content":"     * Allows specificiation of time via LocalDateTime param."},{"lineNumber":61,"author":{"gitId":"mxksowie"},"content":"     * @param dateTime User specified time for backlogged entry."},{"lineNumber":62,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"mxksowie"},"content":"    public String addFoodAtDateTime(int portionSize, String name, int calorie, "},{"lineNumber":64,"author":{"gitId":"mxksowie"},"content":"            int carbohydrate, int protein, int fat, LocalDateTime dateTime) {"},{"lineNumber":65,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":66,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entry \u003d new DatedFoodEntry(portionSize, name, calorie, carbohydrate, protein, fat, dateTime);"},{"lineNumber":67,"author":{"gitId":"mxksowie"},"content":"        foodEntries.add(entry);"},{"lineNumber":68,"author":{"gitId":"mxksowie"},"content":"        return entry.toString();"},{"lineNumber":69,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":71,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"mxksowie"},"content":"     * Truncated add method for the purpose of save-loading (allows adding food object directly)."},{"lineNumber":73,"author":{"gitId":"mxksowie"},"content":"     * Can also be used to add backlogged entry via database."},{"lineNumber":74,"author":{"gitId":"mxksowie"},"content":"     * @param portionSize integer to designate number of servings"},{"lineNumber":75,"author":{"gitId":"mxksowie"},"content":"     * @param food Food object to be added (from the save-load/database)"},{"lineNumber":76,"author":{"gitId":"mxksowie"},"content":"     * @param dateTime Save-loaded date-time or user specified time for backlogged entry."},{"lineNumber":77,"author":{"gitId":"mxksowie"},"content":"     * @return string representation of entry added."},{"lineNumber":78,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"mxksowie"},"content":"    public String addFoodAtDateTime(int portionSize, Food food, LocalDateTime dateTime) {"},{"lineNumber":80,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entry \u003d new DatedFoodEntry(portionSize, food, dateTime);"},{"lineNumber":81,"author":{"gitId":"mxksowie"},"content":"        foodEntries.add(entry);"},{"lineNumber":82,"author":{"gitId":"mxksowie"},"content":"        return entry.toString();"},{"lineNumber":83,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":85,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"mxksowie"},"content":"     * Deletes the the entry of the list at the provided index."},{"lineNumber":87,"author":{"gitId":"mxksowie"},"content":"     * index starts from 1 (not 0). i.e. is User\u0027s understanding of index."},{"lineNumber":88,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"mxksowie"},"content":"    public String delete(int index) throws IndexOutOfBoundsException {"},{"lineNumber":90,"author":{"gitId":"mxksowie"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"mxksowie"},"content":"            return FoodListManager.deleteEntry(foodEntries, index).toString();"},{"lineNumber":92,"author":{"gitId":"mxksowie"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":93,"author":{"gitId":"mxksowie"},"content":"            throw e;"},{"lineNumber":94,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"mxksowie"},"content":"    "},{"lineNumber":97,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"mxksowie"},"content":"     * Discards previous foodEntry list and creates a new one."},{"lineNumber":99,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"mxksowie"},"content":"    public boolean clear() {"},{"lineNumber":101,"author":{"gitId":"mxksowie"},"content":"        this.foodEntries \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitId":"mxksowie"},"content":"        return true;"},{"lineNumber":103,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":105,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":106,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"mxksowie"},"content":"     * Obtain the food objects in Foodlist as an ArrayList."},{"lineNumber":108,"author":{"gitId":"mxksowie"},"content":"     * For other classes that wish to operate on the Food items directly."},{"lineNumber":109,"author":{"gitId":"mxksowie"},"content":"     * @return Arraylist of ordered Food objects in Foodlist\u0027s foodEntries."},{"lineNumber":110,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"mxksowie"},"content":"    public List\u003cFood\u003e getFoods() {"},{"lineNumber":112,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToFoods(foodEntries);"},{"lineNumber":113,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":115,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"mxksowie"},"content":"     * Obtain list of food objects in FoodList, scaled to portion size."},{"lineNumber":117,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"mxksowie"},"content":"    public List\u003cFood\u003e getPortionedFoods() {"},{"lineNumber":119,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToPortionedFoods(foodEntries);"},{"lineNumber":120,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":122,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"mxksowie"},"content":"     * Obtain list of foods consumed after specified timing."},{"lineNumber":124,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"mxksowie"},"content":"    public List\u003cFood\u003e getFoodsAfterDateTime(LocalDateTime dateTime) {"},{"lineNumber":126,"author":{"gitId":"mxksowie"},"content":"        List\u003cFoodEntry\u003e entriesAfterDateTime \u003d FoodListManager.filterListByDate(foodEntries, dateTime);"},{"lineNumber":127,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToFoods(entriesAfterDateTime);"},{"lineNumber":128,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":130,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"mxksowie"},"content":"     * Obtain list of foods consumed after specified timing, scaled to portion size."},{"lineNumber":132,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"mxksowie"},"content":"    public List\u003cFood\u003e getPortionedFoodsAfterDateTime(LocalDateTime dateTime) {"},{"lineNumber":134,"author":{"gitId":"mxksowie"},"content":"        List\u003cFoodEntry\u003e entriesAfterDateTime \u003d FoodListManager.filterListByDate(foodEntries, dateTime);"},{"lineNumber":135,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToFoods(entriesAfterDateTime);"},{"lineNumber":136,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":138,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"mxksowie"},"content":"     * Obtain list of foods consumed within the range of a specified timing."},{"lineNumber":140,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"mxksowie"},"content":"    public List\u003cFood\u003e getFoodsInDateTimeRange(LocalDateTime start, LocalDateTime end) {"},{"lineNumber":142,"author":{"gitId":"mxksowie"},"content":"        List\u003cFoodEntry\u003e entriesInRange \u003d FoodListManager.filterListByDate(foodEntries, start, end);"},{"lineNumber":143,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToFoods(entriesInRange);"},{"lineNumber":144,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":146,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"mxksowie"},"content":"     * Obtain list of foods consumed within the range of a specified timing, scaled to portion size."},{"lineNumber":148,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"mxksowie"},"content":"    public List\u003cFood\u003e getPortionedFoodsInDateTimeRange(LocalDateTime start, LocalDateTime end) {"},{"lineNumber":150,"author":{"gitId":"mxksowie"},"content":"        List\u003cFoodEntry\u003e entriesInRange \u003d FoodListManager.filterListByDate(foodEntries, start, end);"},{"lineNumber":151,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToPortionedFoods(entriesInRange);"},{"lineNumber":152,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":154,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"mxksowie"},"content":"     * Obtain list of portion sizes."},{"lineNumber":156,"author":{"gitId":"mxksowie"},"content":"     * (For storage purposes)"},{"lineNumber":157,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"mxksowie"},"content":"    public List\u003cInteger\u003e getPortionSizes() {"},{"lineNumber":159,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToPortionSizes(foodEntries);"},{"lineNumber":160,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":162,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":163,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"mxksowie"},"content":"     * Obtain list of LocalDateTimes for when the entries were made."},{"lineNumber":165,"author":{"gitId":"mxksowie"},"content":"     * (For storage purposes)"},{"lineNumber":166,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"mxksowie"},"content":"    public List\u003cLocalDateTime\u003e getDateTimes() {"},{"lineNumber":168,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToLocalDateTimes(foodEntries);"},{"lineNumber":169,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":171,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"mxksowie"},"content":"     * Sorts the list based on datetime of the entries."},{"lineNumber":173,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"mxksowie"},"content":"    public String sort() {"},{"lineNumber":175,"author":{"gitId":"mxksowie"},"content":"        this.foodEntries \u003d FoodListManager.sortListByDate(foodEntries);"},{"lineNumber":176,"author":{"gitId":"mxksowie"},"content":"        return this.toString();"},{"lineNumber":177,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":179,"author":{"gitId":"mxksowie"},"content":"    @Override"},{"lineNumber":180,"author":{"gitId":"mxksowie"},"content":"    public String toString() {"},{"lineNumber":181,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToString(foodEntries);"},{"lineNumber":182,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":184,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"mxksowie"},"content":"     * Returns toString representation of the segmented list based on DateTime."},{"lineNumber":186,"author":{"gitId":"mxksowie"},"content":"     * @param dateTime Start DateTime."},{"lineNumber":187,"author":{"gitId":"mxksowie"},"content":"     * @return string representation of FoodList"},{"lineNumber":188,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"mxksowie"},"content":"    public String getAfterDateTimeToString(LocalDateTime dateTime) {"},{"lineNumber":190,"author":{"gitId":"mxksowie"},"content":"        List\u003cFoodEntry\u003e entriesAfterDateTime \u003d FoodListManager.filterListByDate(foodEntries, dateTime);"},{"lineNumber":191,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToString(entriesAfterDateTime);"},{"lineNumber":192,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":194,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":195,"author":{"gitId":"mxksowie"},"content":"     * Returns toString representation of the segmented list based on DateTime (within a range of 2 datetimes)."},{"lineNumber":196,"author":{"gitId":"mxksowie"},"content":"     * @param start lower bound of datetime (inclusive)"},{"lineNumber":197,"author":{"gitId":"mxksowie"},"content":"     * @param end   upper bound of datetime (inclusive)"},{"lineNumber":198,"author":{"gitId":"mxksowie"},"content":"     * @return  string representation of FoodList"},{"lineNumber":199,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"mxksowie"},"content":"    public String getInDateTimeRangeToString(LocalDateTime start, LocalDateTime end) {"},{"lineNumber":201,"author":{"gitId":"mxksowie"},"content":"        List\u003cFoodEntry\u003e entriesInRange \u003d FoodListManager.filterListByDate(foodEntries, start, end);"},{"lineNumber":202,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToString(entriesInRange);"},{"lineNumber":203,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":205,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"mxksowie"},"content":"     * Alternative toString method that also displays all the associated dates with each food entry."},{"lineNumber":207,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"mxksowie"},"content":"    public String toDatedString() {"},{"lineNumber":209,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToDatedString(foodEntries);"},{"lineNumber":210,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":212,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"mxksowie"},"content":"     * Alternative toString method that provides associated dates with each food entry."},{"lineNumber":214,"author":{"gitId":"mxksowie"},"content":"     * Only returns entries within the bounds of a start and end date."},{"lineNumber":215,"author":{"gitId":"mxksowie"},"content":"     * @param start lower bound of datetime (inclusive)"},{"lineNumber":216,"author":{"gitId":"mxksowie"},"content":"     * @param end upper bound of datetime (inclusive)"},{"lineNumber":217,"author":{"gitId":"mxksowie"},"content":"     * @return string representation of FoodList with datetimes."},{"lineNumber":218,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":219,"author":{"gitId":"mxksowie"},"content":"    public String toDatedString(LocalDateTime start, LocalDateTime end) {"},{"lineNumber":220,"author":{"gitId":"mxksowie"},"content":"        List\u003cFoodEntry\u003e entriesInRange \u003d FoodListManager.filterListByDate(foodEntries, start, end);"},{"lineNumber":221,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToDatedString(entriesInRange);"},{"lineNumber":222,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":224,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":225,"author":{"gitId":"mxksowie"},"content":"     * Alternative toString method that provides associated dates with each food entry."},{"lineNumber":226,"author":{"gitId":"mxksowie"},"content":"     * Only returns entries within the bounds of the start datetime and MAX."},{"lineNumber":227,"author":{"gitId":"mxksowie"},"content":"     * @param start lower bound of datetime (inclusive)."},{"lineNumber":228,"author":{"gitId":"mxksowie"},"content":"     * @return string representation of FoodList with datetimes."},{"lineNumber":229,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":230,"author":{"gitId":"mxksowie"},"content":"    public String toDatedString(LocalDateTime start) {"},{"lineNumber":231,"author":{"gitId":"mxksowie"},"content":"        List\u003cFoodEntry\u003e entriesInRange \u003d FoodListManager.filterListByDate(foodEntries, start);"},{"lineNumber":232,"author":{"gitId":"mxksowie"},"content":"        return FoodListManager.convertListToDatedString(entriesInRange);"},{"lineNumber":233,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":235,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"yuqiaoluolong":3,"HengFuYuen":1,"mxksowie":231}},{"path":"src/main/java/seedu/dietbook/list/FoodListManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"import java.util.function.Function;"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":" * Class with static methods to execute \"complex commands\" on FoodList."},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":" * This class handles methods that extend beyond the simple function of an arraylist"},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":" * Class contains static methods with logic beyond adding, removing, and instantiating new lists"},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":" * This class may be used to support functional programming by merging these function into functors"},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":" */"},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"public class FoodListManager {"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"    "},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"     * Internal helper method to convert the items in the arraylist into enumed strings."},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"     * Primarily used to obtain String representations of the entire list."},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"    protected static String convertListToString(List\u003cFoodEntry\u003e list) {"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"        String listString \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"            FoodEntry entry \u003d list.get(i - 1);"},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":"            listString +\u003d \"  \" + i + \". \""},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"                    + entry.toString() + \"\\n\";"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"        return listString;"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"    protected static String convertListToDatedString(List\u003cFoodEntry\u003e list) {"},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"        String datedListString \u003d \"\";"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"        Function\u003cFoodEntry, String\u003e function \u003d x -\u003e {"},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"            assert (x instanceof DatedFoodEntry) : \"A FoodEntry without a date was unexpectedly added and found\";"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"            DatedFoodEntry datedEntry \u003d (DatedFoodEntry) x;"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"            return datedEntry.toDatedString();"},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":"        };"},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":"        List\u003cString\u003e strings \u003d ListFunction.applyFunctionToList(list, function);"},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":"        for (int i \u003d 1; i \u003c\u003d strings.size(); i++) {"},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":"            datedListString +\u003d String.format(\"  %d. %s\\n\", i, strings.get(i - 1));"},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":"        return datedListString;"},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"    protected static FoodEntry deleteEntry(List\u003cFoodEntry\u003e list, int index) throws IndexOutOfBoundsException {"},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":"        assert (index \u003e 0) : \"Invalid index (negative/zero) was given.\";"},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"        int indexToDelete \u003d index - 1;"},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":"            return list.remove(indexToDelete);"},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":53,"author":{"gitId":"mxksowie"},"content":"            throw e;"},{"lineNumber":54,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":57,"author":{"gitId":"mxksowie"},"content":"    /** "},{"lineNumber":58,"author":{"gitId":"mxksowie"},"content":"     * Method to obtain list of foodentries in string rep."},{"lineNumber":59,"author":{"gitId":"mxksowie"},"content":"     * @param list The foodList arrayList"},{"lineNumber":60,"author":{"gitId":"mxksowie"},"content":"     * @return List of foodEntries in their String rep."},{"lineNumber":61,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"mxksowie"},"content":"    protected static List\u003cString\u003e convertListToStrings(List\u003cFoodEntry\u003e list) {"},{"lineNumber":63,"author":{"gitId":"mxksowie"},"content":"        Function\u003cFoodEntry, String\u003e function \u003d x -\u003e x.toString();"},{"lineNumber":64,"author":{"gitId":"mxksowie"},"content":"        return ListFunction.applyFunctionToList(list, function);"},{"lineNumber":65,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":67,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"mxksowie"},"content":"     * Extracts the list of foods from the foodentries list."},{"lineNumber":69,"author":{"gitId":"mxksowie"},"content":"     * @param list list of foodEntries"},{"lineNumber":70,"author":{"gitId":"mxksowie"},"content":"     * @return list of Food objects."},{"lineNumber":71,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"mxksowie"},"content":"    protected static List\u003cFood\u003e convertListToFoods(List\u003cFoodEntry\u003e list) {"},{"lineNumber":73,"author":{"gitId":"mxksowie"},"content":"        Function\u003cFoodEntry, Food\u003e function \u003d x -\u003e x.getFood();"},{"lineNumber":74,"author":{"gitId":"mxksowie"},"content":"        return ListFunction.applyFunctionToList(list, function);"},{"lineNumber":75,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":77,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"mxksowie"},"content":"     * Creates a list of foods that have their nutritional values scaled by portion size."},{"lineNumber":79,"author":{"gitId":"mxksowie"},"content":"     * This is based on the FoodEntries in the list provided."},{"lineNumber":80,"author":{"gitId":"mxksowie"},"content":"     * @param list list of FoodEntries"},{"lineNumber":81,"author":{"gitId":"mxksowie"},"content":"     * @return list of Food objects"},{"lineNumber":82,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"mxksowie"},"content":"    protected static List\u003cFood\u003e convertListToPortionedFoods(List\u003cFoodEntry\u003e list) {"},{"lineNumber":84,"author":{"gitId":"mxksowie"},"content":"        Function\u003cFoodEntry, Food\u003e function \u003d x -\u003e {"},{"lineNumber":85,"author":{"gitId":"mxksowie"},"content":"            Food baseFood \u003d x.getFood();"},{"lineNumber":86,"author":{"gitId":"mxksowie"},"content":"            /**  Explicitly getting return type of getPortionSize() is avoided."},{"lineNumber":87,"author":{"gitId":"mxksowie"},"content":"             * Future updates might see the type change from int to float"},{"lineNumber":88,"author":{"gitId":"mxksowie"},"content":"             * return of getPortionSize() essentially treated as a \"multipliable\""},{"lineNumber":89,"author":{"gitId":"mxksowie"},"content":"            */"},{"lineNumber":90,"author":{"gitId":"mxksowie"},"content":"            return new Food(baseFood.getName(), "},{"lineNumber":91,"author":{"gitId":"mxksowie"},"content":"                    baseFood.getCalorie() * x.getPortionSize(),"},{"lineNumber":92,"author":{"gitId":"mxksowie"},"content":"                    baseFood.getCarbohydrate() * x.getPortionSize(),"},{"lineNumber":93,"author":{"gitId":"mxksowie"},"content":"                    baseFood.getProtein() * x.getPortionSize(),"},{"lineNumber":94,"author":{"gitId":"mxksowie"},"content":"                    baseFood.getFat() * x.getPortionSize());"},{"lineNumber":95,"author":{"gitId":"mxksowie"},"content":"        };"},{"lineNumber":96,"author":{"gitId":"mxksowie"},"content":"        return ListFunction.applyFunctionToList(list, function);"},{"lineNumber":97,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":99,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"mxksowie"},"content":"     * Obtain the LocalDateTime objects associated with each entry."},{"lineNumber":101,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"mxksowie"},"content":"    protected static List\u003cLocalDateTime\u003e convertListToLocalDateTimes(List\u003cFoodEntry\u003e list) {"},{"lineNumber":103,"author":{"gitId":"mxksowie"},"content":"        Function\u003cFoodEntry, LocalDateTime\u003e function \u003d x -\u003e {"},{"lineNumber":104,"author":{"gitId":"mxksowie"},"content":"            assert (x instanceof DatedFoodEntry) : \"A FoodEntry without a date was unexpectedly added and found\";"},{"lineNumber":105,"author":{"gitId":"mxksowie"},"content":"            DatedFoodEntry datedEntry \u003d (DatedFoodEntry) x;"},{"lineNumber":106,"author":{"gitId":"mxksowie"},"content":"            return datedEntry.getDateTime();"},{"lineNumber":107,"author":{"gitId":"mxksowie"},"content":"        };"},{"lineNumber":108,"author":{"gitId":"mxksowie"},"content":"        return ListFunction.applyFunctionToList(list, function);"},{"lineNumber":109,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":111,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"mxksowie"},"content":"     * Obtain the portion sizes associated with each food entry."},{"lineNumber":113,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"mxksowie"},"content":"    protected static List\u003cInteger\u003e convertListToPortionSizes(List\u003cFoodEntry\u003e list) {"},{"lineNumber":115,"author":{"gitId":"mxksowie"},"content":"        Function\u003cFoodEntry, Integer\u003e function \u003d x -\u003e x.getPortionSize();"},{"lineNumber":116,"author":{"gitId":"mxksowie"},"content":"        return ListFunction.applyFunctionToList(list, function);"},{"lineNumber":117,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":119,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"mxksowie"},"content":"     * Obtain only food entries after a specified dateTime."},{"lineNumber":121,"author":{"gitId":"mxksowie"},"content":"     * @param dateTime the start/\"before\" datetime for filtering."},{"lineNumber":122,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"mxksowie"},"content":"    protected static List\u003cFoodEntry\u003e filterListByDate(List\u003cFoodEntry\u003e list, LocalDateTime dateTime) {"},{"lineNumber":124,"author":{"gitId":"mxksowie"},"content":"        Predicate\u003cFoodEntry\u003e predicate \u003d x -\u003e {"},{"lineNumber":125,"author":{"gitId":"mxksowie"},"content":"            assert (x instanceof DatedFoodEntry) : \"A FoodEntry without a date was unexpectedly added and found\";"},{"lineNumber":126,"author":{"gitId":"mxksowie"},"content":"            DatedFoodEntry datedEntry \u003d (DatedFoodEntry) x;"},{"lineNumber":127,"author":{"gitId":"mxksowie"},"content":"            return dateTime.isBefore(datedEntry.getDateTime()) || dateTime.isEqual(datedEntry.getDateTime());"},{"lineNumber":128,"author":{"gitId":"mxksowie"},"content":"        };"},{"lineNumber":129,"author":{"gitId":"mxksowie"},"content":"        return ListFunction.filterList(list, predicate);"},{"lineNumber":130,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":132,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"mxksowie"},"content":"     * Obtain only food entries within a specified range of dateTimes."},{"lineNumber":134,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"mxksowie"},"content":"    protected static List\u003cFoodEntry\u003e filterListByDate(List\u003cFoodEntry\u003e list, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":136,"author":{"gitId":"mxksowie"},"content":"        assert (start.isBefore(end)) : \"End time should be later than start time.\";"},{"lineNumber":137,"author":{"gitId":"mxksowie"},"content":"        Predicate\u003cFoodEntry\u003e predicate \u003d x -\u003e {"},{"lineNumber":138,"author":{"gitId":"mxksowie"},"content":"            assert (x instanceof DatedFoodEntry) : \"A FoodEntry without a date was unexpectedly added and found\";"},{"lineNumber":139,"author":{"gitId":"mxksowie"},"content":"            DatedFoodEntry datedEntry \u003d (DatedFoodEntry) x;"},{"lineNumber":140,"author":{"gitId":"mxksowie"},"content":"            LocalDateTime entryDateTime \u003d datedEntry.getDateTime();"},{"lineNumber":141,"author":{"gitId":"mxksowie"},"content":"            return ((start.isBefore(entryDateTime) || start.isEqual(entryDateTime))"},{"lineNumber":142,"author":{"gitId":"mxksowie"},"content":"                    \u0026\u0026 (end.isAfter(datedEntry.getDateTime()) || end.isEqual(entryDateTime)));"},{"lineNumber":143,"author":{"gitId":"mxksowie"},"content":"        };"},{"lineNumber":144,"author":{"gitId":"mxksowie"},"content":"        return ListFunction.filterList(list, predicate);"},{"lineNumber":145,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":147,"author":{"gitId":"mxksowie"},"content":"    protected static List\u003cFoodEntry\u003e sortListByDate(List\u003cFoodEntry\u003e list) {"},{"lineNumber":148,"author":{"gitId":"mxksowie"},"content":"        Function\u003cFoodEntry, DatedFoodEntry\u003e extractChild \u003d x -\u003e {"},{"lineNumber":149,"author":{"gitId":"mxksowie"},"content":"            assert (x instanceof DatedFoodEntry) : \"A FoodEntry without a date was unexpectedly added and found\";"},{"lineNumber":150,"author":{"gitId":"mxksowie"},"content":"            return (DatedFoodEntry) x;"},{"lineNumber":151,"author":{"gitId":"mxksowie"},"content":"        };"},{"lineNumber":152,"author":{"gitId":"mxksowie"},"content":"        List\u003cDatedFoodEntry\u003e datedList \u003d ListFunction.applyFunctionToList(list, extractChild);"},{"lineNumber":153,"author":{"gitId":"mxksowie"},"content":"        Collections.sort(datedList);"},{"lineNumber":154,"author":{"gitId":"mxksowie"},"content":"        Function\u003cDatedFoodEntry, FoodEntry\u003e useParent \u003d x -\u003e (FoodEntry) x;"},{"lineNumber":155,"author":{"gitId":"mxksowie"},"content":"        return ListFunction.applyFunctionToList(datedList, useParent);"},{"lineNumber":156,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":157,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":159,"author":{"gitId":"mxksowie"},"content":"}"},{"lineNumber":160,"author":{"gitId":"mxksowie"},"content":""}],"authorContributionMap":{"HengFuYuen":2,"mxksowie":158}},{"path":"src/main/java/seedu/dietbook/list/FoodManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"public class FoodManager {"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"     * Static constructor method to create the Food objects required by FoodEntry."},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":"     * It decides if there are empty values provided and creates either an OptionalFood"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"     * or simply the default food object."},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"     * @param name name of food item"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":"     * @param calorie int value for calorie content"},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":"     * @param carbohydrate int value for carbohydrate content"},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":"     * @param protein int value for protein content"},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"     * @param fat int value for fat content"},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"     * @return Food object: could be instance of Food or OptionalFood (child)."},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"    protected static Food createFood(String name, int calorie, "},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"            int carbohydrate, int protein, int fat) {"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"        if (calorie \u003d\u003d OptionalFood.EMPTY_VALUE || carbohydrate \u003d\u003d OptionalFood.EMPTY_VALUE"},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"                || calorie \u003d\u003d OptionalFood.EMPTY_VALUE"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"                || fat \u003d\u003d OptionalFood.EMPTY_VALUE) {"},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"            return new OptionalFood(name, calorie, carbohydrate, protein, fat);"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":"        return new Food(name, calorie, carbohydrate, protein, fat);"},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"     * Returns a new Food object with no missing values."},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"     * Instances of OptionalFood are converted into Food with recalculated values for use by other classes."},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"     * @param food instance of Food or OptionalFood"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"     * @return Food object with no missing values."},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"    protected static Food retrieveFood(Food food) {"},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"        if (! (food instanceof OptionalFood)) {"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"            return food;"},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"        // Find out which parameters are missing. "},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"        // Only 4 scenarios: Calorie missing. Other 3 Nutrients missing. 2 Missing. 1 Missing."},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":"        int calorie \u003d food.getCalorie();"},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":"        int carbohydrate \u003d food.getCarbohydrate();"},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":"        int protein \u003d food.getProtein();"},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":"        int fat \u003d food.getFat();"},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":"        // Calorie missing:"},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":"        if (calorie \u003d\u003d OptionalFood.EMPTY_VALUE) {"},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"            assert (carbohydrate !\u003d OptionalFood.EMPTY_VALUE) : \"Carbohydrate cannot be empty when calorie is empty\";"},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":"            assert (protein !\u003d OptionalFood.EMPTY_VALUE) : \"Protein cannot be empty when calorie is empty\";"},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"            assert (fat !\u003d OptionalFood.EMPTY_VALUE) : \"Fat cannot be empty when calorie is empty\";"},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":"            "},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":"            // calculate calories:"},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":"            calorie \u003d NutritionCalculator.calculateCalorieFromNutrients(carbohydrate, protein, fat);"},{"lineNumber":53,"author":{"gitId":"mxksowie"},"content":"            return new Food(food.getName(), calorie, carbohydrate, protein, fat);"},{"lineNumber":54,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":56,"author":{"gitId":"mxksowie"},"content":"        // Other values missing instead:"},{"lineNumber":57,"author":{"gitId":"mxksowie"},"content":"        // Recalculate missing parameters based on known parameters."},{"lineNumber":58,"author":{"gitId":"mxksowie"},"content":"        NutrientData data \u003d NutritionCalculator.calculateNutrientsFromCalorie(calorie, carbohydrate, protein, fat);"},{"lineNumber":59,"author":{"gitId":"mxksowie"},"content":"    "},{"lineNumber":60,"author":{"gitId":"mxksowie"},"content":"        return new Food(food.getName(), data.calorie, data.carbohydrate, data.protein, data.fat);"},{"lineNumber":61,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":62,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":64,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":64}},{"path":"src/main/java/seedu/dietbook/list/FoodNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"public class FoodNotFoundException extends Exception{"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"HengFuYuen":1,"mxksowie":3}},{"path":"src/main/java/seedu/dietbook/list/ListFunction.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"import java.util.function.Function;"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"import java.util.function.Consumer;"},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":" * Functional programming support methods for Lists."},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":" */"},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"public class ListFunction {"},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"     * Maps a function across a list."},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"     * @param list list to operate on"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"     * @param function function to be mapped across list"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"     * @return list of mapped items under provided function"},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"    protected static \u003cT, E\u003e ArrayList\u003cE\u003e applyFunctionToList(List\u003cT\u003e list, Function\u003cT, E\u003e function) {"},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"        ArrayList\u003cE\u003e appliedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"        Consumer\u003cT\u003e addResultToAppliedList \u003d x -\u003e appliedList.add(function.apply(x));"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":"        list.forEach(addResultToAppliedList);"},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"        return appliedList;"},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"     * Filters the list by the given predicate."},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"    protected static \u003cT\u003e List\u003cT\u003e filterList(List\u003cT\u003e list, Predicate\u003cT\u003e predicate) {"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":"        return list.stream().filter(predicate).collect(Collectors.toList());"},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":34}},{"path":"src/main/java/seedu/dietbook/list/NutrientData.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":" * Data class to hold nutrient info."},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":" */"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"public class NutrientData {"},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"    protected final int calorie;"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":"    protected final int carbohydrate;"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"    protected final int protein;"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"    protected final int fat;"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":"    protected NutrientData(int calorie, int carbohydrate, int protein, int fat) {"},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":"        assert (calorie \u003e\u003d 0) : \"Should not have negative calorie value\";"},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"        assert (carbohydrate \u003e\u003d 0) : \"Should not have negative carbohydrate value\";"},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"        assert (protein \u003e\u003d 0) : \"Should not have negative protein value\";"},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"        assert (fat \u003e\u003d 0) : \"Should not have negative fat value\";"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"        this.calorie \u003d calorie;"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"        this.carbohydrate \u003d carbohydrate;"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"        this.protein \u003d protein;"},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"        this.fat \u003d fat;"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":22}},{"path":"src/main/java/seedu/dietbook/list/NutritionCalculator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"import java.util.Map;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":" * Collection of methods that help with guesstimating/calculating missing nutrition values."},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":" */"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"public class NutritionCalculator {"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":"    private static final int NUM_OF_NUTRIENTS \u003d 3;"},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"     * Calculates the calories by summing up the weighted contributions of the individual nutrients."},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"    protected static int calculateCalorieFromNutrients(int carbohydrate, int protein, int fat) {"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"        return carbohydrate * 4 + protein * 4 + fat * 9;"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"     * Divides up the calories among the nutrients that are empty."},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"    protected static NutrientData calculateNutrientsFromCalorie(int calorie, int carbohydrate, int protein, int fat) {"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":"        assert (calorie !\u003d OptionalFood.EMPTY_VALUE);"},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"        Map\u003cNutrient, Integer\u003e map \u003d new HashMap\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"        map.put(Nutrient.CARBOHYDRATE, carbohydrate);"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"        map.put(Nutrient.PROTEIN, protein);"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"        map.put(Nutrient.FAT, fat);"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":"        ArrayList\u003cInteger\u003e calorieCounts \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"        map.forEach((x, y) -\u003e {"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"            if (y \u003d\u003d OptionalFood.EMPTY_VALUE) {"},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"                return;"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"            } else if (x.equals(Nutrient.FAT)) {"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"                calorieCounts.add(y * 9);"},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":"            } else {"},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":"                calorieCounts.add(y * 4);"},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":"        });"},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":"        int existingCalories \u003d 0;"},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":"        int emptyCount \u003d NUM_OF_NUTRIENTS - calorieCounts.size();"},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"        for (Integer calorieCount : calorieCounts) {"},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":"            existingCalories +\u003d calorieCount;"},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":"        int dividedCalorie \u003d (calorie - existingCalories) / emptyCount;"},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":53,"author":{"gitId":"mxksowie"},"content":"        Map.copyOf(map).forEach((x, y) -\u003e {"},{"lineNumber":54,"author":{"gitId":"mxksowie"},"content":"            if (y !\u003d OptionalFood.EMPTY_VALUE) {"},{"lineNumber":55,"author":{"gitId":"mxksowie"},"content":"                return;"},{"lineNumber":56,"author":{"gitId":"mxksowie"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"mxksowie"},"content":"            if (x.equals(Nutrient.FAT)) {"},{"lineNumber":58,"author":{"gitId":"mxksowie"},"content":"                map.put(x, dividedCalorie / 9);"},{"lineNumber":59,"author":{"gitId":"mxksowie"},"content":"                return;"},{"lineNumber":60,"author":{"gitId":"mxksowie"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"mxksowie"},"content":"            map.put(x, dividedCalorie / 4);"},{"lineNumber":62,"author":{"gitId":"mxksowie"},"content":"        });"},{"lineNumber":63,"author":{"gitId":"mxksowie"},"content":"        return new NutrientData(calorie, map.get(Nutrient.CARBOHYDRATE),"},{"lineNumber":64,"author":{"gitId":"mxksowie"},"content":"                 map.get(Nutrient.PROTEIN), map.get(Nutrient.FAT));"},{"lineNumber":65,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":66,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":68,"author":{"gitId":"mxksowie"},"content":"    private enum Nutrient {"},{"lineNumber":69,"author":{"gitId":"mxksowie"},"content":"        CARBOHYDRATE,"},{"lineNumber":70,"author":{"gitId":"mxksowie"},"content":"        PROTEIN,"},{"lineNumber":71,"author":{"gitId":"mxksowie"},"content":"        FAT"},{"lineNumber":72,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":73}},{"path":"src/main/java/seedu/dietbook/list/OptionalFood.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"import seedu.dietbook.utils.StringFormatter;"},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"import seedu.dietbook.utils.NoReplacementFoundException;"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":" * Child class of Food that supports \"empty\" fields."},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":" * Is also handled as a data class with methods to query the existence of empty fields."},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":" */"},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"public class OptionalFood extends Food {"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"    private final Map\u003cNutrient, String\u003e nutrientStrings;"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"    public static final int EMPTY_VALUE \u003d -1;"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"     * Only default constructor method. It is the same as the constructor method for Food."},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"    public OptionalFood(String name, int calorie, int carbohydrate, int protein, int fat) {"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":"        super(name, calorie, carbohydrate, protein, fat);"},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"        nutrientStrings \u003d new HashMap\u003cNutrient, String\u003e();"},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"        assert (calorie \u003e\u003d 0 || calorie \u003d\u003d -1) : \"Invalid value for calorie detected\";"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"        addNutrientStringToMap(nutrientStrings, Nutrient.calorie, calorie);"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"        assert (carbohydrate \u003e\u003d 0 || carbohydrate \u003d\u003d -1) : \"Invalid value for carbohydrate detected\";"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":"        addNutrientStringToMap(nutrientStrings, Nutrient.carbohydrate, carbohydrate);"},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"        assert (protein \u003e\u003d 0 || protein \u003d\u003d -1) : \"Invalid value for protein detected\";"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"        addNutrientStringToMap(nutrientStrings, Nutrient.protein, protein);"},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"        assert (fat \u003e\u003d 0 || fat \u003d\u003d -1) : \"Invalid value for fat detected\";"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"        addNutrientStringToMap(nutrientStrings, Nutrient.fat, fat);"},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":"     * Checks if nutrient value is empty and assigns its corresponding string representation to the map."},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":"     * Either \"-\" or the integer value."},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":"    private void addNutrientStringToMap(Map\u003cNutrient, String\u003e map, Nutrient nutrient, int nutrientValue) {"},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"        if (nutrientValue \u003d\u003d EMPTY_VALUE) {"},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":"            map.put(nutrient, \"-\");"},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":"            map.put(nutrient, String.valueOf(nutrientValue));"},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":54,"author":{"gitId":"mxksowie"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"mxksowie"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"mxksowie"},"content":"        ArrayList\u003cString\u003e strings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"mxksowie"},"content":"        strings.add(super.getName());"},{"lineNumber":58,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":59,"author":{"gitId":"mxksowie"},"content":"        Map\u003cString, String\u003e stringMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":60,"author":{"gitId":"mxksowie"},"content":"        nutrientStrings.forEach((x, y) -\u003e stringMap.put(x.toString(), y));"},{"lineNumber":61,"author":{"gitId":"mxksowie"},"content":"        String text \u003d \"calorie : ${calorie}, protein : ${protein}, carbohydrate : ${carbohydrate}, fats : ${fats}\";"},{"lineNumber":62,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":63,"author":{"gitId":"mxksowie"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"mxksowie"},"content":"            Arrays.asList(StringFormatter.formatStringWithMap(text, stringMap)"},{"lineNumber":65,"author":{"gitId":"mxksowie"},"content":"                    .split(\",\"))"},{"lineNumber":66,"author":{"gitId":"mxksowie"},"content":"                    .forEach(x -\u003e strings.add(x));"},{"lineNumber":67,"author":{"gitId":"mxksowie"},"content":"        } catch (NoReplacementFoundException e) { // should not be allowed to happen"},{"lineNumber":68,"author":{"gitId":"mxksowie"},"content":"            assert (false) : \"Error with String formatting: \" + e.getMessage();"},{"lineNumber":69,"author":{"gitId":"mxksowie"},"content":"            nutrientStrings.forEach((x, y) -\u003e strings.add(String.format(\"%s : %s\", x.toString(), y)));"},{"lineNumber":70,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":72,"author":{"gitId":"mxksowie"},"content":"        return String.join(\" | \", strings);"},{"lineNumber":73,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":75,"author":{"gitId":"mxksowie"},"content":"    private enum Nutrient {"},{"lineNumber":76,"author":{"gitId":"mxksowie"},"content":"        calorie,"},{"lineNumber":77,"author":{"gitId":"mxksowie"},"content":"        carbohydrate,"},{"lineNumber":78,"author":{"gitId":"mxksowie"},"content":"        protein,"},{"lineNumber":79,"author":{"gitId":"mxksowie"},"content":"        fat {"},{"lineNumber":80,"author":{"gitId":"mxksowie"},"content":"            @Override"},{"lineNumber":81,"author":{"gitId":"mxksowie"},"content":"            public String toString() {"},{"lineNumber":82,"author":{"gitId":"mxksowie"},"content":"                return \"fats\";"},{"lineNumber":83,"author":{"gitId":"mxksowie"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"mxksowie"},"content":"        };"},{"lineNumber":85,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"mxksowie"},"content":"    "},{"lineNumber":87,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":87}},{"path":"src/main/java/seedu/dietbook/logger/MainLogger.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.logger;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Handler;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Level;"},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":" * Represents a logger that other classes can utilise to minimise code duplications."},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":" * A \u003ccode\u003eMainLogger\u003c/code\u003e object creates a logger and console handler and sets their level."},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":" */"},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":"public class MainLogger {"},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":"    private final Logger logger;"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    //@@author HengFuYuen-reused"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    //Reused from https://stackoverflow.com/a/6315736 with minor modifications"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs a \u003ccode\u003eMainLogger\u003c/code\u003e given the name of the class that uses the logger."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param className The name of the class that uses the logger."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public MainLogger(String className) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assert className !\u003d null : \"Class name cannot be null\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assert className.trim().length() \u003e 0 : \"Class name cannot be an empty string\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        logger \u003d Logger.getLogger(className);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Handler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(Level.SEVERE);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        logger.setLevel(Level.SEVERE);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Logs into the console handler given a message level identifier and message."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param level A message level identifier."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param message The string message to log."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void log(Level level, String message) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assert level !\u003d null : \"Logging level should not be null\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assert message !\u003d null : \"Log message should not be null\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assert message.trim().length() \u003e 0 : \"Log message should not be an empty string\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        logger.log(level, message);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"HengFuYuen":15,"-":33}},{"path":"src/main/java/seedu/dietbook/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"package seedu.dietbook.parser;"},{"lineNumber":2,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":3,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.database.DataBase;"},{"lineNumber":4,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.list.FoodList;"},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.person.Gender;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.person.FitnessLevel;"},{"lineNumber":8,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":9,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.Manager;"},{"lineNumber":10,"author":{"gitId":"tikimonarch"},"content":"import seedu.dietbook.checker.InputChecker;"},{"lineNumber":11,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":12,"author":{"gitId":"tikimonarch"},"content":"import java.time.LocalDateTime;"},{"lineNumber":13,"author":{"gitId":"tikimonarch"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":14,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":15,"author":{"gitId":"tikimonarch"},"content":"//@@author tikimonarch"},{"lineNumber":16,"author":{"gitId":"tikimonarch"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"tikimonarch"},"content":" * Parser class of the program."},{"lineNumber":18,"author":{"gitId":"tikimonarch"},"content":" * The parser class takes in user input and process it into command data that manager can use."},{"lineNumber":19,"author":{"gitId":"tikimonarch"},"content":" *"},{"lineNumber":20,"author":{"gitId":"tikimonarch"},"content":" * @author tikimonarch"},{"lineNumber":21,"author":{"gitId":"tikimonarch"},"content":" */"},{"lineNumber":22,"author":{"gitId":"tikimonarch"},"content":"public class Parser {"},{"lineNumber":23,"author":{"gitId":"tikimonarch"},"content":"    public static final int TIME_FORMAT_LENGTH \u003d 16;"},{"lineNumber":24,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_ADD \u003d \"add\";"},{"lineNumber":25,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_CALCULATE \u003d \"calculate\";"},{"lineNumber":26,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_EDIT_INFO \u003d \"editinfo\";"},{"lineNumber":27,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_INFO \u003d \"info\";"},{"lineNumber":28,"author":{"gitId":"tikimonarch"},"content":"    public static final String COMMAND_NAME \u003d \"name\";"},{"lineNumber":29,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] PARAM_INFO \u003d {\"g/\",\"a/\",\"h/\",\"f/\",\"o/\",\"t/\",\"c/\"};"},{"lineNumber":30,"author":{"gitId":"tikimonarch"},"content":"    public static final String[] PARAM_EDIT_INFO \u003d {\"n/\",\"g/\",\"a/\",\"h/\",\"f/\",\"o/\",\"t/\",\"c/\"};"},{"lineNumber":31,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":32,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tikimonarch"},"content":"     * Returns the command of a user input."},{"lineNumber":34,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput which is user input."},{"lineNumber":36,"author":{"gitId":"tikimonarch"},"content":"     * @return First word which is the command of the user input."},{"lineNumber":37,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"tikimonarch"},"content":"    public static String getCommand(String userInput) {"},{"lineNumber":39,"author":{"gitId":"tikimonarch"},"content":"        return userInput.split(\" \")[0];"},{"lineNumber":40,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":42,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tikimonarch"},"content":"     * Returns the index after the command of a user input, e.g. delete 3."},{"lineNumber":44,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":46,"author":{"gitId":"tikimonarch"},"content":"     * @return index part of the user input."},{"lineNumber":47,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when the user input is of a wrong format."},{"lineNumber":48,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"tikimonarch"},"content":"    public static int getCommandIndex(String userInput) throws DietException {"},{"lineNumber":50,"author":{"gitId":"tikimonarch"},"content":"        String command \u003d getCommand(userInput);"},{"lineNumber":51,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":52,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkEmpty(userInput, command);"},{"lineNumber":53,"author":{"gitId":"tikimonarch"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"tikimonarch"},"content":"            return Integer.parseInt(userInput.split(\"\\\\s+\")[1]);"},{"lineNumber":55,"author":{"gitId":"tikimonarch"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":56,"author":{"gitId":"tikimonarch"},"content":"            throw new DietException(\"No integer index detected!\");"},{"lineNumber":57,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":60,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"tikimonarch"},"content":"     * Returns the subsequent parameter after the command from the user input."},{"lineNumber":62,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":64,"author":{"gitId":"tikimonarch"},"content":"     * @return parameter part of the user input."},{"lineNumber":65,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when the user input is of a wrong format."},{"lineNumber":66,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"tikimonarch"},"content":"    public static String getCommandParam(String userInput) throws DietException {"},{"lineNumber":68,"author":{"gitId":"tikimonarch"},"content":"        String command \u003d getCommand(userInput);"},{"lineNumber":69,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":70,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkEmpty(userInput, command);"},{"lineNumber":71,"author":{"gitId":"tikimonarch"},"content":"        switch (command) {"},{"lineNumber":72,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_NAME:"},{"lineNumber":73,"author":{"gitId":"tikimonarch"},"content":"            return userInput.split(\"name\")[1].trim();"},{"lineNumber":74,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_CALCULATE:"},{"lineNumber":75,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkNutrientType(userInput);"},{"lineNumber":76,"author":{"gitId":"tikimonarch"},"content":"            return userInput.split(\"calculate\")[1].trim();"},{"lineNumber":77,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_ADD:"},{"lineNumber":78,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkAddParam(userInput);"},{"lineNumber":79,"author":{"gitId":"tikimonarch"},"content":"            return userInput.substring(userInput.indexOf(\u0027 \u0027) + 1);"},{"lineNumber":80,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_INFO:"},{"lineNumber":81,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkInfoParam(userInput);"},{"lineNumber":82,"author":{"gitId":"tikimonarch"},"content":"            return userInput.substring(userInput.indexOf(\u0027 \u0027) + 1);"},{"lineNumber":83,"author":{"gitId":"tikimonarch"},"content":"        case COMMAND_EDIT_INFO:"},{"lineNumber":84,"author":{"gitId":"tikimonarch"},"content":"            return userInput.substring(userInput.indexOf(\u0027 \u0027) + 1);"},{"lineNumber":85,"author":{"gitId":"tikimonarch"},"content":"        default:"},{"lineNumber":86,"author":{"gitId":"tikimonarch"},"content":"            return null;"},{"lineNumber":87,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":89,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":91,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"tikimonarch"},"content":"     * Processes the parameters for \u003ccode\u003eadd\u003c/code\u003e command of user input and adds a \u003ccode\u003eFood\u003c/code\u003e object."},{"lineNumber":93,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":95,"author":{"gitId":"tikimonarch"},"content":"     * @param foodList the FoodList object."},{"lineNumber":96,"author":{"gitId":"tikimonarch"},"content":"     * @return name of the food that was added."},{"lineNumber":97,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when the user input is of a wrong format."},{"lineNumber":98,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"tikimonarch"},"content":"    public static String getProcessedAdd(String userInput, FoodList foodList, DataBase dataBase) throws DietException {"},{"lineNumber":100,"author":{"gitId":"tikimonarch"},"content":"        int portionSize \u003d 1;"},{"lineNumber":101,"author":{"gitId":"tikimonarch"},"content":"        int dataIndex \u003d 0;"},{"lineNumber":102,"author":{"gitId":"tikimonarch"},"content":"        int calorie \u003d 0;"},{"lineNumber":103,"author":{"gitId":"tikimonarch"},"content":"        int carb \u003d -1;"},{"lineNumber":104,"author":{"gitId":"tikimonarch"},"content":"        int protein \u003d -1;"},{"lineNumber":105,"author":{"gitId":"tikimonarch"},"content":"        int fat \u003d -1;"},{"lineNumber":106,"author":{"gitId":"tikimonarch"},"content":"        String foodName \u003d \"Food Name\";"},{"lineNumber":107,"author":{"gitId":"tikimonarch"},"content":"        String trimmedParam;"},{"lineNumber":108,"author":{"gitId":"tikimonarch"},"content":"        String[] processedParam;"},{"lineNumber":109,"author":{"gitId":"tikimonarch"},"content":"        String[] paramList \u003d {\"x/\", \"n/\", \"k/\", \"c/\", \"p/\", \"f/\"};"},{"lineNumber":110,"author":{"gitId":"tikimonarch"},"content":"        if (userInput.contains(\"i/\")) {"},{"lineNumber":111,"author":{"gitId":"tikimonarch"},"content":"            paramList \u003d new String[]{\"x/\", \"i/\"};"},{"lineNumber":112,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkRepeatedOption(getCommand(userInput), getCommandParam(userInput));"},{"lineNumber":114,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkValidOptions(userInput, paramList);"},{"lineNumber":115,"author":{"gitId":"tikimonarch"},"content":"        for (String param: paramList) {"},{"lineNumber":116,"author":{"gitId":"tikimonarch"},"content":"            if (getCommandParam(userInput).contains(param)) {"},{"lineNumber":117,"author":{"gitId":"tikimonarch"},"content":"                processedParam \u003d getCommandParam(userInput).split(param);"},{"lineNumber":118,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkEmptyOption(processedParam, param);"},{"lineNumber":119,"author":{"gitId":"tikimonarch"},"content":"                trimmedParam \u003d processedParam[1].trim();"},{"lineNumber":120,"author":{"gitId":"tikimonarch"},"content":"                if (processedParam[1].contains(\"/\")) {"},{"lineNumber":121,"author":{"gitId":"tikimonarch"},"content":"                    trimmedParam \u003d processedParam[1].substring(0, processedParam[1].indexOf(\"/\") - 1).trim();"},{"lineNumber":122,"author":{"gitId":"tikimonarch"},"content":"                    if (InputChecker.checkDate(trimmedParam)) {"},{"lineNumber":123,"author":{"gitId":"tikimonarch"},"content":"                        throw new DietException(\"Date time stated in the wrong place!\");"},{"lineNumber":124,"author":{"gitId":"tikimonarch"},"content":"                    }"},{"lineNumber":125,"author":{"gitId":"tikimonarch"},"content":"                } else if (trimmedParam.split(\"\\\\s+\").length \u003e\u003d 2) {"},{"lineNumber":126,"author":{"gitId":"tikimonarch"},"content":"                    if (InputChecker.checkDate(trimmedParam)) {"},{"lineNumber":127,"author":{"gitId":"tikimonarch"},"content":"                        int lengthWithoutTime \u003d trimmedParam.length() - TIME_FORMAT_LENGTH;"},{"lineNumber":128,"author":{"gitId":"tikimonarch"},"content":"                        trimmedParam \u003d trimmedParam.substring(0, lengthWithoutTime).trim();"},{"lineNumber":129,"author":{"gitId":"tikimonarch"},"content":"                    }"},{"lineNumber":130,"author":{"gitId":"tikimonarch"},"content":"                }"},{"lineNumber":131,"author":{"gitId":"tikimonarch"},"content":"                switch (param) {"},{"lineNumber":132,"author":{"gitId":"tikimonarch"},"content":"                case \"x/\":"},{"lineNumber":133,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":134,"author":{"gitId":"tikimonarch"},"content":"                    portionSize \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":135,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkFoodLimit(portionSize);"},{"lineNumber":136,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":137,"author":{"gitId":"tikimonarch"},"content":"                case \"n/\":"},{"lineNumber":138,"author":{"gitId":"tikimonarch"},"content":"                    foodName \u003d trimmedParam;"},{"lineNumber":139,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":140,"author":{"gitId":"tikimonarch"},"content":"                case \"i/\":"},{"lineNumber":141,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":142,"author":{"gitId":"tikimonarch"},"content":"                    dataIndex \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":143,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":144,"author":{"gitId":"tikimonarch"},"content":"                case \"k/\":"},{"lineNumber":145,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":146,"author":{"gitId":"tikimonarch"},"content":"                    calorie \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":147,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkFoodLimit(calorie);"},{"lineNumber":148,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":149,"author":{"gitId":"tikimonarch"},"content":"                case \"c/\":"},{"lineNumber":150,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":151,"author":{"gitId":"tikimonarch"},"content":"                    carb \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":152,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkFoodLimit(carb);"},{"lineNumber":153,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":154,"author":{"gitId":"tikimonarch"},"content":"                case \"p/\":"},{"lineNumber":155,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":156,"author":{"gitId":"tikimonarch"},"content":"                    protein \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":157,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkFoodLimit(protein);"},{"lineNumber":158,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":159,"author":{"gitId":"tikimonarch"},"content":"                default:"},{"lineNumber":160,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":161,"author":{"gitId":"tikimonarch"},"content":"                    fat \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":162,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkFoodLimit(fat);"},{"lineNumber":163,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":164,"author":{"gitId":"tikimonarch"},"content":"                }"},{"lineNumber":165,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"tikimonarch"},"content":"        if (InputChecker.checkDate(userInput)) {"},{"lineNumber":168,"author":{"gitId":"tikimonarch"},"content":"            processedParam \u003d userInput.split(\"\\\\s+\");"},{"lineNumber":169,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkDateValidity(processedParam[processedParam.length - 1]);"},{"lineNumber":170,"author":{"gitId":"tikimonarch"},"content":"            LocalDateTime time \u003d LocalDateTime.parse(processedParam[processedParam.length - 1]);"},{"lineNumber":171,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkFutureDate(time);"},{"lineNumber":172,"author":{"gitId":"tikimonarch"},"content":"            if (userInput.contains(\"i/\")) {"},{"lineNumber":173,"author":{"gitId":"tikimonarch"},"content":"                try {"},{"lineNumber":174,"author":{"gitId":"tikimonarch"},"content":"                    Food searchedFood \u003d dataBase.searchFoodByIndex(dataIndex);"},{"lineNumber":175,"author":{"gitId":"tikimonarch"},"content":"                    return foodList.addFoodAtDateTime(portionSize, searchedFood, time);"},{"lineNumber":176,"author":{"gitId":"tikimonarch"},"content":"                } catch (NoSuchElementException e) {"},{"lineNumber":177,"author":{"gitId":"tikimonarch"},"content":"                    throw new DietException(\"No such index!\");"},{"lineNumber":178,"author":{"gitId":"tikimonarch"},"content":"                }"},{"lineNumber":179,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":180,"author":{"gitId":"tikimonarch"},"content":"            return foodList.addFoodAtDateTime(portionSize, foodName, calorie, carb, protein, fat, time);"},{"lineNumber":181,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"tikimonarch"},"content":"        if (userInput.contains(\"i/\")) {"},{"lineNumber":183,"author":{"gitId":"tikimonarch"},"content":"            try {"},{"lineNumber":184,"author":{"gitId":"tikimonarch"},"content":"                Food searchedFood \u003d dataBase.searchFoodByIndex(dataIndex);"},{"lineNumber":185,"author":{"gitId":"tikimonarch"},"content":"                return foodList.addFood(portionSize, searchedFood);"},{"lineNumber":186,"author":{"gitId":"tikimonarch"},"content":"            } catch (NoSuchElementException e) {"},{"lineNumber":187,"author":{"gitId":"tikimonarch"},"content":"                throw new DietException(\"No such index!\");"},{"lineNumber":188,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":189,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"tikimonarch"},"content":"        return foodList.addFood(portionSize, foodName, calorie, carb, protein, fat);"},{"lineNumber":191,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":193,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"tikimonarch"},"content":"     * Processes the parameters for \u003ccode\u003einfo\u003c/code\u003e command of user input and updates the \u003ccode\u003ePerson\u003c/code\u003e object."},{"lineNumber":195,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":196,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":197,"author":{"gitId":"tikimonarch"},"content":"     * @param manager the manager object."},{"lineNumber":198,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when the user input is of a wrong format."},{"lineNumber":199,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"tikimonarch"},"content":"    public static void executeProcessedInfo(String userInput, Manager manager) throws DietException {"},{"lineNumber":201,"author":{"gitId":"tikimonarch"},"content":"        Gender gender \u003d Gender.MALE;"},{"lineNumber":202,"author":{"gitId":"tikimonarch"},"content":"        FitnessLevel fitLvl \u003d FitnessLevel.NONE;"},{"lineNumber":203,"author":{"gitId":"tikimonarch"},"content":"        int age \u003d 0;"},{"lineNumber":204,"author":{"gitId":"tikimonarch"},"content":"        int height \u003d 0;"},{"lineNumber":205,"author":{"gitId":"tikimonarch"},"content":"        int orgWeight \u003d 0;"},{"lineNumber":206,"author":{"gitId":"tikimonarch"},"content":"        int currWeight \u003d 0;"},{"lineNumber":207,"author":{"gitId":"tikimonarch"},"content":"        int tarWeight \u003d 0;"},{"lineNumber":208,"author":{"gitId":"tikimonarch"},"content":"        String trimmedParam;"},{"lineNumber":209,"author":{"gitId":"tikimonarch"},"content":"        String[] processedParam;"},{"lineNumber":210,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkRepeatedOption(getCommand(userInput), getCommandParam(userInput));"},{"lineNumber":211,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkValidOptions(userInput, PARAM_INFO);"},{"lineNumber":212,"author":{"gitId":"tikimonarch"},"content":"        for (String param: PARAM_INFO) {"},{"lineNumber":213,"author":{"gitId":"tikimonarch"},"content":"            processedParam \u003d getCommandParam(userInput).split(param);"},{"lineNumber":214,"author":{"gitId":"tikimonarch"},"content":"            InputChecker.checkEmptyOption(processedParam, param);"},{"lineNumber":215,"author":{"gitId":"tikimonarch"},"content":"            trimmedParam \u003d processedParam[1].trim();"},{"lineNumber":216,"author":{"gitId":"tikimonarch"},"content":"            if (processedParam[1].contains(\"/\")) {"},{"lineNumber":217,"author":{"gitId":"tikimonarch"},"content":"                trimmedParam \u003d processedParam[1].substring(0, processedParam[1].indexOf(\"/\") - 1).trim();"},{"lineNumber":218,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":219,"author":{"gitId":"tikimonarch"},"content":"            switch (param) {"},{"lineNumber":220,"author":{"gitId":"tikimonarch"},"content":"            case \"g/\":"},{"lineNumber":221,"author":{"gitId":"tikimonarch"},"content":"                String processGender \u003d trimmedParam;"},{"lineNumber":222,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkGender(processGender);              "},{"lineNumber":223,"author":{"gitId":"tikimonarch"},"content":"                if (processGender.equals(\"F\")) {"},{"lineNumber":224,"author":{"gitId":"tikimonarch"},"content":"                    gender \u003d Gender.FEMALE;"},{"lineNumber":225,"author":{"gitId":"tikimonarch"},"content":"                } else if (processGender.equals(\"O\")) {"},{"lineNumber":226,"author":{"gitId":"tikimonarch"},"content":"                    gender \u003d Gender.OTHERS;"},{"lineNumber":227,"author":{"gitId":"tikimonarch"},"content":"                }"},{"lineNumber":228,"author":{"gitId":"tikimonarch"},"content":"                break;"},{"lineNumber":229,"author":{"gitId":"tikimonarch"},"content":"            case \"a/\":"},{"lineNumber":230,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":231,"author":{"gitId":"tikimonarch"},"content":"                age \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":232,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkAgeLimit(age);"},{"lineNumber":233,"author":{"gitId":"tikimonarch"},"content":"                break;"},{"lineNumber":234,"author":{"gitId":"tikimonarch"},"content":"            case \"h/\":"},{"lineNumber":235,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":236,"author":{"gitId":"tikimonarch"},"content":"                height \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":237,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkHeightLimit(height);"},{"lineNumber":238,"author":{"gitId":"tikimonarch"},"content":"                break;"},{"lineNumber":239,"author":{"gitId":"tikimonarch"},"content":"            case \"o/\":"},{"lineNumber":240,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":241,"author":{"gitId":"tikimonarch"},"content":"                orgWeight \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":242,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkWeightLimit(orgWeight);"},{"lineNumber":243,"author":{"gitId":"tikimonarch"},"content":"                break;"},{"lineNumber":244,"author":{"gitId":"tikimonarch"},"content":"            case \"c/\":"},{"lineNumber":245,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":246,"author":{"gitId":"tikimonarch"},"content":"                currWeight \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":247,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkWeightLimit(currWeight);"},{"lineNumber":248,"author":{"gitId":"tikimonarch"},"content":"                break;"},{"lineNumber":249,"author":{"gitId":"tikimonarch"},"content":"            case \"t/\":"},{"lineNumber":250,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":251,"author":{"gitId":"tikimonarch"},"content":"                tarWeight \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":252,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkWeightLimit(tarWeight);"},{"lineNumber":253,"author":{"gitId":"tikimonarch"},"content":"                break;"},{"lineNumber":254,"author":{"gitId":"tikimonarch"},"content":"            default:"},{"lineNumber":255,"author":{"gitId":"tikimonarch"},"content":"                String processFitLvl \u003d trimmedParam;"},{"lineNumber":256,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkFitness(processFitLvl);"},{"lineNumber":257,"author":{"gitId":"tikimonarch"},"content":"                if (processFitLvl.equals(\"1\")) {"},{"lineNumber":258,"author":{"gitId":"tikimonarch"},"content":"                    fitLvl \u003d FitnessLevel.NONE;"},{"lineNumber":259,"author":{"gitId":"tikimonarch"},"content":"                } else if (processFitLvl.equals(\"2\")) {"},{"lineNumber":260,"author":{"gitId":"tikimonarch"},"content":"                    fitLvl \u003d FitnessLevel.LOW;"},{"lineNumber":261,"author":{"gitId":"tikimonarch"},"content":"                } else if (processFitLvl.equals(\"3\")) {"},{"lineNumber":262,"author":{"gitId":"tikimonarch"},"content":"                    fitLvl \u003d FitnessLevel.MEDIUM;"},{"lineNumber":263,"author":{"gitId":"tikimonarch"},"content":"                } else if (processFitLvl.equals(\"4\")) {"},{"lineNumber":264,"author":{"gitId":"tikimonarch"},"content":"                    fitLvl \u003d FitnessLevel.HIGH;"},{"lineNumber":265,"author":{"gitId":"tikimonarch"},"content":"                } else {"},{"lineNumber":266,"author":{"gitId":"tikimonarch"},"content":"                    fitLvl \u003d FitnessLevel.EXTREME;"},{"lineNumber":267,"author":{"gitId":"tikimonarch"},"content":"                }"},{"lineNumber":268,"author":{"gitId":"tikimonarch"},"content":"                break;"},{"lineNumber":269,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":270,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":271,"author":{"gitId":"tikimonarch"},"content":"        manager.setPerson(manager.getName(), gender, age, height, orgWeight, currWeight, tarWeight, fitLvl);"},{"lineNumber":272,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"tikimonarch"},"content":""},{"lineNumber":274,"author":{"gitId":"tikimonarch"},"content":"    /**"},{"lineNumber":275,"author":{"gitId":"tikimonarch"},"content":"     * Processes the parameters for \u003ccode\u003eeditinfo\u003c/code\u003e command of user input."},{"lineNumber":276,"author":{"gitId":"tikimonarch"},"content":"     * The specified parameters are used to update the \u003ccode\u003ePerson\u003c/code\u003e object."},{"lineNumber":277,"author":{"gitId":"tikimonarch"},"content":"     *"},{"lineNumber":278,"author":{"gitId":"tikimonarch"},"content":"     * @param userInput user input."},{"lineNumber":279,"author":{"gitId":"tikimonarch"},"content":"     * @param manager the manager object."},{"lineNumber":280,"author":{"gitId":"tikimonarch"},"content":"     * @throws DietException when the user input is of a wrong format."},{"lineNumber":281,"author":{"gitId":"tikimonarch"},"content":"     */"},{"lineNumber":282,"author":{"gitId":"tikimonarch"},"content":"    public static void executeEditInfo(String userInput, Manager manager) throws DietException {"},{"lineNumber":283,"author":{"gitId":"tikimonarch"},"content":"        Gender gender;"},{"lineNumber":284,"author":{"gitId":"tikimonarch"},"content":"        FitnessLevel fitLvl;"},{"lineNumber":285,"author":{"gitId":"tikimonarch"},"content":"        String name;"},{"lineNumber":286,"author":{"gitId":"tikimonarch"},"content":"        int age;"},{"lineNumber":287,"author":{"gitId":"tikimonarch"},"content":"        int height;"},{"lineNumber":288,"author":{"gitId":"tikimonarch"},"content":"        int orgWeight;"},{"lineNumber":289,"author":{"gitId":"tikimonarch"},"content":"        int currWeight;"},{"lineNumber":290,"author":{"gitId":"tikimonarch"},"content":"        int tarWeight;"},{"lineNumber":291,"author":{"gitId":"tikimonarch"},"content":"        String trimmedParam;"},{"lineNumber":292,"author":{"gitId":"tikimonarch"},"content":"        String[] processedParam;"},{"lineNumber":293,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkRepeatedOption(getCommand(userInput), getCommandParam(userInput));"},{"lineNumber":294,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkForOption(userInput);"},{"lineNumber":295,"author":{"gitId":"tikimonarch"},"content":"        InputChecker.checkValidOptions(userInput, PARAM_EDIT_INFO);"},{"lineNumber":296,"author":{"gitId":"tikimonarch"},"content":"        for (String param : PARAM_EDIT_INFO) {"},{"lineNumber":297,"author":{"gitId":"tikimonarch"},"content":"            if (getCommandParam(userInput).contains(param)) {"},{"lineNumber":298,"author":{"gitId":"tikimonarch"},"content":"                processedParam \u003d getCommandParam(userInput).split(param);"},{"lineNumber":299,"author":{"gitId":"tikimonarch"},"content":"                InputChecker.checkEmptyOption(processedParam, param);"},{"lineNumber":300,"author":{"gitId":"tikimonarch"},"content":"                trimmedParam \u003d processedParam[1].trim();"},{"lineNumber":301,"author":{"gitId":"tikimonarch"},"content":"                if (processedParam[1].contains(\"/\")) {"},{"lineNumber":302,"author":{"gitId":"tikimonarch"},"content":"                    trimmedParam \u003d processedParam[1].substring(0, processedParam[1].indexOf(\"/\") - 1).trim();"},{"lineNumber":303,"author":{"gitId":"tikimonarch"},"content":"                }"},{"lineNumber":304,"author":{"gitId":"tikimonarch"},"content":"                switch (param) {"},{"lineNumber":305,"author":{"gitId":"tikimonarch"},"content":"                case \"g/\":"},{"lineNumber":306,"author":{"gitId":"tikimonarch"},"content":"                    String processGender \u003d trimmedParam;"},{"lineNumber":307,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkGender(processGender);"},{"lineNumber":308,"author":{"gitId":"tikimonarch"},"content":"                    if (processGender.equals(\"F\")) {"},{"lineNumber":309,"author":{"gitId":"tikimonarch"},"content":"                        gender \u003d Gender.FEMALE;"},{"lineNumber":310,"author":{"gitId":"tikimonarch"},"content":"                    } else if (processGender.equals(\"M\")) {"},{"lineNumber":311,"author":{"gitId":"tikimonarch"},"content":"                        gender \u003d Gender.MALE;"},{"lineNumber":312,"author":{"gitId":"tikimonarch"},"content":"                    } else {"},{"lineNumber":313,"author":{"gitId":"tikimonarch"},"content":"                        gender \u003d Gender.OTHERS;"},{"lineNumber":314,"author":{"gitId":"tikimonarch"},"content":"                    }"},{"lineNumber":315,"author":{"gitId":"tikimonarch"},"content":"                    manager.getPerson().setGender(gender);"},{"lineNumber":316,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":317,"author":{"gitId":"tikimonarch"},"content":"                case \"n/\":"},{"lineNumber":318,"author":{"gitId":"tikimonarch"},"content":"                    name \u003d trimmedParam;"},{"lineNumber":319,"author":{"gitId":"tikimonarch"},"content":"                    manager.getPerson().setName(name);"},{"lineNumber":320,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":321,"author":{"gitId":"tikimonarch"},"content":"                case \"a/\":"},{"lineNumber":322,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":323,"author":{"gitId":"tikimonarch"},"content":"                    age \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":324,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkAgeLimit(age);"},{"lineNumber":325,"author":{"gitId":"tikimonarch"},"content":"                    manager.getPerson().setAge(age);"},{"lineNumber":326,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":327,"author":{"gitId":"tikimonarch"},"content":"                case \"h/\":"},{"lineNumber":328,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":329,"author":{"gitId":"tikimonarch"},"content":"                    height \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":330,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkHeightLimit(height);"},{"lineNumber":331,"author":{"gitId":"tikimonarch"},"content":"                    manager.getPerson().setHeight(height);"},{"lineNumber":332,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":333,"author":{"gitId":"tikimonarch"},"content":"                case \"o/\":"},{"lineNumber":334,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":335,"author":{"gitId":"tikimonarch"},"content":"                    orgWeight \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":336,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkWeightLimit(orgWeight);"},{"lineNumber":337,"author":{"gitId":"tikimonarch"},"content":"                    manager.getPerson().setOriginalWeight(orgWeight);"},{"lineNumber":338,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":339,"author":{"gitId":"tikimonarch"},"content":"                case \"c/\":"},{"lineNumber":340,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":341,"author":{"gitId":"tikimonarch"},"content":"                    currWeight \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":342,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkWeightLimit(currWeight);"},{"lineNumber":343,"author":{"gitId":"tikimonarch"},"content":"                    manager.getPerson().setCurrentWeight(currWeight);"},{"lineNumber":344,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":345,"author":{"gitId":"tikimonarch"},"content":"                case \"t/\":"},{"lineNumber":346,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkValidNumber(trimmedParam, param);"},{"lineNumber":347,"author":{"gitId":"tikimonarch"},"content":"                    tarWeight \u003d Integer.parseInt(trimmedParam);"},{"lineNumber":348,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkWeightLimit(tarWeight);"},{"lineNumber":349,"author":{"gitId":"tikimonarch"},"content":"                    manager.getPerson().setTargetWeight(tarWeight);"},{"lineNumber":350,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":351,"author":{"gitId":"tikimonarch"},"content":"                default:"},{"lineNumber":352,"author":{"gitId":"tikimonarch"},"content":"                    String processFitLvl \u003d trimmedParam;"},{"lineNumber":353,"author":{"gitId":"tikimonarch"},"content":"                    InputChecker.checkFitness(processFitLvl);"},{"lineNumber":354,"author":{"gitId":"tikimonarch"},"content":"                    if (processFitLvl.equals(\"1\")) {"},{"lineNumber":355,"author":{"gitId":"tikimonarch"},"content":"                        fitLvl \u003d FitnessLevel.NONE;"},{"lineNumber":356,"author":{"gitId":"tikimonarch"},"content":"                    } else if (processFitLvl.equals(\"2\")) {"},{"lineNumber":357,"author":{"gitId":"tikimonarch"},"content":"                        fitLvl \u003d FitnessLevel.LOW;"},{"lineNumber":358,"author":{"gitId":"tikimonarch"},"content":"                    } else if (processFitLvl.equals(\"3\")) {"},{"lineNumber":359,"author":{"gitId":"tikimonarch"},"content":"                        fitLvl \u003d FitnessLevel.MEDIUM;"},{"lineNumber":360,"author":{"gitId":"tikimonarch"},"content":"                    } else if (processFitLvl.equals(\"4\")) {"},{"lineNumber":361,"author":{"gitId":"tikimonarch"},"content":"                        fitLvl \u003d FitnessLevel.HIGH;"},{"lineNumber":362,"author":{"gitId":"tikimonarch"},"content":"                    } else {"},{"lineNumber":363,"author":{"gitId":"tikimonarch"},"content":"                        fitLvl \u003d FitnessLevel.EXTREME;"},{"lineNumber":364,"author":{"gitId":"tikimonarch"},"content":"                    }"},{"lineNumber":365,"author":{"gitId":"tikimonarch"},"content":"                    manager.getPerson().setFitnessLevel(fitLvl);"},{"lineNumber":366,"author":{"gitId":"tikimonarch"},"content":"                    break;"},{"lineNumber":367,"author":{"gitId":"tikimonarch"},"content":"                }"},{"lineNumber":368,"author":{"gitId":"tikimonarch"},"content":"            }"},{"lineNumber":369,"author":{"gitId":"tikimonarch"},"content":"        }"},{"lineNumber":370,"author":{"gitId":"tikimonarch"},"content":"    }"},{"lineNumber":371,"author":{"gitId":"tikimonarch"},"content":"}"}],"authorContributionMap":{"HengFuYuen":3,"tikimonarch":368}},{"path":"src/main/java/seedu/dietbook/person/FitnessLevel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.person;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":" * Represents the physical activity level of a person or the amount of exercise a person engages in."},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":" * An \u003ccode\u003eFitnessLevel\u003c/code\u003e has a description."},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":" */"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"public enum FitnessLevel {"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"    NONE(\"You hardly engage in any exercise or have a job that requires little to no physical \""},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"            + \"activity.\"),"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":"    LOW(\"You engage in some form of light exercise or have a job that requires some \""},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"            + \"physical activity.\"),"},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":"    MEDIUM(\"You engage in moderate amount of exercise or have a job that requires moderate \""},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":"            + \"physical activity.\"),"},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":"    HIGH(\"You engage in vigorous exercise or have a physically demanding job.\"),"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"    EXTREME(\"You engage in extremely vigorous exercise or have an extremely physically demanding\""},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"            + \" job.\");"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"    private final String description;"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"     * Constructs an \u003ccode\u003eFitnessLevel\u003c/code\u003e given the description."},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"     * @param description The description of the fitness level."},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"    FitnessLevel(String description) {"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"        this.description \u003d description;"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the description of the fitness level."},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"     * @return The description of the fitness level."},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"    public String getDescription() {"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":"        return description;"},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":37}},{"path":"src/main/java/seedu/dietbook/person/Gender.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.person;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":" * Represents the gender of a person."},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":" * A \u003ccode\u003eGender\u003c/code\u003e has a description."},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":" */"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"public enum Gender {"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"    FEMALE(\"female\"),"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"    MALE(\"male\"),"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":"    OTHERS(\"others\");"},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":"    private final String description;"},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"     * Constructs a \u003ccode\u003eGender\u003c/code\u003e given the description."},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"     * @param description The description of the gender."},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"    Gender(String description) {"},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the description of the gender."},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"     * @return The description of the gender."},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"    public String getDescription() {"},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"        return description;"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":32}},{"path":"src/main/java/seedu/dietbook/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.person;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.logger.MainLogger;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Handler;"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Level;"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":" * Represents a Person."},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":" * A \u003ccode\u003ePerson\u003c/code\u003e has a name, gender, age, height, certain fitness level, original and desired weight."},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":" */"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"public class Person {"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"    /* The height of the person in cm */"},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"    private int height;"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"    /* The original weight of the person when he or she first started using DietBook in kg */"},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    private int originalWeight;"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"    /* The current weight of the person in kg */"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"    private int currentWeight;"},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"    /* The target weight of the person in kg */"},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"    private int targetWeight;"},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"    private int age;"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"    private FitnessLevel fitnessLevel;"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"    private Gender gender;"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"    private String name;"},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"    private final MainLogger mainLogger;"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"     * Constructs a \u003ccode\u003ePerson\u003c/code\u003e with the given name, gender, age, height, fitness level, original,"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":"     * current and target weight."},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":"     * @param name The name of the person."},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"     * @param gender The gender of the person."},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"     * @param age The age of the person."},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":"     * @param height The height of the person."},{"lineNumber":39,"author":{"gitId":"HengFuYuen"},"content":"     * @param originalWeight The original weight of the person when he or she first started using DietBook."},{"lineNumber":40,"author":{"gitId":"HengFuYuen"},"content":"     * @param currentWeight The current weight of the person."},{"lineNumber":41,"author":{"gitId":"HengFuYuen"},"content":"     * @param targetWeight The target/desired weight that the person wants to achieve."},{"lineNumber":42,"author":{"gitId":"HengFuYuen"},"content":"     * @param fitnessLevel The fitness level of the person or in other words, the amount of exercise the"},{"lineNumber":43,"author":{"gitId":"HengFuYuen"},"content":"     *     person engages in."},{"lineNumber":44,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"HengFuYuen"},"content":"    public Person(String name, Gender gender, int age, int height, int originalWeight,"},{"lineNumber":46,"author":{"gitId":"HengFuYuen"},"content":"                  int currentWeight, int targetWeight, FitnessLevel fitnessLevel) {"},{"lineNumber":47,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForPerson(name, gender, age, height, originalWeight, currentWeight,"},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":"                targetWeight, fitnessLevel);"},{"lineNumber":49,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":50,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger \u003d new MainLogger(Person.class.getName());"},{"lineNumber":51,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start constructing a person\");"},{"lineNumber":52,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Name: \" + name);"},{"lineNumber":53,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Gender: \" + gender.getDescription());"},{"lineNumber":54,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Age: \" + age);"},{"lineNumber":55,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Height: \" + height);"},{"lineNumber":56,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Original weight: \" + originalWeight);"},{"lineNumber":57,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Current weight: \" + currentWeight);"},{"lineNumber":58,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Target weight: \" + targetWeight);"},{"lineNumber":59,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Fitness Level: \" + fitnessLevel.getDescription());"},{"lineNumber":60,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":61,"author":{"gitId":"HengFuYuen"},"content":"        this.name \u003d name.trim();"},{"lineNumber":62,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Trimmed Name: \" + this.name);"},{"lineNumber":63,"author":{"gitId":"HengFuYuen"},"content":"        this.gender \u003d gender;"},{"lineNumber":64,"author":{"gitId":"HengFuYuen"},"content":"        this.age \u003d age;"},{"lineNumber":65,"author":{"gitId":"HengFuYuen"},"content":"        this.height \u003d height;"},{"lineNumber":66,"author":{"gitId":"HengFuYuen"},"content":"        this.originalWeight \u003d originalWeight;"},{"lineNumber":67,"author":{"gitId":"HengFuYuen"},"content":"        this.currentWeight \u003d currentWeight;"},{"lineNumber":68,"author":{"gitId":"HengFuYuen"},"content":"        this.targetWeight \u003d targetWeight;"},{"lineNumber":69,"author":{"gitId":"HengFuYuen"},"content":"        this.fitnessLevel \u003d fitnessLevel;"},{"lineNumber":70,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Person constructed\");"},{"lineNumber":71,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":73,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"HengFuYuen"},"content":"     * Sets all the attributes of a person to the new attributes given."},{"lineNumber":75,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"HengFuYuen"},"content":"     * @param newName The new/revised name of the person."},{"lineNumber":77,"author":{"gitId":"HengFuYuen"},"content":"     * @param newGender The new/revised gender of the person."},{"lineNumber":78,"author":{"gitId":"HengFuYuen"},"content":"     * @param newAge The new/revised age of the person."},{"lineNumber":79,"author":{"gitId":"HengFuYuen"},"content":"     * @param newHeight The new/revised height of the person."},{"lineNumber":80,"author":{"gitId":"HengFuYuen"},"content":"     * @param newOriginalWeight The new/revised original weight of the person when he or she first started"},{"lineNumber":81,"author":{"gitId":"HengFuYuen"},"content":"     *     using DietBook."},{"lineNumber":82,"author":{"gitId":"HengFuYuen"},"content":"     * @param newCurrentWeight The new/revised current weight of the person."},{"lineNumber":83,"author":{"gitId":"HengFuYuen"},"content":"     * @param newTargetWeight The new/revised target weight that the person wants to achieve."},{"lineNumber":84,"author":{"gitId":"HengFuYuen"},"content":"     * @param newFitnessLevel The new/revised fitness level of the person or in other words, the amount"},{"lineNumber":85,"author":{"gitId":"HengFuYuen"},"content":"     *     of exercise the person engages in."},{"lineNumber":86,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"HengFuYuen"},"content":"    public void setAll(String newName, Gender newGender, int newAge, int newHeight, int newOriginalWeight,"},{"lineNumber":88,"author":{"gitId":"HengFuYuen"},"content":"                             int newCurrentWeight, int newTargetWeight, FitnessLevel newFitnessLevel) {"},{"lineNumber":89,"author":{"gitId":"HengFuYuen"},"content":"        setName(newName);"},{"lineNumber":90,"author":{"gitId":"HengFuYuen"},"content":"        setGender(newGender);"},{"lineNumber":91,"author":{"gitId":"HengFuYuen"},"content":"        setAge(newAge);"},{"lineNumber":92,"author":{"gitId":"HengFuYuen"},"content":"        setHeight(newHeight);"},{"lineNumber":93,"author":{"gitId":"HengFuYuen"},"content":"        setOriginalWeight(newOriginalWeight);"},{"lineNumber":94,"author":{"gitId":"HengFuYuen"},"content":"        setCurrentWeight(newCurrentWeight);"},{"lineNumber":95,"author":{"gitId":"HengFuYuen"},"content":"        setTargetWeight(newTargetWeight);"},{"lineNumber":96,"author":{"gitId":"HengFuYuen"},"content":"        setFitnessLevel(newFitnessLevel);"},{"lineNumber":97,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":99,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the name of the person."},{"lineNumber":101,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"HengFuYuen"},"content":"     * @return The name of the person."},{"lineNumber":103,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"HengFuYuen"},"content":"    public String getName() {"},{"lineNumber":105,"author":{"gitId":"HengFuYuen"},"content":"        return name;"},{"lineNumber":106,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":108,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"HengFuYuen"},"content":"     * Sets the name of the person to the new name given."},{"lineNumber":110,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"HengFuYuen"},"content":"     * @param newName The new/revised name of the person."},{"lineNumber":112,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"HengFuYuen"},"content":"    public void setName(String newName) {"},{"lineNumber":114,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForNameInput(newName);"},{"lineNumber":115,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"New name: \" + newName);"},{"lineNumber":116,"author":{"gitId":"HengFuYuen"},"content":"        name \u003d newName.trim();"},{"lineNumber":117,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Trimmed new name: \" + this.name);"},{"lineNumber":118,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":120,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the gender of the person."},{"lineNumber":122,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"HengFuYuen"},"content":"     * @return The gender of the person."},{"lineNumber":124,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"HengFuYuen"},"content":"    public Gender getGender() {"},{"lineNumber":126,"author":{"gitId":"HengFuYuen"},"content":"        return gender;"},{"lineNumber":127,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":129,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"HengFuYuen"},"content":"     * Sets the gender of the person to the new gender given."},{"lineNumber":131,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"HengFuYuen"},"content":"     * @param newGender The new/revised gender of the person."},{"lineNumber":133,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"HengFuYuen"},"content":"    public void setGender(Gender newGender) {"},{"lineNumber":135,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForGenderInput(newGender);"},{"lineNumber":136,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"New gender: \" + newGender.getDescription());"},{"lineNumber":137,"author":{"gitId":"HengFuYuen"},"content":"        gender \u003d newGender;"},{"lineNumber":138,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":140,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the age of the person."},{"lineNumber":142,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"HengFuYuen"},"content":"     * @return The age of the person."},{"lineNumber":144,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"HengFuYuen"},"content":"    public int getAge() {"},{"lineNumber":146,"author":{"gitId":"HengFuYuen"},"content":"        return age;"},{"lineNumber":147,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":149,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"HengFuYuen"},"content":"     * Sets the age of the person to the new age that is given."},{"lineNumber":151,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"HengFuYuen"},"content":"     * @param newAge The new/revised age of the person."},{"lineNumber":153,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"HengFuYuen"},"content":"    public void setAge(int newAge) {"},{"lineNumber":155,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForAgeInput(newAge);"},{"lineNumber":156,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"New age: \" + newAge);"},{"lineNumber":157,"author":{"gitId":"HengFuYuen"},"content":"        age \u003d newAge;"},{"lineNumber":158,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":160,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the height of the person."},{"lineNumber":162,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":163,"author":{"gitId":"HengFuYuen"},"content":"     * @return The height of the person."},{"lineNumber":164,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"HengFuYuen"},"content":"    public int getHeight() {"},{"lineNumber":166,"author":{"gitId":"HengFuYuen"},"content":"        return height;"},{"lineNumber":167,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":169,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"HengFuYuen"},"content":"     * Sets the height of the person to the new height given."},{"lineNumber":171,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":172,"author":{"gitId":"HengFuYuen"},"content":"     * @param newHeight The new/revised height of the person."},{"lineNumber":173,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"HengFuYuen"},"content":"    public void setHeight(int newHeight) {"},{"lineNumber":175,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForHeight(newHeight);"},{"lineNumber":176,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"New height: \" + newHeight);"},{"lineNumber":177,"author":{"gitId":"HengFuYuen"},"content":"        height \u003d newHeight;"},{"lineNumber":178,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":180,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the original weight of the person."},{"lineNumber":182,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"HengFuYuen"},"content":"     * @return The original weight of the person."},{"lineNumber":184,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"HengFuYuen"},"content":"    public int getOriginalWeight() {"},{"lineNumber":186,"author":{"gitId":"HengFuYuen"},"content":"        return originalWeight;"},{"lineNumber":187,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":189,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"HengFuYuen"},"content":"     * Sets the original weight of the person to the new original weight given."},{"lineNumber":191,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":192,"author":{"gitId":"HengFuYuen"},"content":"     * @param newOriginalWeight The new/revised original weight of the person."},{"lineNumber":193,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"HengFuYuen"},"content":"    public void setOriginalWeight(int newOriginalWeight) {"},{"lineNumber":195,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForWeight(newOriginalWeight,\"Original weight\");"},{"lineNumber":196,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"New original weight: \" + newOriginalWeight);"},{"lineNumber":197,"author":{"gitId":"HengFuYuen"},"content":"        originalWeight \u003d newOriginalWeight;"},{"lineNumber":198,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":200,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the current weight of the person when he or she first started using DietBook."},{"lineNumber":202,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":203,"author":{"gitId":"HengFuYuen"},"content":"     * @return The current weight of the person when he or she first started using DietBook."},{"lineNumber":204,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"HengFuYuen"},"content":"    public int getCurrentWeight() {"},{"lineNumber":206,"author":{"gitId":"HengFuYuen"},"content":"        return currentWeight;"},{"lineNumber":207,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":209,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"HengFuYuen"},"content":"     * Sets the current weight of the person to the new current weight given."},{"lineNumber":211,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":212,"author":{"gitId":"HengFuYuen"},"content":"     * @param newCurrentWeight The new/revised current weight of the person."},{"lineNumber":213,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"HengFuYuen"},"content":"    public void setCurrentWeight(int newCurrentWeight) {"},{"lineNumber":215,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForWeight(newCurrentWeight, \"Current weight\");"},{"lineNumber":216,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"New current weight: \" + newCurrentWeight);"},{"lineNumber":217,"author":{"gitId":"HengFuYuen"},"content":"        currentWeight \u003d newCurrentWeight;"},{"lineNumber":218,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":220,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":221,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the target weight the person the person wants to achieve."},{"lineNumber":222,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":223,"author":{"gitId":"HengFuYuen"},"content":"     * @return The target weight the person wants to achieve."},{"lineNumber":224,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":225,"author":{"gitId":"HengFuYuen"},"content":"    public int getTargetWeight() {"},{"lineNumber":226,"author":{"gitId":"HengFuYuen"},"content":"        return targetWeight;"},{"lineNumber":227,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":229,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"HengFuYuen"},"content":"     * Sets the target weight of the person to the new target weight given."},{"lineNumber":231,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":232,"author":{"gitId":"HengFuYuen"},"content":"     * @param newTargetWeight The new/revised target weight of the person."},{"lineNumber":233,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":234,"author":{"gitId":"HengFuYuen"},"content":"    public void setTargetWeight(int newTargetWeight) {"},{"lineNumber":235,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForWeight(newTargetWeight, \"Target weight\");"},{"lineNumber":236,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"New target weight: \" + newTargetWeight);"},{"lineNumber":237,"author":{"gitId":"HengFuYuen"},"content":"        targetWeight \u003d newTargetWeight;"},{"lineNumber":238,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":240,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the fitness level of the person."},{"lineNumber":242,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":243,"author":{"gitId":"HengFuYuen"},"content":"     * @return The fitness level of the person."},{"lineNumber":244,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":245,"author":{"gitId":"HengFuYuen"},"content":"    public FitnessLevel getFitnessLevel() {"},{"lineNumber":246,"author":{"gitId":"HengFuYuen"},"content":"        return fitnessLevel;"},{"lineNumber":247,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":249,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":250,"author":{"gitId":"HengFuYuen"},"content":"     * Sets the fitness level of the person to the new fitness level given."},{"lineNumber":251,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":252,"author":{"gitId":"HengFuYuen"},"content":"     * @param newFitnessLevel The new/revised fitness level of the person."},{"lineNumber":253,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":254,"author":{"gitId":"HengFuYuen"},"content":"    public void setFitnessLevel(FitnessLevel newFitnessLevel) {"},{"lineNumber":255,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForFitnessLevel(newFitnessLevel);"},{"lineNumber":256,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"New fitness level: \" + newFitnessLevel);"},{"lineNumber":257,"author":{"gitId":"HengFuYuen"},"content":"        fitnessLevel \u003d newFitnessLevel;"},{"lineNumber":258,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":260,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"HengFuYuen"},"content":"     * Returns a string representation of all information related to the user."},{"lineNumber":262,"author":{"gitId":"HengFuYuen"},"content":"     * Information includes name, gender, age, height, original weight, target weight and fitness level."},{"lineNumber":263,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":264,"author":{"gitId":"HengFuYuen"},"content":"     * @return A string representation of all information related to the user."},{"lineNumber":265,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"HengFuYuen"},"content":"    @Override"},{"lineNumber":267,"author":{"gitId":"HengFuYuen"},"content":"    public String toString() {"},{"lineNumber":268,"author":{"gitId":"HengFuYuen"},"content":"        String userInformation \u003d \"  Name: \" + name + System.lineSeparator()"},{"lineNumber":269,"author":{"gitId":"HengFuYuen"},"content":"                + \"  Gender: \" + gender.getDescription() + System.lineSeparator()"},{"lineNumber":270,"author":{"gitId":"HengFuYuen"},"content":"                + \"  Age: \" + age + System.lineSeparator()"},{"lineNumber":271,"author":{"gitId":"HengFuYuen"},"content":"                + \"  Height: \" + height + \"cm\" + System.lineSeparator()"},{"lineNumber":272,"author":{"gitId":"HengFuYuen"},"content":"                + \"  Original weight: \" + originalWeight + \"kg\" + System.lineSeparator()"},{"lineNumber":273,"author":{"gitId":"HengFuYuen"},"content":"                + \"  Current weight: \" + currentWeight + \"kg\" + System.lineSeparator()"},{"lineNumber":274,"author":{"gitId":"HengFuYuen"},"content":"                + \"  Target weight: \" + targetWeight + \"kg\" + System.lineSeparator()"},{"lineNumber":275,"author":{"gitId":"HengFuYuen"},"content":"                + \"  Fitness level: \" + fitnessLevel.getDescription();"},{"lineNumber":276,"author":{"gitId":"HengFuYuen"},"content":"        return userInformation;"},{"lineNumber":277,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":279,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":280,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions on all possible person inputs parameters."},{"lineNumber":281,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":282,"author":{"gitId":"HengFuYuen"},"content":"     * @param name The name of the person."},{"lineNumber":283,"author":{"gitId":"HengFuYuen"},"content":"     * @param gender The gender of the person."},{"lineNumber":284,"author":{"gitId":"HengFuYuen"},"content":"     * @param age The age of the person."},{"lineNumber":285,"author":{"gitId":"HengFuYuen"},"content":"     * @param height The height of the person."},{"lineNumber":286,"author":{"gitId":"HengFuYuen"},"content":"     * @param originalWeight The original weight of the person when he or she first started using DietBook."},{"lineNumber":287,"author":{"gitId":"HengFuYuen"},"content":"     * @param currentWeight The current weight of the person."},{"lineNumber":288,"author":{"gitId":"HengFuYuen"},"content":"     * @param targetWeight The target/desired weight that the person wants to achieve."},{"lineNumber":289,"author":{"gitId":"HengFuYuen"},"content":"     * @param fitnessLevel The fitness level of the person or in other words, the amount of exercise the"},{"lineNumber":290,"author":{"gitId":"HengFuYuen"},"content":"     *     person engages in."},{"lineNumber":291,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":292,"author":{"gitId":"HengFuYuen"},"content":"    private void performAssertionsForPerson(String name, Gender gender, int age, int height,"},{"lineNumber":293,"author":{"gitId":"HengFuYuen"},"content":"                                            int originalWeight, int currentWeight, int targetWeight,"},{"lineNumber":294,"author":{"gitId":"HengFuYuen"},"content":"                                            FitnessLevel fitnessLevel) {"},{"lineNumber":295,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForNameInput(name);"},{"lineNumber":296,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForGenderInput(gender);"},{"lineNumber":297,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForAgeInput(age);"},{"lineNumber":298,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForHeight(height);"},{"lineNumber":299,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForWeight(originalWeight, \"Original weight\");"},{"lineNumber":300,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForWeight(currentWeight, \"Current weight\");"},{"lineNumber":301,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForWeight(targetWeight, \"Target weight\");"},{"lineNumber":302,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForFitnessLevel(fitnessLevel);"},{"lineNumber":303,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":305,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":306,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertion on the fitness level input."},{"lineNumber":307,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":308,"author":{"gitId":"HengFuYuen"},"content":"     * @param fitnessLevel The fitness level of the person or in other words, the amount of exercise the"},{"lineNumber":309,"author":{"gitId":"HengFuYuen"},"content":"     *     person engages in."},{"lineNumber":310,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":311,"author":{"gitId":"HengFuYuen"},"content":"    private void performAssertionsForFitnessLevel(FitnessLevel fitnessLevel) {"},{"lineNumber":312,"author":{"gitId":"HengFuYuen"},"content":"        assert fitnessLevel !\u003d null : \"Fitness level of person should not be null\";"},{"lineNumber":313,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":314,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":315,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":316,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions on the weight related inputs."},{"lineNumber":317,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":318,"author":{"gitId":"HengFuYuen"},"content":"     * @param weight Either the original, current or target weight of the person."},{"lineNumber":319,"author":{"gitId":"HengFuYuen"},"content":"     * @param weightType A string describing whether the given weight is the original, current or target"},{"lineNumber":320,"author":{"gitId":"HengFuYuen"},"content":"     *     weight."},{"lineNumber":321,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":322,"author":{"gitId":"HengFuYuen"},"content":"    private void performAssertionsForWeight(int weight, String weightType) {"},{"lineNumber":323,"author":{"gitId":"HengFuYuen"},"content":"        int minWeight \u003d 1;"},{"lineNumber":324,"author":{"gitId":"HengFuYuen"},"content":"        assert weight \u003e\u003d minWeight : weightType + \" of person should be greater than 0\";"},{"lineNumber":325,"author":{"gitId":"HengFuYuen"},"content":"        int maxWeight \u003d 500;"},{"lineNumber":326,"author":{"gitId":"HengFuYuen"},"content":"        assert weight \u003c\u003d maxWeight : weightType + \" of person should less than 500\";"},{"lineNumber":327,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":329,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":330,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions on the height input."},{"lineNumber":331,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":332,"author":{"gitId":"HengFuYuen"},"content":"     * @param height The height of the person."},{"lineNumber":333,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":334,"author":{"gitId":"HengFuYuen"},"content":"    private void performAssertionsForHeight(int height) {"},{"lineNumber":335,"author":{"gitId":"HengFuYuen"},"content":"        int minHeight \u003d 1;"},{"lineNumber":336,"author":{"gitId":"HengFuYuen"},"content":"        assert height \u003e\u003d minHeight : \"Height of person should be greater than 0\";"},{"lineNumber":337,"author":{"gitId":"HengFuYuen"},"content":"        int maxHeight \u003d 300;"},{"lineNumber":338,"author":{"gitId":"HengFuYuen"},"content":"        assert height \u003c\u003d maxHeight : \"Height of person should be less than 300\";"},{"lineNumber":339,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":340,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":341,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":342,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertion on the gender input."},{"lineNumber":343,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":344,"author":{"gitId":"HengFuYuen"},"content":"     * @param gender The gender of the person."},{"lineNumber":345,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":346,"author":{"gitId":"HengFuYuen"},"content":"    private void performAssertionsForGenderInput(Gender gender) {"},{"lineNumber":347,"author":{"gitId":"HengFuYuen"},"content":"        assert gender !\u003d null : \"Gender of person should not be null\";"},{"lineNumber":348,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":349,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":350,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":351,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions on the name input."},{"lineNumber":352,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":353,"author":{"gitId":"HengFuYuen"},"content":"     * @param name The name of the person."},{"lineNumber":354,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":355,"author":{"gitId":"HengFuYuen"},"content":"    private void performAssertionsForNameInput(String name) {"},{"lineNumber":356,"author":{"gitId":"HengFuYuen"},"content":"        assert name !\u003d null : \"The name of person should not be null\";"},{"lineNumber":357,"author":{"gitId":"HengFuYuen"},"content":"        assert name.trim().length() \u003e 0 : \"The name of person should not be an empty string\";"},{"lineNumber":358,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":359,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":360,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":361,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions on the age input."},{"lineNumber":362,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":363,"author":{"gitId":"HengFuYuen"},"content":"     * @param age The age of the person."},{"lineNumber":364,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":365,"author":{"gitId":"HengFuYuen"},"content":"    private void performAssertionsForAgeInput(int age) {"},{"lineNumber":366,"author":{"gitId":"HengFuYuen"},"content":"        int minAge \u003d 0;"},{"lineNumber":367,"author":{"gitId":"HengFuYuen"},"content":"        assert age \u003e\u003d minAge : \"The age of person should be equals to or greater than 0\";"},{"lineNumber":368,"author":{"gitId":"HengFuYuen"},"content":"        int maxAge \u003d 150;"},{"lineNumber":369,"author":{"gitId":"HengFuYuen"},"content":"        assert age \u003c\u003d maxAge : \"The age of person should be lesser than 150\";"},{"lineNumber":370,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":371,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":371}},{"path":"src/main/java/seedu/dietbook/saveload/EmptyLoader.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":" * Place holder class for Loader, does not do anything"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":" * Throws IllegalAccessException if there is any attempt to access this class."},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":" */"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"public class EmptyLoader extends Loader {"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"    protected EmptyLoader(){"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    public Optional\u003cString\u003e get(int xposition, int yposition) throws IllegalAccessException {"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"        throw new IllegalAccessException(\"Do not attempt to get from an empty loader!\");"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    int getHeight() throws IllegalAccessException {"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"        throw new IllegalAccessException(\"Do not attempt to get from an empty loader!\");"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    int getWidth() throws IllegalAccessException {"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"        throw new IllegalAccessException(\"Do not attempt to get from an empty loader!\");"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":27}},{"path":"src/main/java/seedu/dietbook/saveload/FileLoader.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":" * Handles reading of stored text file."},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":" * Note: the first five fields must be same"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":" */"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"public class FileLoader extends Loader {"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    private static final String ROOT_DIRECTORY \u003d System.getProperty(\"user.home\");"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    private static final String BASE_FOLDER_NAME \u003d  ROOT_DIRECTORY + File.separator + \"dietbook\";"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    private static final String EMPTY_SYMBOL \u003d \"%NULL\u0026!!LL\";"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"    private static final String SEPARATOR_SYMBOL \u003d \"\u0026%SEPERATOR%AAA%\";"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"    private static final String FILE_EXTENSION \u003d \".txt\";"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    private final String[][] entries;"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"    private final int width;"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"    private final int height;"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    protected FileLoader(String folderName, String fileName) throws FileNotFoundException {"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"        File file \u003d new File(BASE_FOLDER_NAME + File.separator + folderName"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"            + File.separator + fileName + FILE_EXTENSION);"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"        Scanner reader \u003d new Scanner(file);"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"        width \u003d Integer.parseInt(reader.nextLine());"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"        height \u003d Integer.parseInt(reader.nextLine());"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"        entries \u003d new String[height][width];"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"        String[] line;"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"        for (int j \u003d 0; j \u003c height; j++) {"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"            line \u003d reader.nextLine().split(SEPARATOR_SYMBOL);"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"            if (width \u003e\u003d 0) {"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"                System.arraycopy(line, 1, entries[j], 0, width);"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"        reader.close();"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"     * Get the String entry stored at the specified position in the table if it is present."},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"     * @param xposition the x position in the table from 1 to the table width"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"     * @param yposition the y position in the table from 1 to the table height"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"     * @return Optional of the String. The Optional is empty is no entry is stored"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"     * @throws IndexOutOfBoundsException if the x or y given is not as above"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"    public Optional\u003cString\u003e get(int xposition, int yposition) throws IndexOutOfBoundsException {"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"            if (this.entries[yposition - 1][xposition - 1].equals(EMPTY_SYMBOL)) {"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"                return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"            } else {"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":"                return Optional.of(this.entries[yposition - 1][xposition - 1]);"},{"lineNumber":54,"author":{"gitId":"snowbanana12345"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"snowbanana12345"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":56,"author":{"gitId":"snowbanana12345"},"content":"            throw new IndexOutOfBoundsException(\"The x or y position provided must be within the the dimensions of the\""},{"lineNumber":57,"author":{"gitId":"snowbanana12345"},"content":"                    + \"saver table!\");"},{"lineNumber":58,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":61,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":62,"author":{"gitId":"snowbanana12345"},"content":"    public int getHeight() {"},{"lineNumber":63,"author":{"gitId":"snowbanana12345"},"content":"        return height;"},{"lineNumber":64,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":66,"author":{"gitId":"snowbanana12345"},"content":"    public int getWidth() {"},{"lineNumber":67,"author":{"gitId":"snowbanana12345"},"content":"        return width;"},{"lineNumber":68,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":68,"mxksowie":1}},{"path":"src/main/java/seedu/dietbook/saveload/FoodPortionDateSaveLoadManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import seedu.dietbook.list.FoodList;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":" * This class takes care of saving and loading of food, portion and date."},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":" */"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"public class FoodPortionDateSaveLoadManager {"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_SAVER_WIDTH \u003d 11;"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_SAVER_HEIGHT \u003d 10;"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"    private static final int FOOD_NAME_INDEX \u003d 1;"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"    private static final int FOOD_CALORIE_INDEX \u003d 2;"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    private static final int FOOD_CARBOHYDRATE_INDEX \u003d 3;"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"    private static final int FOOD_PROTEIN_INDEX \u003d 4;"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"    private static final int FOOD_FAT_INDEX \u003d 5;"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"    private static final int PORTION_SIZE_INDEX \u003d 6;"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DAY_INDEX \u003d 7;"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    private static final int MONTH_INDEX \u003d 8;"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"    private static final int YEAR_INDEX \u003d 9;"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"    private static final int HOUR_INDEX \u003d 10;"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"    private static final int MINUTE_INDEX \u003d 11;"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_FOOD_NAME \u003d \"No Food Name\";"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_FOOD_CALORIE \u003d \"0\";"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_FOOD_CARBOHYDRATE \u003d \"0\";"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_FOOD_PROTEIN \u003d \"0\";"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_FOOD_FAT \u003d \"0\";"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_PORTION_SIZE \u003d \"1\";"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_DAY \u003d \"1\";"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_MONTH \u003d \"1\";"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_YEAR \u003d \"2000\";"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_MINUTE \u003d \"0\";"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_HOUR \u003d \"0\";"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"    private static final String FOOD_FOLDER_NAME \u003d \"Food##PORTION###dDATE##folder\";"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"    private Saver saver;"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"    private Loader fileLoader;"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"    public FoodPortionDateSaveLoadManager() {"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"        this.saver \u003d new Saver(DEFAULT_SAVER_WIDTH, DEFAULT_SAVER_HEIGHT);"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"        this.fileLoader \u003d Loader.loadEmpty();"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"    // ------ saving and loading functions ----------"},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"snowbanana12345"},"content":"     * Call this function to load a food file."},{"lineNumber":55,"author":{"gitId":"snowbanana12345"},"content":"     * @param fileName name of file"},{"lineNumber":56,"author":{"gitId":"snowbanana12345"},"content":"     * @throws FileNotFoundException if there is no such save file"},{"lineNumber":57,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"snowbanana12345"},"content":"    public void load(String fileName) throws FileNotFoundException {"},{"lineNumber":59,"author":{"gitId":"snowbanana12345"},"content":"        this.fileLoader \u003d Loader.load(FOOD_FOLDER_NAME, fileName);"},{"lineNumber":60,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":62,"author":{"gitId":"snowbanana12345"},"content":"    public void clearLoader() {"},{"lineNumber":63,"author":{"gitId":"snowbanana12345"},"content":"        this.fileLoader \u003d Loader.loadEmpty();"},{"lineNumber":64,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":66,"author":{"gitId":"snowbanana12345"},"content":"    public void save(String fileName) {"},{"lineNumber":67,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.save(FOOD_FOLDER_NAME, fileName);"},{"lineNumber":68,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":70,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"snowbanana12345"},"content":"     * Clears the saver and sets the number of entries it can take."},{"lineNumber":72,"author":{"gitId":"snowbanana12345"},"content":"     * call this function at the start of a series of functions to store data."},{"lineNumber":73,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"snowbanana12345"},"content":"     * @param numEntry num of entries"},{"lineNumber":75,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"snowbanana12345"},"content":"    public void readySaver(Integer numEntry) {"},{"lineNumber":77,"author":{"gitId":"snowbanana12345"},"content":"        saver.resetSize(DEFAULT_SAVER_WIDTH, numEntry);"},{"lineNumber":78,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":80,"author":{"gitId":"snowbanana12345"},"content":"    // ------- top layer save loading -------"},{"lineNumber":81,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":82,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"snowbanana12345"},"content":"     * Constructs the food list from stored data."},{"lineNumber":84,"author":{"gitId":"snowbanana12345"},"content":"     * Note : call load function before calling this function or else it will throw illegalAccessException."},{"lineNumber":85,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"snowbanana12345"},"content":"     * @return the completed food list"},{"lineNumber":87,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"snowbanana12345"},"content":"    public FoodList getFoodList() throws IllegalAccessException {"},{"lineNumber":89,"author":{"gitId":"snowbanana12345"},"content":"        FoodList foodlist \u003d new FoodList();"},{"lineNumber":90,"author":{"gitId":"snowbanana12345"},"content":"        for (int i \u003d 1; i \u003c fileLoader.getHeight() + 1; i++) {"},{"lineNumber":91,"author":{"gitId":"snowbanana12345"},"content":"            foodlist.addFoodAtDateTime(this.getPortionSize(i), this.getFood(i), this.getDateTime(i));"},{"lineNumber":92,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"snowbanana12345"},"content":"        return foodlist;"},{"lineNumber":94,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":96,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"snowbanana12345"},"content":"     * Takes in a food list object and saves all of it\u0027s contents to the specified file name."},{"lineNumber":98,"author":{"gitId":"snowbanana12345"},"content":"     * The number of entries is equal to the number of items on the food list."},{"lineNumber":99,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"snowbanana12345"},"content":"     * @param foodlist food list"},{"lineNumber":101,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"snowbanana12345"},"content":"    public void saveFoodList(FoodList foodlist, String fileName) {"},{"lineNumber":103,"author":{"gitId":"snowbanana12345"},"content":"        List\u003cFood\u003e foods \u003d foodlist.getFoods();"},{"lineNumber":104,"author":{"gitId":"snowbanana12345"},"content":"        List\u003cInteger\u003e portions \u003d foodlist.getPortionSizes();"},{"lineNumber":105,"author":{"gitId":"snowbanana12345"},"content":"        List\u003cLocalDateTime\u003e datetimes \u003d foodlist.getDateTimes();"},{"lineNumber":106,"author":{"gitId":"snowbanana12345"},"content":"        int numEntry \u003d foods.size();"},{"lineNumber":107,"author":{"gitId":"snowbanana12345"},"content":"        readySaver(numEntry);"},{"lineNumber":108,"author":{"gitId":"snowbanana12345"},"content":"        for (int i \u003d 1; i \u003c numEntry + 1; i++) {"},{"lineNumber":109,"author":{"gitId":"snowbanana12345"},"content":"            setFood(foods.get(i - 1), i);"},{"lineNumber":110,"author":{"gitId":"snowbanana12345"},"content":"            setDateTime(datetimes.get(i - 1), i);"},{"lineNumber":111,"author":{"gitId":"snowbanana12345"},"content":"            setPortionSize(portions.get(i - 1),i);"},{"lineNumber":112,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"snowbanana12345"},"content":"        save(fileName);"},{"lineNumber":114,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":116,"author":{"gitId":"snowbanana12345"},"content":"    // ------- setters and getters ----------"},{"lineNumber":117,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":118,"author":{"gitId":"snowbanana12345"},"content":"    public void setFood(Food food, int entryNumber) {"},{"lineNumber":119,"author":{"gitId":"snowbanana12345"},"content":"        setFoodName(food.getName(), entryNumber);"},{"lineNumber":120,"author":{"gitId":"snowbanana12345"},"content":"        setFoodCalorie(food.getCalorie(), entryNumber);"},{"lineNumber":121,"author":{"gitId":"snowbanana12345"},"content":"        setFoodCarbohydrate(food.getCarbohydrate(), entryNumber);"},{"lineNumber":122,"author":{"gitId":"snowbanana12345"},"content":"        setFoodProtein(food.getProtein(), entryNumber);"},{"lineNumber":123,"author":{"gitId":"snowbanana12345"},"content":"        setFoodFat(food.getFat(), entryNumber);"},{"lineNumber":124,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":126,"author":{"gitId":"snowbanana12345"},"content":"    public Food getFood(int entryNumber) throws IllegalAccessException {"},{"lineNumber":127,"author":{"gitId":"snowbanana12345"},"content":"        String name \u003d getFoodName(entryNumber);"},{"lineNumber":128,"author":{"gitId":"snowbanana12345"},"content":"        int calorie \u003d getFoodCalorie(entryNumber);"},{"lineNumber":129,"author":{"gitId":"snowbanana12345"},"content":"        int carbohydrate \u003d getFoodCarbohydrate(entryNumber);"},{"lineNumber":130,"author":{"gitId":"snowbanana12345"},"content":"        int protein \u003d getFoodProtein(entryNumber);"},{"lineNumber":131,"author":{"gitId":"snowbanana12345"},"content":"        int fat \u003d getFoodFat(entryNumber);"},{"lineNumber":132,"author":{"gitId":"snowbanana12345"},"content":"        return new Food(name, calorie, carbohydrate, protein, fat);"},{"lineNumber":133,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":135,"author":{"gitId":"snowbanana12345"},"content":"    public void setDateTime(LocalDateTime dateTime, int entryNumber) {"},{"lineNumber":136,"author":{"gitId":"snowbanana12345"},"content":"        setDay(dateTime.getDayOfMonth(), entryNumber);"},{"lineNumber":137,"author":{"gitId":"snowbanana12345"},"content":"        setMonth(dateTime.getMonthValue(), entryNumber);"},{"lineNumber":138,"author":{"gitId":"snowbanana12345"},"content":"        setYear(dateTime.getYear(), entryNumber);"},{"lineNumber":139,"author":{"gitId":"snowbanana12345"},"content":"        setHour(dateTime.getHour(), entryNumber);"},{"lineNumber":140,"author":{"gitId":"snowbanana12345"},"content":"        setMinute(dateTime.getMinute(), entryNumber);"},{"lineNumber":141,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":143,"author":{"gitId":"snowbanana12345"},"content":"    public LocalDateTime getDateTime(int entryNumber) throws IllegalAccessException {"},{"lineNumber":144,"author":{"gitId":"snowbanana12345"},"content":"        int day \u003d Integer.parseInt(fileLoader.get(DAY_INDEX, entryNumber).orElse(DEFAULT_DAY));"},{"lineNumber":145,"author":{"gitId":"snowbanana12345"},"content":"        int month \u003d Integer.parseInt(fileLoader.get(MONTH_INDEX, entryNumber).orElse(DEFAULT_MONTH));"},{"lineNumber":146,"author":{"gitId":"snowbanana12345"},"content":"        int year \u003d Integer.parseInt(fileLoader.get(YEAR_INDEX, entryNumber).orElse(DEFAULT_YEAR));"},{"lineNumber":147,"author":{"gitId":"snowbanana12345"},"content":"        int hour \u003d Integer.parseInt(fileLoader.get(HOUR_INDEX, entryNumber).orElse(DEFAULT_HOUR));"},{"lineNumber":148,"author":{"gitId":"snowbanana12345"},"content":"        int minute \u003d Integer.parseInt(fileLoader.get(MINUTE_INDEX, entryNumber).orElse(DEFAULT_MINUTE));"},{"lineNumber":149,"author":{"gitId":"snowbanana12345"},"content":"        return LocalDateTime.of(year, month, day, hour, minute);"},{"lineNumber":150,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":152,"author":{"gitId":"snowbanana12345"},"content":"    // ------ Basic setters and getters -------"},{"lineNumber":153,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":154,"author":{"gitId":"snowbanana12345"},"content":"    private void setFoodCarbohydrate(int carbohydrate, int entryNumber) {"},{"lineNumber":155,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(carbohydrate),  FOOD_CARBOHYDRATE_INDEX, entryNumber);"},{"lineNumber":156,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":158,"author":{"gitId":"snowbanana12345"},"content":"    private void setFoodName(String name, int entryNumber) {"},{"lineNumber":159,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(name, FOOD_NAME_INDEX, entryNumber);"},{"lineNumber":160,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":162,"author":{"gitId":"snowbanana12345"},"content":"    private void setFoodCalorie(int calorie, int entryNumber) {"},{"lineNumber":163,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(calorie), FOOD_CALORIE_INDEX, entryNumber);"},{"lineNumber":164,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":166,"author":{"gitId":"snowbanana12345"},"content":"    private void setFoodProtein(int protein, int entryNumber) {"},{"lineNumber":167,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(protein), FOOD_PROTEIN_INDEX, entryNumber);"},{"lineNumber":168,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":170,"author":{"gitId":"snowbanana12345"},"content":"    private void setFoodFat(int fat, int entryNumber) {"},{"lineNumber":171,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(fat), FOOD_FAT_INDEX, entryNumber);"},{"lineNumber":172,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":174,"author":{"gitId":"snowbanana12345"},"content":"    public void setPortionSize(int portionSize, Integer entryNumber) {"},{"lineNumber":175,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(portionSize), PORTION_SIZE_INDEX, entryNumber);"},{"lineNumber":176,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":178,"author":{"gitId":"snowbanana12345"},"content":"    public void setDay(int day, int entryNumber) {"},{"lineNumber":179,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(day), DAY_INDEX, entryNumber);"},{"lineNumber":180,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":182,"author":{"gitId":"snowbanana12345"},"content":"    public void setMonth(int month, int entryNumber) {"},{"lineNumber":183,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(month), MONTH_INDEX, entryNumber);"},{"lineNumber":184,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":186,"author":{"gitId":"snowbanana12345"},"content":"    public void setYear(int year, int entryNumber) {"},{"lineNumber":187,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(year), YEAR_INDEX, entryNumber);"},{"lineNumber":188,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":190,"author":{"gitId":"snowbanana12345"},"content":"    public void setHour(int hour, int entryNumber) {"},{"lineNumber":191,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(hour), HOUR_INDEX, entryNumber);"},{"lineNumber":192,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":194,"author":{"gitId":"snowbanana12345"},"content":"    public void setMinute(int minute, int entryNumber) {"},{"lineNumber":195,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(Integer.toString(minute), MINUTE_INDEX, entryNumber);"},{"lineNumber":196,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":198,"author":{"gitId":"snowbanana12345"},"content":"    private String getFoodName(Integer entryNumber) throws IllegalAccessException {"},{"lineNumber":199,"author":{"gitId":"snowbanana12345"},"content":"        return fileLoader.get(FOOD_NAME_INDEX, entryNumber).orElse(DEFAULT_FOOD_NAME);"},{"lineNumber":200,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":202,"author":{"gitId":"snowbanana12345"},"content":"    private int getFoodFat(Integer entryNumber) throws IllegalAccessException {"},{"lineNumber":203,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(FOOD_FAT_INDEX, entryNumber).orElse(DEFAULT_FOOD_FAT));"},{"lineNumber":204,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":206,"author":{"gitId":"snowbanana12345"},"content":"    private int getFoodProtein(Integer entryNumber) throws IllegalAccessException {"},{"lineNumber":207,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(FOOD_PROTEIN_INDEX, entryNumber).orElse(DEFAULT_FOOD_PROTEIN));"},{"lineNumber":208,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":210,"author":{"gitId":"snowbanana12345"},"content":"    private int getFoodCarbohydrate(Integer entryNumber) throws IllegalAccessException {"},{"lineNumber":211,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(FOOD_CARBOHYDRATE_INDEX, entryNumber).orElse(DEFAULT_FOOD_CARBOHYDRATE));"},{"lineNumber":212,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":214,"author":{"gitId":"snowbanana12345"},"content":"    private int getFoodCalorie(Integer entryNumber) throws IllegalAccessException {"},{"lineNumber":215,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(FOOD_CALORIE_INDEX, entryNumber).orElse(DEFAULT_FOOD_CALORIE));"},{"lineNumber":216,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":218,"author":{"gitId":"snowbanana12345"},"content":"    public int getPortionSize(int entryNumber) throws IllegalAccessException {"},{"lineNumber":219,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(PORTION_SIZE_INDEX, entryNumber).orElse(DEFAULT_PORTION_SIZE));"},{"lineNumber":220,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":222,"author":{"gitId":"snowbanana12345"},"content":"    public int getDay(int entryNumber) throws IllegalAccessException {"},{"lineNumber":223,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(DAY_INDEX, entryNumber).orElse(DEFAULT_DAY));"},{"lineNumber":224,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":226,"author":{"gitId":"snowbanana12345"},"content":"    public int getMonth(int entryNumber) throws IllegalAccessException {"},{"lineNumber":227,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(MONTH_INDEX, entryNumber).orElse(DEFAULT_MONTH));"},{"lineNumber":228,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":230,"author":{"gitId":"snowbanana12345"},"content":"    public int getYear(int entryNumber) throws IllegalAccessException {"},{"lineNumber":231,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(YEAR_INDEX, entryNumber).orElse(DEFAULT_YEAR));"},{"lineNumber":232,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":234,"author":{"gitId":"snowbanana12345"},"content":"    public int getHour(int entryNumber) throws IllegalAccessException {"},{"lineNumber":235,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(HOUR_INDEX, entryNumber).orElse(DEFAULT_HOUR));"},{"lineNumber":236,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":238,"author":{"gitId":"snowbanana12345"},"content":"    public int getMinute(int entryNumber) throws IllegalAccessException {"},{"lineNumber":239,"author":{"gitId":"snowbanana12345"},"content":"        return Integer.parseInt(fileLoader.get(MINUTE_INDEX, entryNumber).orElse(DEFAULT_MINUTE));"},{"lineNumber":240,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":241}},{"path":"src/main/java/seedu/dietbook/saveload/FoodSaveLoadManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":" * Server as a in-between class between loader saver and food list."},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":" */"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"public class FoodSaveLoadManager {"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_SAVER_WIDTH \u003d 5;"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_SAVER_HEIGHT \u003d 10;"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"    private static final String FOOD_FOLDER_NAME \u003d \"Food%%UOISDN%%FOLDER\";"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_NAME \u003d \"MISSING NAME\";"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_NUTRITION_VALUE \u003d \"0\";"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"    private Saver saver;"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"    private Loader fileLoader;"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    public FoodSaveLoadManager() {"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"        this.saver \u003d new Saver(DEFAULT_SAVER_WIDTH, DEFAULT_SAVER_HEIGHT);"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"        this.fileLoader \u003d Loader.loadEmpty();"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"     * Call this function to load a food file."},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"     * @param fileName name of file"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"     * @throws FileNotFoundException if there is no such save file"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"    public void load(String fileName) throws FileNotFoundException {"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"        this.fileLoader \u003d Loader.load(FOOD_FOLDER_NAME, fileName);"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"    public void clearLoader() {"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"        this.fileLoader \u003d Loader.loadEmpty();"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"     * Returns a list of food that is stored in the loader."},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"     * @return the food list obtained from the data in the loaded file"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"     * @throws IllegalAccessException When this method is called without first loading a food file"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"    public List\u003cFood\u003e getFoodList() throws IllegalAccessException {"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"        ArrayList\u003cFood\u003e foodlist \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"        Food newFood;"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"        for (int j \u003d 1; j \u003c fileLoader.getHeight() + 1; j++) {"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"            newFood \u003d new Food("},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"                    fileLoader.get(1,j).orElse(DEFAULT_NAME),"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":"                    Integer.parseInt(fileLoader.get(2,j).orElse(DEFAULT_NUTRITION_VALUE)),"},{"lineNumber":54,"author":{"gitId":"snowbanana12345"},"content":"                    Integer.parseInt(fileLoader.get(3,j).orElse(DEFAULT_NUTRITION_VALUE)),"},{"lineNumber":55,"author":{"gitId":"snowbanana12345"},"content":"                    Integer.parseInt(fileLoader.get(4,j).orElse(DEFAULT_NUTRITION_VALUE)),"},{"lineNumber":56,"author":{"gitId":"snowbanana12345"},"content":"                    Integer.parseInt(fileLoader.get(5,j).orElse(DEFAULT_NUTRITION_VALUE)));"},{"lineNumber":57,"author":{"gitId":"snowbanana12345"},"content":"            foodlist.add(newFood);"},{"lineNumber":58,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"snowbanana12345"},"content":"        return foodlist;"},{"lineNumber":60,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":62,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"snowbanana12345"},"content":"     * saves a input food list to a file."},{"lineNumber":64,"author":{"gitId":"snowbanana12345"},"content":"     * @param fileName the name of the file to save to"},{"lineNumber":65,"author":{"gitId":"snowbanana12345"},"content":"     * @param foodlist list of food objects to be saved"},{"lineNumber":66,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"snowbanana12345"},"content":"    public void save(String fileName, List\u003cFood\u003e foodlist) {"},{"lineNumber":68,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.resetSize(DEFAULT_SAVER_WIDTH, foodlist.size());"},{"lineNumber":69,"author":{"gitId":"snowbanana12345"},"content":"        for (int j \u003d 1; j \u003c foodlist.size() + 1; j++) {"},{"lineNumber":70,"author":{"gitId":"snowbanana12345"},"content":"            saver.add(foodlist.get(j - 1).getName(), 1, j);"},{"lineNumber":71,"author":{"gitId":"snowbanana12345"},"content":"            saver.add(Integer.toString(foodlist.get(j - 1).getCalorie()), 2, j);"},{"lineNumber":72,"author":{"gitId":"snowbanana12345"},"content":"            saver.add(Integer.toString(foodlist.get(j - 1).getCarbohydrate()), 3, j);"},{"lineNumber":73,"author":{"gitId":"snowbanana12345"},"content":"            saver.add(Integer.toString(foodlist.get(j - 1).getProtein()), 4, j);"},{"lineNumber":74,"author":{"gitId":"snowbanana12345"},"content":"            saver.add(Integer.toString(foodlist.get(j - 1).getFat()), 5, j);"},{"lineNumber":75,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"snowbanana12345"},"content":"        saver.save(FOOD_FOLDER_NAME, fileName);"},{"lineNumber":77,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":78}},{"path":"src/main/java/seedu/dietbook/saveload/Loader.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"abstract class Loader {"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"    public static Loader load(String folderName, String fileName) throws FileNotFoundException {"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"        return new FileLoader(folderName, fileName);"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"    public static Loader loadEmpty() {"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"        return new EmptyLoader();"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    abstract Optional\u003cString\u003e get(int xposition, int yposition) throws IllegalAccessException;"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"    abstract int getHeight() throws IllegalAccessException;"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    abstract int getWidth() throws IllegalAccessException;"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":20}},{"path":"src/main/java/seedu/dietbook/saveload/PersonSaveLoadManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":" * This class is responsible for saving and loading personal information."},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":" * It has setters and getters for the following fields :"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":" * name, gender, age, height, original weight, current weight, target weight, activity level"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":" * it has a method load which loads from a specified saved file"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":" * it has a method save which saves the current information to a specified file name"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":" */"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"public class PersonSaveLoadManager {"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    private static final int NUM_OF_ENTRIES \u003d 8;"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    private static final int TABLE_HEIGHT \u003d 1;"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    private static final int PERSON_DATA_ROW \u003d 1;"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"    private static final String PERSON_FOLDER_NAME \u003d \"PERSONA_IS_NO_SUCH_PERSOOSOOSNSNSNS\";"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"    private static final int NAME_ENTRY_INDEX \u003d 1;"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    private static final int GENDER_ENTRY_INDEX \u003d 2;"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"    private static final int AGE_ENTRY_INDEX \u003d 3;"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"    private static final int HEIGHT_ENTRY_INDEX \u003d 4;"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"    private static final int ORIGINAL_WEIGHT_ENTRY_INDEX \u003d 5;"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"    private static final int CURRENT_WEIGHT_ENTRY_INDEX \u003d 6;"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    private static final int TARGET_WEIGHT_ENTRY_INDEX \u003d 7;"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"    private static final int ACTIVITY_LEVEL_ENTRY_INDEX \u003d 8;"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_NAME \u003d \"Missing Name\";"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"    private static final String DEFAULT_GENDER \u003d \"Others\";"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_AGE \u003d 0;"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_HEIGHT \u003d 0;"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_ORIGINAL_WEIGHT \u003d 0;"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_CURRENT_WEIGHT \u003d 0;"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_TARGET_WEIGHT \u003d 0;"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"    private static final int DEFAULT_FITNESS_LEVEL \u003d 0;"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"    private String name;"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"    private String gender;"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"    private int age;"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"    private int height;"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"    private int originalWeight;"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"    private int currentWeight;"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"    private int targetWeight;"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"    private int fitnessLevel;"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"    private Saver saver;"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"    private Loader fileLoader;"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"    public PersonSaveLoadManager() {"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"        this.saver \u003d new Saver(NUM_OF_ENTRIES, TABLE_HEIGHT);"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"        this.fileLoader \u003d Loader.loadEmpty();"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"        this.name \u003d DEFAULT_NAME;"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":"        this.gender \u003d DEFAULT_GENDER;"},{"lineNumber":54,"author":{"gitId":"snowbanana12345"},"content":"        this.age \u003d DEFAULT_AGE;"},{"lineNumber":55,"author":{"gitId":"snowbanana12345"},"content":"        this.height \u003d DEFAULT_HEIGHT;"},{"lineNumber":56,"author":{"gitId":"snowbanana12345"},"content":"        this.originalWeight \u003d DEFAULT_ORIGINAL_WEIGHT;"},{"lineNumber":57,"author":{"gitId":"snowbanana12345"},"content":"        this.currentWeight \u003d DEFAULT_CURRENT_WEIGHT;"},{"lineNumber":58,"author":{"gitId":"snowbanana12345"},"content":"        this.targetWeight \u003d DEFAULT_TARGET_WEIGHT;"},{"lineNumber":59,"author":{"gitId":"snowbanana12345"},"content":"        this.fitnessLevel \u003d DEFAULT_FITNESS_LEVEL;"},{"lineNumber":60,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":62,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"snowbanana12345"},"content":"     * loads a saved file and fill up all the fields with the data from the loaded file."},{"lineNumber":64,"author":{"gitId":"snowbanana12345"},"content":"     * set the field to default is the loaded file does not contain the field"},{"lineNumber":65,"author":{"gitId":"snowbanana12345"},"content":"     * @param fileName name of the saved file to be loaded to"},{"lineNumber":66,"author":{"gitId":"snowbanana12345"},"content":"     * @throws FileNotFoundException there is no save file with the name"},{"lineNumber":67,"author":{"gitId":"snowbanana12345"},"content":"     * @throws IllegalAccessException the get method is called when the loader is empty, will never happen with the"},{"lineNumber":68,"author":{"gitId":"snowbanana12345"},"content":"     *     current implementation."},{"lineNumber":69,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"snowbanana12345"},"content":"    public void load(String fileName) throws FileNotFoundException, IllegalAccessException {"},{"lineNumber":71,"author":{"gitId":"snowbanana12345"},"content":"        this.reset();"},{"lineNumber":72,"author":{"gitId":"snowbanana12345"},"content":"        this.fileLoader \u003d Loader.load(PERSON_FOLDER_NAME, fileName);"},{"lineNumber":73,"author":{"gitId":"snowbanana12345"},"content":"        this.name \u003d this.fileLoader.get(NAME_ENTRY_INDEX, PERSON_DATA_ROW).orElse(DEFAULT_NAME);"},{"lineNumber":74,"author":{"gitId":"snowbanana12345"},"content":"        this.gender \u003d this.fileLoader.get(GENDER_ENTRY_INDEX, PERSON_DATA_ROW).orElse(DEFAULT_GENDER);"},{"lineNumber":75,"author":{"gitId":"snowbanana12345"},"content":"        this.age \u003d Integer.parseInt(this.fileLoader.get(AGE_ENTRY_INDEX, PERSON_DATA_ROW).orElse("},{"lineNumber":76,"author":{"gitId":"snowbanana12345"},"content":"                Integer.toString(DEFAULT_AGE)));"},{"lineNumber":77,"author":{"gitId":"snowbanana12345"},"content":"        this.height \u003d Integer.parseInt(this.fileLoader.get(HEIGHT_ENTRY_INDEX, PERSON_DATA_ROW).orElse("},{"lineNumber":78,"author":{"gitId":"snowbanana12345"},"content":"                Integer.toString(DEFAULT_HEIGHT)));"},{"lineNumber":79,"author":{"gitId":"snowbanana12345"},"content":"        this.originalWeight \u003d Integer.parseInt(this.fileLoader.get(ORIGINAL_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW).orElse("},{"lineNumber":80,"author":{"gitId":"snowbanana12345"},"content":"                Integer.toString(DEFAULT_ORIGINAL_WEIGHT)));"},{"lineNumber":81,"author":{"gitId":"snowbanana12345"},"content":"        this.currentWeight \u003d Integer.parseInt(this.fileLoader.get(CURRENT_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW).orElse("},{"lineNumber":82,"author":{"gitId":"snowbanana12345"},"content":"                Integer.toString(DEFAULT_CURRENT_WEIGHT)));"},{"lineNumber":83,"author":{"gitId":"snowbanana12345"},"content":"        this.targetWeight \u003d Integer.parseInt(this.fileLoader.get(TARGET_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW).orElse("},{"lineNumber":84,"author":{"gitId":"snowbanana12345"},"content":"                Integer.toString(DEFAULT_TARGET_WEIGHT)));"},{"lineNumber":85,"author":{"gitId":"snowbanana12345"},"content":"        this.fitnessLevel \u003d Integer.parseInt(this.fileLoader.get(ACTIVITY_LEVEL_ENTRY_INDEX, PERSON_DATA_ROW).orElse("},{"lineNumber":86,"author":{"gitId":"snowbanana12345"},"content":"                Integer.toString(DEFAULT_FITNESS_LEVEL)));"},{"lineNumber":87,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":88,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":90,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"snowbanana12345"},"content":"     * Method saves the current data stored in the fields to the specified file name."},{"lineNumber":92,"author":{"gitId":"snowbanana12345"},"content":"     * Will over-write files with the same name."},{"lineNumber":93,"author":{"gitId":"snowbanana12345"},"content":"     * @param fileName name of the file to save to"},{"lineNumber":94,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"snowbanana12345"},"content":"    public void save(String fileName) {"},{"lineNumber":96,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.reset();"},{"lineNumber":97,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.add(this.name, NAME_ENTRY_INDEX, PERSON_DATA_ROW);"},{"lineNumber":98,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.add(this.gender, GENDER_ENTRY_INDEX, PERSON_DATA_ROW);"},{"lineNumber":99,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.add(Integer.toString(this.age), AGE_ENTRY_INDEX, PERSON_DATA_ROW);"},{"lineNumber":100,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.add(Integer.toString(this.height), HEIGHT_ENTRY_INDEX, PERSON_DATA_ROW);"},{"lineNumber":101,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.add(Integer.toString(this.originalWeight), ORIGINAL_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW);"},{"lineNumber":102,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.add(Integer.toString(this.currentWeight), CURRENT_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW);"},{"lineNumber":103,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.add(Integer.toString(this.targetWeight), TARGET_WEIGHT_ENTRY_INDEX, PERSON_DATA_ROW);"},{"lineNumber":104,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.add(Integer.toString(this.fitnessLevel), ACTIVITY_LEVEL_ENTRY_INDEX, PERSON_DATA_ROW);"},{"lineNumber":105,"author":{"gitId":"snowbanana12345"},"content":"        this.saver.save(PERSON_FOLDER_NAME, fileName);"},{"lineNumber":106,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":108,"author":{"gitId":"snowbanana12345"},"content":"    public void reset() {"},{"lineNumber":109,"author":{"gitId":"snowbanana12345"},"content":"        this.fileLoader \u003d Loader.loadEmpty();"},{"lineNumber":110,"author":{"gitId":"snowbanana12345"},"content":"        this.name \u003d DEFAULT_NAME;"},{"lineNumber":111,"author":{"gitId":"snowbanana12345"},"content":"        this.gender \u003d DEFAULT_GENDER;"},{"lineNumber":112,"author":{"gitId":"snowbanana12345"},"content":"        this.age \u003d DEFAULT_AGE;"},{"lineNumber":113,"author":{"gitId":"snowbanana12345"},"content":"        this.height \u003d DEFAULT_HEIGHT;"},{"lineNumber":114,"author":{"gitId":"snowbanana12345"},"content":"        this.originalWeight \u003d DEFAULT_ORIGINAL_WEIGHT;"},{"lineNumber":115,"author":{"gitId":"snowbanana12345"},"content":"        this.currentWeight \u003d DEFAULT_CURRENT_WEIGHT;"},{"lineNumber":116,"author":{"gitId":"snowbanana12345"},"content":"        this.targetWeight \u003d DEFAULT_TARGET_WEIGHT;"},{"lineNumber":117,"author":{"gitId":"snowbanana12345"},"content":"        this.fitnessLevel \u003d DEFAULT_FITNESS_LEVEL;"},{"lineNumber":118,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":120,"author":{"gitId":"snowbanana12345"},"content":"    // ----- Setters and Getters ------"},{"lineNumber":121,"author":{"gitId":"snowbanana12345"},"content":"    public String getName() {"},{"lineNumber":122,"author":{"gitId":"snowbanana12345"},"content":"        return name;"},{"lineNumber":123,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":125,"author":{"gitId":"snowbanana12345"},"content":"    public String getGender() {"},{"lineNumber":126,"author":{"gitId":"snowbanana12345"},"content":"        return gender;"},{"lineNumber":127,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":129,"author":{"gitId":"snowbanana12345"},"content":"    public int getAge() {"},{"lineNumber":130,"author":{"gitId":"snowbanana12345"},"content":"        return age;"},{"lineNumber":131,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":133,"author":{"gitId":"snowbanana12345"},"content":"    public int getHeight() {"},{"lineNumber":134,"author":{"gitId":"snowbanana12345"},"content":"        return height;"},{"lineNumber":135,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":137,"author":{"gitId":"snowbanana12345"},"content":"    public int getOriginalWeight() {"},{"lineNumber":138,"author":{"gitId":"snowbanana12345"},"content":"        return originalWeight;"},{"lineNumber":139,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":141,"author":{"gitId":"snowbanana12345"},"content":"    public int getCurrentWeight() {"},{"lineNumber":142,"author":{"gitId":"snowbanana12345"},"content":"        return currentWeight;"},{"lineNumber":143,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":145,"author":{"gitId":"snowbanana12345"},"content":"    public int getTargetWeight() {"},{"lineNumber":146,"author":{"gitId":"snowbanana12345"},"content":"        return targetWeight;"},{"lineNumber":147,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":149,"author":{"gitId":"snowbanana12345"},"content":"    public int getFitnessLevel() {"},{"lineNumber":150,"author":{"gitId":"snowbanana12345"},"content":"        return fitnessLevel;"},{"lineNumber":151,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":153,"author":{"gitId":"snowbanana12345"},"content":"    public void setName(String name) {"},{"lineNumber":154,"author":{"gitId":"snowbanana12345"},"content":"        this.name \u003d name;"},{"lineNumber":155,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":157,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":158,"author":{"gitId":"snowbanana12345"},"content":"    public void setGender(String gender) {"},{"lineNumber":159,"author":{"gitId":"snowbanana12345"},"content":"        this.gender \u003d gender;"},{"lineNumber":160,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":162,"author":{"gitId":"snowbanana12345"},"content":"    public void setAge(int age) {"},{"lineNumber":163,"author":{"gitId":"snowbanana12345"},"content":"        this.age \u003d age;"},{"lineNumber":164,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":166,"author":{"gitId":"snowbanana12345"},"content":"    public void setHeight(int height) {"},{"lineNumber":167,"author":{"gitId":"snowbanana12345"},"content":"        this.height \u003d height;"},{"lineNumber":168,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":170,"author":{"gitId":"snowbanana12345"},"content":"    public void setOriginalWeight(int originalWeight) {"},{"lineNumber":171,"author":{"gitId":"snowbanana12345"},"content":"        this.originalWeight \u003d originalWeight;"},{"lineNumber":172,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":174,"author":{"gitId":"snowbanana12345"},"content":"    public void setCurrentWeight(int currentWeight) {"},{"lineNumber":175,"author":{"gitId":"snowbanana12345"},"content":"        this.currentWeight \u003d currentWeight;"},{"lineNumber":176,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":178,"author":{"gitId":"snowbanana12345"},"content":"    public void setTargetWeight(int targetWeight) {"},{"lineNumber":179,"author":{"gitId":"snowbanana12345"},"content":"        this.targetWeight \u003d targetWeight;"},{"lineNumber":180,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":182,"author":{"gitId":"snowbanana12345"},"content":"    public void setActivityLevel(int activityLevel) {"},{"lineNumber":183,"author":{"gitId":"snowbanana12345"},"content":"        this.fitnessLevel \u003d activityLevel;"},{"lineNumber":184,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":185}},{"path":"src/main/java/seedu/dietbook/saveload/Saver.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":" * Saver class allows storage of string data into a table with a given width and height"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":" * It has a function that can write the data stored in it\u0027s table."},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":" */"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"public class Saver {"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    private static final String ROOT_DIRECTORY \u003d System.getProperty(\"user.home\");"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    private static final String BASE_FOLDER_NAME \u003d  ROOT_DIRECTORY + File.separator + \"dietbook\";"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"    private static final String EMPTY_SYMBOL \u003d \"%NULL\u0026!!LL\";"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"    private static final String SEPERATOR_SYMBOL \u003d \"\u0026%SEPERATOR%AAA%\";"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"    private static final String FILE_EXTENSION \u003d \".txt\";"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"    static {"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"        File rootDirectory \u003d new File(BASE_FOLDER_NAME);"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"        rootDirectory.mkdir();"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"    private String[][] entries;"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"    private int height;"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"    private int width;"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"    public Saver(int width, int height) {"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"        setWidthAndHeight(width,height);"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"        initEntries();"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"    private void setWidthAndHeight(int width, int height) {"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"        this.height \u003d height;"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"        this.width \u003d width;"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"    private void initEntries() {"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"        this.entries \u003d new String[height][width];"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"        for (int i \u003d 0; i \u003c width; i++) {"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"            for (int j \u003d 0; j \u003c height; j++) {"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"                entries[j][i] \u003d EMPTY_SYMBOL;"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"    public int getWidth() {"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"        return width;"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"    public int getHeight() {"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":"        return height;"},{"lineNumber":54,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":56,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"snowbanana12345"},"content":"     * Clears the entire table and set it to the new size."},{"lineNumber":58,"author":{"gitId":"snowbanana12345"},"content":"     * @param newWidth the new width"},{"lineNumber":59,"author":{"gitId":"snowbanana12345"},"content":"     * @param newHeight the new height"},{"lineNumber":60,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"snowbanana12345"},"content":"    public void resetSize(int newWidth, int newHeight) {"},{"lineNumber":62,"author":{"gitId":"snowbanana12345"},"content":"        setWidthAndHeight(newWidth, newHeight);"},{"lineNumber":63,"author":{"gitId":"snowbanana12345"},"content":"        initEntries();"},{"lineNumber":64,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":66,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"snowbanana12345"},"content":"     * Clears the entire table."},{"lineNumber":68,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"snowbanana12345"},"content":"    public void reset() {"},{"lineNumber":70,"author":{"gitId":"snowbanana12345"},"content":"        initEntries();"},{"lineNumber":71,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":73,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"snowbanana12345"},"content":"     * Adds the string provided to the position x,y on the table."},{"lineNumber":75,"author":{"gitId":"snowbanana12345"},"content":"     * @param entry the entry to be provided into this position"},{"lineNumber":76,"author":{"gitId":"snowbanana12345"},"content":"     * @param xposition x position"},{"lineNumber":77,"author":{"gitId":"snowbanana12345"},"content":"     * @param yposition y position"},{"lineNumber":78,"author":{"gitId":"snowbanana12345"},"content":"     * @throws IndexOutOfBoundsException x or y position is out of bounds"},{"lineNumber":79,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"snowbanana12345"},"content":"    public void add(String entry, int xposition, int yposition) throws IndexOutOfBoundsException {"},{"lineNumber":81,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"snowbanana12345"},"content":"            this.entries[yposition - 1][xposition - 1] \u003d entry;"},{"lineNumber":83,"author":{"gitId":"snowbanana12345"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":84,"author":{"gitId":"snowbanana12345"},"content":"            throw new IndexOutOfBoundsException(\"The x or y position provided must be within the the dimensions of the\""},{"lineNumber":85,"author":{"gitId":"snowbanana12345"},"content":"                    + \"saver table!\");"},{"lineNumber":86,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":89,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"snowbanana12345"},"content":"     * Deletes the entry in the table."},{"lineNumber":91,"author":{"gitId":"snowbanana12345"},"content":"     * @param xposition x position"},{"lineNumber":92,"author":{"gitId":"snowbanana12345"},"content":"     * @param yposition y position"},{"lineNumber":93,"author":{"gitId":"snowbanana12345"},"content":"     * @throws IndexOutOfBoundsException x or y position is out of bounds"},{"lineNumber":94,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"snowbanana12345"},"content":"    public void delete(int xposition, int yposition) throws IndexOutOfBoundsException {"},{"lineNumber":96,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"snowbanana12345"},"content":"            this.entries[yposition - 1][xposition - 1] \u003d EMPTY_SYMBOL;"},{"lineNumber":98,"author":{"gitId":"snowbanana12345"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":99,"author":{"gitId":"snowbanana12345"},"content":"            throw new IndexOutOfBoundsException(\"The x or y position provided must be within the the dimensions of the\""},{"lineNumber":100,"author":{"gitId":"snowbanana12345"},"content":"                    + \"saver table!\");"},{"lineNumber":101,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":104,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"snowbanana12345"},"content":"     * Gets a entry stored in the table."},{"lineNumber":106,"author":{"gitId":"snowbanana12345"},"content":"     * @param xposition x position"},{"lineNumber":107,"author":{"gitId":"snowbanana12345"},"content":"     * @param yposition y position"},{"lineNumber":108,"author":{"gitId":"snowbanana12345"},"content":"     * @return Optional of String that is empty if the position does not contain an entry."},{"lineNumber":109,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"snowbanana12345"},"content":"    public Optional\u003cString\u003e get(int xposition, int yposition) {"},{"lineNumber":111,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":112,"author":{"gitId":"snowbanana12345"},"content":"            if (this.entries[yposition - 1][xposition - 1].equals(EMPTY_SYMBOL)) {"},{"lineNumber":113,"author":{"gitId":"snowbanana12345"},"content":"                return Optional.empty();"},{"lineNumber":114,"author":{"gitId":"snowbanana12345"},"content":"            } else {"},{"lineNumber":115,"author":{"gitId":"snowbanana12345"},"content":"                return Optional.of(this.entries[yposition - 1][xposition - 1]);"},{"lineNumber":116,"author":{"gitId":"snowbanana12345"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"snowbanana12345"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":118,"author":{"gitId":"snowbanana12345"},"content":"            throw new IndexOutOfBoundsException(\"The x or y position provided must be within the the dimensions of the\""},{"lineNumber":119,"author":{"gitId":"snowbanana12345"},"content":"                    + \"saver table!\");"},{"lineNumber":120,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":123,"author":{"gitId":"snowbanana12345"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"snowbanana12345"},"content":"     * Saves the data table into a text file in the following format:"},{"lineNumber":125,"author":{"gitId":"snowbanana12345"},"content":"     * width"},{"lineNumber":126,"author":{"gitId":"snowbanana12345"},"content":"     * height"},{"lineNumber":127,"author":{"gitId":"snowbanana12345"},"content":"     * (seperator) row 1 entry 1 (seperator) row 1 entry 2 (separator) ...."},{"lineNumber":128,"author":{"gitId":"snowbanana12345"},"content":"     * (seperator) row 2 entry 1 (separator) row 2 entry 2 (separator) ...."},{"lineNumber":129,"author":{"gitId":"snowbanana12345"},"content":"     * ...."},{"lineNumber":130,"author":{"gitId":"snowbanana12345"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"snowbanana12345"},"content":"     * @param folderName name of the folder"},{"lineNumber":132,"author":{"gitId":"snowbanana12345"},"content":"     * @param fileName name of the file"},{"lineNumber":133,"author":{"gitId":"snowbanana12345"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"snowbanana12345"},"content":"    public void save(String folderName, String fileName) {"},{"lineNumber":135,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":136,"author":{"gitId":"snowbanana12345"},"content":"            File directory \u003d new File(BASE_FOLDER_NAME + File.separator + folderName);"},{"lineNumber":137,"author":{"gitId":"snowbanana12345"},"content":"            directory.mkdir();"},{"lineNumber":138,"author":{"gitId":"snowbanana12345"},"content":"            FileWriter writer \u003d new FileWriter(BASE_FOLDER_NAME + File.separator + folderName"},{"lineNumber":139,"author":{"gitId":"snowbanana12345"},"content":"                    + File.separator + fileName + FILE_EXTENSION);"},{"lineNumber":140,"author":{"gitId":"snowbanana12345"},"content":"            writer.write(width + \"\\n\");"},{"lineNumber":141,"author":{"gitId":"snowbanana12345"},"content":"            writer.write(height + \"\\n\");"},{"lineNumber":142,"author":{"gitId":"snowbanana12345"},"content":"            for (int j \u003d 0; j \u003c height; j++) {"},{"lineNumber":143,"author":{"gitId":"snowbanana12345"},"content":"                for (int i \u003d 0; i \u003c width; i++) {"},{"lineNumber":144,"author":{"gitId":"snowbanana12345"},"content":"                    writer.write(SEPERATOR_SYMBOL);"},{"lineNumber":145,"author":{"gitId":"snowbanana12345"},"content":"                    writer.write(entries[j][i]);"},{"lineNumber":146,"author":{"gitId":"snowbanana12345"},"content":"                }"},{"lineNumber":147,"author":{"gitId":"snowbanana12345"},"content":"                writer.write(\"\\n\");"},{"lineNumber":148,"author":{"gitId":"snowbanana12345"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"snowbanana12345"},"content":"            writer.close();"},{"lineNumber":150,"author":{"gitId":"snowbanana12345"},"content":"        } catch (IOException e) {"},{"lineNumber":151,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Oops, the file writer took in a directory for some reason!\");"},{"lineNumber":152,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":154}},{"path":"src/main/java/seedu/dietbook/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.ui;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.logger.MainLogger;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":" * Represents a user interface manager that deals with user interaction and communicating with the logic"},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":" * component."},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":" * A \u003ccode\u003eUi\u003c/code\u003e objects deals with relaying user inputs, printing output messages and communicating with"},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":" * the logic component."},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":" */"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"public class Ui {"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"    private final UiInput uiInput;"},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"    private final UiHelper uiHelper;"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"    private final UiOutput uiOutput;"},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    private final UiMessage uiMessage;"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"    private final MainLogger mainLogger;"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"     * Constructs a \u003ccode\u003eUi\u003c/code\u003e object."},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"    public Ui() {"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"        uiInput \u003d new UiInput();"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper \u003d new UiHelper();"},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput \u003d new UiOutput();"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"        uiMessage \u003d new UiMessage();"},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger \u003d new MainLogger(Ui.class.getName());"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the non-empty user input that has been trimmed."},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"     * @return The non-empty user input that has been trimmed."},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"HengFuYuen"},"content":"    public String getCommand() throws DietException {"},{"lineNumber":40,"author":{"gitId":"HengFuYuen"},"content":"        return uiInput.getCommand();"},{"lineNumber":41,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":43,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the welcome message from DietBook when it is first booted up."},{"lineNumber":45,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"HengFuYuen"},"content":"    public void printWelcomeMessage() {"},{"lineNumber":47,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getWelcomeMessage());"},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":50,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"HengFuYuen"},"content":"     * Prints a message asking the user to input their personal information related to dieting and health"},{"lineNumber":52,"author":{"gitId":"HengFuYuen"},"content":"     * which includes gender, age, height, activity level, original weight and target weight."},{"lineNumber":53,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"HengFuYuen"},"content":"     * @param name The name of the user."},{"lineNumber":55,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"HengFuYuen"},"content":"    public void printAskForUserInfoMessage(String name) {"},{"lineNumber":57,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(name, \"Name\");"},{"lineNumber":58,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":59,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getAskForUserInfoMessage(name));"},{"lineNumber":60,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":62,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"HengFuYuen"},"content":"     * Prints an exit message when DietBook is closed."},{"lineNumber":64,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"HengFuYuen"},"content":"    public void printExitMessage() {"},{"lineNumber":67,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getExitMessage());"},{"lineNumber":68,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":70,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"HengFuYuen"},"content":"     * Prints an error message given what or where the error is."},{"lineNumber":72,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"HengFuYuen"},"content":"     * @param errorMessage Message detailing what or where the error is."},{"lineNumber":74,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"HengFuYuen"},"content":"    public void printErrorMessage(String errorMessage) {"},{"lineNumber":76,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(errorMessage, \"Error message\");"},{"lineNumber":77,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":78,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getErrorMessage(errorMessage));"},{"lineNumber":79,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":81,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"HengFuYuen"},"content":"     * Prints a message that notifies the user that DietBook has been initialised."},{"lineNumber":83,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"HengFuYuen"},"content":"    public void printInitialisationCompleteMessage() {"},{"lineNumber":85,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getInitialisationCompleteMessage());"},{"lineNumber":86,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":88,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"HengFuYuen"},"content":"     * Prints a message informing the user that DietBook has successfully saved all their data."},{"lineNumber":90,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"HengFuYuen"},"content":"    public void dataSuccessfullySavedMessage() {"},{"lineNumber":92,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getDataSuccessfullySavedMessage());"},{"lineNumber":93,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":95,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the welcome back message when user reboots up DietBook after the first initialisation."},{"lineNumber":97,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"HengFuYuen"},"content":"     * @param name The name of the user."},{"lineNumber":99,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"HengFuYuen"},"content":"    public void printWelcomeBackMessage(String name) {"},{"lineNumber":101,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(name, \"Name\");"},{"lineNumber":102,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":103,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getWelcomeBackMessage(name));"},{"lineNumber":104,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":106,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"HengFuYuen"},"content":"     * Prints a string representation of a list of the commands that users can use."},{"lineNumber":108,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"HengFuYuen"},"content":"    public void printHelpCommandMessage() {"},{"lineNumber":110,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getHelpCommandMessage());"},{"lineNumber":111,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":113,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"HengFuYuen"},"content":"     * Prints all the food in the database sorted by the canteen and then the store it is found."},{"lineNumber":115,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"HengFuYuen"},"content":"     * @param foodDatabase The string representation of all the food items stored in the database."},{"lineNumber":117,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"HengFuYuen"},"content":"    public void printDatabase(String foodDatabase) {"},{"lineNumber":119,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(foodDatabase,\"Database\");"},{"lineNumber":120,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":121,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getDatabaseMessage(foodDatabase));"},{"lineNumber":122,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":124,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"HengFuYuen"},"content":"     * Prints all the information related to the user."},{"lineNumber":126,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"HengFuYuen"},"content":"     * @param personInfo The user\u0027s personal information."},{"lineNumber":128,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"HengFuYuen"},"content":"    public void printPersonInfo(String personInfo) {"},{"lineNumber":130,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(personInfo,\"Person information\");"},{"lineNumber":131,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":132,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getPersonInfoMessage(personInfo));"},{"lineNumber":133,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":135,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"HengFuYuen"},"content":"     * Prints all the updated information related to the user."},{"lineNumber":137,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"HengFuYuen"},"content":"     * @param personInfo The user\u0027s personal information."},{"lineNumber":139,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"HengFuYuen"},"content":"    public void printEditedPersonInfo(String personInfo) {"},{"lineNumber":141,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(personInfo,\"Updated person information\");"},{"lineNumber":142,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":143,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getEditedPersonInfoMessage(personInfo));"},{"lineNumber":144,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":146,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"HengFuYuen"},"content":"     * Prints all the food items in the food list in the order that they were added or a message stating"},{"lineNumber":148,"author":{"gitId":"HengFuYuen"},"content":"     * that the food list is empty if there are no food items."},{"lineNumber":149,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"HengFuYuen"},"content":"     * @param allFood The string representation of all the food items in the food list."},{"lineNumber":151,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"HengFuYuen"},"content":"    public void printFoodList(String allFood) {"},{"lineNumber":153,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForNullStringInputs(allFood,"},{"lineNumber":154,"author":{"gitId":"HengFuYuen"},"content":"                \"String representation of all food in food list\");"},{"lineNumber":155,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":156,"author":{"gitId":"HengFuYuen"},"content":"        if (uiHelper.isEmptyString(allFood)) {"},{"lineNumber":157,"author":{"gitId":"HengFuYuen"},"content":"            uiOutput.print(uiMessage.getEmptyFoodListMessage());"},{"lineNumber":158,"author":{"gitId":"HengFuYuen"},"content":"        } else {"},{"lineNumber":159,"author":{"gitId":"HengFuYuen"},"content":"            uiOutput.print(uiMessage.getFoodListMessage(allFood));"},{"lineNumber":160,"author":{"gitId":"HengFuYuen"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":163,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"HengFuYuen"},"content":"     * Prints food items recorded into the food list during a given time period in the order that they were"},{"lineNumber":165,"author":{"gitId":"HengFuYuen"},"content":"     * added or a message stating no food items were recorded during the given time period."},{"lineNumber":166,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"HengFuYuen"},"content":"     * @param foods The string representation of food items in the food list recorded during the time"},{"lineNumber":168,"author":{"gitId":"HengFuYuen"},"content":"     *     period given."},{"lineNumber":169,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period given."},{"lineNumber":170,"author":{"gitId":"HengFuYuen"},"content":"     * @param end Ending date time of the time period given."},{"lineNumber":171,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"HengFuYuen"},"content":"    public void printFoodList(String foods, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":173,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Foods: \" + foods);"},{"lineNumber":174,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":175,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":176,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":177,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForNullStringInputs(foods,"},{"lineNumber":178,"author":{"gitId":"HengFuYuen"},"content":"                \"String representation of food items in the food list recorded during the \""},{"lineNumber":179,"author":{"gitId":"HengFuYuen"},"content":"                        + \"time period given\");"},{"lineNumber":180,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForTimePeriod(start, end);"},{"lineNumber":181,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":182,"author":{"gitId":"HengFuYuen"},"content":"        if (uiHelper.isEmptyString(foods)) {"},{"lineNumber":183,"author":{"gitId":"HengFuYuen"},"content":"            uiOutput.print(uiMessage.getEmptyFoodListMessage(start, end));"},{"lineNumber":184,"author":{"gitId":"HengFuYuen"},"content":"        } else {"},{"lineNumber":185,"author":{"gitId":"HengFuYuen"},"content":"            uiOutput.print(uiMessage.getFoodListMessage(foods, start, end));"},{"lineNumber":186,"author":{"gitId":"HengFuYuen"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":189,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"HengFuYuen"},"content":"     * Prints food items recorded into the food list after a given timing in the order that they were"},{"lineNumber":191,"author":{"gitId":"HengFuYuen"},"content":"     * added or a message stating no food items were recorded after the given timing till now."},{"lineNumber":192,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"HengFuYuen"},"content":"     * @param foods The string representation of food items in the food list recorded from the given time"},{"lineNumber":194,"author":{"gitId":"HengFuYuen"},"content":"     *     till now."},{"lineNumber":195,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period till now."},{"lineNumber":196,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"HengFuYuen"},"content":"    public void printFoodList(String foods, LocalDateTime start) {"},{"lineNumber":198,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Foods: \" + foods);"},{"lineNumber":199,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":200,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":201,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.now();"},{"lineNumber":202,"author":{"gitId":"HengFuYuen"},"content":"        printFoodList(foods, start, end);"},{"lineNumber":203,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":205,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"HengFuYuen"},"content":"     * Prints a message to show that the food specified has been added to the food list."},{"lineNumber":207,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":208,"author":{"gitId":"HengFuYuen"},"content":"     * @param newFood The string representation of the new food item that was added to the food list."},{"lineNumber":209,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"HengFuYuen"},"content":"    public void printNewFood(String newFood) {"},{"lineNumber":211,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(newFood,"},{"lineNumber":212,"author":{"gitId":"HengFuYuen"},"content":"                \"String representation of the food that was added\");"},{"lineNumber":213,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":214,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getNewFoodMessage(newFood));"},{"lineNumber":215,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":217,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":218,"author":{"gitId":"HengFuYuen"},"content":"     * Prints a message to show that the food specified has been deleted from the food list."},{"lineNumber":219,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":220,"author":{"gitId":"HengFuYuen"},"content":"     * @param deletedFood The string representation of the food that was deleted from the food list."},{"lineNumber":221,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"HengFuYuen"},"content":"    public void printDeletedFood(String deletedFood) {"},{"lineNumber":223,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(deletedFood,"},{"lineNumber":224,"author":{"gitId":"HengFuYuen"},"content":"                \"String representation of the food that was deleted\");"},{"lineNumber":225,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":226,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getDeletedFoodMessage(deletedFood));"},{"lineNumber":227,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":229,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"HengFuYuen"},"content":"     * Prints a message to show that the food list has been successfully cleared and is now empty."},{"lineNumber":231,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"HengFuYuen"},"content":"    public void printClearFoodListMessage() {"},{"lineNumber":233,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getClearFoodListMessage());"},{"lineNumber":234,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":236,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":237,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the daily recommended calorie intake of the user based on the user\u0027s personal information."},{"lineNumber":238,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":239,"author":{"gitId":"HengFuYuen"},"content":"     * @param calorieRecommendation The daily recommended calorie intake of the user."},{"lineNumber":240,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":241,"author":{"gitId":"HengFuYuen"},"content":"    public void printCalorieRecommendation(String name, int calorieRecommendation) {"},{"lineNumber":242,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(name, \"Name\");"},{"lineNumber":243,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForCalorieRecommendation(calorieRecommendation);"},{"lineNumber":244,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":245,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getCalorieRecommendationMessage(name, calorieRecommendation));"},{"lineNumber":246,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":248,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":249,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of carbohydrates consumed by the user."},{"lineNumber":250,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":251,"author":{"gitId":"HengFuYuen"},"content":"     * @param carbIntake The total amount of carbohydrates of all the food in the food list."},{"lineNumber":252,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":253,"author":{"gitId":"HengFuYuen"},"content":"    public void printCarbIntake(int carbIntake) {"},{"lineNumber":254,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getOneIntakeMessage(carbIntake, \"carbohydrate\",\"g\"));"},{"lineNumber":255,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":257,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":258,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of carbohydrates consumed by the user given a certain time period."},{"lineNumber":259,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":260,"author":{"gitId":"HengFuYuen"},"content":"     * @param carbIntake The total amount of carbohydrates of food in the food list recorded during the"},{"lineNumber":261,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period given."},{"lineNumber":262,"author":{"gitId":"HengFuYuen"},"content":"     * @param end Ending date time of the time period given."},{"lineNumber":263,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":264,"author":{"gitId":"HengFuYuen"},"content":"    public void printCarbIntake(int carbIntake, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":265,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Carb intake: \" + carbIntake);"},{"lineNumber":266,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":267,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":268,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":269,"author":{"gitId":"HengFuYuen"},"content":"        String stringCarbIntake \u003d uiMessage.getOneIntakeMessage(carbIntake,\"carbohydrate\", \"g\");"},{"lineNumber":270,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getIntakeWithTimeMessage(stringCarbIntake, start, end));"},{"lineNumber":271,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":273,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of carbohydrates consumed by the user given a start date."},{"lineNumber":275,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":276,"author":{"gitId":"HengFuYuen"},"content":"     * @param carbIntake The total amount of carbohydrates of food in the food list recorded from the"},{"lineNumber":277,"author":{"gitId":"HengFuYuen"},"content":"     *     start date till now."},{"lineNumber":278,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time to calculate from."},{"lineNumber":279,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":280,"author":{"gitId":"HengFuYuen"},"content":"    public void printCarbIntake(int carbIntake, LocalDateTime start) {"},{"lineNumber":281,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Carb intake: \" + carbIntake);"},{"lineNumber":282,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":283,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":284,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.now();"},{"lineNumber":285,"author":{"gitId":"HengFuYuen"},"content":"        printCarbIntake(carbIntake, start, end);"},{"lineNumber":286,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":288,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":289,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of calories consumed by the user."},{"lineNumber":290,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":291,"author":{"gitId":"HengFuYuen"},"content":"     * @param calorieIntake The total amount of calories of all the food in the food list."},{"lineNumber":292,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":293,"author":{"gitId":"HengFuYuen"},"content":"    public void printCalorieIntake(int calorieIntake) {"},{"lineNumber":294,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getOneIntakeMessage(calorieIntake, \"calorie\", \"kcal\"));"},{"lineNumber":295,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":297,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":298,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of calories consumed by the user given a certain time period."},{"lineNumber":299,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":300,"author":{"gitId":"HengFuYuen"},"content":"     * @param calorieIntake The total amount of calories of food in the food list recorded during the"},{"lineNumber":301,"author":{"gitId":"HengFuYuen"},"content":"     *     time period given."},{"lineNumber":302,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period given."},{"lineNumber":303,"author":{"gitId":"HengFuYuen"},"content":"     * @param end Ending date time of the time period given."},{"lineNumber":304,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":305,"author":{"gitId":"HengFuYuen"},"content":"    public void printCalorieIntake(int calorieIntake, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":306,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Calorie intake: \" + calorieIntake);"},{"lineNumber":307,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":308,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":309,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":310,"author":{"gitId":"HengFuYuen"},"content":"        String stringCalorieIntake \u003d uiMessage.getOneIntakeMessage(calorieIntake,\"calorie\", \"kcal\");"},{"lineNumber":311,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getIntakeWithTimeMessage(stringCalorieIntake, start, end));"},{"lineNumber":312,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":314,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":315,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of calories consumed by the user given a start date."},{"lineNumber":316,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":317,"author":{"gitId":"HengFuYuen"},"content":"     * @param calorieIntake The total amount of calories of food in the food list recorded from the"},{"lineNumber":318,"author":{"gitId":"HengFuYuen"},"content":"     *     start date till now."},{"lineNumber":319,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time to calculate from."},{"lineNumber":320,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":321,"author":{"gitId":"HengFuYuen"},"content":"    public void printCalorieIntake(int calorieIntake, LocalDateTime start) {"},{"lineNumber":322,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Calorie intake: \" + calorieIntake);"},{"lineNumber":323,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":324,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":325,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.now();"},{"lineNumber":326,"author":{"gitId":"HengFuYuen"},"content":"        printCalorieIntake(calorieIntake, start, end);"},{"lineNumber":327,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":329,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":330,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of proteins consumed by the user."},{"lineNumber":331,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":332,"author":{"gitId":"HengFuYuen"},"content":"     * @param proteinIntake The total amount of proteins of all the food in the food list."},{"lineNumber":333,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":334,"author":{"gitId":"HengFuYuen"},"content":"    public void printProteinIntake(int proteinIntake) {"},{"lineNumber":335,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getOneIntakeMessage(proteinIntake, \"protein\", \"g\"));"},{"lineNumber":336,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":337,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":338,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":339,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of proteins consumed by the user given a certain time period."},{"lineNumber":340,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":341,"author":{"gitId":"HengFuYuen"},"content":"     * @param proteinIntake The total amount of proteins of food in the food list recorded during the"},{"lineNumber":342,"author":{"gitId":"HengFuYuen"},"content":"     *     time period given."},{"lineNumber":343,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period given."},{"lineNumber":344,"author":{"gitId":"HengFuYuen"},"content":"     * @param end Ending date time of the time period given."},{"lineNumber":345,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":346,"author":{"gitId":"HengFuYuen"},"content":"    public void printProteinIntake(int proteinIntake, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":347,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Protein intake: \" + proteinIntake);"},{"lineNumber":348,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":349,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":350,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":351,"author":{"gitId":"HengFuYuen"},"content":"        String stringProteinIntake \u003d uiMessage.getOneIntakeMessage(proteinIntake, \"protein\", \"g\");"},{"lineNumber":352,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getIntakeWithTimeMessage(stringProteinIntake, start, end));"},{"lineNumber":353,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":354,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":355,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":356,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of proteins consumed by the user given a start date."},{"lineNumber":357,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":358,"author":{"gitId":"HengFuYuen"},"content":"     * @param proteinIntake The total amount of proteins of food in the food list recorded from the"},{"lineNumber":359,"author":{"gitId":"HengFuYuen"},"content":"     *     start date till now."},{"lineNumber":360,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time to calculate from."},{"lineNumber":361,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":362,"author":{"gitId":"HengFuYuen"},"content":"    public void printProteinIntake(int proteinIntake, LocalDateTime start) {"},{"lineNumber":363,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Protein intake: \" + proteinIntake);"},{"lineNumber":364,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":365,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":366,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.now();"},{"lineNumber":367,"author":{"gitId":"HengFuYuen"},"content":"        printProteinIntake(proteinIntake, start, end);"},{"lineNumber":368,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":370,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":371,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of fats consumed by the user."},{"lineNumber":372,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":373,"author":{"gitId":"HengFuYuen"},"content":"     * @param fatIntake The total amount of fats of all the food in the food list."},{"lineNumber":374,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":375,"author":{"gitId":"HengFuYuen"},"content":"    public void printFatIntake(int fatIntake) {"},{"lineNumber":376,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getOneIntakeMessage(fatIntake, \"fat\", \"g\"));"},{"lineNumber":377,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":378,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":379,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":380,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of fats consumed by the user given a certain time period."},{"lineNumber":381,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":382,"author":{"gitId":"HengFuYuen"},"content":"     * @param fatIntake The total amount of fats of food in the food list recorded during the"},{"lineNumber":383,"author":{"gitId":"HengFuYuen"},"content":"     *     time period given."},{"lineNumber":384,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period given."},{"lineNumber":385,"author":{"gitId":"HengFuYuen"},"content":"     * @param end Ending date time of the time period given."},{"lineNumber":386,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":387,"author":{"gitId":"HengFuYuen"},"content":"    public void printFatIntake(int fatIntake, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":388,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Fat intake: \" + fatIntake);"},{"lineNumber":389,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":390,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":391,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":392,"author":{"gitId":"HengFuYuen"},"content":"        String stringFatIntake \u003d uiMessage.getOneIntakeMessage(fatIntake,\"fat\", \"g\");"},{"lineNumber":393,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getIntakeWithTimeMessage(stringFatIntake, start, end));"},{"lineNumber":394,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":395,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":396,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":397,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of fats consumed by the user given a start date."},{"lineNumber":398,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":399,"author":{"gitId":"HengFuYuen"},"content":"     * @param fatIntake The total amount of fats of food in the food list recorded from the start date till"},{"lineNumber":400,"author":{"gitId":"HengFuYuen"},"content":"     *     now."},{"lineNumber":401,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time to calculate from."},{"lineNumber":402,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":403,"author":{"gitId":"HengFuYuen"},"content":"    public void printFatIntake(int fatIntake, LocalDateTime start) {"},{"lineNumber":404,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Fat intake: \" + fatIntake);"},{"lineNumber":405,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":406,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":407,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.now();"},{"lineNumber":408,"author":{"gitId":"HengFuYuen"},"content":"        printFatIntake(fatIntake, start, end);"},{"lineNumber":409,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":410,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":411,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":412,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of calories, carbohydrates, fats and proteins consumed by the user."},{"lineNumber":413,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":414,"author":{"gitId":"HengFuYuen"},"content":"     * @param carbIntake The total amount of carbohydrates of all the food in the food list."},{"lineNumber":415,"author":{"gitId":"HengFuYuen"},"content":"     * @param calorieIntake The total amount of calories of all the food in the food list."},{"lineNumber":416,"author":{"gitId":"HengFuYuen"},"content":"     * @param proteinIntake The total amount of proteins of all the food in the food list."},{"lineNumber":417,"author":{"gitId":"HengFuYuen"},"content":"     * @param fatIntake The total amount of fats of all the food in the food list."},{"lineNumber":418,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":419,"author":{"gitId":"HengFuYuen"},"content":"    public void printAllIntake(int calorieIntake, int carbIntake, int proteinIntake, int fatIntake) {"},{"lineNumber":420,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Calorie intake: \" + calorieIntake);"},{"lineNumber":421,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Carb intake: \" + carbIntake);"},{"lineNumber":422,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Protein intake: \" + proteinIntake);"},{"lineNumber":423,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Fat intake: \" + fatIntake);"},{"lineNumber":424,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":425,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getAllIntakeMessage(calorieIntake, carbIntake, proteinIntake, fatIntake));"},{"lineNumber":426,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":427,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":428,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":429,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of calories, carbohydrates, fats and proteins consumed by the user given a"},{"lineNumber":430,"author":{"gitId":"HengFuYuen"},"content":"     * certain time period."},{"lineNumber":431,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":432,"author":{"gitId":"HengFuYuen"},"content":"     * @param calorieIntake The total amount of calories of food in the food list recorded during the"},{"lineNumber":433,"author":{"gitId":"HengFuYuen"},"content":"     *     time period given."},{"lineNumber":434,"author":{"gitId":"HengFuYuen"},"content":"     * @param carbIntake The total amount of carbohydrates of food in the food list recorded during the"},{"lineNumber":435,"author":{"gitId":"HengFuYuen"},"content":"     *     time period given."},{"lineNumber":436,"author":{"gitId":"HengFuYuen"},"content":"     * @param proteinIntake The total amount of proteins of food in the food list recorded during the"},{"lineNumber":437,"author":{"gitId":"HengFuYuen"},"content":"     *     time period given."},{"lineNumber":438,"author":{"gitId":"HengFuYuen"},"content":"     * @param fatIntake The total amount of fats of food in the food list recorded during the"},{"lineNumber":439,"author":{"gitId":"HengFuYuen"},"content":"     *     time period given."},{"lineNumber":440,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period given."},{"lineNumber":441,"author":{"gitId":"HengFuYuen"},"content":"     * @param end Ending date time of the time period given."},{"lineNumber":442,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":443,"author":{"gitId":"HengFuYuen"},"content":"    public void printAllIntake(int calorieIntake, int carbIntake, int proteinIntake, int fatIntake,"},{"lineNumber":444,"author":{"gitId":"HengFuYuen"},"content":"                               LocalDateTime start, LocalDateTime end) {"},{"lineNumber":445,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Calorie intake: \" + calorieIntake);"},{"lineNumber":446,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Carb intake: \" + carbIntake);"},{"lineNumber":447,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Protein intake: \" + proteinIntake);"},{"lineNumber":448,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Fat intake: \" + fatIntake);"},{"lineNumber":449,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":450,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":451,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":452,"author":{"gitId":"HengFuYuen"},"content":"        String allIntake \u003d uiMessage.getAllIntakeMessage(calorieIntake, carbIntake, proteinIntake, fatIntake);"},{"lineNumber":453,"author":{"gitId":"HengFuYuen"},"content":"        uiOutput.print(uiMessage.getIntakeWithTimeMessage(allIntake, start, end));"},{"lineNumber":454,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":455,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":456,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":457,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the total amount of calories, carbohydrates, fats and proteins consumed by the user given a"},{"lineNumber":458,"author":{"gitId":"HengFuYuen"},"content":"     * start date."},{"lineNumber":459,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":460,"author":{"gitId":"HengFuYuen"},"content":"     * @param calorieIntake The total amount of calories of food in the food list recorded from the start"},{"lineNumber":461,"author":{"gitId":"HengFuYuen"},"content":"     *     date till now."},{"lineNumber":462,"author":{"gitId":"HengFuYuen"},"content":"     * @param carbIntake The total amount of carbohydrates of food in the food list recorded from the start"},{"lineNumber":463,"author":{"gitId":"HengFuYuen"},"content":"     *     date till now."},{"lineNumber":464,"author":{"gitId":"HengFuYuen"},"content":"     * @param proteinIntake The total amount of proteins of food in the food list recorded from the start"},{"lineNumber":465,"author":{"gitId":"HengFuYuen"},"content":"     *     date till now."},{"lineNumber":466,"author":{"gitId":"HengFuYuen"},"content":"     * @param fatIntake The total amount of fats of food in the food list recorded from the start date till"},{"lineNumber":467,"author":{"gitId":"HengFuYuen"},"content":"     *     now."},{"lineNumber":468,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time to calculate from."},{"lineNumber":469,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":470,"author":{"gitId":"HengFuYuen"},"content":"    public void printAllIntake(int calorieIntake, int carbIntake, int proteinIntake, int fatIntake,"},{"lineNumber":471,"author":{"gitId":"HengFuYuen"},"content":"                               LocalDateTime start) {"},{"lineNumber":472,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Calorie intake: \" + calorieIntake);"},{"lineNumber":473,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Carb intake: \" + carbIntake);"},{"lineNumber":474,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Protein intake: \" + proteinIntake);"},{"lineNumber":475,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Fat intake: \" + fatIntake);"},{"lineNumber":476,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":477,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":478,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.now();"},{"lineNumber":479,"author":{"gitId":"HengFuYuen"},"content":"        printAllIntake(calorieIntake, carbIntake, proteinIntake, fatIntake, start, end);"},{"lineNumber":480,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":481,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":482,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":482}},{"path":"src/main/java/seedu/dietbook/ui/UiHelper.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.ui;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.logger.MainLogger;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Level;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":" * Represents a helper that provide methods utilised in the other Ui related classes."},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":" * A \u003ccode\u003eUiHelper\u003c/code\u003e object contains all the helper methods needed for the other Ui related classes."},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":" */"},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":"public class UiHelper {"},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":"    static final String LINE_SEPARATOR \u003d System.lineSeparator();"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"    private final MainLogger mainLogger;"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"    UiHelper() {"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger \u003d new MainLogger(UiHelper.class.getName());"},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"     * Returns true if the string length is zero after it has been trimmed for leading and trailing"},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"     * spaces, false otherwise."},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"     * @param string The string to be trimmed and determined if length is zero."},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"     * @return True if the string length is zero after it has been trimmed for leading and trailing"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"     *         spaces, false otherwise."},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"    boolean isEmptyString(String string) {"},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"String to check if empty: \" + string);"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForNullStringInputs(string, \"String to be determined if empty\");"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"        return trimString(string).length() \u003d\u003d 0;"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":"     * Returns a string that has been trimmed for leading and trailing spaces."},{"lineNumber":39,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"HengFuYuen"},"content":"     * @param string The string to be trimmed for leading and trailing spaces."},{"lineNumber":41,"author":{"gitId":"HengFuYuen"},"content":"     * @return A string that has been trimmed for leading and trailing spaces."},{"lineNumber":42,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"HengFuYuen"},"content":"    String trimString(String string) {"},{"lineNumber":44,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"String to trim: \" + string);"},{"lineNumber":45,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForNullStringInputs(string, \"String to trim\");"},{"lineNumber":46,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":47,"author":{"gitId":"HengFuYuen"},"content":"        return string.trim();"},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":50,"author":{"gitId":"HengFuYuen"},"content":"    String getDivider() {"},{"lineNumber":51,"author":{"gitId":"HengFuYuen"},"content":"        return \"__________________________________________________________________________________________\""},{"lineNumber":52,"author":{"gitId":"HengFuYuen"},"content":"                + \"________________________________________________\";"},{"lineNumber":53,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":55,"author":{"gitId":"HengFuYuen"},"content":"    String getShortDivider() {"},{"lineNumber":56,"author":{"gitId":"HengFuYuen"},"content":"        return \"------------------------------------------------------------------------------------------\""},{"lineNumber":57,"author":{"gitId":"HengFuYuen"},"content":"                + \"-----------------------------------\";"},{"lineNumber":58,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":60,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions for the string inputs."},{"lineNumber":62,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"HengFuYuen"},"content":"     * @param string The string input."},{"lineNumber":64,"author":{"gitId":"HengFuYuen"},"content":"     * @param stringDescription A description of what the string input represents."},{"lineNumber":65,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"HengFuYuen"},"content":"    void performAssertionsForStringInputs(String string, String stringDescription) {"},{"lineNumber":67,"author":{"gitId":"HengFuYuen"},"content":"        performAssertionsForNullStringInputs(string, stringDescription);"},{"lineNumber":68,"author":{"gitId":"HengFuYuen"},"content":"        assert !isEmptyString(string) : stringDescription + \" should not be an empty string\";"},{"lineNumber":69,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":71,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions for time inputs."},{"lineNumber":73,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period given."},{"lineNumber":75,"author":{"gitId":"HengFuYuen"},"content":"     * @param end Ending date time of the time period given."},{"lineNumber":76,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"HengFuYuen"},"content":"    void performAssertionsForTimePeriod(LocalDateTime start, LocalDateTime end) {"},{"lineNumber":78,"author":{"gitId":"HengFuYuen"},"content":"        assert start !\u003d null : \"Starting date time of the time period given should not be null\";"},{"lineNumber":79,"author":{"gitId":"HengFuYuen"},"content":"        assert end !\u003d null : \"Ending date time of the time period given should not be null\";"},{"lineNumber":80,"author":{"gitId":"HengFuYuen"},"content":"        assert !start.isAfter(end) : \"Starting date time should not be later than ending date time \""},{"lineNumber":81,"author":{"gitId":"HengFuYuen"},"content":"                + \"of the time period\";"},{"lineNumber":82,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":83,"author":{"gitId":"HengFuYuen"},"content":"        assert !start.isAfter(now) : \"Starting date time of the time period given should \""},{"lineNumber":84,"author":{"gitId":"HengFuYuen"},"content":"                + \"not be in the future\" + start + LocalDateTime.now();"},{"lineNumber":85,"author":{"gitId":"HengFuYuen"},"content":"        assert !end.isAfter(now) : \"Ending date time of the time period given should not be\""},{"lineNumber":86,"author":{"gitId":"HengFuYuen"},"content":"                + \" in the future\" + end + LocalDateTime.now();"},{"lineNumber":87,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":89,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions for null string inputs."},{"lineNumber":91,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"HengFuYuen"},"content":"     * @param string The string input."},{"lineNumber":93,"author":{"gitId":"HengFuYuen"},"content":"     * @param stringDescription A description of what the string input represents."},{"lineNumber":94,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"HengFuYuen"},"content":"    void performAssertionsForNullStringInputs(String string, String stringDescription) {"},{"lineNumber":96,"author":{"gitId":"HengFuYuen"},"content":"        assert string !\u003d null : stringDescription + \" should not be null\";"},{"lineNumber":97,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":99,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions for nutritional intake inputs."},{"lineNumber":101,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"HengFuYuen"},"content":"     * @param nutrientIntake The nutritional intake value."},{"lineNumber":103,"author":{"gitId":"HengFuYuen"},"content":"     * @param nutrientType The nutrient type."},{"lineNumber":104,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"HengFuYuen"},"content":"    void performAssertionsForNutritionalIntake(int nutrientIntake, String nutrientType) {"},{"lineNumber":106,"author":{"gitId":"HengFuYuen"},"content":"        assert nutrientIntake \u003e\u003d 0 : \"Total \" + nutrientType + \" intake should be equals to or greater than 0\";"},{"lineNumber":107,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":109,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"HengFuYuen"},"content":"     * Performs assertions for calorie recommendation input."},{"lineNumber":111,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"HengFuYuen"},"content":"     * @param calorieRecommendation The recommended daily calorie intake for the user."},{"lineNumber":113,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"HengFuYuen"},"content":"    void performAssertionsForCalorieRecommendation(int calorieRecommendation) {"},{"lineNumber":115,"author":{"gitId":"HengFuYuen"},"content":"        // A minimum daily intake of 1200 calorie is required."},{"lineNumber":116,"author":{"gitId":"HengFuYuen"},"content":"        int minCalorie \u003d 1000;"},{"lineNumber":117,"author":{"gitId":"HengFuYuen"},"content":"        assert calorieRecommendation \u003e\u003d minCalorie : \"Daily calorie recommendation should be equals to or \""},{"lineNumber":118,"author":{"gitId":"HengFuYuen"},"content":"                + \"greater than \" + minCalorie;"},{"lineNumber":119,"author":{"gitId":"HengFuYuen"},"content":"        // Highest calorie intake recommendation allowed."},{"lineNumber":120,"author":{"gitId":"HengFuYuen"},"content":"        int maxCalorie \u003d 20000;"},{"lineNumber":121,"author":{"gitId":"HengFuYuen"},"content":"        assert calorieRecommendation \u003c\u003d maxCalorie : \"Daily calorie recommendation should be equals to or \""},{"lineNumber":122,"author":{"gitId":"HengFuYuen"},"content":"                + \"less than \" + maxCalorie;"},{"lineNumber":123,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":124}},{"path":"src/main/java/seedu/dietbook/ui/UiInput.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.ui;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.logger.MainLogger;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":" * Represents a text user interface that deals with taking in user commands."},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":" * A \u003ccode\u003eUiInput\u003c/code\u003e object deals with user interaction by taking in user inputs and processing them."},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":" */"},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":"public class UiInput {"},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"    private static Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"    private final MainLogger mainLogger;"},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"    private final UiHelper uiHelper;"},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"     * Constructs a \u003ccode\u003eUiInput\u003c/code\u003e object."},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"    UiInput() {"},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper \u003d new UiHelper();"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger \u003d new MainLogger(UiInput.class.getName());"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the non-empty user command that has been trimmed."},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"     * @return The non-empty user command that has been trimmed."},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"    String getCommand() throws DietException {"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":"        String command \u003d readCommand();"},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"        String processedCommand \u003d processCommand(command);"},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Processed user command: \" + processedCommand);"},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":"        return processedCommand;"},{"lineNumber":39,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":41,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"HengFuYuen"},"content":"     * Reads in and returns the user command."},{"lineNumber":43,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"HengFuYuen"},"content":"     * @return The user command."},{"lineNumber":45,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"HengFuYuen"},"content":"    String readCommand() {"},{"lineNumber":47,"author":{"gitId":"HengFuYuen"},"content":"        return scanner.nextLine();"},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":50,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"HengFuYuen"},"content":"     * Returns the trimmed user command if its is not empty, else a DietException is thrown."},{"lineNumber":52,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"HengFuYuen"},"content":"     * @param command The user command."},{"lineNumber":54,"author":{"gitId":"HengFuYuen"},"content":"     * @return The trimmed user command if it is not empty."},{"lineNumber":55,"author":{"gitId":"HengFuYuen"},"content":"     * @throws DietException If the the user command is empty after trimming."},{"lineNumber":56,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"HengFuYuen"},"content":"    String processCommand(String command) throws DietException {"},{"lineNumber":58,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"User command to process: \" + command);"},{"lineNumber":59,"author":{"gitId":"HengFuYuen"},"content":"        if (uiHelper.isEmptyString(command)) {"},{"lineNumber":60,"author":{"gitId":"HengFuYuen"},"content":"            mainLogger.log(Level.WARNING, \"Command is empty!\");"},{"lineNumber":61,"author":{"gitId":"HengFuYuen"},"content":"            throw new DietException(\"Command is empty!\");"},{"lineNumber":62,"author":{"gitId":"HengFuYuen"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"HengFuYuen"},"content":"        return uiHelper.trimString(command);"},{"lineNumber":64,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":65}},{"path":"src/main/java/seedu/dietbook/ui/UiMessage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.ui;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.logger.MainLogger;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.person.FitnessLevel;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.person.Gender;"},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":" * Represents a storage that stores all the messages that Ui can utilise and print out."},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":" * A \u003ccode\u003eUiMessage\u003c/code\u003e object contains all the necessary methods required to retrieve the output"},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":" * messages."},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":" */"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"public class UiMessage {"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"    private final UiHelper uiHelper;"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    private final MainLogger mainLogger;"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"    UiMessage() {"},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper \u003d new UiHelper();"},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger \u003d new MainLogger(UiMessage.class.getName());"},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"    String getWelcomeMessage() {"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"        return getLogo() + UiHelper.LINE_SEPARATOR"},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"                + \"Hello! Welcome to DietBook!\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"                + \"I am Diet, your guide to using DietBook. How may I address you?\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"                + \"Please input your name or nickname in the following format:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"                + \"  name YOUR_NAME_OR_NICKNAME\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":"                + \"  Example: name Jack\";"},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"    String getAskForUserInfoMessage(String name) {"},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"        return \"Hi \" + uiHelper.trimString(name) + \"!\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":"                + \"Before we get started, I would like to know about about you so that I can make more \""},{"lineNumber":39,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR"},{"lineNumber":40,"author":{"gitId":"HengFuYuen"},"content":"                + \"accurate calculations for you :). Therefore, could you please share with me the \""},{"lineNumber":41,"author":{"gitId":"HengFuYuen"},"content":"                + \"following:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":42,"author":{"gitId":"HengFuYuen"},"content":"                + \"- Your gender either F for \" + Gender.FEMALE.getDescription() + \" or M for \""},{"lineNumber":43,"author":{"gitId":"HengFuYuen"},"content":"                + Gender.MALE.getDescription() + \" or O for \" + Gender.OTHERS.getDescription() + \".\""},{"lineNumber":44,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR"},{"lineNumber":45,"author":{"gitId":"HengFuYuen"},"content":"                + \"- Your age which is a positive integer.\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":46,"author":{"gitId":"HengFuYuen"},"content":"                + \"- Your height in cm.\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":47,"author":{"gitId":"HengFuYuen"},"content":"                + \"- Your original weight in kg, the weight when you first started using DietBook or \""},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":"                + \"you current weight.\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":49,"author":{"gitId":"HengFuYuen"},"content":"                + \"- Your current weight in kg.\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":50,"author":{"gitId":"HengFuYuen"},"content":"                + \"- Your target weight in kg, or your current weight if that is also your target weight.\""},{"lineNumber":51,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR"},{"lineNumber":52,"author":{"gitId":"HengFuYuen"},"content":"                + \"- Your fitness level, represented by a number from 1 to 5.\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":53,"author":{"gitId":"HengFuYuen"},"content":"                + \"  1 \u003d \" + FitnessLevel.NONE.getDescription() + UiHelper.LINE_SEPARATOR"},{"lineNumber":54,"author":{"gitId":"HengFuYuen"},"content":"                + \"  2 \u003d \" + FitnessLevel.LOW.getDescription() + UiHelper.LINE_SEPARATOR"},{"lineNumber":55,"author":{"gitId":"HengFuYuen"},"content":"                + \"  3 \u003d \" + FitnessLevel.MEDIUM.getDescription() + UiHelper.LINE_SEPARATOR"},{"lineNumber":56,"author":{"gitId":"HengFuYuen"},"content":"                + \"  4 \u003d \" + FitnessLevel.HIGH.getDescription() + UiHelper.LINE_SEPARATOR"},{"lineNumber":57,"author":{"gitId":"HengFuYuen"},"content":"                + \"  5 \u003d \" + FitnessLevel.EXTREME.getDescription() + UiHelper.LINE_SEPARATOR"},{"lineNumber":58,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR"},{"lineNumber":59,"author":{"gitId":"HengFuYuen"},"content":"                + \"Please input your details in the following format:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":60,"author":{"gitId":"HengFuYuen"},"content":"                + \"  info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT c/CURRENT_WEIGHT t/TARGET_WEIGHT \""},{"lineNumber":61,"author":{"gitId":"HengFuYuen"},"content":"                + \"f/FITNESS_LEVEL\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":62,"author":{"gitId":"HengFuYuen"},"content":"                + \"  Example: info g/F a/21 h/165 o/65 c/65 t/55 f/2\";"},{"lineNumber":63,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":65,"author":{"gitId":"HengFuYuen"},"content":"    String getExitMessage() {"},{"lineNumber":66,"author":{"gitId":"HengFuYuen"},"content":"        return \"Bye! Hope to see you again soon!\";"},{"lineNumber":67,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":69,"author":{"gitId":"HengFuYuen"},"content":"    String getErrorMessage(String errorMessage) {"},{"lineNumber":70,"author":{"gitId":"HengFuYuen"},"content":"        return \":( \" + uiHelper.trimString(errorMessage);"},{"lineNumber":71,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":73,"author":{"gitId":"HengFuYuen"},"content":"    String getInitialisationCompleteMessage() {"},{"lineNumber":74,"author":{"gitId":"HengFuYuen"},"content":"        return \"Thank you! DietBook has been initialised \" + getStartMessage();"},{"lineNumber":75,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":77,"author":{"gitId":"HengFuYuen"},"content":"    String getDataSuccessfullySavedMessage() {"},{"lineNumber":78,"author":{"gitId":"HengFuYuen"},"content":"        return \"Your data has been saved successfully.\";"},{"lineNumber":79,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":81,"author":{"gitId":"HengFuYuen"},"content":"    String getWelcomeBackMessage(String name) {"},{"lineNumber":82,"author":{"gitId":"HengFuYuen"},"content":"        return getLogo() + UiHelper.LINE_SEPARATOR + \"Welcome back to DietBook \" + uiHelper.trimString(name)"},{"lineNumber":83,"author":{"gitId":"HengFuYuen"},"content":"                + \"!\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":84,"author":{"gitId":"HengFuYuen"},"content":"                + \"All your previous data has been successfully loaded \" + getStartMessage();"},{"lineNumber":85,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":87,"author":{"gitId":"HengFuYuen"},"content":"    String getHelpCommandMessage() {"},{"lineNumber":88,"author":{"gitId":"HengFuYuen"},"content":"        return \"Listed below are the valid commands for DietBook:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":89,"author":{"gitId":"HengFuYuen"},"content":"                + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":90,"author":{"gitId":"HengFuYuen"},"content":"                + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":91,"author":{"gitId":"HengFuYuen"},"content":"                + getUserInfoRelatedCommands()"},{"lineNumber":92,"author":{"gitId":"HengFuYuen"},"content":"                + getDatabaseRelatedCommands()"},{"lineNumber":93,"author":{"gitId":"HengFuYuen"},"content":"                + getFoodListRelatedCommands()"},{"lineNumber":94,"author":{"gitId":"HengFuYuen"},"content":"                + getNutritionalRelatedCommands()"},{"lineNumber":95,"author":{"gitId":"HengFuYuen"},"content":"                + getSystemRelatedCommands()"},{"lineNumber":96,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR + uiHelper.getDivider();"},{"lineNumber":97,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":99,"author":{"gitId":"HengFuYuen"},"content":"    private String getUserInfoRelatedCommands() {"},{"lineNumber":100,"author":{"gitId":"HengFuYuen"},"content":"        return \"userinfo    | To view user information:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":101,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":102,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | userinfo\""},{"lineNumber":103,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":104,"author":{"gitId":"HengFuYuen"},"content":"                + \"editinfo    | To edit user information:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":105,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":106,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | editinfo [n/NAME] [g/GENDER] [a/AGE] [h/HEIGHT] \""},{"lineNumber":107,"author":{"gitId":"HengFuYuen"},"content":"                + \"[o/ORIGINAL_WEIGHT] [c/CURRENT_WEIGHT] [t/TARGET_WEIGHT] [f/FITNESS_LEVEL]\";"},{"lineNumber":108,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":110,"author":{"gitId":"HengFuYuen"},"content":"    String getDatabaseRelatedCommands() {"},{"lineNumber":111,"author":{"gitId":"HengFuYuen"},"content":"        return UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":112,"author":{"gitId":"HengFuYuen"},"content":"                + \"add         | To add a food from the database:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":113,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":114,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | add i/INDEX x/PORTION_SIZE [yyyy-mm-ddTHH:mm]\""},{"lineNumber":115,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":116,"author":{"gitId":"HengFuYuen"},"content":"                + \"data        | To view all food in the database:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":117,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":118,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | data\";"},{"lineNumber":119,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":121,"author":{"gitId":"HengFuYuen"},"content":"    String getSystemRelatedCommands() {"},{"lineNumber":122,"author":{"gitId":"HengFuYuen"},"content":"        return UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":123,"author":{"gitId":"HengFuYuen"},"content":"                + \"help        | To view a list of valid commands:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":124,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":125,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | help\""},{"lineNumber":126,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":127,"author":{"gitId":"HengFuYuen"},"content":"                + \"exit        | To exit DietBook:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":128,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":129,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | exit\";"},{"lineNumber":130,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":132,"author":{"gitId":"HengFuYuen"},"content":"    String getNutritionalRelatedCommands() {"},{"lineNumber":133,"author":{"gitId":"HengFuYuen"},"content":"        return UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":134,"author":{"gitId":"HengFuYuen"},"content":"                + \"recommend   | To get recommended calorie intake:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":135,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":136,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | recommend\""},{"lineNumber":137,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":138,"author":{"gitId":"HengFuYuen"},"content":"                + \"calculate   | To calculate nutritional intake:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":139,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":140,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | calculate NUTRIENT_TYPE [yyyy-mm-ddTHH:mm] [yyyy-mm-ddTHH:mm]\""},{"lineNumber":141,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR"},{"lineNumber":142,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |   Valid NUTRIENT_TYPE: carb, calorie, fat, protein, all\";"},{"lineNumber":143,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":145,"author":{"gitId":"HengFuYuen"},"content":"    String getFoodListRelatedCommands() {"},{"lineNumber":146,"author":{"gitId":"HengFuYuen"},"content":"        return UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":147,"author":{"gitId":"HengFuYuen"},"content":"                + \"add         | To add a food not in the database:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":148,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":149,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | add x/PORTION_SIZE n/FOOD_NAME k/CALORIE [c/CARBOHYDRATE] \""},{"lineNumber":150,"author":{"gitId":"HengFuYuen"},"content":"                + \"[p/PROTEIN] [f/FAT] [yyyy-mm-ddTHH:mm]\""},{"lineNumber":151,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":152,"author":{"gitId":"HengFuYuen"},"content":"                + \"list        | To view all food in DietBook:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":153,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":154,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | list [yyyy-mm-ddTHH:mm] [yyyy-mm-ddTHH:mm]\""},{"lineNumber":155,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":156,"author":{"gitId":"HengFuYuen"},"content":"                + \"delete      | To delete a food from DietBook:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":157,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":158,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | delete INDEX\""},{"lineNumber":159,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR + uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":160,"author":{"gitId":"HengFuYuen"},"content":"                + \"clear       | To delete all food items from the DietBook:\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":161,"author":{"gitId":"HengFuYuen"},"content":"                + \"            |\" + uiHelper.getShortDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":162,"author":{"gitId":"HengFuYuen"},"content":"                + \"            | clear\";"},{"lineNumber":163,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":165,"author":{"gitId":"HengFuYuen"},"content":"    String getDatabaseMessage(String foodDatabase) {"},{"lineNumber":166,"author":{"gitId":"HengFuYuen"},"content":"        return \"Here are the food items in the database:\" + UiHelper.LINE_SEPARATOR + foodDatabase;"},{"lineNumber":167,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":169,"author":{"gitId":"HengFuYuen"},"content":"    String getPersonInfoMessage(String personInfo) {"},{"lineNumber":170,"author":{"gitId":"HengFuYuen"},"content":"        return \"Here is your information:\" + UiHelper.LINE_SEPARATOR + personInfo;"},{"lineNumber":171,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":173,"author":{"gitId":"HengFuYuen"},"content":"    String getEditedPersonInfoMessage(String personInfo) {"},{"lineNumber":174,"author":{"gitId":"HengFuYuen"},"content":"        return \"Got it! I\u0027ve updated your personal information:\" + UiHelper.LINE_SEPARATOR + personInfo;"},{"lineNumber":175,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":177,"author":{"gitId":"HengFuYuen"},"content":"    String getFoodListMessage(String allFood) {"},{"lineNumber":178,"author":{"gitId":"HengFuYuen"},"content":"        return \"Here are the food items in DietBook:\" + UiHelper.LINE_SEPARATOR + allFood;"},{"lineNumber":179,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":181,"author":{"gitId":"HengFuYuen"},"content":"    String getFoodListMessage(String foods, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":182,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Foods: \" + foods);"},{"lineNumber":183,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":184,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":185,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":186,"author":{"gitId":"HengFuYuen"},"content":"        return \"Here are the food items recorded in DietBook\" + stringDateTimePeriod(start, end)"},{"lineNumber":187,"author":{"gitId":"HengFuYuen"},"content":"                + \":\" + UiHelper.LINE_SEPARATOR + foods;"},{"lineNumber":188,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":190,"author":{"gitId":"HengFuYuen"},"content":"    String getEmptyFoodListMessage() {"},{"lineNumber":191,"author":{"gitId":"HengFuYuen"},"content":"        return \"DietBook is currently empty.\";"},{"lineNumber":192,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":194,"author":{"gitId":"HengFuYuen"},"content":"    String getEmptyFoodListMessage(LocalDateTime start, LocalDateTime end) {"},{"lineNumber":195,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":196,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":197,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":198,"author":{"gitId":"HengFuYuen"},"content":"        return \"No food item was recorded in DietBook\" + stringDateTimePeriod(start, end) + \".\";"},{"lineNumber":199,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":201,"author":{"gitId":"HengFuYuen"},"content":"    String getNewFoodMessage(String newFood) {"},{"lineNumber":202,"author":{"gitId":"HengFuYuen"},"content":"        return \"Got it! I\u0027ve added this food item:\" + UiHelper.LINE_SEPARATOR + \"  \""},{"lineNumber":203,"author":{"gitId":"HengFuYuen"},"content":"                + uiHelper.trimString(newFood);"},{"lineNumber":204,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":206,"author":{"gitId":"HengFuYuen"},"content":"    String getDeletedFoodMessage(String deletedFood) {"},{"lineNumber":207,"author":{"gitId":"HengFuYuen"},"content":"        return \"Noted. I\u0027ve removed this food item:\" + UiHelper.LINE_SEPARATOR + \"  \""},{"lineNumber":208,"author":{"gitId":"HengFuYuen"},"content":"                + uiHelper.trimString(deletedFood);"},{"lineNumber":209,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":211,"author":{"gitId":"HengFuYuen"},"content":"    String getClearFoodListMessage() {"},{"lineNumber":212,"author":{"gitId":"HengFuYuen"},"content":"        return \"All previous data has been deleted...\" + UiHelper.LINE_SEPARATOR + \"DietBook is now empty.\";"},{"lineNumber":213,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":215,"author":{"gitId":"HengFuYuen"},"content":"    String getCalorieRecommendationMessage(String name, int calorieRecommendation) {"},{"lineNumber":216,"author":{"gitId":"HengFuYuen"},"content":"        return \"Hi \" + uiHelper.trimString(name) + \"!\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":217,"author":{"gitId":"HengFuYuen"},"content":"                + \"Here is your daily recommended calorie intake: \" + calorieRecommendation + \"kcal\";"},{"lineNumber":218,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":220,"author":{"gitId":"HengFuYuen"},"content":"    String getLogo() {"},{"lineNumber":221,"author":{"gitId":"HengFuYuen"},"content":"        return \" _______  __ ______ ________ _______   ______   ______  __    __\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":222,"author":{"gitId":"HengFuYuen"},"content":"                + \"|   __  \\\\|  |   ___|__    __|   __  \\\\ /  __  \\\\ /  __  \\\\|  | /  /\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":223,"author":{"gitId":"HengFuYuen"},"content":"                + \"|  |  |  |  |  |___   |  |  |  |__|  |  |  |  |  |  |  |  |/  /\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":224,"author":{"gitId":"HengFuYuen"},"content":"                + \"|  |  |  |  |   ___|  |  |  |   __  \u003c|  |  |  |  |  |  |     /\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":225,"author":{"gitId":"HengFuYuen"},"content":"                + \"|  |__|  |  |  |___   |  |  |  |__|  |  |__|  |  |  |  |  |\\\\  \\\\\" + UiHelper.LINE_SEPARATOR"},{"lineNumber":226,"author":{"gitId":"HengFuYuen"},"content":"                + \"|_______/|__|______|  |__|  |_______/ \\\\______/ \\\\______/|__| \\\\__\\\\\" + UiHelper.LINE_SEPARATOR;"},{"lineNumber":227,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":228,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":230,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":231,"author":{"gitId":"HengFuYuen"},"content":"     * Returns a string stating that DietBook is ready for use."},{"lineNumber":232,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":233,"author":{"gitId":"HengFuYuen"},"content":"     * @return A string stating that DietBook is ready for use."},{"lineNumber":234,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":235,"author":{"gitId":"HengFuYuen"},"content":"    String getStartMessage() {"},{"lineNumber":236,"author":{"gitId":"HengFuYuen"},"content":"        return \"and you may start by entering any valid commands. \""},{"lineNumber":237,"author":{"gitId":"HengFuYuen"},"content":"                + UiHelper.LINE_SEPARATOR"},{"lineNumber":238,"author":{"gitId":"HengFuYuen"},"content":"                + \"If you require a list of valid commands, you can enter: help\";"},{"lineNumber":239,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":241,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"HengFuYuen"},"content":"     * Returns a string representation of the total amount of a nutrient consumed by the user."},{"lineNumber":243,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":244,"author":{"gitId":"HengFuYuen"},"content":"     * @param nutrientIntake The amount of a particular type of nutrient consumed."},{"lineNumber":245,"author":{"gitId":"HengFuYuen"},"content":"     * @param nutrientType A string representation of the type of nutrient consumed."},{"lineNumber":246,"author":{"gitId":"HengFuYuen"},"content":"     * @param nutrientUnit A string representation of the unit of the nutrient consumed."},{"lineNumber":247,"author":{"gitId":"HengFuYuen"},"content":"     * @return A string representation of the the total amount of a nutrient consumed by the user."},{"lineNumber":248,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":249,"author":{"gitId":"HengFuYuen"},"content":"    String getOneIntakeMessage(int nutrientIntake, String nutrientType, String nutrientUnit) {"},{"lineNumber":250,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Nutrient intake: \" + nutrientIntake);"},{"lineNumber":251,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Nutrient type: \" + nutrientType);"},{"lineNumber":252,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Nutrient unit: \" + nutrientUnit);"},{"lineNumber":253,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":254,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(nutrientType, \"Nutrient Type\");"},{"lineNumber":255,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(nutrientUnit, \"Nutrient Unit\");"},{"lineNumber":256,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForNutritionalIntake(nutrientIntake, nutrientType);"},{"lineNumber":257,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":258,"author":{"gitId":"HengFuYuen"},"content":"        return getRecalculatedFoodsMessage() + UiHelper.LINE_SEPARATOR +  UiHelper.LINE_SEPARATOR"},{"lineNumber":259,"author":{"gitId":"HengFuYuen"},"content":"                + getNutritionalIntakeMessage(nutrientIntake, nutrientType, nutrientUnit);"},{"lineNumber":260,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":262,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":263,"author":{"gitId":"HengFuYuen"},"content":"     * Returns a string representation of the total amount of a nutrient or all nutrients consumed by the"},{"lineNumber":264,"author":{"gitId":"HengFuYuen"},"content":"     * user during a given time period."},{"lineNumber":265,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":266,"author":{"gitId":"HengFuYuen"},"content":"     * @param intakeWithoutTime A string representation of the the total amount of a nutrient or"},{"lineNumber":267,"author":{"gitId":"HengFuYuen"},"content":"     *         all nutrients consumed by the user."},{"lineNumber":268,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period given."},{"lineNumber":269,"author":{"gitId":"HengFuYuen"},"content":"     * @param end Ending date time of the time period given."},{"lineNumber":270,"author":{"gitId":"HengFuYuen"},"content":"     * @return A string representation of the the total amount of a nutrient or all nutrient consumed by the"},{"lineNumber":271,"author":{"gitId":"HengFuYuen"},"content":"     *         user during a given time period."},{"lineNumber":272,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":273,"author":{"gitId":"HengFuYuen"},"content":"    String getIntakeWithTimeMessage(String intakeWithoutTime, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":274,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Intake without time: \" + intakeWithoutTime);"},{"lineNumber":275,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":276,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":277,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForTimePeriod(start, end);"},{"lineNumber":278,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":279,"author":{"gitId":"HengFuYuen"},"content":"        String timePeriod \u003d \"Time period:\" + stringDateTimePeriod(start, end);"},{"lineNumber":280,"author":{"gitId":"HengFuYuen"},"content":"        return timePeriod + UiHelper.LINE_SEPARATOR + UiHelper.LINE_SEPARATOR + intakeWithoutTime;"},{"lineNumber":281,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":283,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":284,"author":{"gitId":"HengFuYuen"},"content":"     * Returns a string representation of the total amount of calories, carbohydrates, fats and proteins"},{"lineNumber":285,"author":{"gitId":"HengFuYuen"},"content":"     * consumed by the user."},{"lineNumber":286,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":287,"author":{"gitId":"HengFuYuen"},"content":"     * @param calorieIntake The total amount of calories of all the food in the food list."},{"lineNumber":288,"author":{"gitId":"HengFuYuen"},"content":"     * @param carbIntake The total amount of carbohydrates of all the food in the food list."},{"lineNumber":289,"author":{"gitId":"HengFuYuen"},"content":"     * @param proteinIntake The total amount of proteins of all the food in the food list."},{"lineNumber":290,"author":{"gitId":"HengFuYuen"},"content":"     * @param fatIntake The total amount of fats of all the food in the food list."},{"lineNumber":291,"author":{"gitId":"HengFuYuen"},"content":"     * @return A string representation of the total amount of each of the nutrients consumed by the user."},{"lineNumber":292,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":293,"author":{"gitId":"HengFuYuen"},"content":"    String getAllIntakeMessage(int calorieIntake, int carbIntake, int proteinIntake, int fatIntake) {"},{"lineNumber":294,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Calorie intake: \" + calorieIntake);"},{"lineNumber":295,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Carb intake: \" + carbIntake);"},{"lineNumber":296,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Protein intake: \" + proteinIntake);"},{"lineNumber":297,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Fat intake: \" + fatIntake);"},{"lineNumber":298,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":299,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForNutritionalIntake(calorieIntake, \"calorie\");"},{"lineNumber":300,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForNutritionalIntake(carbIntake, \"carb\");"},{"lineNumber":301,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForNutritionalIntake(proteinIntake, \"protein\");"},{"lineNumber":302,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForNutritionalIntake(fatIntake, \"fat\");"},{"lineNumber":303,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":304,"author":{"gitId":"HengFuYuen"},"content":"        String stringCalorieIntake \u003d getNutritionalIntakeMessage(calorieIntake, \"calorie\",\"kcal\");"},{"lineNumber":305,"author":{"gitId":"HengFuYuen"},"content":"        String stringCarbIntake \u003d getNutritionalIntakeMessage(carbIntake, \"carb\", \"g\");"},{"lineNumber":306,"author":{"gitId":"HengFuYuen"},"content":"        String stringProteinIntake \u003d getNutritionalIntakeMessage(proteinIntake, \"protein\", \"g\");"},{"lineNumber":307,"author":{"gitId":"HengFuYuen"},"content":"        String stringFatIntake \u003d getNutritionalIntakeMessage(fatIntake, \"fat\", \"g\");"},{"lineNumber":308,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":309,"author":{"gitId":"HengFuYuen"},"content":"        return getRecalculatedFoodsMessage() + UiHelper.LINE_SEPARATOR +  UiHelper.LINE_SEPARATOR"},{"lineNumber":310,"author":{"gitId":"HengFuYuen"},"content":"                + stringCalorieIntake + UiHelper.LINE_SEPARATOR"},{"lineNumber":311,"author":{"gitId":"HengFuYuen"},"content":"                + stringCarbIntake + UiHelper.LINE_SEPARATOR"},{"lineNumber":312,"author":{"gitId":"HengFuYuen"},"content":"                + stringProteinIntake + UiHelper.LINE_SEPARATOR"},{"lineNumber":313,"author":{"gitId":"HengFuYuen"},"content":"                + stringFatIntake + UiHelper.LINE_SEPARATOR;"},{"lineNumber":314,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":316,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":317,"author":{"gitId":"HengFuYuen"},"content":"    String getRecalculatedFoodsMessage() {"},{"lineNumber":318,"author":{"gitId":"HengFuYuen"},"content":"        return \"DietBook has recalculated the nutritional information for some food items with incomplete \""},{"lineNumber":319,"author":{"gitId":"HengFuYuen"},"content":"                + \"nutritional information.\";"},{"lineNumber":320,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":321,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":322,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":323,"author":{"gitId":"HengFuYuen"},"content":"     * Return a string representation of  the amount of a nutrient consumed by the user which can be either"},{"lineNumber":324,"author":{"gitId":"HengFuYuen"},"content":"     * the total amount consumed or amount consumed in a given time period."},{"lineNumber":325,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":326,"author":{"gitId":"HengFuYuen"},"content":"     * @param nutrientIntake The amount of a particular type of nutrient consumed."},{"lineNumber":327,"author":{"gitId":"HengFuYuen"},"content":"     * @param nutrientType A string representation of the type of nutrient consumed."},{"lineNumber":328,"author":{"gitId":"HengFuYuen"},"content":"     * @param nutrientUnit A string representation of the unit of the nutrient consumed."},{"lineNumber":329,"author":{"gitId":"HengFuYuen"},"content":"     * @return The amount of a nutrient consumed by the user which can be either the total amount consumed"},{"lineNumber":330,"author":{"gitId":"HengFuYuen"},"content":"     *         or amount consumed in a given time period."},{"lineNumber":331,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":332,"author":{"gitId":"HengFuYuen"},"content":"    String getNutritionalIntakeMessage(int nutrientIntake, String nutrientType, String nutrientUnit) {"},{"lineNumber":333,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Nutrient intake: \" + nutrientIntake);"},{"lineNumber":334,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Nutrient type: \" + nutrientType);"},{"lineNumber":335,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Nutrient unit: \" + nutrientUnit);"},{"lineNumber":336,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":337,"author":{"gitId":"HengFuYuen"},"content":"        return \"Total \" + nutrientType + \" intake: \" + nutrientIntake + nutrientUnit;"},{"lineNumber":338,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":340,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":341,"author":{"gitId":"HengFuYuen"},"content":"     * Returns a string representation of the time period with date time in the format dd MMM yyyy HHmm."},{"lineNumber":342,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":343,"author":{"gitId":"HengFuYuen"},"content":"     * @param start Starting date time of the time period given."},{"lineNumber":344,"author":{"gitId":"HengFuYuen"},"content":"     * @param end Ending date time of the time period given."},{"lineNumber":345,"author":{"gitId":"HengFuYuen"},"content":"     * @return The string representation of time period with date time in the format dd MMM yyyy HHmm."},{"lineNumber":346,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":347,"author":{"gitId":"HengFuYuen"},"content":"    String stringDateTimePeriod(LocalDateTime start, LocalDateTime end) {"},{"lineNumber":348,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"Start: \" + start);"},{"lineNumber":349,"author":{"gitId":"HengFuYuen"},"content":"        mainLogger.log(Level.FINE, \"End: \" + end);"},{"lineNumber":350,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForTimePeriod(start, end);"},{"lineNumber":351,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":352,"author":{"gitId":"HengFuYuen"},"content":"        String stringStart \u003d start.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"));"},{"lineNumber":353,"author":{"gitId":"HengFuYuen"},"content":"        String stringEnd \u003d end.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HHmm\"));"},{"lineNumber":354,"author":{"gitId":"HengFuYuen"},"content":"        return \" between \" + stringStart + \" and \" + stringEnd;"},{"lineNumber":355,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":356,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":356}},{"path":"src/main/java/seedu/dietbook/ui/UiOutput.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.ui;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":" * Represents a text user interface that is responsible for printing outputs."},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":" * A \u003ccode\u003eUiOutput\u003c/code\u003e object deals with user interaction by showing users the appropriate messages"},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":" * after a valid command is executed or when an error occurs."},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":" */"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"public class UiOutput {"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":"    private final UiHelper uiHelper;"},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":"    UiOutput() {"},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper \u003d new UiHelper();"},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"     * Prints the given message to the user."},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"     * @param message The message to show the user."},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"    void print(String message) {"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper.performAssertionsForStringInputs(message, \"Message to print\");"},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"        System.out.println(uiHelper.getDivider() + UiHelper.LINE_SEPARATOR"},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"                + uiHelper.trimString(message) + UiHelper.LINE_SEPARATOR"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"                + uiHelper.getDivider());"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":29}},{"path":"src/main/java/seedu/dietbook/utils/NoReplacementFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.utils;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"public class NoReplacementFoundException extends Exception {"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"    "},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"     * Constructor for exception: To be thrown when a mapping cannot be established in StringFormatter."},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"     * @param msg error message"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"    public NoReplacementFoundException(String msg) {"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"        super(msg);"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":12}},{"path":"src/main/java/seedu/dietbook/utils/StringFormatter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.utils;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"import java.util.Map;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":" * Utility class to do regex matching and substitution in a format similar to Python\u0027s fstrings."},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":" */"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"public class StringFormatter {"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":"    private static final Pattern MATCH_TEMPLATE \u003d "},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":"            Pattern.compile(\"\\\\$\\\\{([a-zA-Z][a-zA-Z0-9_]*(\\\\.[a-zA-Z][a-zA-Z0-9_]*)*)\\\\}\");"},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":"    "},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"     * Formats the string based on (variable name, variable) pairs provided in map."},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"     * Uses the regex pattern ${variable_name} to detect points in the string to substitute."},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"     * @param string string containing regex pattern to be formatted"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"     * @param map map of (String variable name, variable values) for substitution."},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"     * @return formatted string"},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"    public static \u003cE extends Object\u003e String formatStringWithMap(String string, Map\u003cString, E\u003e map) "},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"            throws NoReplacementFoundException {"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"        Matcher matcher \u003d MATCH_TEMPLATE.matcher(string);"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":"        StringBuffer buffer \u003d new StringBuffer();"},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"        while (matcher.find()) {"},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":"            E value \u003d map.get(matcher.group(1));"},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"            if (value \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"                throw new NoReplacementFoundException(\"For key of: \" + matcher.group(1));"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"            matcher.appendReplacement(buffer, value.toString());"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"        matcher.appendTail(buffer);"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"        return buffer.toString();"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":38}},{"path":"src/main/resources/data.txt","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"#####################################################################"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":"#    3 LEVEL DATA BASE                                              #"},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"#    Canteen -----\u003e Store ------\u003e Food                              #"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"#    Commands :                                                     #"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%START : start reading data from the data base                #"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%STOP : stop reading data from the data base                  #"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%UP    : goes down 1 level e.g. Canteen ---\u003e Store            #"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%DOWN    : goes down 1 level e.g. Canteen ---\u003e Store          #"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%ADD format : adds the item with the given format             #"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"#                                                                   #"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"#    Comments : any line that starts with # is ignored              #"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"#                                                                   #"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"#    Canteen format : {name}                                        #"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"#    Store format : {name}                                          #"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"#    Food format : {name}|{Calorie}|{Carb}|{Protein}|{Fat}          #"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"#####################################################################"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"######################################################################"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"#   Version 0.1 :                                                    #"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"#   there is only UP, once a store or canteen is                     #"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"#  specified we automatically go down 1 level , for this version     #"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"#   there is no going out of a store and then coming back to add more#"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"#   Units : Calorie : kcal  : Carbs : g Protein : g : Fats : g       #"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"######################################################################"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"\u0026%START"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"Science canteen"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"Halal Mini Wok"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"Prawn Mee Soup(Dry)(Large)|490|30|20|26"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"Prawn Mee Soup(Dry)(Small)|390|25|15|19"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"Fried Hokkien Prawn Mee(Large)|470|40|20|20"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"Fried Hokkien Prawn Mee(Small)|350|30|15|15"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"Clay Pot Chicken|440|34|15|15"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"Black Pepper Chicken|490|34|16|16"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"Ayam Penyet"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"Ayam Penyet Set|699|45|30|30"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"Steamed Chicken Set |475|35|20|20"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"Ikan Grouper Penyet Set|669|50|40|50"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"Korean"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"kimchi fried rice|520|45|35|56"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"ginseng chicken|450|25|32|66"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"ramen|530|76|25|43"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"Gong Cha"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"gong cha green tea|100|0|0|0"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"gong cha ooloong tea|100|0|0|0"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"gong cha bubble tea|200|0|0|0"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"\u0026%STOP"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":""}],"authorContributionMap":{"snowbanana12345":53}},{"path":"src/test/java/seedu/dietbook/calculator/CalculatorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yuqiaoluolong"},"content":"package seedu.dietbook.calculator;"},{"lineNumber":2,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":3,"author":{"gitId":"yuqiaoluolong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":5,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":6,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.list.FoodList;"},{"lineNumber":7,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.person.FitnessLevel;"},{"lineNumber":9,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":10,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.person.Gender;"},{"lineNumber":11,"author":{"gitId":"yuqiaoluolong"},"content":"import seedu.dietbook.person.Person;"},{"lineNumber":12,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":13,"author":{"gitId":"yuqiaoluolong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":15,"author":{"gitId":"yuqiaoluolong"},"content":"class CalculatorTest {"},{"lineNumber":16,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":17,"author":{"gitId":"yuqiaoluolong"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"yuqiaoluolong"},"content":"    void calculateCalorie_foodListOfThreeItems_sumOfCalorie() {"},{"lineNumber":19,"author":{"gitId":"yuqiaoluolong"},"content":"        FoodList foodList \u003d new FoodList();"},{"lineNumber":20,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(2, new Food(\"chicken rice\", 666, 55, 30, 0));"},{"lineNumber":21,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(2, new Food(\"pancake\", 150, 16, 0, 0));"},{"lineNumber":22,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(2, new Food(\"bao\", 290, 0, 16, 0));"},{"lineNumber":23,"author":{"gitId":"yuqiaoluolong"},"content":"        CalculatorData data \u003d new CalculatorData();"},{"lineNumber":24,"author":{"gitId":"yuqiaoluolong"},"content":"        data.inputData(foodList);"},{"lineNumber":25,"author":{"gitId":"yuqiaoluolong"},"content":"        Calculator calculator \u003d new Calculator(data);"},{"lineNumber":26,"author":{"gitId":"yuqiaoluolong"},"content":"        assertEquals(2 * (666 + 150 + 290), calculator.calculateCalorie());"},{"lineNumber":27,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":29,"author":{"gitId":"yuqiaoluolong"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"yuqiaoluolong"},"content":"    void calculateCarb_foodListOfThreeItems_sumOfCarb() {"},{"lineNumber":31,"author":{"gitId":"yuqiaoluolong"},"content":"        FoodList foodList \u003d new FoodList();"},{"lineNumber":32,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(3, new Food(\"chicken rice\", 666, 55, 30, 0));"},{"lineNumber":33,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(3, new Food(\"pancake\", 150, 16, 0, 0));"},{"lineNumber":34,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(3, new Food(\"bao\", 290, 0, 16, 0));"},{"lineNumber":35,"author":{"gitId":"yuqiaoluolong"},"content":"        CalculatorData data \u003d new CalculatorData(foodList);"},{"lineNumber":36,"author":{"gitId":"yuqiaoluolong"},"content":"        Calculator calculator \u003d new Calculator(data);"},{"lineNumber":37,"author":{"gitId":"yuqiaoluolong"},"content":"        assertEquals(3 * (55 + 16), calculator.calculateCarb());"},{"lineNumber":38,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":40,"author":{"gitId":"yuqiaoluolong"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"yuqiaoluolong"},"content":"    void calculateProtein_foodListOfThreeItems_sumOfProtein() {"},{"lineNumber":42,"author":{"gitId":"yuqiaoluolong"},"content":"        FoodList foodList \u003d new FoodList();"},{"lineNumber":43,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(1, new Food(\"chicken rice\", 666, 55, 30, 0));"},{"lineNumber":44,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(1, new Food(\"pancake\", 150, 16, 0, 0));"},{"lineNumber":45,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(1, new Food(\"bao\", 290, 0, 16, 0));"},{"lineNumber":46,"author":{"gitId":"yuqiaoluolong"},"content":"        CalculatorData data \u003d new CalculatorData(foodList);"},{"lineNumber":47,"author":{"gitId":"yuqiaoluolong"},"content":"        Calculator calculator \u003d new Calculator(data);"},{"lineNumber":48,"author":{"gitId":"yuqiaoluolong"},"content":"        assertEquals(30 + 16, calculator.calculateProtein());"},{"lineNumber":49,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":51,"author":{"gitId":"yuqiaoluolong"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"yuqiaoluolong"},"content":"    void calculateFat_foodListOfThreeItems_sumOfFat() {"},{"lineNumber":53,"author":{"gitId":"yuqiaoluolong"},"content":"        FoodList foodList \u003d new FoodList();"},{"lineNumber":54,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(1, new Food(\"chicken rice\", 666, 55, 30, 0));"},{"lineNumber":55,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(1, new Food(\"pancake\", 150, 16, 0, 0));"},{"lineNumber":56,"author":{"gitId":"yuqiaoluolong"},"content":"        foodList.addFood(1, new Food(\"bao\", 290, 0, 16, 0));"},{"lineNumber":57,"author":{"gitId":"yuqiaoluolong"},"content":"        CalculatorData data \u003d new CalculatorData(foodList);"},{"lineNumber":58,"author":{"gitId":"yuqiaoluolong"},"content":"        Calculator calculator \u003d new Calculator(data);"},{"lineNumber":59,"author":{"gitId":"yuqiaoluolong"},"content":"        assertEquals(0, calculator.calculateFat());"},{"lineNumber":60,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":62,"author":{"gitId":"yuqiaoluolong"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"yuqiaoluolong"},"content":"    void calculateRecomendedCalorieIntake_aPerson_recomendationOfCalorieIntake() {"},{"lineNumber":64,"author":{"gitId":"yuqiaoluolong"},"content":"        Person harry \u003d new Person(\"Harry\", Gender.MALE, 19, 182, 66, 69, 75, FitnessLevel.LOW);"},{"lineNumber":65,"author":{"gitId":"yuqiaoluolong"},"content":"        Person erica \u003d new Person(\"Erica\", Gender.FEMALE, 20, 168, 52, 50, 45, FitnessLevel.MEDIUM);"},{"lineNumber":66,"author":{"gitId":"yuqiaoluolong"},"content":"        Calculator calculator \u003d new Calculator(new CalculatorData());"},{"lineNumber":67,"author":{"gitId":"yuqiaoluolong"},"content":"        assertEquals(2781, calculator.calculateRecommendation(harry));"},{"lineNumber":68,"author":{"gitId":"yuqiaoluolong"},"content":"        assertEquals(1729, calculator.calculateRecommendation(erica));"},{"lineNumber":69,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"yuqiaoluolong"},"content":""},{"lineNumber":71,"author":{"gitId":"yuqiaoluolong"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"yuqiaoluolong"},"content":"    void calculateRecomendedCalorieIntakeReachingCaps_aPerson_recomendationOfCalorieIntake() {"},{"lineNumber":73,"author":{"gitId":"yuqiaoluolong"},"content":"        Person henry \u003d new Person(\"Henry\", Gender.MALE, 99, 92, 30, 28, 27, FitnessLevel.NONE);"},{"lineNumber":74,"author":{"gitId":"yuqiaoluolong"},"content":"        Person florence \u003d new Person(\"Florence\", Gender.FEMALE, 20, 300, 500, 500, 500, FitnessLevel.EXTREME);"},{"lineNumber":75,"author":{"gitId":"yuqiaoluolong"},"content":"        Calculator calculator \u003d new Calculator(new CalculatorData());"},{"lineNumber":76,"author":{"gitId":"yuqiaoluolong"},"content":"        assertEquals(1000, calculator.calculateRecommendation(henry));"},{"lineNumber":77,"author":{"gitId":"yuqiaoluolong"},"content":"        assertEquals(9279, calculator.calculateRecommendation(florence));"},{"lineNumber":78,"author":{"gitId":"yuqiaoluolong"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"yuqiaoluolong"},"content":"}"}],"authorContributionMap":{"yuqiaoluolong":77,"HengFuYuen":2}},{"path":"src/test/java/seedu/dietbook/database/DataBaseTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.database;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"class DataBaseTest {"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"        DataBase database \u003d new DataBase();"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"        database.init();"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"        // ----- Print everything in the data base -----"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"        database.printAllData();"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"        // ---- Using stream version to print -----"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"        // System.out.println(\"------------ printing using food stream ------------\");"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"        // database.foodStream().forEach(System.out::println);"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"        // ---- Printing out as list -----"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"        // System.out.println(\"---------- printing food using list --------------\");"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"        // database.getFoodList().forEach(System.out::println);"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"        // ---- get food list string ----"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"        System.out.print(database.getFoodListString());"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"        // ---- search food by index test ----"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\"-------- testing the searchFoodByIndex function --------\");"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\"Input : 1 ## OutPut : \" + database.searchFoodByIndex(1));"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\"Input : 10 ## Output : \" + database.searchFoodByIndex(10));"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\"Trying a negative test case : Input : 10000\");"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"            database.searchFoodByIndex(10000);"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"The index is too high!\" + e);"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"        // ---- search food by name test -----"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"------- testing the searchFoodByName function -------\");"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: Prawn  ## OutPut: \" + database.searchFoodByName(\"Prawn\"));"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: Mee ## OutPut: \" + database.searchFoodByName(\"Mee\"));"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: lobster ## OutPut: \" + database.searchFoodByName(\"lobster\"));"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: Prawn ## OutPut: \" + database.searchFoodByName(\"koala bears\"));"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"No such food found! \" + e);"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"        // ---- search food by store name test ----"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\"------- testing the search food by store and by name function --------\");"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: Fried , Halal Mini Wok ## OutPut: \""},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"                    + database.searchFoodByNameByStore(\"Fried\", \"Halal Mini Wok\"));"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: Chicken , Halal Mini Wok ## OutPut: \""},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"                    + database.searchFoodByNameByStore(\"Chicken\", \"Halal Mini Wok\"));"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: Chicken , Ayam Penyet ## OutPut: \""},{"lineNumber":54,"author":{"gitId":"snowbanana12345"},"content":"                    + database.searchFoodByNameByStore(\"Chicken\", \"Ayam Penyet\"));"},{"lineNumber":55,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: lobster , Michelin ## OutPut: \""},{"lineNumber":56,"author":{"gitId":"snowbanana12345"},"content":"                    + database.searchFoodByNameByStore(\"lobster\", \"Michelin\"));"},{"lineNumber":57,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: fish , Halal Mini Wok ## OutPut: \""},{"lineNumber":58,"author":{"gitId":"snowbanana12345"},"content":"                    + database.searchFoodByNameByStore(\"fish\", \"Halal Mini Wok\"));"},{"lineNumber":59,"author":{"gitId":"snowbanana12345"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":60,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"No such food found! \" + e);"},{"lineNumber":61,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":63,"author":{"gitId":"snowbanana12345"},"content":"        // ---- search all food by store -----"},{"lineNumber":64,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"------- testing the search ALL food by store and by name function --------\");"},{"lineNumber":66,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"------- Input: Halal Mini Wok -------- \");"},{"lineNumber":67,"author":{"gitId":"snowbanana12345"},"content":"            database.searchAllFoodByStore(\"Halal Mini Wok\").forEach(System.out::println);"},{"lineNumber":68,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"------- Input: Ayam Penyet -------- \");"},{"lineNumber":69,"author":{"gitId":"snowbanana12345"},"content":"            database.searchAllFoodByStore(\"Ayam Penyet\").forEach(System.out::println);"},{"lineNumber":70,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"------- Input: Michelin -------- \");"},{"lineNumber":71,"author":{"gitId":"snowbanana12345"},"content":"            database.searchAllFoodByStore(\"Michelin\").forEach(System.out::println);"},{"lineNumber":72,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"------- Input: Gordan Ramsey\u0027s restaurant -------- \");"},{"lineNumber":73,"author":{"gitId":"snowbanana12345"},"content":"            database.searchAllFoodByStore(\"Gordon Ramsey\u0027s restaurant\").forEach(System.out::println);"},{"lineNumber":74,"author":{"gitId":"snowbanana12345"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":75,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"There is no such store! \" + e);"},{"lineNumber":76,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":78,"author":{"gitId":"snowbanana12345"},"content":"        // ---- search food by Name by canteen ------"},{"lineNumber":79,"author":{"gitId":"snowbanana12345"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"------- testing the search food by canteen and by name function --------\");"},{"lineNumber":81,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: Fried , Science ## OutPut: \""},{"lineNumber":82,"author":{"gitId":"snowbanana12345"},"content":"                    + database.searchFoodByNameByCanteen(\"Fried\", \"Science\"));"},{"lineNumber":83,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: Chicken , Science ## OutPut: \""},{"lineNumber":84,"author":{"gitId":"snowbanana12345"},"content":"                    + database.searchFoodByNameByCanteen(\"Chicken\", \"Science\"));"},{"lineNumber":85,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: lobster , Science ## OutPut: \""},{"lineNumber":86,"author":{"gitId":"snowbanana12345"},"content":"                    + database.searchFoodByNameByCanteen(\"lobster\", \"Science\"));"},{"lineNumber":87,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"Input: lobster , Raffles Hotel Suite ## OutPut: \""},{"lineNumber":88,"author":{"gitId":"snowbanana12345"},"content":"                    + database.searchFoodByNameByCanteen(\"lobster\", \"Raffles Hotel Suite\"));"},{"lineNumber":89,"author":{"gitId":"snowbanana12345"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":90,"author":{"gitId":"snowbanana12345"},"content":"            System.out.println(\"There is either no such canteen or no such food in that canteen!\" + e);"},{"lineNumber":91,"author":{"gitId":"snowbanana12345"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":93,"author":{"gitId":"snowbanana12345"},"content":"        // ---- search all food below calorie ------"},{"lineNumber":94,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":95,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\"------- testing the search food below calorie function --------\");"},{"lineNumber":96,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\" ---- Input : 400\");"},{"lineNumber":97,"author":{"gitId":"snowbanana12345"},"content":"        database.searchAllFoodBelowCalorie(400).forEach(System.out::println);"},{"lineNumber":98,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\" ---- Input : 200\");"},{"lineNumber":99,"author":{"gitId":"snowbanana12345"},"content":"        database.searchAllFoodBelowCalorie(200).forEach(System.out::println);"},{"lineNumber":100,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(\" ---- Input : 3428\");"},{"lineNumber":101,"author":{"gitId":"snowbanana12345"},"content":"        database.searchAllFoodBelowCalorie(3428).forEach(System.out::println);"},{"lineNumber":102,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":103,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":104}},{"path":"src/test/java/seedu/dietbook/food/FoodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.food;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"class FoodTest {"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"    private Food testFood;"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"    @BeforeEach"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    public void setUp() {"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"        testFood \u003d new Food(\"Kobe Beef\", 480,50,40,30);"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"    public void footTest() {"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(480, testFood.getCalorie());"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(50, testFood.getCarbohydrate());"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(40, testFood.getProtein());"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(30, testFood.getFat());"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":24}},{"path":"src/test/java/seedu/dietbook/list/FoodEntryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"import org.junit.jupiter.api.DisplayName;"},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":" * Test suite for FoodEntry and dependencies."},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":" */"},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"public class FoodEntryTest {"},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"    "},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"Empty Calorie Test\")"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"    void getFood_foodWithEmptyCalorie_isNotInstanceOfOptionalFood() {"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entry \u003d new FoodEntry(1, \"Sashimi\", OptionalFood.EMPTY_VALUE, 10, 10, 10);"},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"        // getFood should not return an optional food."},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"        Food foodFromEntry \u003d entry.getFood();"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"        assertTrue(!(foodFromEntry instanceof OptionalFood));"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"        assertEquals(10 * 4 * 2 + 10 * 9, foodFromEntry.getCalorie());"},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":"        // further test that Manager does create OptionalFood:"},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"        Food foodFromManager \u003d FoodManager.createFood(\"Sashimi\", OptionalFood.EMPTY_VALUE, 10, 10, 10);"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"        assertTrue(foodFromManager instanceof OptionalFood);"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"1 Empty Nutritional Values Test\")"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"    void getNutritionalValue_foodWithEmptyNutrionalValue_remainingDividedOutValue() {"},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entryWithNoFat \u003d new FoodEntry(2, \"Sashimi\", 170, 10, 10, OptionalFood.EMPTY_VALUE);"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"        assertEquals(10, entryWithNoFat.getFood().getFat());"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entryWithNoCarb \u003d new FoodEntry(2, \"Sashimi\", 170, OptionalFood.EMPTY_VALUE, 10, 10);"},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":"        assertEquals(10, entryWithNoCarb.getFood().getCarbohydrate());"},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"3 Empty Nutritional Values Test\")"},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":"    void getNutritionalValues_foodWithEmptyNutrionalValues_dividedOutNutritionalValues() {"},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entry \u003d new FoodEntry(2, \"Balanced\", 300,"},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"                OptionalFood.EMPTY_VALUE, OptionalFood.EMPTY_VALUE, OptionalFood.EMPTY_VALUE);"},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":"        assertEquals(300 / 3 / 9, entry.getFood().getFat());"},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"        assertEquals(300 / 3 / 4, entry.getFood().getProtein());"},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"2 Empty Nutritional Values Test\")"},{"lineNumber":54,"author":{"gitId":"mxksowie"},"content":"    void getNutrionalValue_foodWithOnlyOneNutritionalValue_dividedOutNutritionalValues() {"},{"lineNumber":55,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entryWithOnlyFat \u003d new FoodEntry(2, \"FatOnly\", 300,"},{"lineNumber":56,"author":{"gitId":"mxksowie"},"content":"                OptionalFood.EMPTY_VALUE, OptionalFood.EMPTY_VALUE, 10);"},{"lineNumber":57,"author":{"gitId":"mxksowie"},"content":"        assertEquals((300 - 90) / 2 / 4, entryWithOnlyFat.getFood().getCarbohydrate());"},{"lineNumber":58,"author":{"gitId":"mxksowie"},"content":"        assertEquals((300 - 90) / 2 / 4, entryWithOnlyFat.getFood().getProtein());"},{"lineNumber":59,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":60,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entryWithOnlyProtein \u003d new FoodEntry(1, \"ProteinOnly\", 300,"},{"lineNumber":61,"author":{"gitId":"mxksowie"},"content":"                OptionalFood.EMPTY_VALUE, 25, OptionalFood.EMPTY_VALUE);"},{"lineNumber":62,"author":{"gitId":"mxksowie"},"content":"        assertEquals(100 / 9, entryWithOnlyProtein.getFood().getFat());"},{"lineNumber":63,"author":{"gitId":"mxksowie"},"content":"        assertEquals(100 / 4, entryWithOnlyProtein.getFood().getCarbohydrate());"},{"lineNumber":64,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":65,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":66}},{"path":"src/test/java/seedu/dietbook/list/FoodListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.list;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"import org.junit.jupiter.api.DisplayName;"},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"class FoodListTest {"},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"    private FoodList list;"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"    private FoodList datedList;"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"    private Food food;"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"    private LocalDateTime start;"},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"    private LocalDateTime end;"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"    @BeforeEach"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"    protected void setUp() {"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":"        this.list \u003d new FoodList();"},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"        this.datedList \u003d new FoodList();"},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":"        Food food \u003d new Food(\"Kobe Beef\", 480,50,40,30);"},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"        this.food \u003d food;"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"        list.addFood(3, food);"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"        list.addFood(2, \"Sashimi\", 100, 0, 30, 10);"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"        this.start \u003d LocalDateTime.of(2000, 6, 6, 12, 15);"},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"        this.end \u003d LocalDateTime.of(2000, 6, 10, 0, 0);"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"        datedList.addFoodAtDateTime(2, food, start);"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"        datedList.addFoodAtDateTime(3, food, end);"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":41,"author":{"gitId":"mxksowie"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"mxksowie"},"content":"     * getPortionedList() should return list of food with scaled up nutritional values."},{"lineNumber":43,"author":{"gitId":"mxksowie"},"content":"     * getFoods() should return a list of food (Not food entries)."},{"lineNumber":44,"author":{"gitId":"mxksowie"},"content":"     * Essentially 2 tests in 1."},{"lineNumber":45,"author":{"gitId":"mxksowie"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"Portion scaling test\")"},{"lineNumber":48,"author":{"gitId":"mxksowie"},"content":"    void foodPortionScaling_standardList_scaledFoodList() {"},{"lineNumber":49,"author":{"gitId":"mxksowie"},"content":"        FoodList testList \u003d new FoodList();"},{"lineNumber":50,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":51,"author":{"gitId":"mxksowie"},"content":"        Food food \u003d new Food(\"Kobe Beef\", 480 * 3, 50 * 3, 40 * 3, 30 * 3);"},{"lineNumber":52,"author":{"gitId":"mxksowie"},"content":"        testList.addFood(1, food);"},{"lineNumber":53,"author":{"gitId":"mxksowie"},"content":"        testList.addFood(1, \"Sashimi\", 200, 0, 60, 20);"},{"lineNumber":54,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":55,"author":{"gitId":"mxksowie"},"content":"        assertEquals(testList.getFoods().toString(), list.getPortionedFoods().toString());"},{"lineNumber":56,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":58,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"mxksowie"},"content":"    void deleteItemTest() {"},{"lineNumber":60,"author":{"gitId":"mxksowie"},"content":"        // Positive Test:"},{"lineNumber":61,"author":{"gitId":"mxksowie"},"content":"        FoodEntry entry \u003d new FoodEntry(3, food);"},{"lineNumber":62,"author":{"gitId":"mxksowie"},"content":"        assertEquals(entry.toString(), list.delete(1));"},{"lineNumber":63,"author":{"gitId":"mxksowie"},"content":"        // Negative Tests:"},{"lineNumber":64,"author":{"gitId":"mxksowie"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e list.delete(5));"},{"lineNumber":65,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":67,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"Dated entry comparison test\")"},{"lineNumber":69,"author":{"gitId":"mxksowie"},"content":"    void compareDatedEntries_datedEntriesAtDiffDate_compareToResult() {"},{"lineNumber":70,"author":{"gitId":"mxksowie"},"content":"        DatedFoodEntry entry \u003d new DatedFoodEntry(2, food);"},{"lineNumber":71,"author":{"gitId":"mxksowie"},"content":"        DatedFoodEntry pastEntry \u003d new DatedFoodEntry(2, food, LocalDateTime.MIN);"},{"lineNumber":72,"author":{"gitId":"mxksowie"},"content":"        assertTrue(entry.compareTo(pastEntry) \u003e 0);"},{"lineNumber":73,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":75,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"mxksowie"},"content":"    void dateFilterAfterTest() {"},{"lineNumber":77,"author":{"gitId":"mxksowie"},"content":"        assertEquals(list.toString(), list.getAfterDateTimeToString(LocalDateTime.MIN));"},{"lineNumber":78,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":79,"author":{"gitId":"mxksowie"},"content":"        LocalDateTime timeNow \u003d LocalDateTime.now();"},{"lineNumber":80,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":81,"author":{"gitId":"mxksowie"},"content":"        assertTrue(datedList.getFoodsAfterDateTime(timeNow).size() \u003d\u003d 0);"},{"lineNumber":82,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":83,"author":{"gitId":"mxksowie"},"content":"        assertEquals(list.getFoods().toString(),"},{"lineNumber":84,"author":{"gitId":"mxksowie"},"content":"                list.getFoodsAfterDateTime(LocalDateTime.MIN).toString());"},{"lineNumber":85,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":86,"author":{"gitId":"mxksowie"},"content":"        datedList.addFood(1, food);"},{"lineNumber":87,"author":{"gitId":"mxksowie"},"content":"        assertEquals(food.toString(), datedList.getFoodsAfterDateTime(end).get(1).toString());"},{"lineNumber":88,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":89,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":91,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"mxksowie"},"content":"    void dateFilterRangeTest() {"},{"lineNumber":93,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":94,"author":{"gitId":"mxksowie"},"content":"        assertEquals(list.getPortionedFoods().toString(), "},{"lineNumber":95,"author":{"gitId":"mxksowie"},"content":"                list.getPortionedFoodsInDateTimeRange(LocalDateTime.MIN, LocalDateTime.MAX).toString());"},{"lineNumber":96,"author":{"gitId":"mxksowie"},"content":"        assertEquals(datedList.toString(), "},{"lineNumber":97,"author":{"gitId":"mxksowie"},"content":"                datedList.getInDateTimeRangeToString(start, end));"},{"lineNumber":98,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":99,"author":{"gitId":"mxksowie"},"content":"        LocalDateTime timeNow \u003d LocalDateTime.now();"},{"lineNumber":100,"author":{"gitId":"mxksowie"},"content":"        assertTrue(datedList.getFoodsInDateTimeRange(timeNow, LocalDateTime.MAX).size() \u003d\u003d 0);"},{"lineNumber":101,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":102,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":104,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"Getter methods test\")"},{"lineNumber":106,"author":{"gitId":"mxksowie"},"content":"    void getFoodEntryProperties_standardList_FoodEntryProperties() {"},{"lineNumber":107,"author":{"gitId":"mxksowie"},"content":"        assertTrue(list.getDateTimes().get(0) instanceof LocalDateTime);"},{"lineNumber":108,"author":{"gitId":"mxksowie"},"content":"        assertEquals(list.getPortionSizes().get(0), 3);"},{"lineNumber":109,"author":{"gitId":"mxksowie"},"content":"        assertEquals(list.getFoods().get(0), food);"},{"lineNumber":110,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":112,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"Adding backlog entry test\")"},{"lineNumber":114,"author":{"gitId":"mxksowie"},"content":"    void addAndRetrieveEntryAtDateTime_entryAddedAtDateTimeMax_entryAtDateTimeMax() {"},{"lineNumber":115,"author":{"gitId":"mxksowie"},"content":"        list.addFoodAtDateTime(2, food, LocalDateTime.MAX);"},{"lineNumber":116,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":117,"author":{"gitId":"mxksowie"},"content":"        assertEquals(food, list.getFoodsAfterDateTime(LocalDateTime.now()).get(0));"},{"lineNumber":118,"author":{"gitId":"mxksowie"},"content":"        // Further test that boundary is inclusive:"},{"lineNumber":119,"author":{"gitId":"mxksowie"},"content":"        assertEquals(food, list.getFoodsAfterDateTime(LocalDateTime.MAX).get(0));"},{"lineNumber":120,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":122,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"Dated String representation test\")"},{"lineNumber":124,"author":{"gitId":"mxksowie"},"content":"    void printDatedList_datedList_matchingStrings() {"},{"lineNumber":125,"author":{"gitId":"mxksowie"},"content":"        assertTrue(! datedList.toString().equals(datedList.toDatedString()));"},{"lineNumber":126,"author":{"gitId":"mxksowie"},"content":"        assertTrue(datedList.toDatedString().stripTrailing().endsWith(String.format(\"[%s]\","},{"lineNumber":127,"author":{"gitId":"mxksowie"},"content":"                end.format(DatedFoodEntry.DATE_TIME_FORMAT))));"},{"lineNumber":128,"author":{"gitId":"mxksowie"},"content":"        // Bound inclusivity should render the following true:"},{"lineNumber":129,"author":{"gitId":"mxksowie"},"content":"        assertEquals(datedList.toDatedString(), datedList.toDatedString(start));"},{"lineNumber":130,"author":{"gitId":"mxksowie"},"content":"        assertEquals(datedList.toDatedString(), datedList.toDatedString(start, end));"},{"lineNumber":131,"author":{"gitId":"mxksowie"},"content":"        assertTrue(datedList.toDatedString(end).stripTrailing().endsWith(String.format(\"[%s]\","},{"lineNumber":132,"author":{"gitId":"mxksowie"},"content":"                end.format(DatedFoodEntry.DATE_TIME_FORMAT))));"},{"lineNumber":133,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":134,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":136,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"List sorting test\")"},{"lineNumber":138,"author":{"gitId":"mxksowie"},"content":"    void getSortedItem_listWithItemsAddedAtEarlierDates_getItemsAccordingToDateTimeOrder() {"},{"lineNumber":139,"author":{"gitId":"mxksowie"},"content":"        datedList.addFoodAtDateTime(3, food, LocalDateTime.MIN);"},{"lineNumber":140,"author":{"gitId":"mxksowie"},"content":"        datedList.addFoodAtDateTime(2, food, LocalDateTime.of(2000, 6, 7, 0, 0));"},{"lineNumber":141,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":142,"author":{"gitId":"mxksowie"},"content":"        datedList.sort();"},{"lineNumber":143,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":144,"author":{"gitId":"mxksowie"},"content":"        for (int i \u003d 0; i \u003c datedList.getFoods().size() - 1; i++) {"},{"lineNumber":145,"author":{"gitId":"mxksowie"},"content":"            assertTrue(datedList.getDateTimes().get(i).isBefore(datedList.getDateTimes().get(i + 1)));"},{"lineNumber":146,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":149,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":150,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":150}},{"path":"src/test/java/seedu/dietbook/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.person;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"class PersonTest {"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"    private Person person;"},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":"    @BeforeEach"},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":"    public void setUp() {"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"        person \u003d new Person(\"Jack\", Gender.MALE,21,165,75,65,"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"                60, FitnessLevel.LOW);"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    void gender_setGenderToFemale_returnsCorrectGenderDescription() {"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"        person.setGender(Gender.FEMALE);"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"female\", person.getGender().getDescription());"},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"    void gender_setGenderToMale_returnsCorrectGenderDescription() {"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"        person.setGender(Gender.MALE);"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"male\", person.getGender().getDescription());"},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"    void gender_setGenderToOthers_returnsCorrectGenderDescription() {"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":"        person.setGender(Gender.OTHERS);"},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"others\", person.getGender().getDescription());"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"    "},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":"    void gender_setGenderToNull_expectAssertionError() {"},{"lineNumber":39,"author":{"gitId":"HengFuYuen"},"content":"        assertThrows(AssertionError.class, () -\u003e person.setGender(null));"},{"lineNumber":40,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":42,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"HengFuYuen"},"content":"    void setFitnessLevel_setNewFitnessLevelToNone_returnsCorrectFitnessLevelDescription() {"},{"lineNumber":44,"author":{"gitId":"HengFuYuen"},"content":"        person.setFitnessLevel(FitnessLevel.NONE);"},{"lineNumber":45,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"You hardly engage in any exercise or have a job that requires little to no \""},{"lineNumber":46,"author":{"gitId":"HengFuYuen"},"content":"                + \"physical activity.\", person.getFitnessLevel().getDescription());"},{"lineNumber":47,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":49,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"HengFuYuen"},"content":"    void setFitnessLevel_setFitnessLevelToLow_returnsCorrectFitnessLevelDescription() {"},{"lineNumber":51,"author":{"gitId":"HengFuYuen"},"content":"        person.setFitnessLevel(FitnessLevel.LOW);"},{"lineNumber":52,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"You engage in some form of light exercise or have a job that requires some \""},{"lineNumber":53,"author":{"gitId":"HengFuYuen"},"content":"                + \"physical activity.\", person.getFitnessLevel().getDescription());"},{"lineNumber":54,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":56,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"HengFuYuen"},"content":"    void setFitnessLevel_setFitnessLevelToMedium_returnsCorrectFitnessLevelDescription() {"},{"lineNumber":58,"author":{"gitId":"HengFuYuen"},"content":"        person.setFitnessLevel(FitnessLevel.MEDIUM);"},{"lineNumber":59,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"You engage in moderate amount of exercise or have a job that requires moderate \""},{"lineNumber":60,"author":{"gitId":"HengFuYuen"},"content":"                + \"physical activity.\", person.getFitnessLevel().getDescription());"},{"lineNumber":61,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":63,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"HengFuYuen"},"content":"    void setFitnessLevel_setFitnessLevelToHigh_returnsCorrectFitnessLevelDescription() {"},{"lineNumber":65,"author":{"gitId":"HengFuYuen"},"content":"        person.setFitnessLevel(FitnessLevel.HIGH);"},{"lineNumber":66,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"You engage in vigorous exercise or have a physically demanding job.\","},{"lineNumber":67,"author":{"gitId":"HengFuYuen"},"content":"                person.getFitnessLevel().getDescription());"},{"lineNumber":68,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":70,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"HengFuYuen"},"content":"    void setFitnessLevel_setFitnessLevelToExtreme_returnsCorrectFitnessLevelDescription() {"},{"lineNumber":72,"author":{"gitId":"HengFuYuen"},"content":"        person.setFitnessLevel(FitnessLevel.EXTREME);"},{"lineNumber":73,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"You engage in extremely vigorous exercise or have an extremely physically \""},{"lineNumber":74,"author":{"gitId":"HengFuYuen"},"content":"                + \"demanding job.\", person.getFitnessLevel().getDescription());"},{"lineNumber":75,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":77,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"HengFuYuen"},"content":"    void setFitnessLevel_setFitnessLevelToNull_expectsAssertionErrors() {"},{"lineNumber":79,"author":{"gitId":"HengFuYuen"},"content":"        assertThrows(AssertionError.class, () -\u003e person.setFitnessLevel(null));"},{"lineNumber":80,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":81}},{"path":"src/test/java/seedu/dietbook/saveload/FoodPortionDateSaveLoadManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import seedu.dietbook.list.FoodList;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"class FoodPortionDateSaveLoadManagerTest {"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    FoodPortionDateSaveLoadManager test;"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"    FoodList testfl;"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"    FoodPortionDateSaveLoadManager test2;"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    @BeforeEach"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"    public void setUp() {"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"        test \u003d new FoodPortionDateSaveLoadManager();"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"        LocalDateTime testDateTime1 \u003d LocalDateTime.of(2020, 10, 12, 16, 30);"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"        Food testFood1 \u003d new Food(\"Banana\", 100, 50, 30, 20);"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"        int testPortionSize1 \u003d 10;"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"        LocalDateTime testDateTime2 \u003d LocalDateTime.of(2036, 9, 16, 10, 40);"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"        Food testFood2 \u003d new Food(\"Solenoid\", 200, 20, 40, 30);"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"        int testPortionSize2 \u003d 5;"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"        test.readySaver(10);"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"        test.setFood(testFood1, 1);"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"        test.setDateTime(testDateTime1, 1);"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"        test.setPortionSize(testPortionSize1, 1);"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"        test.setFood(testFood2, 10);"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"        test.setDateTime(testDateTime2, 10);"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"        test.setPortionSize(testPortionSize2, 10);"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"        test.save(\"testFoodFile\");"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"        testfl \u003d new FoodList();"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"        testfl.addFoodAtDateTime(testPortionSize1, testFood1, testDateTime1);"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"        testfl.addFoodAtDateTime(testPortionSize2, testFood2, testDateTime2);"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"        LocalDateTime testDateTime3 \u003d LocalDateTime.of(1982, 3, 14, 20, 59);"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"        Food testFood3 \u003d new Food(\"Bacon\", 300, 10, 450, 310);"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"        int testPortionSize3 \u003d 3;"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"        testfl.addFoodAtDateTime(testPortionSize3, testFood3, testDateTime3);"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"        test2 \u003d new FoodPortionDateSaveLoadManager();"},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"        test2.saveFoodList(testfl, \"testFoodListFile\");"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":55,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"snowbanana12345"},"content":"    public void data_loadentry1_returnsCorrectSavedData() throws FileNotFoundException, IllegalAccessException {"},{"lineNumber":57,"author":{"gitId":"snowbanana12345"},"content":"        test.load(\"testFoodFile\");"},{"lineNumber":58,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(\"Banana\", test.getFood(1).getName());"},{"lineNumber":59,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(100, test.getFood(1).getCalorie());"},{"lineNumber":60,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(50, test.getFood(1).getCarbohydrate());"},{"lineNumber":61,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(30, test.getFood(1).getProtein());"},{"lineNumber":62,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(20, test.getFood(1).getFat());"},{"lineNumber":63,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(10, test.getPortionSize(1));"},{"lineNumber":64,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(2020, test.getYear(1));"},{"lineNumber":65,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(10, test.getMonth(1));"},{"lineNumber":66,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(12, test.getDay(1));"},{"lineNumber":67,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(16, test.getHour(1));"},{"lineNumber":68,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(30, test.getMinute(1));"},{"lineNumber":69,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":71,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"snowbanana12345"},"content":"    public void data_loadentry2_returnsCorrectSavedData() throws FileNotFoundException, IllegalAccessException {"},{"lineNumber":73,"author":{"gitId":"snowbanana12345"},"content":"        test.load(\"testFoodFile\");"},{"lineNumber":74,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(\"Solenoid\", test.getFood(10).getName());"},{"lineNumber":75,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(200, test.getFood(10).getCalorie());"},{"lineNumber":76,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(20, test.getFood(10).getCarbohydrate());"},{"lineNumber":77,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(40, test.getFood(10).getProtein());"},{"lineNumber":78,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(30, test.getFood(10).getFat());"},{"lineNumber":79,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(5, test.getPortionSize(10));"},{"lineNumber":80,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(2036, test.getYear(10));"},{"lineNumber":81,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(9, test.getMonth(10));"},{"lineNumber":82,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(16, test.getDay(10));"},{"lineNumber":83,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(10, test.getHour(10));"},{"lineNumber":84,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(40, test.getMinute(10));"},{"lineNumber":85,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":87,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"snowbanana12345"},"content":"    public void data_loadFoodList_returnsCorrectSavedData() throws FileNotFoundException, IllegalAccessException {"},{"lineNumber":89,"author":{"gitId":"snowbanana12345"},"content":"        test2.load(\"testFoodListFile\");"},{"lineNumber":90,"author":{"gitId":"snowbanana12345"},"content":"        FoodList testfl2 \u003d test2.getFoodList();"},{"lineNumber":91,"author":{"gitId":"snowbanana12345"},"content":"        final List\u003cLocalDateTime\u003e testfl2datetimes \u003d testfl2.getDateTimes();"},{"lineNumber":92,"author":{"gitId":"snowbanana12345"},"content":"        final List\u003cInteger\u003e testfl2portions \u003d testfl2.getPortionSizes();"},{"lineNumber":93,"author":{"gitId":"snowbanana12345"},"content":"        final List\u003cFood\u003e testfl2foods \u003d testfl2.getFoods();"},{"lineNumber":94,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(1982, testfl2datetimes.get(2).getYear());"},{"lineNumber":95,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(3, testfl2datetimes.get(2).getMonthValue());"},{"lineNumber":96,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(14, testfl2datetimes.get(2).getDayOfMonth());"},{"lineNumber":97,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(20, testfl2datetimes.get(2).getHour());"},{"lineNumber":98,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(59, testfl2datetimes.get(2).getMinute());"},{"lineNumber":99,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(3, testfl2portions.get(2));"},{"lineNumber":100,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(\"Bacon\", testfl2foods.get(2).getName());"},{"lineNumber":101,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(300, testfl2foods.get(2).getCalorie());"},{"lineNumber":102,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(10, testfl2foods.get(2).getCarbohydrate());"},{"lineNumber":103,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(450, testfl2foods.get(2).getProtein());"},{"lineNumber":104,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(310, testfl2foods.get(2).getFat());"},{"lineNumber":105,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":106}},{"path":"src/test/java/seedu/dietbook/saveload/FoodSaveLoadManagerManualTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"public class FoodSaveLoadManagerManualTest {"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"    public static void main(String[] args) throws FileNotFoundException, IllegalAccessException {"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"        final FoodSaveLoadManager testManager \u003d new FoodSaveLoadManager();"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"        List\u003cFood\u003e inputFoodList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"        Food food1 \u003d new Food(\"Apple\", 20000, 20, 5, 1);"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"        Food food2 \u003d new Food(\"Peach\", 3000, 50, 2, 3);"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"        Food food3 \u003d new Food(\"Bacon\", 1000, 20, 10, 99);"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"        Food food4 \u003d new Food(\"Silicon\", 500, 100, 50, 10);"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"        inputFoodList.add(food1);"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"        inputFoodList.add(food2);"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"        inputFoodList.add(food3);"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"        inputFoodList.add(food4);"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"        testManager.save(\"Victor\u0027s Food List\", inputFoodList);"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"        testManager.load(\"Victor\u0027s Food List\");"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"        List\u003cFood\u003e testFoodList \u003d testManager.getFoodList();"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(testFoodList.get(0).getName());"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(testFoodList.get(0).getCalorie());"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(testFoodList.get(3).getName());"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"        System.out.println(testFoodList.get(3).getCalorie());"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":33}},{"path":"src/test/java/seedu/dietbook/saveload/FoodSaveLoadManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"import seedu.dietbook.food.Food;"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"public class FoodSaveLoadManagerTest {"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    private FoodSaveLoadManager testManager;"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"    private List\u003cFood\u003e inputFoodList;"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"    private Food food1;"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"    private Food food2;"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    private Food food3;"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"    private Food food4;"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"    private List\u003cFood\u003e testFoodList;"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"    private void setUp() throws FileNotFoundException {"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"        testManager \u003d new FoodSaveLoadManager();"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"        inputFoodList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"        food1 \u003d new Food(\"Apple\", 20000,20,5,1);"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"        food2 \u003d new Food(\"Peach\", 3000,50,2,3);"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"        food3 \u003d new Food(\"Bacon\", 1000,20,10,99);"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"        food4 \u003d new Food(\"Silicon\", 500,100,50,10);"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"        inputFoodList.add(food1);"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"        inputFoodList.add(food2);"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"        inputFoodList.add(food3);"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"        inputFoodList.add(food4);"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"        testManager.save(\"Victor\u0027s Food List\", inputFoodList);"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"        testManager.load(\"Victor\u0027s Food List\");"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"    private void getFoodList_WithoutLoading() throws Exception {"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"        testManager.clearLoader();"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"        assertThrows(IllegalAccessException.class, () -\u003e testManager.getFoodList());"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"    private void getFoodList_FileDoesNotExist() throws Exception {"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"        assertThrows(FileNotFoundException.class, () -\u003e testManager.load(\"Over the Moon!\"));"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"snowbanana12345"},"content":"    private void getFoodListTest() throws Exception {"},{"lineNumber":55,"author":{"gitId":"snowbanana12345"},"content":"        testFoodList \u003d testManager.getFoodList();"},{"lineNumber":56,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(4, testFoodList.size());"},{"lineNumber":57,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(\"Apple\", testFoodList.get(0).getName());"},{"lineNumber":58,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(20000, testFoodList.get(0).getCalorie());"},{"lineNumber":59,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(\"Silicon\", testFoodList.get(3).getName());"},{"lineNumber":60,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(500, testFoodList.get(3).getCalorie());"},{"lineNumber":61,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":62}},{"path":"src/test/java/seedu/dietbook/saveload/PersonSaveLoadManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"class PersonSaveLoadManagerTest {"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"    @BeforeEach"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    public void setUp() {"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"        PersonSaveLoadManager pslTest \u003d new PersonSaveLoadManager();"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"        pslTest.setName(\"Victor Chng\");"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"        pslTest.setActivityLevel(0);"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"        pslTest.setGender(\"UnKnown\");"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"        pslTest.setAge(100);"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"        pslTest.setOriginalWeight(200);"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"        pslTest.setCurrentWeight(300);"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"        pslTest.setTargetWeight(100);"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"        pslTest.save(\"pslTest\");"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"    public void load_noSuchFile_expectFileNotFoundException() {"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"        PersonSaveLoadManager localpslTest \u003d new PersonSaveLoadManager();"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"        assertThrows(FileNotFoundException.class, () -\u003e localpslTest.load(\"pie die pie\"));"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"    public void load_correctFile_allContentsCorrect() throws Exception {"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"        PersonSaveLoadManager localpslTest \u003d new PersonSaveLoadManager();"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"        localpslTest.load(\"pslTest\");"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(\"Victor Chng\", localpslTest.getName());"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(\"UnKnown\", localpslTest.getGender());"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(200, localpslTest.getOriginalWeight());"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(100, localpslTest.getAge());"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(300, localpslTest.getCurrentWeight());"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(100, localpslTest.getTargetWeight());"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(0, localpslTest.getFitnessLevel());"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":44}},{"path":"src/test/java/seedu/dietbook/saveload/SaveLoadFileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"public class SaveLoadFileTest {"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"    public static void main(String[] args) throws FileNotFoundException, IllegalAccessException {"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"        Saver saver \u003d new Saver(10, 6);"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(\"banana\", 5, 2);"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(\"pineapple\", 7, 1);"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(\"cheetan\", 2, 3);"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(\"beetles\", 1, 4);"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"        saver.save(\"save_load_test\",\"test1\");"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"        Loader fileLoader;"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"        fileLoader \u003d Loader.load(\"save_load_test\",\"test1\");"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"        fileLoader.get(5, 2).ifPresent(System.out::println);"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"        fileLoader.get(7, 1).ifPresent(System.out::println);"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"        fileLoader.get(2, 3).ifPresent(System.out::println);"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"        fileLoader.get(1, 4).ifPresent(System.out::println);"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"        fileLoader.get(1, 3).ifPresent(System.out::println);"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"        fileLoader.get(10, 6).ifPresent(System.out::println);"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":23}},{"path":"src/test/java/seedu/dietbook/saveload/SaverTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"package seedu.dietbook.saveload;"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"public class SaverTest {"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"    private Saver saver;"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"    @BeforeEach"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"    public void setUp() {"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"        saver \u003d new Saver(10, 6);"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(\"banana\", 5, 2);"},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(\"pineapple\", 7, 1);"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"    public void get() {"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(Optional.of(\"banana\"), saver.get(5,2));"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(Optional.of(\"pineapple\"), saver.get(7,1));"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(Optional.empty(), saver.get(1,1));"},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e saver.get(-1992,3500));"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"        saver.add(\"Deletion lotion\", 4,2);"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(Optional.of(\"Deletion lotion\"), saver.get(4,2));"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"        saver.delete(4,2);"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"        assertEquals(Optional.empty(), saver.get(4,2));"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e saver.delete(-3402,9999));"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"}"}],"authorContributionMap":{"snowbanana12345":37}},{"path":"src/test/java/seedu/dietbook/ui/UiHelperTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.ui;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":"class UiHelperTest {"},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":"    private UiHelper uiHelper;"},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":"    @BeforeEach"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"    public void setUp() {"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"        uiHelper \u003d new UiHelper();"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    void isEmptyString_nullInput_expectAssertionError() {"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"        assertThrows(AssertionError.class, () -\u003e uiHelper.isEmptyString(null));"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"    void isEmptyString_stringWithoutLeadingOrTrailingSpaces_returnsFalse() {"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"        assertFalse(uiHelper.isEmptyString(\"food\"));"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"    void isEmptyString_emptyString_returnsTrue() {"},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"        assertTrue(uiHelper.isEmptyString(\"   \"));"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":"    void isEmptyString_StringWithLeadingAndTrailingSpaces_returnsFalse() {"},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"        assertFalse(uiHelper.isEmptyString(\"    food    \"));"},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":38}},{"path":"src/test/java/seedu/dietbook/ui/UiInputTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.ui;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":"import seedu.dietbook.exception.DietException;"},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":"class UiInputTest {"},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":"    private UiInput uiInput;"},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":"    @BeforeEach"},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"    public void setUp() {"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"        uiInput \u003d new UiInput();"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    void processCommand_emptyCommand_expectDietException() {"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"        assertThrows(DietException.class, () -\u003e uiInput.processCommand(\"   \"));"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":"    void processCommand_commandWithLeadingAndTrailingSpaces_trimmedCommand() throws DietException {"},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"delete 1\", uiInput.processCommand(\"   delete 1   \"));"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"    void processCommand_commandWithoutLeadingAndTrailingSpaces_command() throws DietException {"},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\"delete 1\", uiInput.processCommand(\"delete 1\"));"},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":34}},{"path":"src/test/java/seedu/dietbook/ui/UiMessageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"package seedu.dietbook.ui;"},{"lineNumber":2,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":3,"author":{"gitId":"HengFuYuen"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":4,"author":{"gitId":"HengFuYuen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":6,"author":{"gitId":"HengFuYuen"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":7,"author":{"gitId":"HengFuYuen"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":9,"author":{"gitId":"HengFuYuen"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":11,"author":{"gitId":"HengFuYuen"},"content":"class UiMessageTest {"},{"lineNumber":12,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":13,"author":{"gitId":"HengFuYuen"},"content":"    private UiMessage uiMessage;"},{"lineNumber":14,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":15,"author":{"gitId":"HengFuYuen"},"content":"    @BeforeEach"},{"lineNumber":16,"author":{"gitId":"HengFuYuen"},"content":"    public void setUp() {"},{"lineNumber":17,"author":{"gitId":"HengFuYuen"},"content":"        uiMessage \u003d new UiMessage();"},{"lineNumber":18,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":20,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"HengFuYuen"},"content":"    void stringDateTimePeriod_startDateTimeIsNullInput_expectAssertionError() {"},{"lineNumber":22,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"},{"lineNumber":23,"author":{"gitId":"HengFuYuen"},"content":"        assertThrows(AssertionError.class, () -\u003e uiMessage.stringDateTimePeriod(null, end));"},{"lineNumber":24,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":26,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"HengFuYuen"},"content":"    void stringDateTimePeriod_endDateTimeIsNullInput_expectAssertionError() {"},{"lineNumber":28,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"},{"lineNumber":29,"author":{"gitId":"HengFuYuen"},"content":"        assertThrows(AssertionError.class, () -\u003e uiMessage.stringDateTimePeriod(start, null));"},{"lineNumber":30,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":32,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"HengFuYuen"},"content":"    void stringDateTimePeriod_endDateTimeIsBeforeStartTime_expectAssertionError() {"},{"lineNumber":34,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"},{"lineNumber":35,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-20T23:59\");"},{"lineNumber":36,"author":{"gitId":"HengFuYuen"},"content":"        assertThrows(AssertionError.class, () -\u003e uiMessage.stringDateTimePeriod(start, end));"},{"lineNumber":37,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":39,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"HengFuYuen"},"content":"    void stringDateTimePeriod_endDateTimeIsInTheFuTure_expectAssertionError() {"},{"lineNumber":41,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"},{"lineNumber":42,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.now().plusDays(3);"},{"lineNumber":43,"author":{"gitId":"HengFuYuen"},"content":"        assertThrows(AssertionError.class, () -\u003e uiMessage.stringDateTimePeriod(start, end));"},{"lineNumber":44,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":46,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"HengFuYuen"},"content":"    void stringDateTimePeriod_StartDateTimeIsInTheFuture_expectAssertionError() {"},{"lineNumber":48,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime start \u003d LocalDateTime.now().plusDays(3);"},{"lineNumber":49,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.now().plusDays(5);"},{"lineNumber":50,"author":{"gitId":"HengFuYuen"},"content":"        assertThrows(AssertionError.class, () -\u003e uiMessage.stringDateTimePeriod(start, end));"},{"lineNumber":51,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":53,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":54,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"HengFuYuen"},"content":"    void stringDateTimePeriod_sameStartAndEndDateTime_returnsStringOfTimePeriod() {"},{"lineNumber":56,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"},{"lineNumber":57,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"},{"lineNumber":58,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\" between 21 Oct 2020 2359 and 21 Oct 2020 2359\","},{"lineNumber":59,"author":{"gitId":"HengFuYuen"},"content":"                uiMessage.stringDateTimePeriod(start, end));"},{"lineNumber":60,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":62,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"HengFuYuen"},"content":"    void stringDateTimePeriod_validStartAndEndDateTime_returnsStringOfTimePeriod() {"},{"lineNumber":64,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-19T23:59\");"},{"lineNumber":65,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59\");"},{"lineNumber":66,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\" between 19 Oct 2020 2359 and 21 Oct 2020 2359\","},{"lineNumber":67,"author":{"gitId":"HengFuYuen"},"content":"                uiMessage.stringDateTimePeriod(start, end));"},{"lineNumber":68,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":70,"author":{"gitId":"HengFuYuen"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"HengFuYuen"},"content":"    void stringDateTimePeriod_validStartAndEndDateTimeWithSeconds_returnsStringOfTimePeriodWithoutSeconds() {"},{"lineNumber":72,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime start \u003d LocalDateTime.parse(\"2020-10-19T23:59:22\");"},{"lineNumber":73,"author":{"gitId":"HengFuYuen"},"content":"        LocalDateTime end \u003d LocalDateTime.parse(\"2020-10-21T23:59:22\");"},{"lineNumber":74,"author":{"gitId":"HengFuYuen"},"content":"        assertEquals(\" between 19 Oct 2020 2359 and 21 Oct 2020 2359\","},{"lineNumber":75,"author":{"gitId":"HengFuYuen"},"content":"                uiMessage.stringDateTimePeriod(start, end));"},{"lineNumber":76,"author":{"gitId":"HengFuYuen"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"HengFuYuen"},"content":""},{"lineNumber":78,"author":{"gitId":"HengFuYuen"},"content":"}"}],"authorContributionMap":{"HengFuYuen":78}},{"path":"src/test/java/seedu/dietbook/utils/StringFormatterTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"mxksowie"},"content":"package seedu.dietbook.utils;"},{"lineNumber":2,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":3,"author":{"gitId":"mxksowie"},"content":"import java.util.Map;"},{"lineNumber":4,"author":{"gitId":"mxksowie"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":6,"author":{"gitId":"mxksowie"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"mxksowie"},"content":"import org.junit.jupiter.api.DisplayName;"},{"lineNumber":8,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":9,"author":{"gitId":"mxksowie"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"mxksowie"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":11,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":12,"author":{"gitId":"mxksowie"},"content":"public class StringFormatterTest {"},{"lineNumber":13,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"Pattern Replacement Test (Positive)\")"},{"lineNumber":15,"author":{"gitId":"mxksowie"},"content":"    void replaceStringTest() throws NoReplacementFoundException {"},{"lineNumber":16,"author":{"gitId":"mxksowie"},"content":"        String original \u003d \"This test belongs to ${name} and is used in ${class}\";"},{"lineNumber":17,"author":{"gitId":"mxksowie"},"content":"        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"mxksowie"},"content":"        map.put(\"name\", \"Me\");"},{"lineNumber":19,"author":{"gitId":"mxksowie"},"content":"        map.put(\"class\", \"StringFormatterTest\");"},{"lineNumber":20,"author":{"gitId":"mxksowie"},"content":"        String test \u003d StringFormatter.formatStringWithMap(original, map);"},{"lineNumber":21,"author":{"gitId":"mxksowie"},"content":"        "},{"lineNumber":22,"author":{"gitId":"mxksowie"},"content":"        assertEquals(\"This test belongs to Me and is used in StringFormatterTest\", test);"},{"lineNumber":23,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":25,"author":{"gitId":"mxksowie"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"mxksowie"},"content":"    @DisplayName(\"Pattern Mismatch Test (Negative)\")"},{"lineNumber":27,"author":{"gitId":"mxksowie"},"content":"    void invalidMapping_mapWithMissingKey_exceptionThrown() {"},{"lineNumber":28,"author":{"gitId":"mxksowie"},"content":"        String original \u003d \"This test belongs to ${name} and is used in ${class}\";"},{"lineNumber":29,"author":{"gitId":"mxksowie"},"content":"        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"mxksowie"},"content":"        map.put(\"name\", \"Me\");"},{"lineNumber":31,"author":{"gitId":"mxksowie"},"content":"        assertThrows(NoReplacementFoundException.class, () -\u003e StringFormatter.formatStringWithMap(original, map));"},{"lineNumber":32,"author":{"gitId":"mxksowie"},"content":""},{"lineNumber":33,"author":{"gitId":"mxksowie"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"mxksowie"},"content":"            StringFormatter.formatStringWithMap(original, map);"},{"lineNumber":35,"author":{"gitId":"mxksowie"},"content":"        } catch (NoReplacementFoundException e) {"},{"lineNumber":36,"author":{"gitId":"mxksowie"},"content":"            assertEquals(\"For key of: class\", e.getMessage());"},{"lineNumber":37,"author":{"gitId":"mxksowie"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"mxksowie"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"mxksowie"},"content":"}"}],"authorContributionMap":{"mxksowie":39}},{"path":"src/test/resources/data.txt","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"snowbanana12345"},"content":"#####################################################################"},{"lineNumber":2,"author":{"gitId":"snowbanana12345"},"content":"#    3 LEVEL DATA BASE                                              #"},{"lineNumber":3,"author":{"gitId":"snowbanana12345"},"content":"#    Canteen -----\u003e Store ------\u003e Food                              #"},{"lineNumber":4,"author":{"gitId":"snowbanana12345"},"content":"#    Commands :                                                     #"},{"lineNumber":5,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%START : start reading data from the data base                #"},{"lineNumber":6,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%STOP : stop reading data from the data base                  #"},{"lineNumber":7,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%UP    : goes down 1 level e.g. Canteen ---\u003e Store            #"},{"lineNumber":8,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%DOWN    : goes down 1 level e.g. Canteen ---\u003e Store          #"},{"lineNumber":9,"author":{"gitId":"snowbanana12345"},"content":"#    \u0026%ADD format : adds the item with the given format             #"},{"lineNumber":10,"author":{"gitId":"snowbanana12345"},"content":"#                                                                   #"},{"lineNumber":11,"author":{"gitId":"snowbanana12345"},"content":"#    Comments : any line that starts with # is ignored              #"},{"lineNumber":12,"author":{"gitId":"snowbanana12345"},"content":"#                                                                   #"},{"lineNumber":13,"author":{"gitId":"snowbanana12345"},"content":"#    Canteen format : {name}                                        #"},{"lineNumber":14,"author":{"gitId":"snowbanana12345"},"content":"#    Store format : {name}                                          #"},{"lineNumber":15,"author":{"gitId":"snowbanana12345"},"content":"#    Food format : {name}|{Calorie}|{Carb}|{Protein}|{Fat}          #"},{"lineNumber":16,"author":{"gitId":"snowbanana12345"},"content":"#####################################################################"},{"lineNumber":17,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":18,"author":{"gitId":"snowbanana12345"},"content":"######################################################################"},{"lineNumber":19,"author":{"gitId":"snowbanana12345"},"content":"#   Version 0.1 :                                                    #"},{"lineNumber":20,"author":{"gitId":"snowbanana12345"},"content":"#   there is only UP, once a store or canteen is                     #"},{"lineNumber":21,"author":{"gitId":"snowbanana12345"},"content":"#  specified we automatically go down 1 level , for this version     #"},{"lineNumber":22,"author":{"gitId":"snowbanana12345"},"content":"#   there is no going out of a store and then coming back to add more#"},{"lineNumber":23,"author":{"gitId":"snowbanana12345"},"content":"#   Units : Calorie : kcal  : Carbs : g Protein : g : Fats : g       #"},{"lineNumber":24,"author":{"gitId":"snowbanana12345"},"content":"######################################################################"},{"lineNumber":25,"author":{"gitId":"snowbanana12345"},"content":""},{"lineNumber":26,"author":{"gitId":"snowbanana12345"},"content":"\u0026%START"},{"lineNumber":27,"author":{"gitId":"snowbanana12345"},"content":"Science canteen"},{"lineNumber":28,"author":{"gitId":"snowbanana12345"},"content":"Halal Mini Wok"},{"lineNumber":29,"author":{"gitId":"snowbanana12345"},"content":"Prawn Mee Soup(Dry)(Large)|490|30|20|26"},{"lineNumber":30,"author":{"gitId":"snowbanana12345"},"content":"Prawn Mee Soup(Dry)(Small)|390|25|15|19"},{"lineNumber":31,"author":{"gitId":"snowbanana12345"},"content":"Fried Hokkien Prawn Mee(Large)|470|40|20|20"},{"lineNumber":32,"author":{"gitId":"snowbanana12345"},"content":"Fried Hokkien Prawn Mee(Small)|350|30|15|15"},{"lineNumber":33,"author":{"gitId":"snowbanana12345"},"content":"Clay Pot Chicken|440|34|15|15"},{"lineNumber":34,"author":{"gitId":"snowbanana12345"},"content":"Black Pepper Chicken|490|34|16|16"},{"lineNumber":35,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":36,"author":{"gitId":"snowbanana12345"},"content":"Ayam Penyet"},{"lineNumber":37,"author":{"gitId":"snowbanana12345"},"content":"Ayam Penyet Set|699|45|30|30"},{"lineNumber":38,"author":{"gitId":"snowbanana12345"},"content":"Steamed Chicken Set |475|35|20|20"},{"lineNumber":39,"author":{"gitId":"snowbanana12345"},"content":"Ikan Grouper Penyet Set|669|50|40|50"},{"lineNumber":40,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":41,"author":{"gitId":"snowbanana12345"},"content":"Korean"},{"lineNumber":42,"author":{"gitId":"snowbanana12345"},"content":"kimchi fried rice|520|45|35|56"},{"lineNumber":43,"author":{"gitId":"snowbanana12345"},"content":"ginseng chicken|450|25|32|66"},{"lineNumber":44,"author":{"gitId":"snowbanana12345"},"content":"ramen|530|76|25|43"},{"lineNumber":45,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":46,"author":{"gitId":"snowbanana12345"},"content":"Gong Cha"},{"lineNumber":47,"author":{"gitId":"snowbanana12345"},"content":"gong cha green tea|100|0|0|0"},{"lineNumber":48,"author":{"gitId":"snowbanana12345"},"content":"gong cha ooloong tea|100|0|0|0"},{"lineNumber":49,"author":{"gitId":"snowbanana12345"},"content":"gong cha bubble tea|200|0|0|0"},{"lineNumber":50,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":51,"author":{"gitId":"snowbanana12345"},"content":"\u0026%UP"},{"lineNumber":52,"author":{"gitId":"snowbanana12345"},"content":"\u0026%STOP"},{"lineNumber":53,"author":{"gitId":"snowbanana12345"},"content":""}],"authorContributionMap":{"snowbanana12345":53}},{"path":"test.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"tikimonarch"},"content":"dietary book"}],"authorContributionMap":{"tikimonarch":1}},{"path":"text-ui-test/input.txt","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"HengFuYuen"},"content":"exit"}],"authorContributionMap":{"HengFuYuen":1}}]
