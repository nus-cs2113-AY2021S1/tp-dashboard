[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    mainClassName \u003d \"seedu.duke.DietBook\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    archiveBaseName \u003d \"dietbook\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    enableAssertions \u003d false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 2,
      "HengFuYuen": 3,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "we are an idiosyncratic and narcissistic batch of self-righteous"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "elitist who defends presumably morally questionable positions."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Also we are cheap!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Doe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Heng Fu Yuen | [Github](https://github.com/HengFuYuen) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 4,
      "HengFuYuen": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/calculator/Calculator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "package seedu.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": " * Represents a calculator of food items in foodList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "public class Calculator {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalCalorie \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalCarbohydrate \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalProtein \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    private int totalFat \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Construct a calculator taking in a foodList. Add up calories,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * carbs, protein, and fats in each food item."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @param foodList foodList containing food items to calculate."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public Calculator(ArrayList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assert foodList !\u003d null : \"the foodList should not be null.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        for (int i \u003d 0; i \u003c foodList.size(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalCalorie +\u003d foodList.get(i).getCalorie();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalCarbohydrate +\u003d foodList.get(i).getCarbohydrate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalProtein +\u003d foodList.get(i).getProtein();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "            totalFat +\u003d foodList.get(i).getFats();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total calorie."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total calorie of food items in foodList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCalorie() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalCalorie;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total carbs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total carbs of food items in foodList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateCarb() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalCarbohydrate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total protein."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total protein of food items in foodList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateProtein() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalProtein;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * Returns an int type variable containing the value of total fats."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     * @return the value of total fats of food items in foodList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    public int calculateFat() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        return totalFat;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 67
    }
  },
  {
    "path": "src/main/java/seedu/duke/DietBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.database.DataBase;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.list.FoodList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DietBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private FoodList foodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Manager manager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private DataBase dataBase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static boolean isExit \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Constructor for new DietBook."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DietBook() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        dataBase \u003d new DataBase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager \u003d new Manager(foodList, dataBase);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Main method to run the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void main(String[] args) throws FileNotFoundException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        DietBook dietBook \u003d new DietBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        dietBook.ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                String userInput \u003d dietBook.manager.readCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                Parser.parse(userInput, dietBook.manager, dietBook.ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            } catch (DietException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                dietBook.ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                System.out.println(\"__________________\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/DietException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class DietException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DietException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return getMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/Manager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.list.FoodList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.person.ActivityLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.calculator.Calculator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.database.DataBase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.person.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class Manager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private FoodList foodList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private DataBase dataBase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private Calculator calculator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private static Scanner s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Manager(FoodList foodlist, DataBase dataBase) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.name \u003d \"John Doe\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.person \u003d new Person(this.name, Gender.MALE, 0,0,0,0, ActivityLevel.LOW);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.foodList \u003d foodlist;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.dataBase \u003d dataBase;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.calculator \u003d new Calculator(foodList.getFoods());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return s.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public FoodList getFoodList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.foodList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void setPerson(String name, Gender gender, int age,int height,int orgWeight,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                          int targWeight, ActivityLevel actLvl) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.person \u003d new Person(name, gender, age, height, orgWeight, targWeight, actLvl);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public Calculator getCalculator() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.calculator;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public DataBase getDataBase() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.dataBase;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.calculator.Calculator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.list.FoodList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.person.Gender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import seedu.duke.person.ActivityLevel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_INFO \u003d \"info\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_CALCULATE \u003d \"calculate\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_DATA \u003d \"data\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String COMMAND_USERINFO \u003d \"userinfo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_CALCULATE \u003d {\"fat\", \"carbohydrate\",\"protein\", \"calorie\", \"all\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_INFO \u003d {\"g/\",\"a/\",\"h/\",\"l/\",\"o/\",\"t/\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static final String[] PARAM_ADD \u003d {\"n/\",\"x/\",\"k/\",\"f/\",\"p/\",\"c/\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Returns the command of a user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput which is user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return First word which is the command of the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private static String getCommand(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Returns the subsequent parameter after the command from the user input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return parameter part of the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private static String getCommandParam(String userInput) throws DietException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String command \u003d getCommand(userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String[] input \u003d {userInput};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (userInput.split(command).length \u003c 2"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                || userInput.split(command)[1].equals(\" \")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"☹ Error! Missing command parameters!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case COMMAND_NAME:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                return userInput.split(\" \")[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case COMMAND_CALCULATE:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                for (String param: PARAM_CALCULATE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    if (userInput.contains(param)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                        return userInput.split(\" \")[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                throw new DietException(\"☹ Incorrect nutrient type\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case COMMAND_ADD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                for (String param: PARAM_ADD) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    if (!userInput.contains(param)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                        throw new DietException(\"☹ Missing or incorrect add statement\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                return userInput.substring(userInput.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            case COMMAND_INFO:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                for (String param: PARAM_INFO) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    if (!userInput.contains(param)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                        throw new DietException(\"☹ Missing or incorrect info statement\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                return userInput.substring(userInput.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Processes the parameters for \u003ccode\u003eadd\u003c/code\u003e command of user input and adds a \u003ccode\u003eFood\u003c/code\u003e object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param foodList the FoodList object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return name of the food that was added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private static String getProcessedAdd(String userInput, FoodList foodList) throws DietException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String[] processedParam \u003d getCommandParam(userInput).split(\" \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int portionSize \u003d Integer.parseInt(processedParam[0].substring(processedParam[0].indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String foodName \u003d processedParam[1].substring(processedParam[1].indexOf(\"/\") + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int calorie \u003d Integer.parseInt(processedParam[2].substring(processedParam[2].indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int carb \u003d Integer.parseInt(processedParam[3].substring(processedParam[3].indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int protein \u003d Integer.parseInt(processedParam[4].substring(processedParam[4].indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int fat \u003d Integer.parseInt(processedParam[5].substring(processedParam[5].indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        foodList.addFood(portionSize, foodName, calorie, carb, protein, fat);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        return foodName;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Processes the parameters for \u003ccode\u003einfo\u003c/code\u003e command of user input and updates the \u003ccode\u003ePerson\u003c/code\u003e object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param manager the manager object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private static void executeProcessedInfo(String userInput, Manager manager) throws DietException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        Gender gender;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        ActivityLevel actLvl;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String[] processedParam \u003d getCommandParam(userInput).split(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String processGender \u003d processedParam[0].substring(processedParam[0].indexOf(\"/\") + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (processGender.equals(\"M\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            gender \u003d Gender.MALE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            gender \u003d Gender.FEMALE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int age \u003d Integer.parseInt(processedParam[1].substring(processedParam[1].indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int height \u003d Integer.parseInt(processedParam[2].substring(processedParam[2].indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int orgWeight \u003d Integer.parseInt(processedParam[3].substring(processedParam[3].indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        int tarWeight \u003d Integer.parseInt(processedParam[4].substring(processedParam[4].indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String processActLvl \u003d processedParam[5].substring(processedParam[5].indexOf(\"/\") + 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (processActLvl.equals(\"1\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            actLvl \u003d ActivityLevel.NONE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (processActLvl.equals(\"2\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            actLvl \u003d ActivityLevel.LOW;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (processActLvl.equals(\"3\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            actLvl \u003d ActivityLevel.MEDIUM;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else if (processActLvl.equals(\"4\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            actLvl \u003d ActivityLevel.HIGH;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            actLvl \u003d ActivityLevel.EXTREME;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        manager.setPerson(manager.getName(), gender, age, height, orgWeight, tarWeight, actLvl);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Returns the index after the command of a user input, e.g. delete 3."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @return index part of the user input."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the user input is of a wrong format."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    private static int getCommandIndex(String userInput) throws DietException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        String command \u003d getCommand(userInput);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        if (userInput.split(command).length \u003c 2 || userInput.split(command)[1].equals(\" \")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"☹ OOPS!!! Missing index of duke.task!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return Integer.parseInt(userInput.split(\" \")[1]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"☹ OOPS!!! No integer index detected!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * Makes sense of the user input and carries out the functions according to the command given."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @param userInput user input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     * @throws DietException when the program does not recognize the command given."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    public static void parse(String userInput, Manager manager, Ui ui) throws DietException, FileNotFoundException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        Calculator calculator \u003d manager.getCalculator();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        switch (getCommand(userInput)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_NAME:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            manager.setName(getCommandParam(userInput));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printAskForUserInfoMessage(manager.getName());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_EXIT:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printExitMessage(manager.getName());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            DietBook.isExit \u003d true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_LIST:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printFoodList(manager.getFoodList().toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_USERINFO:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printPersonInfo(manager.getPerson().toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_DATA:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            manager.getDataBase().init();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printDatabase(manager.getDataBase().getFoodList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_DELETE:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printDeletedFood(manager.getFoodList().delete(getCommandIndex(userInput)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_CLEAR:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printClearFoodListMessage();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            manager.getFoodList().clear();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_CALCULATE:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            if (getCommandParam(userInput).equals(\"all\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                ui.printAllNutrientIntake(calculator.calculateCalorie(), calculator.calculateCarb(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                        calculator.calculateProtein(), calculator.calculateFat());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            } else if (getCommandParam(userInput).equals(\"calorie\")) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                ui.printCalorieIntake(calculator.calculateCalorie());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            } else if (getCommandParam(userInput).equals(\"carbohydrate\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                ui.printCarbohydrateIntake(calculator.calculateCarb());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            } else if (getCommandParam(userInput).equals(\"protein\")) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                ui.printProteinIntake(calculator.calculateProtein());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                ui.printFatIntake(calculator.calculateFat());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_INFO:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            executeProcessedInfo(userInput, manager);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printTutorialMessage();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        case COMMAND_ADD:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            ui.printNewFood(getProcessedAdd(userInput, manager.getFoodList()));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "            throw new DietException(\"☹ There\u0027s no such command!\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 210
    }
  },
  {
    "path": "src/main/java/seedu/duke/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import seedu.duke.person.ActivityLevel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a text user interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eUi\u003c/code\u003e objects deals with user interaction by showing users the appropriate messages after a"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * valid command is executed or when an error occurs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eUi\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the welcome message from DietBook when it is fist booted up."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String logo \u003d \" _______  __ ______ ________ _______   ______   ______  __    __\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|   __  \\\\|  |   ___|__    __|   __  \\\\ /  __  \\\\ /  __  \\\\|  | /  /\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  |  |  |  |  |___   |  |  |  |__|  |  |  |  |  |  |  |  |/  /\"  + LINE_SEPARATOR"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  |  |  |  |   ___|  |  |  |   __  \u003c|  |  |  |  |  |  |     /\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|  |__|  |  |  |___   |  |  |  |__|  |  |__|  |  |  |  |  |\\\\  \\\\\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"|_______/|__|______|  |__|  |_______/ \\\\______/ \\\\______/|__| \\\\__\\\\\" + LINE_SEPARATOR;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(logo + LINE_SEPARATOR"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Hello! Welcome to DietBook!\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"I am Diet, your guide to using DietBook. What is your name?\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Please input in the following format:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  name YOUR_NAME\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message asking the user to input their personal information related to dieting and health"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * which includes gender, age, height, activity level, original weight and target weight."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printAskForUserInfoMessage(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name !\u003d null : \"Name should not be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name.trim().length() \u003e 0 : \"Name should not be an empty string\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Hi \" + name + \"!\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Before we get started, I would like to know about about you so that I can make more \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"accurate calculations for you :). Therefore, could you please share with me the \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"following:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your gender either F for female or M for male.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your age which is a positive integer.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your height in cm.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your original weight in kg.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your target weight in kg, or your original weight if that is also your target weight.\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + LINE_SEPARATOR"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"- Your activity level, represented by a number from 1 to 5.\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  1 \u003d \" + ActivityLevel.NONE.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  2 \u003d \" + ActivityLevel.LOW.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  3 \u003d \" + ActivityLevel.MEDIUM.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  4 \u003d \" + ActivityLevel.HIGH.getDescription() + LINE_SEPARATOR"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  5 \u003d \" + ActivityLevel.EXTREME.getDescription() + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Please input your details in the following format:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  info g/GENDER a/AGE h/HEIGHT o/ORIGINAL_WEIGHT t/TARGET_WEIGHT l/ACTIVITY_LEVEL\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                        + LINE_SEPARATOR"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Example: info g/F a/21 h/165 o/65 t/55 l/2\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message that notifies the user that DietBook has been initialised and shows a list of user"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * commands that the user can input."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printTutorialMessage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Thank you! DietBook has been initialised and you may start by entering any of the commands \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"listed below.\" + LINE_SEPARATOR + LINE_SEPARATOR"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To add a food from the database: add n/FOOD_NAME x/PORTION_SIZE\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To view all food in the database: data\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "                + \"To add you own food: add x/PORTION_SIZE n/FOOD_NAME k/CALORIE [c/CARBOHYDRATE] \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"[p/PROTEIN] [f/FAT]\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To view all food in DietBook: list\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To delete a food from DietBook: delete INDEX\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To delete all food items from the DietBook: clear\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To show user information: userinfo\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To calculate carbohydrate intake: calculate carbohydrate\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To calculate calorie intake: calculate calorie\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To calculate protein intake: calculate protein\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To calculate fat intake: calculate fat\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To calculate all nutritional intake: calculate all\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"To exit DietBook: exit\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the food specified has been added to the food list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newFood The string representation of the new food item that was added to the food list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printNewFood(String newFood) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newFood !\u003d null : \"String representation of the food that was added should not be null\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newFood.trim().length() \u003e 0 : \"String representation of the food that was added should not \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"be an empty string\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Got it! I\u0027ve added this food item:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  \" + newFood);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the food items in the food list in the order that they were added or a message stating"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * that the food list is empty if there are no food items."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param allFood The string representation of all the food items in the food list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFoodList(String allFood) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert allFood !\u003d null : \"String representation of all food in food list should not be null\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        if (allFood.trim().length() \u003c 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"DietBook is currently empty.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            print(\"Here are the food items in DietBook:\" + LINE_SEPARATOR + allFood);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the food in the database sorted by the canteen and then the store it is found."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param foodDatabase The list containing all the food items stored in the database."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDatabase(List\u003cFood\u003e foodDatabase) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert foodDatabase !\u003d null : \"Food database should not be null\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert foodDatabase.size() \u003e 0 : \"Food database should not be empty\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String allFood \u003d \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        int foodItemNumber \u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        for (Food food: foodDatabase) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            allFood +\u003d LINE_SEPARATOR + \"  \" + foodItemNumber + \".\" + food;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            foodItemNumber++;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Here are the food items in the database:\" + allFood);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints all the information related to the user."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param personInfo The user\u0027s personal information."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printPersonInfo(String personInfo) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert personInfo !\u003d null : \"Person information should not be null\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert personInfo.trim().length() \u003e 0 : \"Person information should not be an empty string\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Here is your information:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + personInfo);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of carbohydrates consumed by the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbohydrateIntake The total amount of carbohydrates of all the food in the food list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCarbohydrateIntake(int carbohydrateIntake) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert carbohydrateIntake \u003e\u003d 0 : \"Total carbohydrate intake should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Total carbohydrate intake: \" + carbohydrateIntake + \"g\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories consumed by the user."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of all the food in the food list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printCalorieIntake(int calorieIntake) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert calorieIntake \u003e\u003d 0 : \"Total calorie intake should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Total calorie intake: \" + calorieIntake + \"kcal\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of proteins consumed by the user."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of all the food in the food list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printProteinIntake(int proteinIntake) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert proteinIntake \u003e\u003d 0 : \"Total protein intake should be equals to or greater than 0 \";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Total protein intake: \" + proteinIntake + \"g\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of fats consumed by the user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of all the food in the food list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printFatIntake(int fatIntake) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert fatIntake \u003e\u003d 0 : \"Total fat intake should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Total fat intake: \" + fatIntake + \"g\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the total amount of calories, carbohydrates, fats and proteins consumed by the user."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param calorieIntake The total amount of calories of all the food in the food list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param carbohydrateIntake The total amount of carbohydrates of all the food in the food list."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param proteinIntake The total amount of proteins of all the food in the food list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param fatIntake The total amount of fats of all the food in the food list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printAllNutrientIntake(int calorieIntake, int carbohydrateIntake, int proteinIntake,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                                       int fatIntake) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert carbohydrateIntake \u003e\u003d 0 : \"Total carbohydrate intake should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert calorieIntake \u003e\u003d 0 : \"Total calorie intake should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert proteinIntake \u003e\u003d 0 : \"Total protein intake should be equals to or greater than 0 \";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert fatIntake \u003e\u003d 0 : \"Total fat intake should be equals to or greater than 0\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Total calorie intake: \" + calorieIntake + \"kcal\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Total carbohydrate intake: \" + carbohydrateIntake + \"g\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Total protein intake: \" + proteinIntake + \"g\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"Total fat intake: \" + fatIntake + \"g\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the food specified has been deleted from the food list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param deletedFood The string representation of the food that was deleted from the food list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printDeletedFood(String deletedFood) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert deletedFood !\u003d null : \"String representation of the food that was deleted should not be null\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert deletedFood.trim().length() \u003e 0 : \"String representation of the food that was deleted should\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \" not be an empty string\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Noted. I\u0027ve removed this food item:\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  \" + deletedFood);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints a message to show that the food list has been successfully cleared and is now empty."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printClearFoodListMessage() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"All previous data has been deleted...\" + LINE_SEPARATOR"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"DietBook is now empty.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an exit message when DietBook is closed."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the user."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printExitMessage(String name) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name !\u003d null : \"Name should not be null\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name.trim().length() \u003e 0 : \"Name should not be an empty string\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\"Bye \" + name + \"! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints an error message given what or where the error is."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param errorMessage Message detailing what or where the error is."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void printErrorMessage(String errorMessage) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert errorMessage !\u003d null : \"Error message should not be null\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert errorMessage.trim().length() \u003e 0 : \"Error message should not be an empty string\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        print(\":( Oh no...\" + errorMessage);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Prints the given message to the user."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param message The message to show the user."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String divider \u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                \"__________________________________________________________________________________________\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"______________________________________________________\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        System.out.println(divider + LINE_SEPARATOR"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + message + LINE_SEPARATOR"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + divider);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 270,
      "tikimonarch": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/Canteen.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Canteen {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final ArrayList\u003cStore\u003e storeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Canteen(String name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.storeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Name of the canteen is for filtering purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return name of canteen"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addStore(Store store) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        storeList.add(store);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cStore\u003e getStoreList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return storeList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/DataBase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class DataBase {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String START_SYMBOL \u003d \"\u0026%START\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String STOP_SYMBOL \u003d \"\u0026%STOP\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String UP_SYMBOL \u003d \"\u0026%UP\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String DATA_FILE_SEPERATOR \u003d \"\\\\|\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String rootDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private static final String dataFileFolder \u003d \"src\" + File.separator + \"main\" + File.separator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            + \"java\" + File.separator + \"seedu\" + File.separator + \"duke\" + File.separator + \"database\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final List\u003cCanteen\u003e canteenList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public DataBase() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.canteenList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Reads a file from the data base and puts it into the DataBase object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void init() throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileFolder \u003d rootDirectory + File.separator + dataFileFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        File dataFile \u003d new File(fileFolder + File.separator + \"data.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Scanner fileReader \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileLine;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        boolean start \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (fileReader.hasNext()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileLine \u003d fileReader.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            // ------ Check if the data base has started scanning ------"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (fileLine.equals(START_SYMBOL)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                start \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (!(start)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            if (fileLine.equals(STOP_SYMBOL)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            canteenList.add(fillCanteen(fileLine, fileReader));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function is called right after the canteen name is provided"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The very next line that the file reads is the store name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * It will turn call fillStore with that name inserted, when the function fillStore"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * finishes executing, fileRead.nextLine() can either provide a new store name or UP_SYMBOL"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * if the UP_SYMBOL is provided, the function ends and the final Canteen object is returned."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param name name of store"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileSegment the file reader with the next line being a food item or UP_SYMBOL"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Canteen objected with all it\u0027s stores loaded"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Canteen fillCanteen(String name, Scanner fileSegment) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Canteen canteen \u003d new Canteen(name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (!(fileLine.equals(UP_SYMBOL))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            canteen.addStore(fillStore(fileLine,fileSegment));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteen;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function is called right after the store name is provided."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The very next line in the file should be the first food to be added."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The function stops when it hits the line of the file that says UP_SYMBOL."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param name name of the store"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param fileSegment the Scanner object used for the init() function"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return the completed store with all the food loaded"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Store fillStore(String name, Scanner fileSegment) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Store store \u003d new Store(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        Food food;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        String[] fileData \u003d fileLine.split(DATA_FILE_SEPERATOR);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        while (!(fileLine.equals(UP_SYMBOL))) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            food \u003d new Food(fileData[0], Integer.parseInt(fileData[1]),Integer.parseInt(fileData[2]),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            Integer.parseInt(fileData[3]),Integer.parseInt(fileData[4]));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            store.addFood(food);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileLine \u003d fileSegment.nextLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            fileData \u003d fileLine.split(DATA_FILE_SEPERATOR);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Debugging function prints out all contents."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void printAllData() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Printing out all data\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        for (Canteen canteen : canteenList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Canteeh : \" + canteen.getName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            for (Store store : canteen.getStoreList()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                System.out.println(\"Store : \" + store.getName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                for (Food food : store.getFoodList()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    System.out.println(food);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"Finished Printing out all data\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    // -------- Search functions --------"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This method searchs the whole data base and returns the first food item whose name contains the provided string."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * ( CASE SENSITIVE ! )"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food part of the name of the food"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no food contains the name provided"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food searchFoodByName(String food) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getName().contains(food)).findFirst().orElseThrow();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This method searchs the whole data base and returns all of the food whose name contains the provided string."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food part of the name of the food e.g. chicken"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return data stream of all food items"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodContainingName(String food) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getName().contains(food));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Search for the first food that contains the string provided in the first store which matchs the store"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * string provided."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food partial name of the food"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param store partial name of the store"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no food contains the name provided"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food searchFoodByNameByStore(String food, String store) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return searchAllFoodByStore(store)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(food))"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a stream of all the food in the first store that contains the given string."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param store partial name of the store"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return food stream"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no there is no store"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodByStore(String store) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getStoreList().stream())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(store))"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .getFoodList()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .stream();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a stream of all the food in all stores that contains the given string."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param store partial name of the store"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return  food stream"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodOfAllStores(String store) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getStoreList().stream())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(store))"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getFoodList().stream());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns the first food that contains the food String provided that is in the first canteen that contains the"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * canteen String provided."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food partial name of the food"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param canteen partial name of the canteen"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food object"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @throws NoSuchElementException if no food contains the name provided"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food searchFoodByNameByCanteen(String food, String canteen) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return searchAllFoodByNameByCanteen(food, canteen)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns all food that contains the provided food name in the first canteen that matchs the canteen name."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param food partial name of the food"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param canteen partial name of the canteen"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return Food Stream"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodByNameByCanteen(String food, String canteen) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(canteen))"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .orElseThrow()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .getStoreList()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getFoodList().stream())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .filter(x -\u003e x.getName().contains(food));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns a stream of food whose calorie is below the provided amount."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param calorie the maximum calorie of the food"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return food stream"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodBelowCalorie(int calorie) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getCalorie() \u003c calorie);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Returns all food within the calorie range."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param minCalorie minimum calories"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @param maxCalorie maxinum calories"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return food stream"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e searchAllFoodInCalorieRange(int minCalorie, int maxCalorie) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().filter(x -\u003e x.getCalorie() \u003c\u003d maxCalorie \u0026\u0026 x.getCalorie() \u003e\u003d minCalorie);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * Provides a data stream of all the food in the data base."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return a food stream"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Stream\u003cFood\u003e foodStream() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return canteenList.stream()"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getStoreList().stream())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                .flatMap(x -\u003e x.getFoodList().stream());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodStream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 259
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/Store.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Store {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final ArrayList\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Store(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * The name of the store will be used for filtering purposes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * @return store name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     * This function should only be called when we initialize the data base from the text file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public List\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return foodList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/database/data.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#####################################################################"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    3 LEVEL DATA BASE                                              #"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Canteen -----\u003e Store ------\u003e Food                              #"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Commands :                                                     #"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%START : start reading data from the data base                #"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%STOP : stop reading data from the data base                  #"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%UP    : goes down 1 level e.g. Canteen ---\u003e Store            #"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%DOWN    : goes down 1 level e.g. Canteen ---\u003e Store          #"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    \u0026%ADD format : adds the item with the given format             #"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#                                                                   #"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Comments : any line that starts with # is ignored              #"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#                                                                   #"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Canteen format : {name}                                        #"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Store format : {name}                                          #"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#    Food format : {name}|{Calorie}|{Carb}|{Protein}|{Fat}          #"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#####################################################################"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "######################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   Version 0.1 :                                                    #"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   there is only UP, once a store or canteen is                     #"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#  specified we automatically go down 1 level , for this version     #"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   there is no going out of a store and then coming back to add more#"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "#   Units : Calorie : kcal  : Carbs : g Protein : g : Fats : g       #"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "######################################################################"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%START"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Science canteen"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Halal Mini Wok"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Prawn Mee Soup(Dry)(Large)|490|0|0|0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Prawn Mee Soup(Dry)(Small)|390|0|0|0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Fried Hokkien Prawn Mee(Large)|470|0|0|0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Fried Hokkien Prawn Mee(Small)|350|0|0|0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Clay Pot Chicken|440|0|0|0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Black Pepper Chicken|490|0|0|0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ayam Penyet"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ayam Penyet Set|699|0|0|0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Steamed Chicken Set |475|0|0|0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Ikan Grouper Penyet Set|669|0|0|0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Michelin Star Restaurant"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Bouillabaisse with cock crab and poached lobster|520|45|35|56"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Chicken wings with Reblochon pomme purée|450|25|32|66"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "Sea bass with prawn tortellini, fennel purée and white wine sauce|530|76|25|43"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%UP"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "\u0026%STOP"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 48
    }
  },
  {
    "path": "src/main/java/seedu/duke/food/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.duke.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Constructor of the Food class"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * Store information regarding a food item: name, number of calories in kcal, amount of carbohydrate in grams,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " * amount of protein in grams, amount of fats in grams."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int calorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int carbohydrate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int protein;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private final int fats;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public Food(String name, int calorie, int carbohydrate, int protein, int fats) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.carbohydrate \u003d carbohydrate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.protein \u003d protein;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        this.fats \u003d fats;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getFats() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return fats;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getCalorie() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getCarbohydrate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return carbohydrate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public int getProtein() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return protein;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        return name + \" | calorie : \" + calorie + \" | protein : \" + protein + \" | carbohydrate : \" + carbohydrate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                + \" | fats : \" + fats;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/list/FoodEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "package seedu.duke.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Data class to store both serving sizes and a food object as a single object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodEntry {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private int portionSize;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private Food food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public FoodEntry(int portionSize, Food food) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.portionSize \u003d portionSize;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public FoodEntry(int portionSize, String name, int calorie, "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            int carbohydrate, int protein, int fat) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.portionSize \u003d portionSize;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.food \u003d new Food(name, calorie, carbohydrate, protein, fat);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public Food getFood() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public int getPortionSize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return portionSize;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return String.format(\"%s -- (%s)\", food.toString(), portionSize);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mxksowie": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/list/FoodList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "package seedu.duke.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Wrapper class for the implementation of foodlist as an arraylist of foodEntry objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Foodlist does not return its ArrayList nor foodEntry objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * This is a stateful object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    private ArrayList\u003cFoodEntry\u003e foodEntries;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public FoodList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.foodEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected FoodList(ArrayList\u003cFoodEntry\u003e entries) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.foodEntries \u003d entries;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Adds food of portion size directly into the foodlist as an entry."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * When date functionality is added, this method will need to be overhauled."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * The adding feature will be largely pushed to FoodListManager (to figure out dates)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param portionSize integer to designate number of servings"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param food food object to be added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return string representation of the food object added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFood(int portionSize, Food food) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodEntry toAdd \u003d new FoodEntry(portionSize, food);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        foodEntries.add(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return toAdd.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFood(int portionSize, String name, int calorie, "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            int carbohydrate, int protein, int fat) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodEntry toAdd \u003d new FoodEntry(portionSize, name, calorie, carbohydrate, protein, fat);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        foodEntries.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return toAdd.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Food database search functionality support."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Not expected to function. Added for completeness."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Currently just throws a not found exception when called in this manner."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param portionSize integer to designate number of servings"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @param name food object to be added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return string representation of the food object added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @throws FoodNotFoundException custom exception to indicate search for food in database failed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String addFood(int portionSize, String name) throws FoodNotFoundException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String delete(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            return FoodListManager.deleteEntry(foodEntries, index).toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public boolean clear() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        this.foodEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Obtain the food objects in Foodlist as an ArrayList."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * For other classes that wish to operate on the Food items directly."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * @return Arraylist of ordered Food objects in Foodlist\u0027s foodEntries."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public ArrayList\u003cFood\u003e getFoods() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToFoods(foodEntries);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return FoodListManager.listToString(foodEntries);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mxksowie": 85
    }
  },
  {
    "path": "src/main/java/seedu/duke/list/FoodListManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "package seedu.duke.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Class with static methods to execute \"complex commands\" on FoodList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * This class handles methods that extend beyond the simple function of an arraylist"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * Class contains static methods with logic beyond adding, removing, and instantiating new lists"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " * This class may be used to support functional programming by merging these function into functors"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodListManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Internal helper method to convert the items in the arraylist into enumed strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Primarily used to obtain String representations of the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static String listToString(ArrayList\u003cFoodEntry\u003e list) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        String listString \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            FoodEntry entry \u003d list.get(i - 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            listString +\u003d i + \". \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "                    + entry.toString() + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return listString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Similar to listToString."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     * Extracts only the Food component from FoodEntries."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static ArrayList\u003cFood\u003e listToFoods(ArrayList\u003cFoodEntry\u003e list) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        ArrayList\u003cFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        list.forEach(x -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            foods.add(x.getFood());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    protected static Food deleteEntry(ArrayList\u003cFoodEntry\u003e list, int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        int indexToDelete \u003d index - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            return list.remove(indexToDelete).getFood();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mxksowie": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/list/FoodNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "package seedu.duke.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "public class FoodNotFoundException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mxksowie": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/person/ActivityLevel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.duke.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents the physical activity level of a person or the amount of exercise a person engages in."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * An \u003ccode\u003eActivityLevel\u003c/code\u003e has a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public enum ActivityLevel {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    NONE(\"You hardly engage in any exercise or have a job that requires little to no physical \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"activity.\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    LOW(\"You engage in some form of light exercise or have a job that requires some \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"physical activity.\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    MEDIUM(\"You engage in moderate amount of exercise or have a job that requires moderate \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \"physical activity.\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    HIGH(\"You engage in vigorous exercise or have a physically demanding job.\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    EXTREME(\"You engage in extremely vigorous exercise or have an extremely physically demanding\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "            + \" job.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs an \u003ccode\u003eActivityLevel\u003c/code\u003e given the description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description The description of the activity level."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    ActivityLevel(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the description of the activity level."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The description of the activity level."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/person/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.duke.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents the gender of a person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003eGender\u003c/code\u003e has a description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    FEMALE(\"female\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    MALE(\"male\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003eGender\u003c/code\u003e given the description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param description The description of the gender."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    Gender(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the description of the gender."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The description of the gender."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.duke.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * Represents a Person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " * A \u003ccode\u003ePerson\u003c/code\u003e has a name, gender, age, height, certain activity level, original and desired weight."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The height of the person in cm */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int height;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The original weight of the person in kg */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int originalWeight;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /* The target weight of the person in kg */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int targetWeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private int age;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private ActivityLevel activityLevel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Constructs a \u003ccode\u003ePerson\u003c/code\u003e with the given name, gender, age, height, original weight, target"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * weight and activity level."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param name The name of the person."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param gender The gender of the person."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param age The age of the person."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param height The height of the person."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param originalWeight The original weight of the person."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param targetWeight The target/desired weight that the person wants to achieve."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param activityLevel The activity level of the person or in other words, the amount of exercise the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *     person engages in."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Person(String name, Gender gender, int age, int height, int originalWeight, int targetWeight,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                  ActivityLevel activityLevel) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name !\u003d null : \"Name of person should not be null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert name.trim().length() \u003e 0 : \"Name of person should not be an empty string\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert gender !\u003d null : \"Gender of person should not be null\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert age \u003e 0 : \"Age of person should be greater than 0\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert age \u003c 125 : \"Age of person should be less than 125\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert height \u003e 0 : \"Height of person should be greater than 0\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert height \u003c 273 : \"Height of person should be less than 273\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert originalWeight \u003e 0 : \"Original weight of person should be greater than 0\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert originalWeight \u003c 443 : \"Original weight of person should be less than 443\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert targetWeight \u003e 0 : \"Target weight of person should be greater than 0\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert targetWeight \u003c 443 : \"Target weight of person should be less than 443\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert activityLevel !\u003d null : \"Activity level of person should not be null\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.name \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.originalWeight \u003d originalWeight;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.targetWeight \u003d targetWeight;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        this.activityLevel \u003d activityLevel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the name of the person."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The name of the person."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the name of the person to the new name given."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newName The new/revised name of the person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setName(String newName) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newName !\u003d null : \"The revised name of person should not be null\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newName.trim().length() \u003e 0 : \"The revised name of person should not be an empty string\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        name \u003d newName.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the gender of the person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The gender of the person."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the gender of the person to the new gender given."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newGender The new/revised gender of the person."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setGender(Gender newGender) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newGender !\u003d null : \"The revised gender of person should not be null\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        gender \u003d newGender;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the age of the person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The age of the person."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the age of the person to the new age that is given."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newAge The new/revised age of the person."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setAge(int newAge) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newAge \u003e 0 : \"The revised age of person should be greater than 0\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newAge \u003c 125 : \"The revised age of person should be lesser than 125\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        age \u003d newAge;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the height of the person."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The height of the person."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the height of the person to the new height given."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newHeight The new/revised height of the person."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setHeight(int newHeight) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newHeight \u003e 0 : \"The revised height of person should be greater than 0\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newHeight \u003c 273 : \"The revised height of person should be lesser than 273\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        height \u003d newHeight;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the original weight of the person."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The original weight of the person."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getOriginalWeight() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return originalWeight;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the original weight of the person to the new original weight given."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newOriginalWeight The new/revised original weight of the person."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setOriginalWeight(int newOriginalWeight) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newOriginalWeight \u003e 0 : \"The revised original weight of person should be greater than 0\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newOriginalWeight \u003c 443 : \"The revised original weight of person should be lesser than 443\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        originalWeight \u003d newOriginalWeight;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the target weight the person the person wants to achieve."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The target weight the person wants to achieve."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public int getTargetWeight() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return targetWeight;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the target weight of the person to the new target weight given."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newTargetWeight The new/revised target weight of the person."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setTargetWeight(int newTargetWeight) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newTargetWeight \u003e 0 : \"The revised target weight of person should be greater than 0\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newTargetWeight \u003c 443 : \"The revised target weight of person should be lesser than 443\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        targetWeight \u003d newTargetWeight;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns the activity level of the person."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return The activity level of the person."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public ActivityLevel getActivityLevel() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return activityLevel;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Sets the activity level of the person to the new activity level given."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @param newActivityLevel The new/revised activity level of the person."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setActivityLevel(ActivityLevel newActivityLevel) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assert newActivityLevel !\u003d null : \"The revised activity level of person should not be null\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        activityLevel \u003d newActivityLevel;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Returns a string representation of all information related to the user."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * Information includes name, gender, age, height, original weight, target weight and activity level."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     * @return A string representation of all information related to the user."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        String userInformation \u003d \"  Name: \" + name + System.lineSeparator()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Gender: \" + gender.getDescription() + System.lineSeparator()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Age: \" + age + System.lineSeparator()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Height: \" + height + \"cm\" + System.lineSeparator()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Original weight: \" + originalWeight + \"kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Target weight: \" + targetWeight + \"kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Activity level: \" + activityLevel.getDescription();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        return userInformation;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 212
    }
  },
  {
    "path": "src/test/java/seedu/calculator/CalculatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "package seedu.calculator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "class CalculatorTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateCalorie_foodListOfThreeItems_sumOfCalorie() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(666 + 150 + 290, calculator.calculateCalorie());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateCarb_foodListOfThreeItems_sumOfCarb() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(55 + 16, calculator.calculateCarb());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateProtein_foodListOfThreeItems_sumOfProtein() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(30 + 16, calculator.calculateProtein());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    void calculateFat_foodListOfThreeItems_sumOfFat() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"chicken rice\", 666, 55, 30, 0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"pancake\", 150, 16, 0, 0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        foodList.add(new Food(\"bao\", 290, 0, 16, 0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        Calculator calculator \u003d new Calculator(foodList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "        assertEquals(0, calculator.calculateFat());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuqiaoluolong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuqiaoluolong": 53
    }
  },
  {
    "path": "src/test/java/seedu/duke/FoodListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import seedu.duke.list.FoodList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mxksowie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "class FoodListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        Food food \u003d new Food(\"Kobe Beef\", 480,50,40,30);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        FoodList foodList \u003d new FoodList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList.addFood(3, food));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList.addFood(2, \"Sashimi\", 100, 0, 30, 10));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList.delete(1));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "        System.out.println(foodList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mxksowie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mxksowie": 19
    }
  },
  {
    "path": "src/test/java/seedu/duke/database/DataBaseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.duke.database;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "class DataBaseTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        DataBase database \u003d new DataBase();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.init();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ----- Print everything in the data base -----"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.printAllData();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- Using stream version to print -----"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"------------ printing using food stream ------------\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.foodStream().forEach(System.out::println);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- Printing out as list -----"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"---------- printing food using list --------------\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.getFoodList().forEach(System.out::println);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search food by name test -----"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- testing the searchFoodByName function -------\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Prawn  ## OutPut: \" + database.searchFoodByName(\"Prawn\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Mee ## OutPut: \" + database.searchFoodByName(\"Mee\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster ## OutPut: \" + database.searchFoodByName(\"lobster\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Prawn ## OutPut: \" + database.searchFoodByName(\"koala bears\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"No such food found! \" + e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search food by store name test ----"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"------- testing the search food by store and by name function --------\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Fried , Halal Mini Wok ## OutPut: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"Fried\", \"Halal Mini Wok\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Chicken , Halal Mini Wok ## OutPut: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"Chicken\", \"Halal Mini Wok\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Chicken , Ayam Penyet ## OutPut: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"Chicken\", \"Ayam Penyet\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster , Michelin ## OutPut: \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"lobster\", \"Michelin\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: fish , Halal Mini Wok ## OutPut: \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByStore(\"fish\", \"Halal Mini Wok\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"No such food found! \" + e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search all food by store -----"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- testing the search ALL food by store and by name function --------\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Halal Mini Wok -------- \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Halal Mini Wok\").forEach(System.out::println);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Ayam Penyet -------- \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Ayam Penyet\").forEach(System.out::println);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Michelin -------- \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Michelin\").forEach(System.out::println);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- Input: Gordan Ramsey\u0027s restaurant -------- \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            database.searchAllFoodByStore(\"Gordon Ramsey\u0027s restaurant\").forEach(System.out::println);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"There is no such store! \" + e);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search food by Name by canteen ------"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"------- testing the search food by canteen and by name function --------\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Fried , Science ## OutPut: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"Fried\", \"Science\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: Chicken , Science ## OutPut: \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"Chicken\", \"Science\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster , Science ## OutPut: \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"lobster\", \"Science\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"Input: lobster , Raffles Hotel Suite ## OutPut: \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "                    + database.searchFoodByNameByCanteen(\"lobster\", \"Raffles Hotel Suite\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "            System.out.println(\"There is either no such canteen or no such food in that canteen!\" + e);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        // ---- search all food below calorie ------"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\"------- testing the search food below calorie function --------\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\" ---- Input : 400\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.searchAllFoodBelowCalorie(400).forEach(System.out::println);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\" ---- Input : 200\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.searchAllFoodBelowCalorie(200).forEach(System.out::println);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        System.out.println(\" ---- Input : 3428\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        database.searchAllFoodBelowCalorie(3428).forEach(System.out::println);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 95
    }
  },
  {
    "path": "src/test/java/seedu/duke/food/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "package seedu.duke.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import seedu.duke.food.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    private Food testFood;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        testFood \u003d new Food(\"Kobe Beef\", 480,50,40,30);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    public void footTest() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(480, testFood.getCalorie());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(50, testFood.getCarbohydrate());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(40, testFood.getProtein());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "        assertEquals(30, testFood.getFats());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "snowbanana12345"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "snowbanana12345": 26
    }
  },
  {
    "path": "src/test/java/seedu/duke/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "package seedu.duke.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "class PersonTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person \u003d new Person(\"Jack\", Gender.MALE,21,165,75,65,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                ActivityLevel.LOW);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getName_person_returnsName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"Jack\", person.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setName_personWithNewName_returnNewName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setName(\"Jackie\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"Jackie\", person.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void gender_person_returnsGender() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(Gender.MALE, person.getGender());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void gender_personWithNewGender_returnsNewGender() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setGender(Gender.FEMALE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(Gender.FEMALE, person.getGender());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getAge_person_returnsAge() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(21, person.getAge());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setAge_personWithNewAge_returnsNewAge() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setAge(24);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(24, person.getAge());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getHeight_person_returnsHeight() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(165, person.getHeight());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setHeight_personWithNewHeight_returnsNewHeight() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setHeight(175);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(175, person.getHeight());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getOriginalWeight_person_returnsOriginalWeight() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(75, person.getOriginalWeight());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setOriginalWeight_personWithNewOriginalWeight_returnsNewOriginalWeight() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setOriginalWeight(70);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(70, person.getOriginalWeight());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getTargetWeight_person_returnsTargetWeight() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(65, person.getTargetWeight());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setTargetWeight_personWithNewTargetWeight_returnsNewTargetWeight() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setTargetWeight(68);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(68, person.getTargetWeight());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void getActivityLevel_person_returnsActivityLevel() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(ActivityLevel.LOW, person.getActivityLevel());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void setActivityLevel_personWithNewActivityLevel_returnsNewActivityLevel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        person.setActivityLevel(ActivityLevel.HIGH);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(ActivityLevel.HIGH, person.getActivityLevel());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    void toString_person_returnsStringRepresentationOfPersonInformation() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "        assertEquals(\"  Name: Jack\" + System.lineSeparator()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Gender: male\" + System.lineSeparator()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Age: 21\" + System.lineSeparator()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Height: 165cm\" + System.lineSeparator()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Original weight: 75kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Target weight: 65kg\" + System.lineSeparator()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"  Activity level: You engage in some form of light exercise or have a job that requires \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "                + \"some physical activity.\", person.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HengFuYuen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HengFuYuen": 106
    }
  },
  {
    "path": "test.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tikimonarch"
        },
        "content": "dietary book"
      }
    ],
    "authorContributionMap": {
      "tikimonarch": 1
    }
  }
]
