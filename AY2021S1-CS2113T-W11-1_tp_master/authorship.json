[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    implementation(group: \u0027org.fusesource.jansi\u0027, name: \u0027jansi\u0027, version: \u00271.18\u0027)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    implementation(group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1.1\u0027)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    mainClassName \u003d \"seedu.zoomaster.Zoomaster\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    archiveBaseName \u003d \"zoomaster\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 6,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "![](https://raw.githubusercontent.com/Speedweener/ip/master/docs/images/jusuf.png) | Jusuf Nathanael | [Github](https://github.com/jusufnathanael) | [Portfolio](./team/jusufnathanael.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "![](https://raw.githubusercontent.com/Speedweener/ip/master/docs/images/zhanhao.png) | Kwek Zhan Hao | [Github](https://github.com/Speedweener) | [Portfolio](./team/Speedweener.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://raw.githubusercontent.com/Speedweener/ip/master/docs/images/yushing.png) | Tan Yu Shing | [TYS0n1](https://github.com/TYS0n1) | [Portfolio](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/team/tys0n1.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "![](https://raw.githubusercontent.com/Speedweener/ip/master/docs/images/xingrong.png) | Tey Xing Rong | [xingrong123](https://github.com/xingrong123) | [Portfolio](./team/xingrong123.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "![](https://raw.githubusercontent.com/Speedweener/ip/master/docs/images/francisco..png) | Francisco Chensan | [Github](https://github.com/) | [Portfolio](./team/fchensan.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 2,
      "jusufnathanael": 4,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "# **Developer Guide**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Speedweener"
        },
        "content": " ![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/zoomasterwhitebg.png) \u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Introduction to Zoomaster"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Zoomaster is a Java application for the Command Line. It provides a simple and intuitive way to store Zoom links for "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "online classes and other useful links for the lesson at hand.\u003cbr/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Zoomaster can also intelligently determine the current lesson users are having, allowing them to launch the correct "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "links quickly and elegantly from the command line."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Target audience"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "This developer guide is for experienced programmers with knowledge of object oriented programming."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Purpose"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "This guide seeks to introduce to you the design and implementation of Zoomaster features. It will share our reasoning "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "behind the way we implemented different features and its logic flow. With this, you would be able to tweak and further "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "develop Zoomaster without confusion or introduce unwanted bugs to the App."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Scope"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "First, the guide will help you set up Zoomaster in its current iteration so that you can familiarise yourself with it. \u003cbr/\u003e "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Secondly, the guide will explain the design of Zoomaster and its various components. \u003cbr/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Next, the guide will showcase how we implement various features into Zoomaster with "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "step by step explanations and diagram. \u003cbr/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Finally, the guide has several appendixes explaining the scope of the product, user stories, non-function requirements, "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "glossary and instructions for manual testing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Navigation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "You can navigate the guide via the table of contents below. \u003cbr/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Otherwise, each major section is distinguished by a bold header and underline. Sub-sections are of a smaller font than "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "major sections but still larger than normal paragraphs to distinguish them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Table of contents"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [Getting Started](#getting-started)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [Design](#design)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Architecture](#architecture)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Initialization](#initialization)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [UI component](#ui-component)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Parser component](#parser)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Commands component](#command)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Temporary list component](#temp-list)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Storage component](#storage-component)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Local files component](#local-files)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [Implementation](#implementation)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Bookmark and Timetable modes feature](#mode)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Show timetable feature](#show-timetable)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Add Module and Slot features](#add-module-slot)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Validate Modules feature](#nusmodulelist)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Extended HelpCommand feature](#extendedhelpcommand)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Edit Slot feature](#edit-slot)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Show Settings Feature](#showsettings)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Set Settings Feature](#setsettings)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Planner Feature](#planner)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [Appendix A: Product Scope](#appendix-a)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [Appendix B: User Stories](#appendix-b)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [Appendix C: Non-Functional Requirements](#appendix-c)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [Appendix D: Glossary](#appendix-d)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [Appendix E: Instructions for manual testing](#appendix-e)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Basics](#appendix-e-basic)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [Advanced](#appendix-e-advanced)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"getting-started\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## **Getting Started**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "First, download the source code and jar file of Zoomaster [here](https://github.com/AY2021S1-CS2113T-W11-1/tp/releases)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Next, follow the startup procedures as stated in the "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "[User Guide](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/UserGuide.md) and familiarize yourself with "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Zoomaster\u0027s features."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Now, you can dive into the source code and explore the inner workings of Zoomaster with this guide."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"design\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "This section explains the design behind Zoomaster by first sharing the grand architecture of the code "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "then its various components."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"architecture\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The figure below shows a high-level design for the architecture of Zoomaster. \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/architecture.png) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003e Figure 1.1 Architecture diagram of Zoomaster \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Our Program can be split up into 7 components"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Initialization"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* User Interface"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Parser"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Commands"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Lists"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Storage"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Local Files"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "These components interact with each other as shown in Figure 1.1 to execute the functionalities of Zoomaster."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"initialization\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Initialization"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The diagram below shows a class-level diagram for Zoomaster. \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/initial.png) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003e Figure 1.2 Class diagram of Initialization \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "**API**:`Zoomaster.java`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "The Initialization component is responsible for setting up Zoomaster for it to be used by users. "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "It consists of `Zoomaster`, `Ui`, `Storage`, `BookmarkList`, `Timetable` and `Module` classes."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Its main roles are:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Retrieving bookmark, timetable and planner lists from storage if it exists."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Set the list of Modules for Zoomaster "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Initializes the User Interface object, as well as the 3 Storage  objects for `BookmarkList`, `Timetable` and `Planner`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"ui-component\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### User Interface component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "**API**:`Ui.java`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The UI component is responsible for all visual output to the User from the app. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The only class carrying out the component\u0027s function is the `Ui` class."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "It utilises the `Jansi` library to enable the usage of ANSI escape codes to format the console, "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "allowing the app to output in colour. \u003cbr/\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The UI also receives input from the User using a `Scanner` object. It returns the input as a String "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "to the main function. \u003cbr/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "In addition, the UI contains the different exceptions and error messages which can be displayed. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "When a particular exception is thrown (eg. **UNKNOWN_INPUT**), the corresponding method is called in UI to "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "print out the error message (**printUnknownInputMessage()**). "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Its main roles are:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Receiving user commands and returning it to the Main function."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Prints visual output in the console for the User"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"parser\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Parser component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://github.com/TYS0n1/tp/blob/master/docs/diagrams/parser%20class%20diagram%20new.png?raw\u003dtrue) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003e Figure 1.3 Class diagram of Parser \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The Parser component is responsible for decoding the user\u0027s input and telling the Main function "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "which command to execute."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "It also contains the **programMode** which indicates which mode the program currently is in."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "It initializes the different commands according to which mode the program currently is in."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "It consists of `Parser` and the Command interface classes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Its main roles are:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Decoding users commands and returning the correct command to the Main function to be executed"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Catch errors in users commands and return the appropriate exception to the Main function"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Storing the mode Zoomaster is in (Bookmark/Timetable/Planner)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The interaction of the Parser component with the Command component is covered in greater detail below. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"command\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Commands component"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Figures 1.4 to 1.7 below show the class-level diagrams for Parser and Command for each different mode. \u003cbr/\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The diagrams are colour coded as such:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Orange -\u003e Global"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Green -\u003e Bookmark Mode"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Blue -\u003e Timetable Mode"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Red -\u003e Planner Mode"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/parsercommand/mode0.png) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003e Figure 1.4 Class diagram of Commands valid in all modes (Global) \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/parsercommand/mode1.png) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003e Figure 1.5 Class diagram of Commands valid in Bookmark Mode \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/parsercommand/mode2.png) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003e Figure 1.6 Class diagram of Commands valid in Timetable Mode\u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/parsercommand/mode3.png) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003e Figure 1.7 Class diagram of Commands valid in Planner Mode\u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The Command component is responsible for carrying out the functions of Zoomaster."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Usually, a successful command will return a message to indicate a successful execution or updates to Zoomaster. "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Otherwise, it will create error messages for the Ui to display to the users."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "It consists of `ChangeModeCommand`, `ClearCommand`,  `ExitCommand`,  `HelpCommand`,   `LaunchNowCommand`, "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fchensan"
        },
        "content": "`ShowSettingsCommand`, `SetSettingsCommand`, `AddBookmarkCommand`,   `DeleteBookmarkCommand`,  `FindBookmarkCommand`,  "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fchensan"
        },
        "content": "`LaunchBookmarkCommand`, `ShowBookmarkCommand`, `AddTimetableCommand`, `DeleteTimetableCommand`, `ShowTimetableCommand`, "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fchensan"
        },
        "content": "`EditTimetableCommand`, `LaunchTimetableCommand`, `AddMeetingCommand`, `LoadPlannerCommand` and "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fchensan"
        },
        "content": "`SavePlannerCommand` classes."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Its main roles are:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Execute commands to carry out functionalities of Zoomaster"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Signal to Ui successful execution of commands"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Create messages for Ui on updates to Zoomaster"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Catch errors or conflicts in users commands and throw the appropriate exception to the Main function"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"temp-list\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Lists component"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The Temp List component is responsible for holding on to temporary data of Zoomaster to be used by Commands."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "It consists of `BookmarkList`, `SlotList`, `Module` and `Timetable`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Its main role is:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Hold on to temporary data about Zoomaster"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"storage\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The Storage component is responsible for saving and retrieving Zoomaster data to and from an external text file."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "It uses `Gson` library to encode temporary data from Temp List into an HTML format. Then it writes the encoded data to "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "an external text file. On the other hand, it decodes the HTML format from the external text file and updates the "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Temp List of Zoomaster."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The only class carrying out the component\u0027s function is the `Storage` class."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Its main roles are:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Store Zoomaster data to an external text file for long term storage"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Retrieve Zoomaster data on Initialization"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Return error messages to the users during extraction or writing"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"local-files\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Local Files component"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The Local Files component is where Zoomaster\u0027s long term storage of data is kept"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Its main role is:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Store Zoomaster data"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "In addition, the file path to the directory containing the jar file is obtained by the getJarFilePath() method in `Zoomaster`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The files are saved using this file path, allowing them to be saved in the same directory as the jar file. This allows for more convenient running of Zoomaster, as the user does not have to switch to the same directory of the jar file when running the application."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "This section explains the implementations of Zoomaster\u0027s features. It goes through the step-by-step process, "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "expected outcomes of each feature and the design considerations."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003c!-- @@author TYS0n1 --\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"mode\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Bookmark, Timetable and Planner modes feature (Tan Yu Shing)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Zoomaster has three modes for users to interact in. First, bookmark mode has the list of bookmarks with links to online resources. "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Secondly, timetable mode has a list of timetable slots. Lastly, planner mode which helps users plan their timetable. "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "To simplify input commands for users, all lists have the same keywords for adding, deleting, and showing items in the lists. "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Hence, separating both lists into different modes allows both lists to access the same keywords without causing conflicts when parsing commands."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "In this section, I will refer to *input command* and *input parameter*. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* *input command* refers to the string of characters the user has typed into the command line and entered into the program. Eg. \"mode bookmark\" is an *input command* \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* *input parameter* refers to the string of characters the proceeds after the identifier string of the *input command*. "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Eg. \"mode bookmark\", \"mode\" is the identifier string of the command and \"bookmark\" is the *input parameter*."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "This feature extends Command class with a way to toggle between different modes of Zoomaster. The integer variable used to control the modes is stored in the Parser class called \"programMode\". Additionally, it implements the following operation:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* getModeFromCommand() - Decodes the command sent by the users to figure out which mode the user wants to move to."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Given below is a sequence diagram of how changing between modes occur."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://github.com/TYS0n1/tp/blob/master/docs/diagrams/ChangeModeCommand%20seq%20dia%20new1.png?raw\u003dtrue) \u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003eFigure 2.01 sequence diagram for ChangeModeCommand\u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. When Zoomaster gets an input command from the user to change modes, a new ChangeModeCommand object is created."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "2. The ChangeModeCommand passes the input command through getModeFromCommand() function to decode the mode the user wishes to change to."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "3. Zoomaster now executes the command and changes to the respective mode. "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "4. If an invalid mode was given by the user or if the input field was empty, the execute function throws an exception and tells the user valid modes for Zoomaster."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://github.com/TYS0n1/tp/blob/master/docs/diagrams/activity%20diagram%20change%20mode%20command%20new.png?raw\u003dtrue) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003e Figure 2.02 Activity diagram for ChangeModeCommand \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. First, the program checks if the length of the input command is more than 5. Any input command of length less than 5 is"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "an invalid mode command. This is because mode command requires an input parameter separated by a space hence \"mode \" or \"mode1\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "are examples of invalid mode commands with a length of less than 5. If this is so, it throws an invalid mode message to tell the"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "user the valid modes of Zoomaster. Else, it continues to the next step."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "2. Secondly, the program checks if the input parameter corresponds to a valid mode of Zoomaster."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "3. If the input parameter corresponds to \"bookmark\", the program changes the mode of Zoomaster to the bookmark mode."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "4. If the input parameter corresponds to \"timetable\", the program changes the mode of Zoomaster to the timetable mode."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "5. If the input parameter corresponds to \"planner\", the program changes the mode of Zoomaster to the planner mode."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "6. If the input parameter does not correspond to any of the valid modes of Zoomaster, it throws an invalid mode message to tell the"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "user the valid modes of Zoomaster."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "##### Aspect: How to store programMode variable for security"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* **Alternative 1 (Current choice):** No security"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Pros: Easy to implement"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Cons: May introduce errors to the App if the variable is changed outside of ChangeModeCommand class objects."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* **Alternative 2:** Private variable and implement mode changing inside Parser class"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Pros: Ensure the App does not change modes outside commands to change modes."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Cons: Reduces OOP standard of code by decoupling ChangeModeCommand from Command class and increases code complexity."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"show-timetable\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Show timetable feature (Tan Yu Shing)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Users can see the timetable they have created in the App using the **show** command. "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "They can see the complete timetable from monday to sunday, the timetable of a specified day of the week or the timetable today. "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The commands for these are **show**, **show {DAY}** eg. **show mon**, **show tue** and **show today**. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "In this section, I will refer to *input command* and *input parameter*. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* *input command* refers to the string of characters the user has typed into the command line and entered into the program. "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Eg. \"show today\" is an *input command* \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* *input parameter* refers to the string of characters the proceeds after the identifier string of the *input command*. "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Eg. \"show sun\", \"show\" is the identifier string of the command and \"sun\" is the *input parameter*."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "This feature extends the command class. It is a simple retrieval algorithm which firstly gets data from the Timetable class. Then sorts it by timing and add additional indicators for the users. And finally, prints it out using the User Interface. \u003c/br\u003e It uses SlotContainer class sortSlotsByTime method to help sort the list of lessons and it\u0027s module code by timing. \u003c/br\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* getMessageSlotsInADay(List\u003cModule\u003e **modules**, List\u003cSlot\u003e **slots**, String **day**) - Retrieves all the lesson **slots** and it\u0027s respective **module** code on the **day** specified. It then sorts the lessons by timing and returns it as a **message string**. \u003c/br\u003e If valid, additional formatting such as current lesson indicator or current time indicator is added to the **message string**."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* getMessageTimetable(List\u003cModule\u003e **modules**, List\u003cSlot\u003e **slots**) - Retrieves all the lesson **slots** and it\u0027s respective **module** code for the whole week. It then sorts the lessons by timing and returns it as a **message string**.  \u003c/br\u003e If valid, additional formatting such as current lesson indicator or current time indicator is added to the **message string**."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* getMessageLessonAtTime(List\u003cModule\u003e **modules**, List\u003cSlot\u003e **slots**, String **dayInput**) - Decodes the mode the user wants the timetable to be printed out in using **dayInput**. \u003c/br\u003e Then calls the appropriate methods such as getMessageSlotsInADay and getMessageTimetable to get the **message string** which is then returned to the execute function to be printed out by the User Interface. If the timetable is empty or an invalid **dayInput** is given, an **exception** is thrown to tell users their mistake."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* hasLessonNow(Slot **slot**) - Checks if a **slot** timing is overlapping with the current system time. Returns a **boolean** true or false based on the check."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* getIndicatorMessage() - Returns a **String** containing an indicator with the current system time."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* getHighlighBoxUpperMessage() - Returns a **String** containing an indicator with a message \"lesson now\"."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* getHighlighBoxLowerMessage() - Returns a **String** containing a indicator."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Given below is a sequence diagram of how printing the timetable occurs. \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://github.com/TYS0n1/tp/blob/master/docs/diagrams/ShowTimetableCommand%20seq%20dia%201%20new2.png?raw\u003dtrue) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003eFigure 2.03 sequence diagram for ShowTimetableCommand\u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://github.com/TYS0n1/tp/blob/master/docs/diagrams/ShowTimetableCommand%20seq%20dia%202%20new2.png?raw\u003dtrue) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003eFigure 2.04 sequence diagram for \"Initialize ShowTimetableCommand\" Block\u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://github.com/TYS0n1/tp/blob/master/docs/diagrams/ShowTimetableCommand%20seq%20dia%203%20new3.png?raw\u003dtrue) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003eFigure 2.05 sequence diagram for \"Execute ShowTimetableCommand\" Block\u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. When Zoomaster gets a command from the user to show the timetable, a new ShowTimetableCommand object is created."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "2. The ShowTimetableCommand decodes the input command to retrieve the way the user wishes to view the timetable."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "3. If an invalid input day is entered by the user, the input day will be set as **null**."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "4. Zoomaster now executes the command and displays the timetable in the requested mode. "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "5. If the input day is **null**, no timetable will be printed out. Instead, the program checks for does checks for Show Lesson Bookmarks feature."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command: \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://github.com/TYS0n1/tp/blob/master/docs/diagrams/activity%20diagram%20show%20timetable%20command.png?raw\u003dtrue) \u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\u003ccenter/\u003eFigure 2.06 Activity diagram for ShowTimetableCommand\u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. First, the program checks if the input command is just \"show\". This corresponds to the user requesting the full timetable."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Hence, it sets **day** variable as \"ALL\" and moves on to the Execute step, step 6. Else it continues to decode the input command."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "2. Secondly, the program checks for spacing error in the command. Show command requires a space after \"show\" help decode the input command."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Hence, if there is no space after \"show\", the program throws an Unknown Input ZoomasterException and shows the list of valid commands."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "3. Next, the program checks if the input parameter is \"today\". This corresponds to the user requesting the timetable on the day of the current system time."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Hence, it sets **day** variable as the day of the current system time and moves on to the Execute step, step 6. Else it continues to further check the input command."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "4. Afterwards, the program checks if the input parameter corresponds to a valid day of the week in its three-letter abbreviation."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "If so, it sets **day** variable as that of input parameter and moves on to the Execute step, step 6."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "5. Else, if the input parameter does not correspond to any of the valid inputs. The program sets **day** variable as \"NULL\"."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "6. Now, the program executes. If the **day** variable is not \"NULL\", it prints the corresponding timetable the user wants."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "7. If the **day** variable is \"NULL\", the program moves on to the Show Lesson Bookmarks feature."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "##### Aspect: What keyword for the user to input to get show timetable feature."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* **Alternative 1 (Current choice):** Using `show` keyword and a valid `DAY(optional)` input."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Pros: Able to use `show` keyword for the show module and slot details feature too."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Cons: Unable to show error message for an invalid `DAY(optional)` input "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    as the program reads the input as a `MODULE` input instead. Users have to use `help` command or"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    to refer to the User Guide to receive help."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* **Alternative 2:** Using `list` keyword and a valid `DAY(optional)` input."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Pros: Easier to create code. No need to have an algorithm figure out if user wants to access show timetable"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    feature or show module and slot details feature."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Cons: Less user-friendly. Users have to remember another keyword for showing data from Zoomaster."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* **Alternative 3:** Using `show timetable` keyword and a valid `DAY(optional)` input."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Pros: Less complex code. An additional keyword allows program to easily recognise show timetable feature."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Cons: Less user-friendly. Users have to type an additional phrase to show their timetable. Experienced users"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    who can memorise the command would not encounter the error message of Alternative 1, thus would find typing the"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    additional keyword troublesome."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003c!-- @@author xingrong123--\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003ca name\u003d\"add-module-slot\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "### Add Module and Slot feature (Xing Rong)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "This feature allows the user to add modules and lesson slots into the timetable."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Users can also add bookmarks to specific modules and slots."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Users can enter one-shot-commands, adding multiple slots and bookmarks to a module."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "The class diagram below mainly shows the associations between the objects contained in the Timetable class. In the "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "following sequence diagrams, the BookmarkList class is omitted for simplicity.  "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](diagrams/addSlotCommand/timetableClassDiagram.png)  "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.07 Class diagram for Timetable \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Given below is a sequence diagram of how the feature works.  "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/addSlotCommand/addSlotSequenceDiagram.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.08 Sequence diagram for AddSlotCommand \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/addSlotCommand/addSlotSequenceDiagram2.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.09 Sequence diagram for "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\"Get module if it exist, else create a new module\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/addSlotCommand/addSlotSequenceDiagram3.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.10 Sequence diagram for "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\"Create bookmark for module\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/addSlotCommand/addSlotSequenceDiagram4.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.11 Sequence diagram for "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\"Create bookmark for existing slot base on its index\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/addSlotCommand/addSlotSequenceDiagram5.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.12 Sequence diagram for "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\"Get slot if it exist, else create a new slot\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/addSlotCommand/addSlotSequenceDiagram6.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.13 Sequence diagram for "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\"Create bookmark for slot\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "1. After calling execute() method of the AddSlotCommand object, there will be a check on whether the module code "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "entered by the user already exists in the timetable. If it does not exist, then the module will be created."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "2. There will then be a check for additional commands pertaining to the module entered by the user."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "3. The code will then check if the command is to add a module bookmark or a lesson slot, and do so accordingly."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "4. If the command is to add a lesson slot, then there will be a check for a bookmark entry in the command. "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "If there is one, then the bookmark will be added to the lesson slot."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "5. Loop to step 3 if there are additional commands which have not been executed."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "6. Print the message of all commands executed and error messages."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "##### Aspect: How to enable fast typing users to add modules, slots and related bookmarks faster"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* **Alternative 1 (Current choice):** allow one-shot command to add slots and bookmarks to a module"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    * Pros: Fast typers can input faster"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    * Cons: Difficult to implement"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* **Alternative 2:** separate adding of modules, lesson slots and related bookmarks into different commands"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    * Pros: Easy to implement"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    * Pros: Lower chance of error"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    * Cons: User has to enter multiple commands each at a time to perform the functions, which takes up more time."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003ca name\u003d\"add-module-slot\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "### Delete Module and Slot feature (Xing Rong)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "This feature allows the user to delete the modules, slots and their bookmarks from the timetable.  "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Given below is a sequence diagram of how the feature works.  "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/deleteSlotCommand/deleteSlotSequenceDiagram.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.14 Sequence diagram for DeleteSlotCommand \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/deleteSlotCommand/deleteSlotSequenceDiagram2.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.15 Sequence diagram for "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\"delete module\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/deleteSlotCommand/deleteSlotSequenceDiagram3.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.16 Sequence diagram for "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\"delete slot\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/deleteSlotCommand/deleteSlotSequenceDiagram4.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.17 Sequence diagram for "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\"delete module bookmarks\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "![](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/diagrams/deleteSlotCommand/deleteSlotSequenceDiagram5.png?raw\u003dtrue)  "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "*\u003ccenter/\u003e Figure 2.18 Sequence diagram for "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\"delete slot bookmarks\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "1. There will be a check if the module associated with the deleted object exists. "
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "If it does not exist, an exception will be thrown."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "2. If the module exists, it will then check what kind of object the user wants to delete."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "There are four options:"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    1. Delete the module (including everything contained in the module)."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    2. Delete a slot contained in the module."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    3. Delete all bookmarks associated with the module."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    4. Delete all bookmarks contained in a slot from the module.  "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "The whole-relationship between the objects, which can be seen from the class diagram Figure 2.07, would mean that "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "deleting an object would also delete all objects contained in it.  "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003c!-- @@author Speedweener --\u003e   "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"nusmodulelist\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "### Validate Modules feature (Zhan Hao)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "This feature allows the application to validate if the modules entered by the user "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "are existing NUS modules. This helps the user avoid erroneously adding modules from typos, "
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "as the application might otherwise consider the input to be a new module (eg. When adding slots to "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "existing module CS2113T, a typo such as CS2113R would cause the application to add a new module "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "instead)."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "This is done by retrieving a JSON file of existing NUS modules from NUSMods API. "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "The application will then convert the JSON file to an ArrayList of modules, which will be used to validate "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "modules entered by the user. The ArrayList is then stored locally so that subsequent runs of the application"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "will be able to read from the local file instead, which allows the application to be loaded faster. "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Below is a sequence diagram of the process of retrieving the module list. Note that the alt block is informally used "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "to illustrate the try-catch block. "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/diagrams/loadModuleList/getModuleList.png)  "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "*\u003ccenter/\u003e Figure 2.19 Sequence diagram for retrieving module list \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "1. When the application is launched, the application will try to read the module list from a modulelist.txt file in the same directory. "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "It will read each line as a separate module and add them to an ArrayList."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "2. If it cannot find the local file, or the file is empty, **FileNotFoundException** will be thrown."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "3. When the **FileNotFoundException** is thrown, the nusModuleListFromNusMods() method will be called. It will first obtain the URL to be accessed using "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "getNusModsUrl(), which creates the URL based on the current year. It will then attempt to connect to the URL. "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "4. If unable to connect, the method will return null. The importance of this null value will be explained further down."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "5. Else if it is able to connect, the application retrieves the JSON file as a string. The jsonToArrayList method is then called to parse "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "the string to a JSONArray, then store the \"modulecode\" attribute of each JSONArray entry into an ArrayList. This ArrayList is returned to the "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "loadModuleList() method."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "6. If the ArrayList value is not null (Connection was successful), it is saved locally using the saveModuleList() method."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "7. The ArrayList value is then returned to `Zoomaster`, which stores it as a static ArrayList in `Module`. This ArrayList is then used to validate modules."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "8. To be validated, the module to be added must exist in the ArrayList. However, if the ArrayList is null (Failed to Connect), the validation will always "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "return true. This is to allow the application to still be usable, although without the module validation feature."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "##### Aspect: How to allow the validation to be useful in most scenarios"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* **Alternative 1 (Current choice):** Connection is needed once, to retrieve module list for the current year."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Pros: Allows for updated list of modules based on current year"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Cons: Module validation will not work without initial internet connection"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* **Alternative 2:** Save the module list along with the jar file."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Pros: Does not require internet connection"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Cons: Module list might not be updated as per the year which the application is being run, prevent newer modules from being added"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Since the application is primarily based on launching URLs, having an internet connection is a general requirement for the rest of the "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "application to function. Hence, the cons of the first alternative is not significant."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "##### Aspect: How to increase usability among different users"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* **Alternative 1 (Current choice):** Module list is saved as a editable txt file"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Pros: Allows for editing of module list to include non-NUS modules"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Cons: App start up takes a longer time as module list has to be loaded ."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* **Alternative 2:** Store the module list within the jar file file itself."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Pros: Faster start up of app"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Cons: Module list cannot be edited, preventing users from other universities taking other modules from adding their modules."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Since the start up time for the app after loading the module list from online is still very fast, it should not affect most users."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"extendedhelpcommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "### Extended HelpCommand feature (Zhan Hao)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "This feature allows the user to query more about the different commands available in the different modes. This is to allow quick typist to "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "have a fast way to reference the purpose and format of the commands without having to consult the User Guide."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "This command will be sensitive to the current mode of the application. For example, the command `help add` would print different text in "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Bookmark, Timetable, or Planner Mode. The command `help edit` would be valid in Timetable mode, but not valid in Bookmark mode as such a "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "command does not exist in that mode."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Below is a sequence diagram of the extended HelpCommand.   "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/diagrams/loadModuleList/helpCommandOverallDiagram.png)  "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "*\u003ccenter/\u003e Figure 2.20 Sequence diagram for \"HelpCommand\" \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/diagrams/loadModuleList/helpCommandDetailsIsEmpty.png)  "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "*\u003ccenter/\u003e Figure 2.21 Sequence diagram for "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\"details is empty\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/diagrams/loadModuleList/helpCommandDetailsIsEmpty.png)  "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "*\u003ccenter/\u003e Figure 2.22 Sequence diagram for "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\"details not empty\" Block \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "1. From Figure 2.20, when Zoomaster calls parse() on user input and Parser parses it as a HelpCommand, HelpCommand will check if the details "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "are not empty, then validate if the details match a valid command based on the current mode (not shown in the diagram). If the details are not valid, "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "an exception is thrown. Zoomaster will then call the execute() method on HelpCommand."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "2. From Figure 2.21, if the details are empty, the HelpCommand will call the printHelpMessage() in Ui command without the details. Ui will retrieve the "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "current mode through a call to static variable programMode in Parser. The mode is then used to determine which list of available command is to be printed.  "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "3. Else from Figure 2.22, if the details are not empty, the command HelpCommand will call the printHelpMessage(details) in Ui. Similarly, Ui will retrieve the current "
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "mode through a call to static variable programMode in Parser. Ui will check if the details correspond to any of the global command keywords, such as "
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "CLEAR_KW or EXIT_KW and print accordingly. If the details do not match any, the mode will be used to determine which print extended help method is to be called. "
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "4. The HelpCommand then becomes an unused object to be deleted to free up memory."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "5. The different print with colour methods utilise the JAnsi library to print to the Command Prompt in colour."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003c!-- @@author fchensan --\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003ca name\u003d\"edit-slot\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "fchensan"
        },
        "content": "### Edit Slot feature (Francisco)"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "fchensan"
        },
        "content": "This feature allows users to edit a slot\u0027s title or time. Users can also move slots over to another module."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Given below is an example usage scenario and how the edit mechanism works."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "fchensan"
        },
        "content": "1. The user enters `edit title mon 2 new_title`."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "fchensan"
        },
        "content": "2. A new EditSlotCommand instance is created and its `execute` method is called."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "fchensan"
        },
        "content": "3. Based on the chosen field in the user input, different methods are called:"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    a. If the command is `edit module`, the moveSlotToAnotherModule method in timetable is called to move the slot to a given module."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    b. If the command is `edit title`, like in the current example, the slot corresponding to the day and index given in the user input is retrieved by calling the getSlotByIndexInDay method of the timetable. "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    In this case, the 2nd slot on Monday will be returned. The setTitle method of the retrieved slot is then called."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    c. If the command is `edit time`, it works similar to `edit title`, but with changeSlotTime called instead. This method will call setDay(), setStartTime(), and setEndTime() of the retrieved slot."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "fchensan"
        },
        "content": "The sequence diagram below explains how this feature is executed:"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "fchensan"
        },
        "content": " ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/editslotsequence.png)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "fchensan"
        },
        "content": "*\u003ccenter/\u003e Figure 2.23 Sequence diagram for EditSlotCommand \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "fchensan"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "fchensan"
        },
        "content": "##### Aspect: What part of a slot should the user be able to edit"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* **Alternative 1 (Current choice):** The user can choose to edit the slot\u0027s module, title, or time."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * Pros: Allows for quicker edits."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * Cons: Harder to implement."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* **Alternative 2:** The user needs to type in the entire slot details (including module, title, and time)."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * Pros: Easier to implement."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * Cons: The user needs to type the module, title, and time even when the user only wants to edit one of them."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003ca name\u003d\"showsettings\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "fchensan"
        },
        "content": "### Show settings feature (Francisco)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "fchensan"
        },
        "content": "This feature allows more experienced users to view Zoomaster\u0027s settings. "
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Given below is an example usage scenario and how the `showsettings` command works."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "fchensan"
        },
        "content": "1. The user enters `showsettings`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "fchensan"
        },
        "content": "2. A new ShowSettingsCommand instance is created and its `execute` method is called."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "fchensan"
        },
        "content": "3. Inside the `execute` method, a private method `generateSettingsListMessage` is called to generate the string of "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "fchensan"
        },
        "content": "settings to be printed."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "fchensan"
        },
        "content": "4. `generateSettingsListMessage` retrieves a list of the user\u0027s settings by calling the getSettingsVariables method of "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "fchensan"
        },
        "content": "the UserSettings object in the main Zoomaster class. It will then convert them into a string and return it."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "fchensan"
        },
        "content": "5. In `execute`, the generated text will be printed by calling the `ui`\u0027s `print` method."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "fchensan"
        },
        "content": "The sequence diagram below explains how this feature is executed:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "fchensan"
        },
        "content": " ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/showsettingssequence.png)"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "fchensan"
        },
        "content": "*\u003ccenter/\u003e Figure 2.24 Sequence diagram for ShowSettingsCommand \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003ca name\u003d\"setsettings\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "fchensan"
        },
        "content": "### Set settings feature (Francisco)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "fchensan"
        },
        "content": "This feature allows users to change settings as shown from the `showsettings` command. "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Given below is an example usage scenario and how the `set` command works."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "fchensan"
        },
        "content": "1. The user enters `set def_mode timetable`, which means set the default mode to timetable mode."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "fchensan"
        },
        "content": "2. A new SetSettingsCommand instance is created and its `execute` method is called."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "fchensan"
        },
        "content": "3. Inside the `execute` method, the list of all settings variables is retrieved from the `UserSettings` object in"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "fchensan"
        },
        "content": "`Zoomaster`."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "fchensan"
        },
        "content": "4. The corresponding variable is extracted out (in this case, `def_mode`), and the value is set to `timetable`."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "fchensan"
        },
        "content": "The sequence diagram below explains how this feature is executed:"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "fchensan"
        },
        "content": " ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/setsettingssequence.png)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "fchensan"
        },
        "content": "*\u003ccenter/\u003e Figure 2.25 Sequence diagram for SetSettingsCommand \u003c/center\u003e \u003cbr/\u003e\u003c/br\u003e*"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "fchensan"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "fchensan"
        },
        "content": "##### Aspect: How should the user specify which setting to change"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* **Alternative 1 (Current choice):** The settings all have a name associated with each of them."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * Pros: Allows for more expressive commands (e.g. `set autosave on` vs. `set 2 on`)."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * Cons: Harder to implement."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* **Alternative 2:** The user selects a setting to change by its index number."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * Pros: Easier to implement."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * Cons: The user needs to type in `show` to know the index number."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003c!-- @@author jusufnathanael--\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003ca name\u003d\"planner\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "### Planner feature (Jusuf)"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "This feature is an extension of the timetable feature that allows users to find common empty slots from each individual timetable. The users can then add a new meeting, and the app will automatically write the meeting to each timetable."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Below is the general flow on how the mechanism works:"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "1. The different timetables must first be loaded into the `planner` folder manually."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "2. In the app, the user can enter the `load` command to load all the timetables and initialise the common empty slots."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "3. To view the slots, the user can enter the `show` command with or without the day (optional)."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "4. The user can also call the `add` command to add a new meeting, similar to the timetable feature."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "5. Finally, the user can call the `save` command to store the newly added meeting(s) to each individual timetable."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Some of the key features of the planner mode are the `load` and `save` commands."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "The general flow of the loading process is as below:"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "1. First, the command clear all the modules in the planner timetable."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "2. Next, the files inside the `planner` folder will be loaded and converted to a single timetable."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "3. The empty slots will be initialised based on the previous timetable and it will return an `EMPTY` module "
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "along with all the empty slots."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "4. Finally, a confirmation message will be printed if the loading process is successful."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "The sequence diagram below explains how the load planner command is executed:"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "![](diagrams/plannerCommand/load_planner.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "*\u003ccenter/\u003eFigure 2.26 Sequence diagram for LoadPlannerCommand\u003c/center\u003e \u003cbr/\u003e*"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "The general flow of the saving process is as below:"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "1. First, we store the file paths of the individual timetables to an array of files. "
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "2. For each file, the command will load the timetable and add the newly added meeting to the timetable."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "3. Finally, a confirmation message will be printed  if the saving process is successful."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "The sequence diagram below explains how the load planner command is executed:"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "![](diagrams/plannerCommand/save_planner.png) \u003cbr/\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "*\u003ccenter/\u003eFigure 2.27 Sequence diagram for SavePlannerCommand\u003c/center\u003e \u003cbr/\u003e*"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "##### Aspect: How to load and save the group meeting to the timetables."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* **Alternative 1 (Current choice):** Manually load the individual timetables and save the new meetings (slots and bookmarks) to the timetables."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    * Pros: User can decide when to save the newly added meetings (still allow some changes)."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    * Cons: In case the program crashes, the meeting will not be saved."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* **Alternative 2:** Automatically load and save the individual timetables per every command."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    * Pros: Any changes will be automatically saved, in case that the program crashes"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    * Cons: Hard to implement"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    * Cons: Do not allow any further modifications in case the user wants to change the meeting details."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    "
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"appendix-a\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## **Appendix A: Product scope**"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* NUS students"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Students with fast typing skills "
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Students comfortable with using the command line interface"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Zoomaster was developed during the coronavirus pandemic whereby many NUS classes have been transitioned towards online lessons. "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "NUS lessons are mainly conducted on Zoom video conferencing software. "
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "However, as Zoom does not store recurring nor past meetings, it is hard for students to easily access their online lessons. "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Hence, Zoomaster helps to organise students’ Zoom links for easy access to their lessons."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"appendix-b\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## **Appendix B: User Stories**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v1.0|studious NUS student| bookmark important websites from different modules|launch them easily when needed|"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v1.0|NUS student|label my bookmarks|know quickly the topics of each link|"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v1.0|busy NUS student|create a timetable within the app which syncs up with the system time|avoid missing my lessons|"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v1.0|NUS student|take a look at my modules for the day, or the entire week|plan out my day/week|"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v2.0|first time user of Zoomaster|be able to see the list commands available|easily navigate through the Zoomaster|"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v2.0|advanced user|be able to launch multiple links at the same time if the links are grouped together|save time by not doing multiple launching commands|"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v2.0|advanced user|edit my bookmarks and timetable lists according to changes in my module and timetable|quickly make changes to my lessons|"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v2.0|busy user|have an indicator telling me the current time|easily check on the time in a hurry|"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v2.0|fast typer|be able to type a one-shot-command when entering the details of the lessons in my timetable|add the lesson details faster|"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v2.0|busy NUS student|be able quickly launch my next Zoom lesson|avoid being late for my lessons|"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v2.0|NUS student|find common empty slots between my teammates|plan my group meetings accordingly and efficiently|"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|v2.0|NUS student|save my group meetings to my timetable|avoid missing my group meetings|"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"appendix-c\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## **Appendix C: Non-Functional Requirements**"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. The App should work on any mainstream OS as long as it has Java `11` installed."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "2. A user with above-average typing speed should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"appendix-d\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## **Appendix D Glossary**"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Zoom"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e A popular video communication program by a company of the same name"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### UML "
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e Unified Modeling Language, a standard to visualize the design of a system"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### UI"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e User Interface"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    "
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### ANSI "
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e American National Standards Institute, ANSI characters is a popular character set used by programmers"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    "
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### NUS"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e National University of Singapore"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### Mainstream OS"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"appendix-e\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## **Appendix E: Instructions for manual testing**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"appendix-e-basic\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "**Basics**"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    1. Download the jar file and copy it into an empty folder."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    2. Open the command prompt and change directory to the location of the jar file."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    3. Enter `java -jar zoomaster.jar` in the command line. You should expect to see the welcome screen of the application."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "2. Testing"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    1. Download the test cases text file from github [here](https://github.com/AY2021S1-CS2113T-W11-1/tp/tree/master/text-ui-test)."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    Its name is input.txt. "
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    2. These are some the sample test cases used to test if the program is working as intended. You should get the same results \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    as shown in EXPECTED.txt file."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    3. You can refer to the [User Guide](https://github.com/AY2021S1-CS2113T-W11-1/tp/blob/master/docs/UserGuide.md) for the full list"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    of features and available commands for Zoomaster."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    4. Now you can manually input test cases into Zoomaster and see the results."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    5. Note that the output of the application is dependent on the system time of your machine."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "3. Saving and Loading"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    1. Saving and loading of data is done automatically in Zoomaster. "
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    2. The application uses the Gson library to convert the java objects in Zoomaster into JSON constructs, then "
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    writing them into the text files stored locally in the machine."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    3. Data is stored in 3 separate text files; `bookmarks.txt`, `modulelist.txt` and `timetable.txt` which are located"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    in the `data` folder. The `data` folder is created in the directory where `zoomaster.jar` is placed."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    4. To test the saving feature, you can enter input some data into the Zoomaster through the command line interface"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     such as using the commands `mode timetable` then `add CS2113T`."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    5. Exit the application by using the command `exit` and look in the `timetable.txt` file. The module \"CS2113T\" "
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    should be recorded."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    6. You can test the loading feature by launching Zoomaster and entering the commands `mode timetable` "
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    and `add CS2113T`. There should be a message that the module \"CS2113T\" already exists. "
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    7. You can also edit the data in the text files in JSON format and test the loading of data into the Zoomaster by "
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    launching the application. You can refer to the class diagrams above for the associations between the classes."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"appendix-e-advanced\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "**Advanced**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "fchensan"
        },
        "content": "1. Testing global commands (`mode`, `help`, `clear`, `showsettings`, `set`, `exit`)"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    1. Test `mode` command. Enter `mode bookmark` to enter bookmark mode, you should see the message \"Changing to bookmark mode\". \u003cbr\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    Enter `mode timetable` to enter bookmark mode, you should see the message \"Changing to timetable mode\". \u003cbr\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    Enter `mode planner` to enter bookmark mode, you should see the message \"Changing to planner mode\". \u003cbr\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    2. Test `help` command. In bookmark mode, enter `help`, you should see message \"Available inputs in Bookmark mode are\" and the list available commands."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    Then, enter `help add`, you should see message \"Adds a bookmark to the bookmark list URL must start with www or https:// or http:// Format: add {description} {URL}\"."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    3. Test `clear`. Enter `clear`, you should see your screen is cleared."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    4. Test `showsetings`. Enter `showsettings`, you should see two settings in a list."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    5. Test `set`. Enter `set def_mode timetable`, you should see that the default mode is now `timetable`."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    6. Test `exit`. Enter `Exit`, you should see message \"Bye. Hope to see you again soon!\" and the program is terminated."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    7. Run the jar file again, the program should be in `timetable`."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    "
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "fchensan"
        },
        "content": "2. Testing bookmark commands (`add`, `show`, `delete`, `find`, `edit`, `launch`)"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    1. Test `add`. Enter `add google www.google.com`, you should see message \"Added bookmark: [google] www.google.com\"."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    2. Test `show`. Enter `show`, if you did not add any other bookmark except that of step 1, you should see message"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    \"Here are the bookmarks in your list: 1.[google] www.google.com\"."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    3. Test `find`. Enter `find google`, you should see message \"Here are your matching bookmarks 1.[google] www.google.com\". "
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    4. Test `edit`. "
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    Enter `edit desc 1 search`, and then type `show` and you should see that the description is now `[search]`."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    Enter `edit url 1 www.bing.com`, and then type `show` and you should see that the URL is now `www.bing.com`."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    4. Test `delete`. Enter `delete 1`, you should see message \"I\u0027ve deleted this bookmark!: [google] www.google.com\"."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    5. Test `launch`. Re-add bookmark from step 1 and enter `launch 1`, you should see www.google.com launched in your browser."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    "
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "3. Testing timetable commands (`add`, `show`, `edit`, `delete`, `launch`)"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    1. Test `add`. Enter `add cs2113t lecture fri 16:00 18:00 www.github.com`, you should see message "
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    \"CS2113T added lecture slot added bookmark added to CS2113T lecture\"."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    2. Test `show`. Enter `show`, if you did not add any other slot except that of step 1, you should see a lesson slot"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    from 16:00 to 18:00 on fridays with description \"lecture CS2113T\". Enter `show fri`, and you should see the same lesson slot."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    Enter `show today`, if your system date is friday, you should.see the lesson slot. Else you should see message \"No lesson\" and"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    the current time indicator."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    3. Test `edit`. Enter `edit module fri 2 cs2113`, you should see message \"Slot moved to CS2113\". Enter `edit title fri 2 tutorial`,"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    you should see message \"Slot title changed to tutorial\". Enter `edit time fri 2 thu 17:00 18:00`, you should see message \"Slot time changed to thu 17:00 18:00\"."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    4. Test `delete`. Enter `delete cs2113 1`, you should see message \"deleted 17:00-18:00 tutorial from cs2113\"."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    5. Test `launch`. Re-add slot from step 1 and enter `launch cs2113t 1`, you should see www.github.com launched in your browser."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    "
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "4. Testing planner commands (`load`, `add`, `show`, `save`)"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    1. Test `load`. First, manually copy your teammates\u0027 timetable to the `/data/planner/` folder. Enter `load` and you should see a `planner loaded` message if successful."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    2. Test `show`. Enter `show` and you should see the list of empty time slots. Enter `show fri`, and you should see the list of empty slots on Friday."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    3. Test `add`. Enter `add cs2113t lecture fri 16:00 18:00 www.github.com`, you should see message \"CS2113T added lecture slot added bookmark added to CS2113T lecture\"."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    4. Test `save`. Enter `save` and you should see a `planner saved` message."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "5. Testing `launch now`"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    1. First, get your current system time. You can view this via your clock app on your device."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    2. Secondly, in timetable mode, use the `add` command to create a new slot with period overlapping with your current system time."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    3. Thirdly, use `add` command to add a bookmark (e.g. www.google.com) to the slot you created in step 2. "
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    4. Lastly, enter `launch now`, you should see the bookmark you entered launched in your browser."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "xingrong123": 104,
      "TYS0n1": 489,
      "jusufnathanael": 67,
      "fchensan": 95,
      "Speedweener": 118,
      "-": 28
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "# Zoomaster"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Zoomaster is a Java application for the Command Line. It provides a simple and intuitive way to store Zoom links for online classes abd other useful links for the lesson at hand."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Zoomaster can also intelligently determine the current lesson users are having, allowing them to launch the correct links quickly and elegantly from the command line."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "### Useful links:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "jusufnathanael": 5,
      "-": 5
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   1. Run the `seedu.zoomaster.Zoomaster` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 55
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## 1.0 Introduction  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Zoomaster is a desktop app for organizing website links, optimized for use via a "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Command Line Interface (CLI) while retaining the benefits of a Graphical User Interface (GUI). "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "If you can type fast, Zoomaster can help fetch useful website links for you quicker than the bookmark function on your browser."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": "This user guide will walk you through the features of Zoomaster and ways to input commands to it to access these features."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## 2.0 About this Document"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Please take note that the ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "symbol is used to indicate important warnings throughout the document."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"command_format\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Please also take note of the labels on command formatting:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "| Label | Meaning |"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "| --- | --- |"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "| `{curly brackets}` | Words contained in `{curly brackets}` are parameters to be supplied by the user. \u003cbr\u003e eg. in `delete {BOOKMARK_NUMBER}`, `BOOKMARK_NUMBER` is a parameter which can be used as `delete 1`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "| `{PARAM1/PARAM2}` | Parameters with `/` inside are parameters that accept different types of inputs. \u003cbr\u003e eg. `launch {INDEX/DESCRIPTION}` shows that either `INDEX` or `DESCRIPTION` can be used."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|`(optional)`| Parameters with `(optional)` are optional inputs. \u003cbr\u003e eg. `show {DAY(optional)}` can be used as `show` or as `show mon`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "| `DAY` | Parameter `DAY` takes three-letter abbreviations of days in a week \u003cbr\u003e The full list of DAY parameters are **mon, tue, wed, thu, fri, sat, sun**.\u003cbr\u003e Your inputs need not be case sensitive. \u003cbr\u003e eg. `show {DAY(optional)}` can be used as `show mon`, `show tue`, etc.|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|`MODULE`|Parameter `MODULE` has to be an NUS module recognised by NUSMods.\u003cbr\u003e You can go to https://nusmods.com/ to get the full list of NUS modules available. \u003cbr\u003e eg. `CS2113`, `CS2101`  |"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "|`START TIME`,\u003cbr\u003e `END TIME`| Parameters `START TIME` and `END TIME` requires input to be in the format `HH:mm` and in 24 Hours. \u003cbr\u003e eg. `12:00`, `14:00`, `00:00`|"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## 3.0 Table of contents"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [4.0 Quick Start](#quick-start)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [5.0 Features](#features)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [5.1 Global](#global)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    *  [Show help information:](#help) **help**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    *  [Switch mode:](#mode) **mode**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    *  [Clear:](#clear)  **clear**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    *  [Launch current lesson:](#launchnow)  **launch now**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    *  [Show user settings:](#showsettings)  **showsettings**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    *  [Set a setting:](#setsetting)  **set**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    *  [Exit:](#exit)  **exit**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [5.2 Bookmark mode](#bookmarkmode)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Show bookmarks:](#showbookmark) **show**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Add bookmark:](#addbookmark)  **add**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Delete bookmark:](#deletebookmark)  **delete**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Edit bookmark:](#editbookmark)  **edit**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Find bookmark:](#findbookmark)  **find**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Launch bookmark:](#launchbookmark)  **launch**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [5.3 Timetable mode](#timetablemode)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Show timetable:](#showtimetable) **show**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Show module, slot and bookmarks:](#showmoduledetails) **show**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Add module, slot and bookmark:](#addtimeslot) **add**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Delete module, time slot and bookmarks:](#deletetimeslot)  **delete**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Edit slot\u0027s module, title, time:](#edittimeslot)  **edit**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Launch bookmarks from module, slot:](#launchtimeslot)  **launch**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  * [5.4 Planner mode](#plannermode)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Load planner:](#loadplanner) **load**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Add meeting:](#addmeeting) **add**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Show planner:](#showplanner) **show**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * [Save planner:](#saveplanner) **save**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [6.0 FAQ](#faq)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* [7.0 Command Summary](#command-summary)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e   "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## 4.0 Quick Start  "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed.  "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "2. You can download the latest version of `Zoomaster` from [here](https://github.com/AY2021S1-CS2113T-W11-1/tp/releases)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": " if you are running an older version."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "3. Now move the **zoomaster.jar** file into your desired home folder for Zoomaster. \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "4. Copy the absolute path of your **zoomaster.jar** file by first highlighting your file, then while"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "holding the \u003ckbd\u003eShift\u003c/kbd\u003e key on your keyboard, right-click on that file and select the option \"Copy as path\". "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "5. Afterwards, start Command Prompt by pressing \u003ckbd\u003eWindows\u003c/kbd\u003e + \u003ckbd\u003eR\u003c/kbd\u003e on the keyboard, "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "then type in \"cmd\" and hit the \u003ckbd\u003eEnter\u003c/kbd\u003e key. \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "6. In the Command Prompt, type in \"java -jar\", then paste the absolute path you copied previously in step 4. "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "It should look similar to the picture below:  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://raw.githubusercontent.com/Speedweener/ip/master/docs/images/zoomastercommand.png) \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "7. Finally, press \u003ckbd\u003eEnter\u003c/kbd\u003e. You should see something similar to this Zoomaster logo indicating "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "that you have successfully started your Zoomaster program. \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://raw.githubusercontent.com/Speedweener/ip/master/docs/images/zoomastercommandline.PNG)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "8. The app is now ready to go! Go ahead and test it out with a `help` command. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The app should print out a list of different commands. \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "9. You can now refer to the section below to explore the different features of the Zoomaster app."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## 5.0 Features   "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "This section will explain to you the different features of Zoomaster and how you can interact with it. "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003c!-- @@author fchensan --\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Zoomaster has three different modes:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* **Bookmark mode**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    In this mode, Zoomaster stores all of your bookmarks that are not related to any modules."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* **Timetable mode**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    Here, you can create a timetable of all of your classes, and assign a bookmark or Zoom link on each of the time slots."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* **Planner mode**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    Have you ever had difficulties deciding when to have a meeting as all of your groupmates have different classes? In Planner mode, Zoomaster can help you find common free timings by allowing you to import your teammates\u0027 timetables."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Each mode has its own different sets of features and commands, which will be explained in sections 5.2, 5.3, and 5.4."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"global\"\u003e\u003c/a\u003e "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### 5.1 Global Commands"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "These commands can be used by you in every mode of the app."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"help\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "#### 5.1.1 Show help information: `help` (Yu Shing + Zhan Hao)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "You can see the list of commands available in the mode you are currently in."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Format: help {COMMAND(optional)}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eLet\u0027s say you require help to see the commands you can access the main menu mode. "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eYou will first enter `help` into the console."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://raw.githubusercontent.com/Speedweener/ip/master/docs/images/helpcommandsingle.PNG)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eThen you should see the following message to guide you with the relevant commands."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showhelpcommand%20main%20menu.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eTyping `help` in bookmark mode will show these commands."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showhelpcommand%20bookmark.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eTyping `help` in timetable mode will show these commands."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showhelpcommand%20timetable1.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eLastly, typing `help` in planner mode will show these commands."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showhelpcommand%20planner.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "If you require additional information about a command, you can insert the optional parameter of `{COMMAND}` "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "after `help` show you additional information about the commands and how to format the command properly."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* `help add`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* `help delete`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003eThe following example represents the case if you require help with the `add` command in timetable mode. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003eFirst, you type the command `help add`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showhelpcommand%20timetable%20add.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eThen you should see the following message to explain and instruct you on how to use the `add` command in timetable mode"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/team-Branch2/docs/diagrams/help%20add%20msg.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003c!-- @@author TYS0n1 --\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"mode\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "#### 5.1.2 Switch mode: `mode` (Yu Shing)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "You can switch between “bookmark”, “timetable” and \"planner\" modes. Depending on the mode you select the behaviour of the commands below changes. \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "There are three modes for Zoomaster, Bookmark, Timetable and Planner modes."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Format: mode {bookmark/timetable/planner}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* `mode bookmark`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* `mode timetable` "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* `mode planner`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eHere is an example of switching from the main menu of Zoomaster to the bookmark modes. \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/changemodecommand%20main%20menu%20to%20bookmarks.png?raw\u003dtrue) \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eFor the other modes, you should see a similar message like \"changing to timetable/planner mode\"."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003c!-- @@author Speedweener --\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"clear\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### 5.1.3 Clear screen: `clear` (Zhan Hao)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "You can clear the command prompt screen using this command. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "It is useful when your screen gets cluttered with prior commands. For example, when you have added a whole bunch"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "of modules and timeslots to your timetable. Then you can use `clear` command to remove those commands. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Note that if your monitor screen has high dimensions, you might need multiple calls of this command to fully"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "clear your screen."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Format: clear"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003eHere is an example of clearing the screen using the clear command. \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/clear.png) \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"launchnow\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003c!-- @@author xingrong123--\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### 5.1.4 Launch bookmarks of current lesson: `launch now` (Xing Rong)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "You can launch the bookmarks of a current lesson slot in your timetable. "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "The time depends on the system time of your machine with an additional 5 minutes of buffer, "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "allowing you to launch your zoom session ahead of time."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "  "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format: launch now    "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eHere is an example of launching the bookmark of the current lesson. In this case, the URL attached to the slot"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eis www.google.com. \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/launchnow.png) \u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "You should expect to see the urls of the current or 5 minutes advance lesson slot launching"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "in your native browser. Otherwise, you should see the message `no lesson now`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003c!-- @@author fchensan --\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003ca name\u003d\"showsettings\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fchensan"
        },
        "content": "#### 5.1.5. Show settings: `showsettings` (Francisco)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Once you are comfortable using Zoomaster, this command, along with the `set` command, helps you customise Zoomaster\u0027s behaviour."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fchensan"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Format: showsettings"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fchensan"
        },
        "content": "```"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fchensan"
        },
        "content": "When you type in this command, you will see two settings that you can adjust: \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fchensan"
        },
        "content": "![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/showsettings.png) \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fchensan"
        },
        "content": "The two settings are:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Default mode on start-up."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    You can choose between `mainmenu`, `timetable`, or `bookmark` as the first mode you will enter when you start Zoomaster."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Autosave."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    By default, this is turned on and Zoomaster will save files every time you make changes. You might want to turn this off if you prefer to save only when you exit. "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003ca name\u003d\"setsetting\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fchensan"
        },
        "content": "#### 5.1.6. Set a setting: `set {SETTING_NAME} {NEW_OPTION}` (Francisco)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fchensan"
        },
        "content": "While `showsettings` shows you the settings, this command lets you change one of the settings."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* `{SETTING_NAME}` is the name of the setting as shown when you type in the `showsettings` command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* `{NEW_OPTION}` is the new setting option that you would like to select. This needs to be typed in exactly as show from the `showsettings` command."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "fchensan"
        },
        "content": "For example, let\u0027s say that you want Zoomaster to enter `bookmark` mode when you start it. "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fchensan"
        },
        "content": "You can type in `set def_mode bookmark` and Zoomaster will change your settings, as shown below.  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fchensan"
        },
        "content": "![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/setsettings.png)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fchensan"
        },
        "content": "The next time you run Zoomaster, you will automatically enter `bookmark` mode."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"exit\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "#### 5.1.7 Exit the app: `exit`  "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "You can exit the application by using the exit command."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "  "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Format: exit    "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003eYou should see this message on exit.  "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "![](https://github.com/TYS0n1/tp/blob/team-Branch2/docs/diagrams/exit.png?raw\u003dtrue)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"bookmarkmode\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "### 5.2 Bookmark Mode  "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003c!-- @@author Speedweener --\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"showbookmark\"\u003e\u003c/a\u003e   "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### 5.2.1 Show bookmarks: `show` (Zhan Hao)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "This feature helps you print out all bookmarks in your bookmark list."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Format: show"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Example of a printed out bookmark list.  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](images/showOutput.PNG)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "If your bookmark list is empty, you will get the message shown in the screenshot below.  "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](images/showEmptyBookmarks.PNG)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"addbookmark\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### 5.2.2 Add bookmark: `add` (Zhan Hao)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "You can add bookmarks to your bookmark list. A bookmark contains its description and URL."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e* The validity of the `URL` you entered cannot be checked. Please ensure that you entered the correct link. "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e* Your `DESCRIPTION` must only contain one word (no whitespace inside). You can use underscore(\"_\") or dashes(\"-\") to string"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003emultiple words together. Eg. \"github_team_repo\" or \"cs2113t-website\"."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e* Your input `URL` has to start with `www.`, `http://` or `https://`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Format: add {DESCRIPTON} {URL}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "``` "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `add google www.google.com/`  "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `add example http://example.com`  "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `add cs2113t-website https://nus-cs2113-ay2021s1.github.io/website/`  "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"deletebookmark\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### 5.2.3 Delete bookmarks: `delete` (Zhan Hao)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Deletes a bookmark with the specified index.  "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "The index will correspond to the index of that bookmark in the list. "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "You can do a `show` command to check the bookmark indexes.  "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Format: delete {INDEX}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `delete 2`  "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `delete 4`  "
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "You should see a message similar to the screenshot below.  "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](images/deletebookmarksoutput.PNG)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003c!-- @@author fchensan --\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003ca name\u003d\"editbookmark\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fchensan"
        },
        "content": "#### 5.2.3 Edit bookmarks: `edit` (Francisco) "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fchensan"
        },
        "content": "This command edits a bookmark\u0027s description or URL with the specified index.  "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Just like `delete`, the index will correspond to the index of that bookmark in the list. "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "fchensan"
        },
        "content": "You can do a `show` command to check the bookmark indexes.  "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "fchensan"
        },
        "content": "```"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Format: edit {desc/url} {INDEX}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fchensan"
        },
        "content": "```"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "fchensan"
        },
        "content": "You should enter a `desc` or `url` depending on which one you want to edit."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e For example, let\u0027s say that you have `[news] www.straitstimes.com` as your third bookmark on the list."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e You can type in `edit desc 3 straitstimes` to change the description to \"straitstimes\". The following message will "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e appear:  "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/editbookmark.png)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003c!-- @@author Speedweener --\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"findbookmark\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### 5.2.4 Find bookmarks: `find` (Zhan Hao) "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "You can use this command to find bookmarks with matching description."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e* Your `DESCRIPTION` must only contain one word (no whitespace inside). "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003eSee the [command format](#command_format) for more details."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Format: find {DESCRIPTION}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `find cs2113t-website`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `find notes`  "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "You should see a message similar to the screenshot below when a successful match is found.  "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](images/findBookmarkoutput.PNG)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Else you should see \"No bookmarks contain the specified keyword!\"."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"launchbookmark\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### 5.2.5 Launch bookmarks: `launch` (Zhan Hao)  "
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "You can use this feature to launch bookmarks in your native browser. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Your selection of bookmark(s) can be via:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* Index"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* Matching description"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "The index will correspond to the index of that bookmark in the list. "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "You can do a `show` command to check the bookmark indexes.  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e* Your `DESCRIPTION` must only contain one word (no whitespace inside). "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003eSee the [command format](#command_format) for more details."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "```"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Format: launch {INDEX/DESCRIPTION}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "``` "
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `launch 1`  "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `launch cs2113t-website`  "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* `launch abc`  "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003ca name\u003d\"timetablemode\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "### 5.3 Timetable mode    "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003c!-- @@author TYS0n1 --\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"showtimetable\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "#### 5.3.1 Show timetable: `show` (Yu Shing)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "You will be able to see the timetable for a certain day or the whole week.  "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "**today** can also be a `DAY` input to show the timetable for the current day based on system time.  "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "If your selected timetable is the current day, you should be able to see a"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\"current time\" indicator with your system local time. "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Else if you have a lesson ongoing currently, it will instead show a \"lesson now\" indicator"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*around* your current lesson."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e  "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png) "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e * You have to enter `DAY` input according to the command format else it will not be recognised as a valid date. "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eThe valid inputs are `mon`, `tue`, `wed`, `thu`, `fri`, `sat`, `sun`and `today`. "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eYou can see the [command format](#command_format) for more information."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e* Zoomaster will interpret your command as the [Show module and slot feature](#showmoduledetails) "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eif you do not enter the correct `DAY` input. As such, you would see an error message saying you have entered an invalid module."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Format: show {DAY(optional)}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* `show`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* `show wed`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* `show today`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eHere are some examples of outcomes you will see on the command line interface \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e* You will see an empty list message if your timetable is empty. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showtimetablecommand%20empty%20timetable.png?raw\u003dtrue) \u003cbr\u003e\u003c/br\u003e\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e* You will see your entire timetable if you use `show` input. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showtimetablecommand%20all%20timetable.png?raw\u003dtrue) \u003cbr\u003e\u003c/br\u003e\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e* You will see the timetable of your selected day if you use `show {day}` input. "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eThis example uses Wednesday as its selected day input. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showtimetablecommand%20wed%20timetable.png?raw\u003dtrue) \u003cbr\u003e\u003c/br\u003e\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e* You will see the timetable for today if you use `show today` input. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showtimetablecommand%20today%20timetable.png?raw\u003dtrue) \u003cbr\u003e\u003c/br\u003e\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e* Example of \"current time\" indicator showing the current time \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showtimetablecommand%20current%20time%20indicator.png?raw\u003dtrue) "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e\u003cbr\u003e\u003c/br\u003e\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e* Example of \"lesson now\" indicator highlighting the current lesson \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e![](https://github.com/TYS0n1/tp/blob/master/docs/images/showtimetablecommand%20lesson%20now%20indicator.png?raw\u003dtrue) \u003cbr\u003e\u003c/br\u003e\u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003c!-- @@author xingrong123--\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003ca name\u003d\"showmoduledetails\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### 5.3.2 Show module and slot details: `show` (Xing Rong)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "You can use this command to show the details of a module or slot that has been added.  "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "You can see the respective indexes of each of the slots from the module "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "and using the `bookmarks` keyword will show the bookmarks which are saved in the module and its slots."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e * You can only see modules that are listed on the NUSMods website. "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e You can see the [command format](#command_format) for more information."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (show module details): show {MODULE} bookmarks(optional)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* `show CS2113T`  "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e![](images/showTimetableCommand/showmoduleoutput.PNG)  "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* `show CS2113T bookmarks`  "
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e![](images/showTimetableCommand/showmodulebookmarksoutput.PNG)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003ca name\u003d\"addtimeslot\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### 5.3.3 Add module, time slot and bookmark: `add` (Xing Rong)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "You can add modules, time slots and bookmarks using this feature."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "You can also chain commands when adding multiple slots and bookmarks to a module by using `,` as a separator."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* You are required to insert **a space** between each parameter."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* The chaining of commands only performs on **one module** which is `{MODULE}`.    "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* You can only add a module that is listed on the NUSMods website. "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* You have to format your commands as shown below for Zoomaster to read it properly."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eYou can see the [command format](#command_format) for more information."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* Your `DESCRIPTION` must only contain one word (no whitespace inside). "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eSee the [command format](#command_format) for more details."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* Your input `URL` has to start with `www.`, `http://` or `https://`."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* The validity of the `URL` you entered cannot be checked. Please ensure that you entered the correct link. "
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* You have to enter `DAY` input according to the command format else it will not be recognised as a valid date. "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eThe valid inputs are `mon`, `tue`, `wed`, `thu`, `fri`, `sat`, `sun`and `today`. "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eYou can see the [command format](#command_format) for more information."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* The period you enter from `{START_TIME}` to `{END_TIME}` cannot cross over midnight. "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eEg. 23:30 to 00:30 is not a valid period you can enter."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eYou can work around this by splitting up your timeslot into two periods, one before midnight and one after."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eEg. 23:30 to 23:59 and 00:00 to 00:30"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (adding a module): add {MODULE}"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (adding a slot to a module): add {MODULE} {DESCRIPTION} {DAY} {START_TIME} {END_TIME} "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (adding a bookmark to a module): add {MODULE} {DESCRIPTION} {URL}"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (adding a bookmark to a slot): add {MODULE} {DESCRIPTION} {DAY} {START_TIME} {END_TIME} {URL}"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                                      add {MODULE} {INDEX} {URL}"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (chaining commands): add {MODULE} {DESCRIPTION} {DAY} {START_TIME} {END_TIME} {URL}, {DESCRIPTION} {URL}, ..."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```  "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* Multiple bookmarks can be added to a module and a slot."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "  * To add another bookmark to an existing module, you have to enter the module code of the "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    existing module in the timetable. "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "  * To add another bookmark to an existing slot, you can enter the command with the matching details "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    of the existing slot or use the index number of the slot in the module to access the slot. "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    The index number of the slot can be found by using the command `show {MODULE}`. "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* Each command works by checking if each of the components (module, slot, bookmark) "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "  exists or is valid from left to right of the input before adding them."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "  * In the command `add cs2113t lecture fri 16:00 18:00`, if `cs2113t` module already exists, "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    then it will not be added into the timetable. The slot `lecture fri 16:00 18:00` "
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    will then be added to the existing `cs2113t` module."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* **Adding a module**  "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Input: `add CS2113T`  "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Output:  "
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e![](images/addSlotCommand/addmoduleoutput.PNG)  "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* **Adding a slot to a module**  "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Input: `add CS2102 tutorial fri 10:00 12:00`  "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Output:  "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e![](images/addSlotCommand/addslottomoduleoutput.PNG)  "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* **Adding a bookmark to a module**  "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Input: `add CS2113T module-website https://nus-cs2113-ay2021s1.github.io/website/index.html`  "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Output:  "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e![](images/addSlotCommand/addbookmarktomoduleoutput.PNG)  "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* **Adding a bookmark to a slot**  "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Input: `add CS2102 tutorial fri 10:00 12:00 www.google.com`   "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Output:  "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e![](images/addSlotCommand/addbookmarktoslotoutput.PNG)  "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* **Chaining commands**  "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Input: `add CG2271 tutorial thu 11:00 12:00, lecture wed 09:00 11:00 www.yahoo.com, example-bookmark https://www.youtube.com`  "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Output:  "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e(The indentation of each line of the output shows the relationships between the components."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eIn the output shown below, `bookmarks added to CG2271 lecture` is one level of indentation "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003ehigher than the previous line. This means that the bookmark is added to that lecture slot."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eSimilarly, `bookmark added to module` is one level of indentation higher than `CG2271 added`, "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003ewhich suggests that the bookmark is added to the module CG2271.)  "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e![](images/addSlotCommand/addchaincommandoutput.PNG)  "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e  * Result:  "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e![](images/addSlotCommand/addresult.PNG)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "  "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "More examples:"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `add cs2113t`  "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `add cs2113t lecture fri 16:00 18:00`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `add cs2113t notes www.google.com`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `add cs2113t lecture fri 16:00 18:00 www.google.com`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `add cs2113t 1 www.yahoo.com`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `add cs2113t lecture fri 16:00 18:00 www.google.com, notes www.google.com, tutorial fri 10:00 12:00`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003ca name\u003d\"deletetimeslot\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### 5.3.4 Delete module, time slot and bookmarks: `delete` (Xing Rong)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Deletes module, time slot or their bookmarks."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png)"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* You can only delete a module that is listed on the NUSMods website. "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e You can see the [command format](#command_format) for more information."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (deleting a module): delete {MODULE}"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (deleting a slot of a module): delete {MODULE} {INDEX} "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (deleting bookmarks of a module): delete {MODULE} bookmarks "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (deleting bookmarks of a slot of a module): delete {MODULE} {INDEX} bookmarks "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* Deleting bookmarks will delete all bookmarks associated with the module or slot."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* `delete CS2113T` "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* `delete CG2271 1` "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* `delete CS2113T bookmarks` "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* `delete CS2113T 1 bookmarks` "
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003ca name\u003d\"edittimeslot\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "#### 5.3.5 Edit slot\u0027s module, title, time: `edit`  (Francisco) "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Edits the module, title or time for a specific slot."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003e* You can only edit a module that is listed on the NUSMods website. "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003eYou can see the [command format](#command_format) for more information. "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Format (editing the module of a slot): edit module {DAY} {INDEX} {new MODULE}"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Format (editing the title of a slot): edit title {DAY} {INDEX} {new TITLE}"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "Format (editing the time of a slot): edit time {DAY} {INDEX} {DAY} {new START_TIME} {new END_TIME}"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "```"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Obtain the `DAY` and `INDEX` of the slot to be edited using the `show` command."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* For editing the time of a slot, the first `DAY` parameter is to choose the slot you wish to edit."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The second `DAY` parameter is for the new day of the week you wish to set your slot."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003c!-- @@author fchensan --\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e For example, let\u0027s say that you have these two slots on Wednesday: \u003cbr\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/editslotcontext.png)"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e If you want to change the title of the second slot to \"tutorial\", you can simply type `edit title wed 2 tutorial`."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e You should then see a message as shown below: \u003cbr\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/editslot.png)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e More examples of usage:   "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e* `edit module mon 1 CS1010`  "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e* `edit title mon 1 lecture`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003e* `edit time mon 1 fri 10:00 12:00`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "fchensan"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003c!-- @@author xingrong123--\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003ca name\u003d\"launchtimeslot\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### 5.3.6 Launch bookmarks from module, slot: `launch` (Xing Rong)  "
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Launches the bookmarks of slots or the bookmarks of a module"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e ![](https://raw.githubusercontent.com/fchensan/tp/docs-images/docs/images/bangbang.png)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003e* You can only launch a module that is listed on the NUSMods website. "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003eYou can see the [command format](#command_format) for more information."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (launch module bookmarks): launch {MODULE}"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Format (launch slot bookmarks): launch {MODULE} {INDEX}"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "```"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* Obtain the `INDEX` of the slot to be launched using the `show {MODULE}` command."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `launch {MODULE}` launches the bookmarks tagged to the module itself, for example, the module website"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `launch {MODULE} {INDEX}` launches the bookmarks tagged to the second slot of the module, "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "for example, the zoom link for tutorial"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `launch CS2113`  "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* `launch CS2113 2`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "\u003c!-- @@author --\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003c!-- @@author jusufnathanael --\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003ca name\u003d\"plannermode\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "### 5.4. Planner Mode (Jusuf)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003ca name\u003d\"loadplanner\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### 5.4.1. Load planner: `load`  "
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Loads all the timetables from the `planner` folder and helps you find some common empty slots."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "```"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Format: load"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "```"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* You need to copy the different .txt files manually to the planner folder before entering this command."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* This command only displays the common empty time slots between."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "You can try to download some timetable samples from [here](https://github.com/AY2021S1-CS2113T-W11-1/tp/tree/master/docs/timetable_samples)."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003ca name\u003d\"addmeeting\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### 5.4.2. Add meeting: `add`  "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "You can add modules, time slots, and bookmarks using this feature."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "You can also chain commands when adding multiple slots and bookmarks to a module by using `,` as a separator."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Format: same as [add time slots](#addtimeslot) command."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* You can only add a new meeting to empty time slots."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* Note that this command does not automatically store the newly added meeting to the .txt files. "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* You will need to type `save` to save your changes."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003ca name\u003d\"showplanner\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### 5.4.3. Show planner: `show`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "You will be able to see the empty time slots for a certain day or the whole week."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "If your selected timetable is the current day, you should be able to see a "
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\"current time\" indicator with your system local time. Else, if you have a lesson ongoing currently,"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "it will instead show a \"lesson now\" indicator *around* your current lesson."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "```"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Format: show {DAY(optional)}"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "```"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* The valid day inputs are `mon`, `tue`, `wed`, `thu`, `fri`, `sat`, `sun`, and `today`. "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* You have to enter `DAY` input according to the command format else it will not be recognised as a valid date. "
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* You can see the [command format](#command_format) for more information."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* `show`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* `show wed`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "* `show today`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Output:"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003cimg src\u003d\"./images/showplannercommand.PNG\" width\u003d\"308\" height\u003d\"328\" /\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "\u003ca name\u003d\"saveplanner\"\u003e\u003c/a\u003e  "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### 5.4.4. Save planner: `save`  "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Saves the newly added slot(s) to each individual timetable."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "```"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Format: save"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "```"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003c!-- @@author Speedweener --\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "## 6.0 FAQ  "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**Q**: My Zoomaster logo looks weird! Is there something wrong with my program?   "
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "  "
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**A**: Some users might encounter a start-up screen that looks like this. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/AY2021S1-CS2113T-W11-1/tp/master/docs/images/buglogo.png)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "This is only a visual bug. Other than the weird-looking logo, Zoomaster will work as per normal. No"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "need to worry!"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "  "
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**Q**: How do I transfer my data to another computer?   "
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "  "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**A**: Simply copy the `data/bookmarks.txt` and `data/slots.txt` file to the **data** directory. This directory should be"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Speedweener"
        },
        "content": " in the same location where you have stored the `jar` file. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "![](https://raw.githubusercontent.com/Speedweener/ip/master/docs/images/directory.png)"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Start the application and all the data should be loaded."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e\u003cbr/\u003e "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**Q**: Can I add a module not from NUS?   "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "  "
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**A**: Yes you can! \u003cbr\u003e In the **data** directory locate the  `modulelist.txt` file. Add the new module on a new line"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "and save the txt file. You can now add the module in Zoomaster."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "\u003cbr/\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "## 7.0 Command Summary"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**Action** | **Format, Examples**"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "***Global***|"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**help**|`help {COMMAND(optional)}`\u003cbr\u003eexample: `help`, `help add`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**mode**|`mode {bookmark/timetable/planner}`\u003cbr\u003eexample: `mode bookmark`"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**clear**|`clear`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**launch now**|`launch now`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**show settings**|`showsettings`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**set a setting**|`set {SETTING_NAME} {NEW_OPTION}`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**exit**|`exit`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "***Bookmark Mode***|"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**show**|`show`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**add**|`add {DESCRIPTION} {URL}` \u003cbr\u003eexample: `add cheatsheet www.google.com` \u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**delete**|`delete {INDEX}`\u003cbr\u003eexample: `delete 2`|"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**edit**|`edit {desc/url} {INDEX} {NEW_VALUE}`\u003cbr\u003eexample: `edit desc 1 math`, `edit url 3 www.google.com`|"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**find**|`find {MODULE} {DESCRIPTION(optional)}` \u003cbr\u003eexample: `find CS2113 tutorial`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**launch**|`launch {MODULE} {DESCRIPTION(optional)}` \u003cbr\u003eexample: `launch CS2113`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "***Timetable Mode***|"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**show (lessons)**|`show {DAY(optional)}` \u003cbr\u003eexample: `show`, `show wed`, `show today` "
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**show (bookmarks\u003cbr\u003eattatched)**| `show {MODULE} bookmarks(optional)`\u003cbr\u003eexample: `show CS2113`, `show CS2113 bookmarks`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**add**|`add {MODULE}` \u003cbr\u003eexample: `add CS2113T` \u003cbr/\u003e\u003cbr/\u003e `add {MODULE} {DESCRIPTION} {DAY} {START_TIME} {END_TIME}` \u003cbr\u003eexample: `add CS2113T tutorial wed 11:00 12:00` \u003cbr/\u003e\u003cbr/\u003e`add {MODULE} {DESCRIPTION} {URL}` \u003cbr\u003eexample: `add CS2113T tutorial www.yahoo.com` \u003cbr/\u003e\u003cbr/\u003e `add {MODULE} {DESCRIPTION} {DAY} {START_TIME} {END_TIME} {URL}` \u003cbr\u003eexample: `add CS2113T tutorial wed 11:00 12:00 www.yahoo.com` \u003cbr/\u003e\u003cbr/\u003e`add {MODULE} {INDEX} {URL}` \u003cbr\u003eexample: `add CS2113T 2 www.yahoo.com`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**delete**| `delete {MODULE}` \u003cbr\u003eexample: `delete CS2113`\u003cbr/\u003e\u003cbr/\u003e`delete {MODULE} {INDEX}` \u003cbr\u003eexample: `delete CS2113 2`\u003cbr/\u003e\u003cbr/\u003e`delete {MODULE} bookmarks` \u003cbr\u003eexample: `delete CS2113 bookmarks`\u003cbr/\u003e\u003cbr/\u003e`delete {MODULE} {INDEX} bookmarks` \u003cbr\u003eexample: `delete CS2113 2 bookmarks`\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**edit**| `edit module {DAY} {INDEX} {new MODULE}` \u003cbr\u003e example: `edit module fri 2 CS1010` \u003cbr/\u003e\u003cbr/\u003e `edit title {DAY} {INDEX} {new TITLE}`\u003cbr\u003e example: `edit title fri 2 tutorial` \u003cbr/\u003e\u003cbr/\u003e`edit time {DAY} {INDEX} {new START_TIME} {new END_TIME}` \u003cbr\u003e example: `edit time fri 2 16:00 18:00`"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**launch**|`launch {MODULE}` \u003cbr\u003e example: `launch CS2113` \u003cbr/\u003e\u003cbr/\u003e `launch {MODULE} {INDEX}` \u003cbr\u003e example: `launch CS2113 1` "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "***Planner Mode***|"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**load**|`load`"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**show**|`show {DAY(optional)}` \u003cbr\u003eexample: `show`, `show wed`, `show today` "
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**add**|see add in timetable mode above"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "**save**|`save`"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 188,
      "TYS0n1": 226,
      "jusufnathanael": 75,
      "fchensan": 79,
      "Speedweener": 187,
      "-": 18
    }
  },
  {
    "path": "docs/team/Speedweener.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "# Kwek Zhan Hao - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Our team of 5 Computer Engineering students created the Java Commmand Line Interface app Zoomaster. In times"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "where most lessons are held online over Zoom, Zoomaster allows students to conveniently save all their important"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "bookmarks and launch them when needed. Zoomaster also has a timetable feature, which allows students to recreate"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "their lesson timetable and add bookmarks to each individual lesson slot. The app can then launch the specific"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "links required by matching the system time with the timetable. Lastly, the app also has a meeting planner feature, which"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "can help groups of students swiftly determine available meeting times by comparing their timetable slots."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### Code contributed:   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Click "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "[here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dw11\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dSpeedweener\u0026tabRepo\u003dAY2021S1-CS2113T-W11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003dfunctional-code~test-code) "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "to view my code contributions on the tP Code Dashboard.  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "As the Dashboard is unable to detect some of my commits, click "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "[here](https://github.com/AY2021S1-CS2113T-W11-1/tp/pulls?q\u003dis%3Apr+author%3ASpeedweener) "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "to see my pull requests to the team Github repository."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### Enhancements implemented:  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* The JAnsi library to allow coloured output on the Command Line, so that the output to the user is more vibrant"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "and the differentiation between types of messages is clearer (eg. Error messages are red in colour). Also enables"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "the clear screen function. Also created the Zoomaster logo (including the one in the code)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* Retrieving of NUS module list from NUS MODS API based on the current year. Allows for validation of modules entered,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "prevents errors due to typos for modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* Obtaining the jar file path for saving data of the app, such that the app can be run from anywhere in the command line"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "with the save files still being read from and saved in the same folder as the jar file. This allows running of the "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "application to be much more convenient."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* Extended HelpCommand, so that users can quickly check the format for different command in each different mode without"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "having to check back with the User Guide."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### Contributions to the UG:  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* Did some initial set up for User Guide. Also contributed to:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Quick Start "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Clear Screen"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * Show, Add, Delete, Find, Launch (bookmark mode)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    * FAQ"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### Contributions to the DG:  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* Did diagram for the overall architecture, initialization class diagram, Commands class diagrams."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* Explained Ui component"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "* Did sequence diagrams and explanations for Validate Modules feature and Extended HelpCommand feature"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "#### Other contributions:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "Click [here](https://nus-cs2113-ay2021s1.github.io/dashboards/contents/tp-comments.html#178-kwek-zhan-hao-speedweener-0-comments)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "to see view my comments on issues in the team repository.  "
      }
    ],
    "authorContributionMap": {
      "Speedweener": 49
    }
  },
  {
    "path": "docs/team/fchensan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fchensan"
        },
        "content": "# Francisco Chensan – Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fchensan"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fchensan"
        },
        "content": "I am a part of a team of 5 software engineers and together we created a command line interface application called Zoomaster that helps students store Zoom meeting links."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fchensan"
        },
        "content": "The app stores the links in a user-created lesson timetable, such that the user is able to launch appropriate Zoom links based on the current"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fchensan"
        },
        "content": "system time without manually selecting a lesson slot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fchensan"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": "This section shows the summary of my contribution in code, enhancements, documentation, and more."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": "### Code contributed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "Please click [here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dfchensan\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dfchensan\u0026tabRepo\u003dAY2021S1-CS2113T-W11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": "to view the code that I have contributed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": "#### Features implemented"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Edit bookmarks in bookmark mode and slots in timetable mode."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* User settings."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * The `UserSettings` and `SettingsVariable` classes are implemented in such a way that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    it is very easy to add new settings and options for the user to choose (by using generics, etc)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": "### Enhancements to existing features"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Removed hardcoding of command keywords in the `help` output list of available commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Added ordering of modules based on time in `show {MODULE}` output."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "### Contributions to User Guide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Added documentation for these commands:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * `showsettings` and `set` settings command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * `edit` in bookmark and timetable mode"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Added an overview of the features to better guide the readers."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Suggested the use of a table to better organise notes on command labels."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": "### Contributions to Developer Guide"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Added explanations and sequence diagrams of the implementation of:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * `showsettings`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * `set` (settings command)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    * `edit` (timetable command)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": "### Contributions to team-based tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Implemented the use of the `Gson` library. "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": "This makes it easier for the whole team to implement new features "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": "(no need to implement encoders and decoders for storage)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Resolved issues assigned to me so that they do not clutter the issues page."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": "### Contributions beyond the project teams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": "* Gave another team feedback and helped discover bugs [here](https://github.com/fchensan/ped/issues)."
      }
    ],
    "authorContributionMap": {
      "fchensan": 45
    }
  },
  {
    "path": "docs/team/jusufnathanael.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "# Jusuf Nathanael - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Our team of 5 NUS computer engineering students has developed a Java Command the Java Commmand Line Interface app called **Zoomaster**. Zoomaster provides a simple and intuitive solution to store Zoom links for online classes, especially during this online learning period. These links and bookmarks are stored under the timetable feature, in which Zoomaster will also manage the user\u0027s classes and schedule. Finally, Zoomaster is also integrated with a planner feature that allows the user to plan a group meeting, simply by looking at the common empty slots among the team members."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### Code contributed:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "Click [here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#search\u003djusufnathanael\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djusufnathanael\u0026tabRepo\u003dAY2021S1-CS2113T-W11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code) to view my code contributions on the tP Code Dashboard."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "As the Dashboard is unable to detect some of my commits, click [here](https://github.com/AY2021S1-CS2113T-W11-1/tp/pulls?q\u003dis%3Apr+author%3Ajusufnathanael) to see my pull requests to the team Github repository. Some changes to the User Guide and Developer Guide are often directly made to the team repository."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### Enhancements implemented:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "I implemented a **planner** feature, which is an extension of the timetable feature that allows users to find common empty slots among the team members."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- This feature can combine a few individual timetables from each of the team members and generate a list of the common empty slots. The user only needs to insert the timetable files into a folder called *planner*. Then, the user will be able to load the empty slots repeatedly."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- The user can add a new group meeting (similar to the timetable feature), but I have added a validation, such that the group meeting must only be added to an empty slot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- In this feature, the newly-added group meeting will not be automatically written to the timetable files. This allows the user to make further modifications to the meeting itself, as well as to facilitate the possibility of adding new members to the team (adding a new timetable file). To save the meeting to each individual timetable, the user will then need to enter the `save` command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### Contributions to the User Guide:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- Wrote the planner feature which includes the `load`, `add`, `show`, and `save` commands. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- Provided timetable samples for testing on planner mode."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- Wrote descriptions on the planner feature, as well as its general flow and mechanism."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- Provided sequence diagrams for the `load` and `save` commands from the planner feature."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- Described the design considerations for the planner feature."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### Contributions to Team-Based Tasks:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- Did a bit of [formatting](https://github.com/AY2021S1-CS2113T-W11-1/tp/commit/5a377d30a6d0909233e1ce97875a97aa312d9fd2) on the User Guide."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- Reviewed any grammatical errors for the [User Guide](https://github.com/AY2021S1-CS2113T-W11-1/tp/commit/82aee165044c85901d9fadc757a2913784118951) and [Developer Guide](https://github.com/AY2021S1-CS2113T-W11-1/tp/commit/d9b600603e0d79cb31640411ac1f9570a6816e1a) before the final submission."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "#### Other Contributions:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "- Reported bugs during the [PE dry run](https://github.com/jusufnathanael/ped/issues). "
      }
    ],
    "authorContributionMap": {
      "jusufnathanael": 40
    }
  },
  {
    "path": "docs/team/tys0n1.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "# Tan Yu Shing – Project Portfolio Zoomaster"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## About the project"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "My team of 4 software engineering students and I were tasked with creating a command line interface desktop application for our Software Engineering project.  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "We designed our application to launch Zoom links using the command line interface called Zoomaster. \u003cbr\u003e\u003c/br\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "This new application enables NUS students to easily store website links and launch them quickly; create a timetable with said website links attached and quickly launch Zoom lessons for the current lesson in the timetable; and a planner to help organize their timetables to suit that of their teammates."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "## Summary of contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "This section shows the summary of my coding, documentation, and other helpful contributions to the team project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "**Enhancement added:** I added the ability to switch between different modes of the App and the command to print out the list of timetable lessons in sequential order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\tWhat it does: The **mode** command allows the user to switch between the three modes of the App. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The **show** command allows the users to view list of timetable lessons in three ways; view entire timetable; view timetable on specific day; or view today’s timetable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\tJustification: The **mode** command allows users to easily change between different modes of the App. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "It also allows unified inputs in each mode which reduces the number of commands the users have to remember when using the App. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The **show** command allows users to view the changes they had made to their timetable to see if they made correct changes. They can also and view upcoming lessons and get prepared for them ahead of time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "*\tHighlights: The **mode** enhancement works with existing as well as future commands. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The logic of the App is modularized such that additional modes can be added easily. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The **show** command to view the timetable is unified with the command to view bookmarks attached to lesson slots. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "The algorithm searches for keywords within the input command to decode if it is to view the timetable or the bookmarks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "**Code contributed:** Please click these links to see a sample of my code: [Functional code](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dw11\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dTYS0n1\u0026tabRepo\u003dAY2021S1-CS2113T-W11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003dfunctional-code) "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "[Test code](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dw11\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dTYS0n1\u0026tabRepo\u003dAY2021S1-CS2113T-W11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003dtest-code)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "**Other contributions:**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * There was a total of 3 releases, from version 1.0 to 2.1. I managed release version 2.0 on GitHub."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Enhancements to existing features:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Adjusted colour scheme of a few print statements to allow users to see text better against a dark background: "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    [#174](https://github.com/AY2021S1-CS2113T-W11-1/tp/pull/174), [#176](https://github.com/AY2021S1-CS2113T-W11-1/tp/pull/176)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Created navigation links to different sections for table of content to allow quick navigation by the readers: "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    [#135](https://github.com/AY2021S1-CS2113T-W11-1/tp/pull/135), [#137](https://github.com/AY2021S1-CS2113T-W11-1/tp/pull/137/files)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Wrote descriptions of Zoomaster components. Explained the implementations of Zoomaster modes feature and Show timetable feature. Also created the sequence and activity diagrams for those features. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    ([PRs](https://github.com/AY2021S1-CS2113T-W11-1/tp/pulls?q\u003dis%3Apr+is%3Aclosed+assignee%3ATYS0n1))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Community"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Reviewed PE feedback from peers and assigned team mates to help resolve issues: "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    [#141 to #171](https://github.com/AY2021S1-CS2113T-W11-1/tp/issues?q\u003dis%3Aopen+is%3Aissue)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Reported bugs and offered suggestions for other teams during [PE](https://github.com/TYS0n1/ped/issues)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "* Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    * Utilised Jansi library (Fusesource) to create coloured text in team project "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    ([#101](https://github.com/AY2021S1-CS2113T-W11-1/tp/pull/101), "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    [#174](https://github.com/AY2021S1-CS2113T-W11-1/tp/pull/174), "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    [#176](https://github.com/AY2021S1-CS2113T-W11-1/tp/pull/176))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 45
    }
  },
  {
    "path": "docs/team/xingrong123.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "# Tey Xing Rong - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Our team has developed a command line interface application called Zoomaster which helps NUS students to store "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "information of their lesson timetable and website links. Zoomaster can launch the stored websites such as zoom links "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "in a quick and convenient way, and has a feature to help students plan for group meetings by collating their timetable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### Code contributed:   "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Click "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "[here](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dxingrong123\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other) "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "to view my code contributions on the tP Code Dashboard.  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "As the Dashboard is unable to detect some of my commits, click "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "[here](https://github.com/AY2021S1-CS2113T-W11-1/tp/pulls?q\u003dis%3Apr+author%3Axingrong123) "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "to see my pull requests to the team Github repository."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### Enhancements implemented:  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* The ability for the user to enter multiple commands in one shot when adding a module to the timetable. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "The user can add lesson slots, and bookmarks to the module as well as the lesson slots in one command, instead of "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "entering the details one line at a time, allowing fast typists to set up their timetable faster."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* Support for launching URLs on the different operating systems such as Windows, macOS, Linux and Unix."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### Contributions to the UG:  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* Instructions for commands  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    * launch now (Global Commands)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    * Show module and slot details (timetable mode)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    * Delete module, slot and bookmarks (timetable mode)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    * Launch bookmarks from modules and slots (timetable mode)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### Contributions to the DG:  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* The descriptions of the implementation of addSlotCommand and deleteSlotCommand. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "* Added class and sequence diagrams to explain the implementation of both commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "#### Other contributions:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "Click [here](https://nus-cs2113-ay2021s1.github.io/dashboards/contents/tp-comments.html#159-tey-xing-rong-xingrong123-0-comments) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "to see view my comments on issues in the team repository.  "
      }
    ],
    "authorContributionMap": {
      "xingrong123": 38
    }
  },
  {
    "path": "docs/timetable_samples/sample1.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "  \"modules\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"moduleCode\": \"CS1010\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"bookmarks\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"bookmarks\": [],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"items\": []"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"slots\": ["
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 12,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 13,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"mon\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"description\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 12,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 13,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"tue\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"description\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 12,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 13,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"tue\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"lab\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jusufnathanael": 77
    }
  },
  {
    "path": "docs/timetable_samples/sample2.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "  \"modules\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"moduleCode\": \"CS2113T\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"bookmarks\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"bookmarks\": [],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"items\": []"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"slots\": ["
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 15,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 16,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"mon\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"description\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 19,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 21,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"tue\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"description\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 11,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 13,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"tue\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"description1\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jusufnathanael": 77
    }
  },
  {
    "path": "docs/timetable_samples/sample3.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "  \"modules\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"moduleCode\": \"CS1010\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"bookmarks\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"bookmarks\": [],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"items\": []"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"slots\": ["
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 12,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 13,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"mon\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"description\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 12,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 13,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"tue\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"lecture\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 12,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 13,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"tue\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"tutorial\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    },"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"moduleCode\": \"CS2040C\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"bookmarks\": {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"bookmarks\": [],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"items\": []"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      },"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"slots\": []"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    },"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"moduleCode\": \"CS3243\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"bookmarks\": {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"bookmarks\": [],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        \"items\": []"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      },"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      \"slots\": ["
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"startTime\": {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 12,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"endTime\": {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"hour\": 13,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"minute\": 0,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"second\": 0,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"nano\": 0"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          },"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"day\": \"mon\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"title\": \"lecture\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          \"bookmarks\": {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"bookmarks\": [],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"lineSeparator\": \"\\r\\n\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            \"items\": []"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "          }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jusufnathanael": 117
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.ChangeModeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.command.LaunchNowCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.AddBookmarkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.bookmark.DeleteBookmarkCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.bookmark.EditBookmarkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.bookmark.LaunchBookmarkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.bookmark.FindBookmarkCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.bookmark.ShowBookmarkCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.planner.AddMeetingCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.planner.LoadPlannerCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.command.planner.SavePlannerCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.settings.SetSettingsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.settings.ShowSettingsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.AddSlotCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.DeleteSlotCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.command.timetable.LaunchModuleAndSlotBookmark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.timetable.EditSlotCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.ShowTimetableCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * This class deals with making sense of the user command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Variable programMode controls the mode Zoomaster program is in."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * programMode \u003d\u003d 0: Main menu mode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * programMode \u003d\u003d 1: Bookmark mode"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * programMode \u003d\u003d 2: Timetable mode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * programMode \u003d\u003d 3: Planner mode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static int programMode \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Creates and returns the command based on user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param input full user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @return command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException If input command is unknown."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static Command parse(String input) throws ZoomasterException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Command command \u003d createCommand(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static Command createCommand(String input) throws ZoomasterException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (input.compareToIgnoreCase(ExitCommand.EXIT_KW) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.compareToIgnoreCase(LaunchNowCommand.LAUNCH_NOW_KW) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d new LaunchNowCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.toLowerCase().startsWith(ChangeModeCommand.MODE_KW)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d new ChangeModeCommand(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.compareToIgnoreCase(ClearCommand.CLEAR_KW) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d new ClearCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.startsWith(HelpCommand.HELP_KW)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d new HelpCommand(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.startsWith(ShowSettingsCommand.SHOW_KW)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d new ShowSettingsCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.startsWith(SetSettingsCommand.SET_KW)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d new SetSettingsCommand(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (programMode \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d createBookmarkCommand(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (programMode \u003d\u003d 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d createTimetableCommand(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (programMode \u003d\u003d 3) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            command \u003d createPlannerCommand(input);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private static Command createBookmarkCommand(String input) throws ZoomasterException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (input.startsWith(ShowBookmarkCommand.SHOW_KW)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            return new ShowBookmarkCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (input.startsWith(DeleteBookmarkCommand.DEL_KW)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            return new DeleteBookmarkCommand(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (input.startsWith(AddBookmarkCommand.ADD_KW)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            return new AddBookmarkCommand(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (input.startsWith(LaunchBookmarkCommand.LAUNCH_KW)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            return new LaunchBookmarkCommand(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (input.startsWith(EditBookmarkCommand.EDIT_KW)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            return new EditBookmarkCommand(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (input.startsWith(FindBookmarkCommand.FIND_KW)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            return new FindBookmarkCommand(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private static Command createTimetableCommand(String input) throws ZoomasterException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        // Add Timetable Commands on merge"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (input.startsWith(AddSlotCommand.ADD_KW)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            command \u003d new AddSlotCommand(input);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (input.startsWith(DeleteSlotCommand.DEL_KW)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            command \u003d new DeleteSlotCommand(input);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (input.startsWith(ShowTimetableCommand.SHOW_KW)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            return new ShowTimetableCommand(input);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (input.startsWith(LaunchModuleAndSlotBookmark.LAUNCH_KW)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            command \u003d new LaunchModuleAndSlotBookmark(input);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (input.startsWith(EditSlotCommand.EDIT_KW)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            command \u003d new EditSlotCommand(input);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    //@@author jusufnathanael"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private static Command createPlannerCommand(String input) throws ZoomasterException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (input.startsWith(AddMeetingCommand.ADD_KW)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            return new AddMeetingCommand(input);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } else if (input.startsWith(ShowTimetableCommand.SHOW_KW)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            return new ShowTimetableCommand(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } else if (input.startsWith(SavePlannerCommand.SAVE_KW)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            return new SavePlannerCommand(input);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } else if (input.startsWith(LoadPlannerCommand.LOAD_KW)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            return new LoadPlannerCommand(input);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public static int getProgramMode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return programMode;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 55,
      "TYS0n1": 61,
      "fchensan": 12,
      "jusufnathanael": 21
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": "public class Storage\u003cT\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private final Class\u003cT\u003e storageClass;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Constructs a new Storage instance by storing the given pathname of the file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param path The pathname of the file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public Storage(String path, Class\u003cT\u003e storageClass) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (os.contains(\"mac\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            this.filePath \u003d path.replace(\"./\", File.separator);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            this.filePath \u003d path.replace(\u0027/\u0027, File.separatorChar);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        this.storageClass \u003d storageClass;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Returns the tasks found within the file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @return Objects T found in the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @throws ZoomasterException If file is not found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public T load() throws ZoomasterException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String fileAsString;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            fileAsString \u003d Files.readString(Paths.get(filePath));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            return createNewInstance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (!fileAsString.equals(\"null\") \u0026\u0026 !fileAsString.isBlank()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            return gson.fromJson(fileAsString, storageClass);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            return createNewInstance();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private T createNewInstance() throws ZoomasterException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            return storageClass.getDeclaredConstructor().newInstance();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.ERROR_LOADING_FILE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    //@@author jusufnathanael"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public ArrayList\u003cFile\u003e getFiles() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        File folder \u003d new File(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(folder.listFiles()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    //@@author jusufnathanael"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public T loadPlanner() throws ZoomasterException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        File folder \u003d new File(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            createDirectory();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.ERROR_LOADING_FILE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (folder.listFiles() \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            return createNewInstance();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            ArrayList\u003cFile\u003e listOfFiles \u003d getFiles();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            StringBuilder fileAsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            String opening \u003d \"{\" + Ui.NEW_LINE + \"  \\\"modules\\\": [\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            fileAsString.append(opening);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            for (File f : listOfFiles) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    StringBuilder line \u003d new StringBuilder(Files.readString(Paths.get(f.getPath())));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    Timetable temp \u003d (Timetable) gson.fromJson(line.toString(), storageClass);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    if (!temp.isEmpty()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                        fileAsString.append(line.delete(0, 16));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                        fileAsString.delete(fileAsString.length() - 6, fileAsString.length());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                        fileAsString.append(\",\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    return createNewInstance();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            fileAsString.delete(fileAsString.length() - 1, fileAsString.length());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            String closing \u003d Ui.NEW_LINE + \"  ]\" + Ui.NEW_LINE + \"}\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            fileAsString.append(closing).append(Ui.NEW_LINE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            if (!fileAsString.toString().equals(\"null\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                return gson.fromJson(fileAsString.toString(), storageClass);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                return createNewInstance();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_FOLDER);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    //@@author jusufnathanael"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public void writePlanner(Object t, File f) throws ZoomasterException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        String jsonString \u003d gson.toJson(t);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            writeToFile(jsonString);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.WRITE_FILE_ERROR);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * This method creates the file if it does not exist and saves tasks data in the file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param data An object to be converted into JSON and saved in the file."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @throws ZoomasterException If there is an error writing to the file."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public void save(Object data) throws ZoomasterException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            createDirectory();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            String jsonString \u003d gson.toJson(data);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            writeToFile(jsonString);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.WRITE_FILE_ERROR);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private void createDirectory() throws IOException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        String dirPath \u003d getDirectory(filePath);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Path path \u003d Paths.get(dirPath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Files.createDirectories(path);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private String getDirectory(String path) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        String dirPath;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (path.contains(File.separator)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            dirPath \u003d path.substring(0, path.lastIndexOf(File.separator));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            dirPath \u003d path;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return dirPath;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, false);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Makes a connection to the NUSMODS API URL and retrieves the JSON"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * file moduleList. Then converts JSON to an Array\u003cString\u003e\u003c/String\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * of module codes to be returned."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @return Array\u003cString\u003e\u003c/String\u003e of module codes"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @throws ZoomasterException CONNECTION_ERROR and JSON_PARSE_ERROR"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    // Solution below adapted from AY2021S1-CS2113T-T09-2"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    // https://github.com/AY2021S1-CS2113T-T09-2/tp/../data/storage/Decoder.java"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    //@@author Speedweener"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private ArrayList\u003cString\u003e nusModuleListFromNusMods() throws ZoomasterException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String weblink \u003d \"\"; // For exception messages"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            URL url \u003d getNusModsUrl();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            weblink \u003d url.toString();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            HttpURLConnection connection \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            connection.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            connection.connect();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            int responseCode \u003d connection.getResponseCode();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (responseCode !\u003d 200) { //Unable to connect"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            StringBuilder jsonAsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            Scanner sc \u003d new Scanner(url.openStream());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            while (sc.hasNext()) { // if line is empty, means finish reading"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                jsonAsString.append(sc.nextLine());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            return jsonToArrayList(jsonAsString.toString());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.CONNECTION_ERROR, weblink);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.JSON_PARSE_ERROR, weblink);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Converts the moduleList JSON to Array\u003cString\u003e\u003c/String\u003e of module codes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return Array\u003cString\u003e\u003c/String\u003e of module codes"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws ParseException When unable to parse JSON files from NUSMODS"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private ArrayList\u003cString\u003e jsonToArrayList(String jsonAsString) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        JSONParser parse \u003d new JSONParser();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        JSONArray moduleArray \u003d (JSONArray) parse.parse(jsonAsString);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ArrayList\u003cString\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleArray.size(); i++) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            JSONObject module \u003d (JSONObject) moduleArray.get(i);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            moduleList.add(module.get(\"moduleCode\").toString());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns the url of moduleList JSON file from NUSMODS API for the current year."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return URL"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws MalformedURLException If URL is invalid"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private URL getNusModsUrl() throws MalformedURLException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        int year \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return new URL(\"https://api.nusmods.com/v2/\" + year + \"-\" + (year + 1)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                + \"/moduleList.json\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Loads modulelist from the txt file if the file exists locally and returns"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * it as an Array\u003cString\u003e\u003c/String\u003e."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Else tries to retrieve online to be returned. If retrieved successfully,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * save the information locally as txt file."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return Array\u003cString\u003e\u003c/String\u003e of module codes or null if unable to make"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *     connection and file does not exist locally."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public ArrayList\u003cString\u003e loadModuleList() throws IOException, ZoomasterException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String moduleListPath \u003d filePath;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assert filePath.contains(\"data\") : \"filepath to be loaded is from wrong directory\";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assert filePath.contains(\"timetable\") : \"filepath to be loaded has errors\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        moduleListPath \u003d moduleListPath.replace(\"timetable\", \"modulelist\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        File f \u003d new File(moduleListPath);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ArrayList\u003cString\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            while ((s \u003d bufferedReader.readLine()) !\u003d null \u0026\u0026 !s.isBlank()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                moduleList.add(s);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (moduleList.isEmpty()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                throw new FileNotFoundException();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            return moduleList;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            moduleList \u003d nusModuleListFromNusMods();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (moduleList !\u003d null) { // If modul  eList is successfully filled, store the list locally"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                saveModuleList(moduleListPath, moduleList);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            return moduleList;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Saves the moduleList locally."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param  moduleListPath Filepath for local txt file of module codes"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param  moduleList The list of module codes"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private void saveModuleList(String moduleListPath, ArrayList\u003cString\u003e moduleList)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String dirPath \u003d getDirectory(moduleListPath);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Path path \u003d Paths.get(dirPath);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Files.createDirectories(path);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        FileWriter fw \u003d new FileWriter(moduleListPath, false);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String str: moduleList) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            fw.write(str + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 38,
      "fchensan": 51,
      "jusufnathanael": 116,
      "Speedweener": 117
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.fusesource.jansi.AnsiConsole;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.ChangeModeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.LaunchNowCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.AddBookmarkCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.DeleteBookmarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.FindBookmarkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.LaunchBookmarkCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.ShowBookmarkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.EditBookmarkCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.planner.AddMeetingCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.planner.LoadPlannerCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.planner.SavePlannerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.settings.SetSettingsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.settings.ShowSettingsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.AddSlotCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.DeleteSlotCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.ShowTimetableCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.EditSlotCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.LaunchModuleAndSlotBookmark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.BLACK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.CYAN;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.GREEN;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.RED;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.WHITE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.fusesource.jansi.Ansi.Color.YELLOW;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.fusesource.jansi.Ansi.ansi;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * Represents the user interface on the command line and deals with interactions with the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String NEW_LINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private static final String LINE \u003d \"____________________________________________________________\" + NEW_LINE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private String logo2 \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "             \"                                                                                                 \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                  ████████████████████████████                                   \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ████████████████████████████████                                 \\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ██████       ███████     █ █████                                 \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ███████    █ ██████     █ ██████                                 \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ███████  ▌  █ █████ █   █ ██████                                 \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ███████  ▌   █ ███ █    █ ██████                                 \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ███████  ▌█   █ █   █   █ ██████                                 \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ███████  ▌██   █   ██   █ ██████                                 \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ███████  ▌███     ███   █ ██████                                 \\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ██████    ████   ███    █  █████                                 \\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                ████████████████████████████████                                 \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                  ████████████████████████████                                   \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"                                                                         ██                      \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"█████████   ███████     ████████   ███████ ███████     █████     █████  █████   █████     █ ████ \\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"     ███  ██      ███  ██      ███ ██     ██     ██         ██  ██       ██   ██      ██  ██   ██\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"   ███   ███       ██ ███       ██ ██     ██     ██  █████████  ███████  ██  ████████████ ██     \\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"███       ███     ███  ██      ███ ██     ██     ██  ██     ██        ██ ██   ██          ██     \\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            + \"██████████   █████       ██████    ██     ██     ██   ████████  ███████   ███  ████████   ██     \\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Constructs a new Ui instance."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        AnsiConsole.systemInstall();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns a string of the user input in the command line."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return the string of user input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (Parser.getProgramMode() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.print(ansi().fg(GREEN).a(\"[Main Menu] Input: \").reset());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (Parser.getProgramMode() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.print(ansi().fg(CYAN).a(\"[Bookmark mode] Input: \").reset());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (Parser.getProgramMode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.print(\"\\u001b[31;1m[Timetable mode] Input: \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.print(ansi().reset());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (Parser.getProgramMode() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.print(\"\\u001b[35;1m[Planner mode] Input: \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.print(ansi().reset());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.print(\"[An error has occurred] \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return scanner.nextLine().trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void print(String message) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(LINE + message + LINE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void printRedWithBorder(String message) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.print(ansi().fg(RED).a(message).reset());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void printGreenWithBorder(String message) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.print(ansi().fg(GREEN).a(message).reset());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void printYellowWithBorder(String message) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.print(ansi().fg(YELLOW).a(message).reset());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void printRed(String message) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.print(ansi().fg(RED).a(message).reset());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void printGreen(String message) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.print(ansi().fg(GREEN).a(message).reset());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void printYellow(String message) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.print(ansi().fg(YELLOW).a(message).reset());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void printCyan(String message) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.print(ansi().fg(CYAN).a(message).reset());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void clearScreen() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.print(\"\\033[2J\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Prints a message after starting the program."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void showWelcomeScreen() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(\"\\t\\t\\t\\t  ++++{  WELCOME TO  }++++\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(ansi().bg(WHITE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(\"\\u001b[31;1m\" + logo2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.print(ansi().reset());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(ansi().bg(BLACK));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Prints a message before exiting the program."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void showExitScreen() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        String message \u003d \"Bye. Hope to see you again soon!\" + NEW_LINE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        print(message);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Prints the error message if data file is not found."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        String message \u003d \"Data file not found\" + NEW_LINE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(message);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * This method detects the type of ZoomasterException error and prints the corresponding error message."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param e The ZoomasterException error."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void showErrorMessage(ZoomasterException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        switch (e.getError()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case UNKNOWN_INPUT:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printRedWithBorder(\"Unknown input\" + NEW_LINE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printHelpMessage();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case UNKNOWN_HELP_COMMAND:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printRedWithBorder(\"Unknown command \" + e.getInfo() + NEW_LINE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printHelpMessage();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_MODE:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printUnknownModeMessage();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case WRITE_FILE_ERROR:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printErrorWritingToFile();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case ERROR_LOADING_FILE:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printErrorLoadingFile();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_ADD_BOOKMARK_INPUT:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printInvalidAddBookmarkInputMessage();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case EMPTY_BOOKMARK_LIST:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printEmptyBookmarkListMessage();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case EMPTY_DESCRIPTION:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printEmptyBookmarkDescriptionMessage();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case EMPTY_COMMAND:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printEmptyCommandMessage(e.getInfo());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case NON_INTEGER_INPUT:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printUseIntegerAsInput();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case BOOKMARK_NUMBER_OUT_OF_BOUNDS:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printUseValidBookmarkNumberMessage(e.getInfo());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case ZERO_SLOTS_IN_MODULE:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printRedWithBorder(\"Module has no slots\" + NEW_LINE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_URL:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printInvalidUrl();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case ERROR_LAUNCHING_URL:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printErrorLaunchUrlMessage();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_COMMAND_FORMAT:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printRedWithBorder(\"invalid command format\" + NEW_LINE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_MODULE:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printRedWithBorder(\"module does not exist\" + NEW_LINE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_SLOT_NUMBER:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printInvalidSlotNumber(e.getInfo());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case INVALID_INDEX_IN_DAY:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            printInvalidIndexInDay(e.getInfo());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_TIME_FORMAT:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printInvalidTimeFormat();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_SLOT_INPUT:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printInvalidSlotInput();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_EDIT_INPUT:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printInvalidEditInput();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_TIMETABLE_DAY:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printUnknownDayMessage();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case EMPTY_TIMETABLE:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printEmptyTimetableMessage();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case EMPTY_DAY:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            printEmptyDayMessage();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case CONNECTION_ERROR:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printConnectionErrorMessage(e.getInfo());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case JSON_PARSE_ERROR:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printJsonParseErrorMessage(e.getInfo());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_SETTING_INPUT:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printInvalidSettingInput();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_SETTING_FIELD:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printInvalidSettingField(e.getInfo());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        case INVALID_SETTING_OPTION:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printInvalidSettingOption(e.getInfo());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            // unable to get dukeExceptionType"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printEmptyBookmarkListMessage() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Bookmark list is empty!\" + NEW_LINE);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printInvalidSlotNumber(String index) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Invalid slot number. Please enter a valid index number between 1 and \" + index + NEW_LINE"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \"Enter command: \\\"show \u003cmodule\u003e\\\" to view slot index\" + NEW_LINE);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private void printInvalidIndexInDay(String index) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        printRedWithBorder(\"Invalid slot number. Please enter a valid index number between 1 and \" + index + NEW_LINE"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            + \"Enter command: \\\"show\\\" to view slot index\" + NEW_LINE);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private void printEmptyDayMessage() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        printRedWithBorder(\"No slots on that day!\" + NEW_LINE);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printJsonParseErrorMessage(String weblink) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Unable to parse modules from \" + weblink + NEW_LINE"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \"The app will not check for valid modules\" + NEW_LINE);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printConnectionErrorMessage(String weblink) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Unable to connect to \" + weblink + NEW_LINE"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \"Please check your internet connection\" + NEW_LINE"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \"The app will not check for valid modules\" + NEW_LINE);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printErrorLoadingFile() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Error loading file.\" + NEW_LINE);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printErrorWritingToFile() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Error writing to file.\" + NEW_LINE);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printUseIntegerAsInput() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Command requires an integer input\" + NEW_LINE);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printUseValidBookmarkNumberMessage(String info) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Please enter a valid index number between 1 and \" + info + NEW_LINE);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printErrorLaunchUrlMessage() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Error launching url\" + NEW_LINE);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printInvalidUrl() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Invalid URL\" + NEW_LINE + \"URL must start with either \u0027www.\u0027, \u0027http://\u0027\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \" or \u0027https://\u0027 and have no spaces\" + NEW_LINE);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printInvalidAddBookmarkInputMessage() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Invalid bookmark input\" + NEW_LINE"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \"Format: add {description} {URL}\" + NEW_LINE);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printEmptyBookmarkDescriptionMessage() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Bookmark description required!\" + NEW_LINE);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printEmptyCommandMessage(String info) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Please enter \" + info + \" with input!\" + NEW_LINE);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printUnknownModeMessage() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Unknown mode input\" + NEW_LINE + \"Valid modes: bookmark, timetable, planner\" + NEW_LINE);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    //@@author fchensan"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private void printInvalidSettingInput() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        printRedWithBorder(\"Invalid set setting input format\" + NEW_LINE);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private void printInvalidSettingField(String invalidSettingName) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        printRedWithBorder(\"Invalid setting name: \" + invalidSettingName + NEW_LINE);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private void printInvalidSettingOption(String invalidSettingOption) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        printRedWithBorder(\"Invalid setting option: \\\"\" + invalidSettingOption + \"\\\" is not in the list.\" + NEW_LINE);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printUnknownDayMessage() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Unknown day input\" + NEW_LINE"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \"Valid days: mon, tue, wed, thu, fri, sat, sun\" + NEW_LINE);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printEmptyTimetableMessage() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Timetable is empty\" + NEW_LINE);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printInvalidSlotInput() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Invalid slot input\" + NEW_LINE);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printInvalidEditInput() {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Invalid edit format\" + NEW_LINE"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \"Enter \\\"help edit\\\" for the correct format.\" + NEW_LINE);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private void printInvalidTimeFormat() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"Invalid time format\" + NEW_LINE);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void showParsingErrorAndExit() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printRedWithBorder(\"File corrupted! Please check data files or delete them.\" + NEW_LINE"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \"Zoomaster will now shut down\" + NEW_LINE);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        AnsiConsole.systemUninstall();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void printHelpMessage() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        int mode \u003d Parser.programMode;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        assert (mode \u003e\u003d 0) \u0026\u0026 (mode \u003c\u003d 3) : \"only modes of Zoomaster are 0, 1, 2, 3\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (mode \u003d\u003d 0) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printYellowWithBorder(\"Available inputs in Main menu are\" + NEW_LINE"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"1) \" + ChangeModeCommand.MODE_KW + \" bookmark/timetable/planner\" + NEW_LINE"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"2) \" + ClearCommand.CLEAR_KW + NEW_LINE"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"3) \" + LaunchNowCommand.LAUNCH_NOW_KW + NEW_LINE"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"4) \" + ShowSettingsCommand.SHOW_KW + NEW_LINE"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"5) \" + SetSettingsCommand.SET_KW + NEW_LINE"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"6) \" + ExitCommand.EXIT_KW + NEW_LINE);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (mode \u003d\u003d 1) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printYellowWithBorder(\"Available inputs in Bookmark mode are\" + NEW_LINE"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"1) \" + AddBookmarkCommand.ADD_KW + NEW_LINE"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"2) \" + DeleteBookmarkCommand.DEL_KW + NEW_LINE"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"3) \" + ShowBookmarkCommand.SHOW_KW + NEW_LINE"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"4) \" + FindBookmarkCommand.FIND_KW + NEW_LINE"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"5) \" + LaunchBookmarkCommand.LAUNCH_KW + NEW_LINE"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"6) \" + EditBookmarkCommand.EDIT_KW + NEW_LINE"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"7) \" + ClearCommand.CLEAR_KW + NEW_LINE"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"8) \" + ChangeModeCommand.MODE_KW + \" timetable/planner\" + NEW_LINE"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"8) \" + ShowSettingsCommand.SHOW_KW + NEW_LINE"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"9) \" + SetSettingsCommand.SET_KW + NEW_LINE"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"10) \" + ExitCommand.EXIT_KW + NEW_LINE);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (mode \u003d\u003d 2) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printYellowWithBorder(\"Available inputs in Timetable mode are\" + NEW_LINE"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"1) \" + AddSlotCommand.ADD_KW + NEW_LINE"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"2) \" + DeleteSlotCommand.DEL_KW + NEW_LINE"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"3) \" + ShowTimetableCommand.SHOW_KW + NEW_LINE"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"4) \" + EditSlotCommand.EDIT_KW + NEW_LINE"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"5) \" + LaunchModuleAndSlotBookmark.LAUNCH_KW + NEW_LINE"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"6) \" + ChangeModeCommand.MODE_KW + \" bookmark/planner\" + NEW_LINE"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"7) \" + ClearCommand.CLEAR_KW + NEW_LINE"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"8) \" + ShowSettingsCommand.SHOW_KW + NEW_LINE"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"9) \" + SetSettingsCommand.SET_KW + NEW_LINE"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"10) \" + ExitCommand.EXIT_KW + NEW_LINE);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            printYellowWithBorder(\"Available inputs in Planner mode are\" + NEW_LINE"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"1) \" + LoadPlannerCommand.LOAD_KW + NEW_LINE"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"2) \" + AddMeetingCommand.ADD_KW + NEW_LINE"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"3) \" + ShowTimetableCommand.SHOW_KW + NEW_LINE"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"4) \" + SavePlannerCommand.SAVE_KW + NEW_LINE"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"6) \" + ChangeModeCommand.MODE_KW + \" bookmark/timetable\" + NEW_LINE"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"7) \" + ClearCommand.CLEAR_KW + NEW_LINE"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"8) \" + ShowSettingsCommand.SHOW_KW + NEW_LINE"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"9) \" + SetSettingsCommand.SET_KW + NEW_LINE"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    + \"10) \" + ExitCommand.EXIT_KW + NEW_LINE);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printYellow(\"You can also check what each command does using: \");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        printCyan(\"help {command}\" + NEW_LINE);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    //@@author Speedweener"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void printHelpMessage(String input) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        int mode \u003d Parser.programMode;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assert (mode \u003e\u003d 0) \u0026\u0026 (mode \u003c\u003d 3) : \"only modes of Zoomaster are 0, 1, 2, 3\";"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (input.equals(ClearCommand.CLEAR_KW)) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellowWithBorder(\"Clears the visible command line screen\" + NEW_LINE);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (input.equals(ExitCommand.EXIT_KW)) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellowWithBorder(\"Exits the application. What else did you expect ^_^\" + NEW_LINE);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (input.equals(ChangeModeCommand.MODE_KW)) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Changes the current mode. You can change to Bookmark, \""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"Timetable or Planner mode\" + NEW_LINE);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: mode {bookmark/timetable/planner}\" + NEW_LINE);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (input.equals(LaunchNowCommand.LAUNCH_NOW_KW)) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Launches bookmarks for lessons happening at the current time\" + NEW_LINE);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: launch now\" + NEW_LINE);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (input.equals(ShowSettingsCommand.SHOW_KW)) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Shows your Zoomaster\u0027s settings\" + NEW_LINE);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: showsettings\" + NEW_LINE);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (input.equals(SetSettingsCommand.SET_KW)) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Set a setting to a new value\" + NEW_LINE);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: set {setting name} {new value}\" + NEW_LINE);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. set def_mode timetable\" + NEW_LINE);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (mode \u003d\u003d 1) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printModeOneExtendedHelp(input);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (mode \u003d\u003d 2) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printModeTwoExtendedHelp(input);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (mode \u003d\u003d 3) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printModeThreeExtendedHelp(input);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private void printModeOneExtendedHelp(String input) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case AddBookmarkCommand.ADD_KW:"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Adds a bookmark to the bookmark list\" + NEW_LINE"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"URL must start with www or https:// or http://\" + NEW_LINE);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: add {description} {URL}\" + NEW_LINE);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case DeleteBookmarkCommand.DEL_KW:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Deletes bookmark from the bookmark list with their indexes\" + NEW_LINE);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: delete {index} \" + NEW_LINE);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case ShowBookmarkCommand.SHOW_KW:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellowWithBorder(\"Shows the whole list of bookmarks.\" + NEW_LINE);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case FindBookmarkCommand.FIND_KW:"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Finds and shows bookmarks with description matching the keyword\" + NEW_LINE);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: find {keyword} \" + NEW_LINE);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case LaunchBookmarkCommand.LAUNCH_KW:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Finds and launches bookmarks with description matching the keyword\""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \" or index \" + NEW_LINE);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: launch {keyword} \" + NEW_LINE"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"Format: launch {index} \" + NEW_LINE);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case EditBookmarkCommand.EDIT_KW:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Edit a bookmark\u0027s description or URL\" + NEW_LINE);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: edit {desc/url} {index} {new value}\" + NEW_LINE);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. edit url 3 www.amazon.com\" + NEW_LINE);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellowWithBorder(\"something went wrong...\");"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private void printModeTwoExtendedHelp(String input) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case AddSlotCommand.ADD_KW:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Adds modules and their timeslots to the timetable \" + NEW_LINE);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: add {module} {slot description} {day of the week} \""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"{start time} {end time} {URL}\" + NEW_LINE);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. add CS2113 lecture fri 16:00 18:00 www.google.com\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"You can also add the module first then add the slot afterwards, \""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"then add the bookmark to that slot. \" + NEW_LINE);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. add CS2113\" + NEW_LINE"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"    add CS2113 lecture fri 16:00 18:00\" + NEW_LINE"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"    add CS2113 lecture fri 16:00 18:00 www.google.com\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"You can also add bookmarks tagged to the entire module\" + NEW_LINE);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: add {module} {description} {URL}\" + NEW_LINE);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. add CS2113 homepage https://nus-cs2113-ay2021s1.github.io/website/index.html\""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + NEW_LINE);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case DeleteSlotCommand.DEL_KW:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Deletes slots or bookmarks belonging to that slot \" + NEW_LINE);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: delete {module} {slot index} \u0027bookmarks\u0027\" + NEW_LINE);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. delete CS2113 1 (Deletes the slot at index 1 of CS2113)\" + NEW_LINE);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. delete CS2113 1 bookmarks\""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \" (Deletes the bookmarks of slot at index 1 of CS2113)\" + NEW_LINE);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"You can display the slot indexes using: \");"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"show {module}\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"You can also delete the entire module or the module\u0027s bookmarks\" + NEW_LINE);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: delete {module} \u0027bookmarks\u0027\" + NEW_LINE);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. delete CS2113 (Deletes the module CS2113)\" + NEW_LINE);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. delete CS2113 bookmarks\""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \" (Deletes the bookmarks tagged to CS2113)\" + NEW_LINE);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case ShowTimetableCommand.SHOW_KW:"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Shows the entire timetable, or slots on a particular day\" + NEW_LINE);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: show \u0027{day}\u0027\" + NEW_LINE);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. show\" + NEW_LINE);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. show mon\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"You can also shows the slots for a module, or bookmarks for a module \" + NEW_LINE);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: show {module} \u0027bookmarks\u0027\" + NEW_LINE);"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. show CS2113\" + NEW_LINE);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. show CS2113 bookmarks\" + NEW_LINE);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case EditSlotCommand.EDIT_KW:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Edits the details of slots in the timetable based on their \""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"index in the timetable\" + NEW_LINE);"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Details you can edit include the module, title of slot and time of slot\""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + NEW_LINE);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"You can view the indexes using: \");"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"show\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: edit module {day} {index} {new module}\" + NEW_LINE);"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. edit module mon 1 CS1010 (Changes the module of slot 1 on Monday \""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"to CS1010)\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: edit title {day} {index} {new description}\" + NEW_LINE);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. edit title mon 1 lecture (Changes the description of slot 1 on Monday \""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"to lecture)\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: edit time {day} {index} {new time}\" + NEW_LINE);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. edit time mon 1 fri 10:00 12:00 (Changes the time of slot 1 on Monday \""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + \"to fri 10:00 12:00)\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        case LaunchModuleAndSlotBookmark.LAUNCH_KW:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"Launches the bookmarks of slots based on their index in the module \" + NEW_LINE);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellow(\"You can also launch bookmarks tagged to the module itself\" + NEW_LINE);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printCyan(\"Format: launch {module} {index}\" + NEW_LINE);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. launch CS2113 2 (Bookmarks for slot 2 of CS2113)\" + NEW_LINE);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printGreen(\"eg. launch CS2113 (Bookmarks tagged directly to CS2113)\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            printYellowWithBorder(\"something went wrong...\");"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    //@@author jusufnathanael"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private void printModeThreeExtendedHelp(String input) {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        case AddMeetingCommand.ADD_KW:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printYellow(\"Adds modules and their timeslots to the common timetable \" + NEW_LINE);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printCyan(\"Format: add {module} {slot description} {day of the week} \""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    + \"{start time} {end time} {URL}\" + NEW_LINE);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printGreen(\"eg. add CS2113 lecture fri 16:00 18:00 www.google.com\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printYellow(\"You can also add the module first then add the slot afterwards, \""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    + \"then add the bookmark to that slot. \" + NEW_LINE);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printGreen(\"eg. add CS2113\" + NEW_LINE"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    + \"    add CS2113 lecture fri 16:00 18:00\" + NEW_LINE"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    + \"    add CS2113 lecture fri 16:00 18:00 www.google.com\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printYellow(\"You can also add bookmarks tagged to the entire module\" + NEW_LINE);"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printCyan(\"Format: add {module} {description} {URL}\" + NEW_LINE);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printGreen(\"eg. add CS2113 homepage https://nus-cs2113-ay2021s1.github.io/website/index.html\""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    + NEW_LINE);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        case LoadPlannerCommand.LOAD_KW:"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printYellow(\"Loads the common empty slots from a few individual timetables \" + NEW_LINE);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printCyan(\"Format: load\" + NEW_LINE);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        case ShowTimetableCommand.SHOW_KW:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printYellow(\"Shows the common empty slots along with the newly added slots (if any)\" + NEW_LINE);"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printCyan(\"Format: show \u0027{day}\u0027\" + NEW_LINE);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printGreen(\"eg. show\" + NEW_LINE);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printGreen(\"eg. show mon\" + NEW_LINE + NEW_LINE);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printYellow(\"You can also shows the slots for a module, or bookmarks for a module \" + NEW_LINE);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printCyan(\"Format: show {module} bookmarks\" + NEW_LINE);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printGreen(\"eg. show CS2113\" + NEW_LINE);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printGreen(\"eg. show CS2113 bookmarks\" + NEW_LINE);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        case SavePlannerCommand.SAVE_KW:"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printYellow(\"Saves the newly added slot(s) to each individual timetables\" + NEW_LINE);"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printCyan(\"Format: save\" + NEW_LINE);"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            System.out.println(LINE);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            printYellowWithBorder(\"something went wrong...\");"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 301,
      "fchensan": 28,
      "jusufnathanael": 55,
      "Speedweener": 287,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/Zoomaster.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.ChangeModeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.settings.SettingsVariable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.settings.UserSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "public class Zoomaster {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private Storage\u003cBookmarkList\u003e bookmarkStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private Storage\u003cTimetable\u003e timetableStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private Storage\u003cTimetable\u003e plannerStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private Storage\u003cUserSettings\u003e userSettingsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private BookmarkList bookmarks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private Timetable timetable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private Timetable planner;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static UserSettings userSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Constructs a new Zoomaster instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Pass the filepath of the txt file to set up storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param bookmarkFilePath The filepath of the bookmark txt file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param timetableFilePath The filepath of the slot txt file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public Zoomaster(String bookmarkFilePath, String timetableFilePath, String storageFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        bookmarkStorage \u003d new Storage\u003c\u003e(getJarFilepath() + bookmarkFilePath, BookmarkList.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        timetableStorage \u003d new Storage\u003c\u003e(getJarFilepath() + timetableFilePath, Timetable.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        userSettingsStorage \u003d new Storage\u003c\u003e(getJarFilepath() + storageFilePath, UserSettings.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "      "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            bookmarks \u003d bookmarkStorage.load();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d timetableStorage.load();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            planner \u003d new Timetable();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            userSettings \u003d userSettingsStorage.load();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            Module.setModuleList(timetableStorage.loadModuleList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (JsonParseException | ClassCastException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            ui.showParsingErrorAndExit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        applySettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * This method is used run the Duke program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ui.showWelcomeScreen();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                if (Parser.getProgramMode() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    c.execute(bookmarks, planner, ui);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    c.execute(bookmarks, timetable, ui);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                performSave(isExit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                ui.showErrorMessage(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } while (!isExit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param args Unused."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        new Zoomaster(\"./data/bookmarks.txt\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                \"./data/timetable.txt\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                \"./data/settings.txt\").run();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    //@@author Speedweener"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns path of jar file during execution to allow"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * app to create txt file in the same location."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static String getJarFilepath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return new File(Zoomaster.class.getProtectionDomain().getCodeSource().getLocation()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                .getPath()).getParent().replace(\"%20\", \" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    //@@author fchensan"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private void applySettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            String defaultMode;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            defaultMode \u003d (String) userSettings.getSettingsVariable(UserSettings.DEFAULT_MODE_FIELD).getChosenOption();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            if (defaultMode.equals(UserSettings.MODE_MAINMENU)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            new ChangeModeCommand(ChangeModeCommand.MODE_KW + \" \" + defaultMode).execute(bookmarks, timetable, ui);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private void performSave(boolean isExit) throws ZoomasterException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String autosaveSetting \u003d (String) userSettings.getSettingsVariable(UserSettings.AUTO_SAVE_FIELD)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                .getChosenOption();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (autosaveSetting \u003d\u003d SettingsVariable.ON || isExit) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            bookmarkStorage.save(bookmarks);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            timetableStorage.save(timetable);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            userSettingsStorage.save(userSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 87,
      "jusufnathanael": 1,
      "fchensan": 25,
      "Speedweener": 12,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/bookmark/Bookmark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": " * Represents a bookmark of a URL of a webpage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * It stores the URL and a description of the webpage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * It also contains a method which can extract the URL and description from a given string in a certain format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class Bookmark {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String WWW_KW \u003d \"www.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String HTTPS_KW \u003d \"https://\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String HTTP_KW \u003d \"http://\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String WINDOWS_LAUNCH_COMMAND \u003d \"rundll32 url.dll,FileProtocolHandler \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String MAC_LAUNCH_COMMAND \u003d \"open \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String LINUX_LAUNCH_COMMAND \u003d \"xdg-open \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String url;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Constructs a bookmark object containing a URL and description of the webpage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param description The description of the webpage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param url The URL of the webpage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public Bookmark(String description, String url) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert description !\u003d null : \"description should not be null\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert url !\u003d null : \"url should not be null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        this.description \u003d description.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        this.url \u003d url.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Returns the description and url that can be detected from the given input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param input the string input by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @return a list of strings containing the description and url."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException if the command format is invalid or if the url is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static List\u003cString\u003e extractDescriptionAndUrl(String input) throws ZoomasterException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cString\u003e descriptionUrl \u003d Arrays.asList(input.split(\"\\\\s+\", 2));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (descriptionUrl.size() !\u003d 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_ADD_BOOKMARK_INPUT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (!isUrlValid(descriptionUrl.get(1))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_URL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return descriptionUrl;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    //@@author Speedweener"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns true if input is a valid url."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * A valid url contains no whitespace and starts with \"www.\", \"https://\" or \"http://\"."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param url The string containing the url."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return true if the given string is a valid url, else false."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static Boolean isUrlValid(String url) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (url.contains(\" \")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return url.startsWith(WWW_KW) || url.startsWith(HTTPS_KW) || url.startsWith(HTTP_KW);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * This method opens the URL of the bookmark the default web browser."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Only windows, macOS, linux and unix operating systems will work."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return a string containing the description and url of the launched bookmark in a fixed format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws ZoomasterException if there is an error launching the URL."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public String launch() throws ZoomasterException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            launchUrl();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.ERROR_LAUNCHING_URL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return \"  [\" + description + \"] \" + url;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    //@@author xingrong123"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private void launchUrl() throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Runtime rt \u003d Runtime.getRuntime();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (os.contains(\"win\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            launchUrlForWindows(rt);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (os.contains(\"mac\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            launchUrlForMac(rt);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (os.contains(\"nix\") || os.contains(\"nux\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            launchUrlForLinux(rt);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private void launchUrlForWindows(Runtime rt) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        rt.exec(WINDOWS_LAUNCH_COMMAND + url);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private void launchUrlForMac(Runtime rt) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String link \u003d getFullLink();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        rt.exec(MAC_LAUNCH_COMMAND + link);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private void launchUrlForLinux(Runtime rt) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String link \u003d getFullLink();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        rt.exec(LINUX_LAUNCH_COMMAND + link);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String getFullLink() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // macOS, unix and linux requires the https prefix to launch the webpage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String link;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (url.startsWith(WWW_KW)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            link \u003d HTTPS_KW + url;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            link \u003d url;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return link;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Returns the URL of the bookmark."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @return a string of the URL."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Sets the URL of the bookmark."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param url String of the URL."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException if the given url is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void setUrl(String url) throws ZoomasterException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (!isUrlValid(url)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_URL);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Returns the description of the bookmark."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @return a string of the description of the bookmark."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Sets the description of the bookmark."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param description The string which will overwrite the old description."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Returns the description and url in a fixed format."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @return a string containing the description and url."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String getBookmarkAsString() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return  (\"[\" + description + \"] \" + url + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 133,
      "TYS0n1": 13,
      "Speedweener": 31
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/bookmark/BookmarkList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": " * This class represents the bookmark list used to store and organize bookmarks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "public class BookmarkList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String FAILED_TO_LAUNCH_THESE_BOOKMARKS \u003d \"Failed to launch these bookmarks:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String BOOKMARK_LIST_IS_EMPTY \u003d \"Bookmark list is empty\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String LAUNCHED_THESE_BOOKMARKS \u003d \"Launched these bookmarks:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String NO_BOOKMARKS_CONTAIN_KEYWORD \u003d \"No bookmarks contain the specified keyword!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String SHOW_BOOKMARKS_MESSAGE \u003d \"Here are the bookmarks in your list:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String MATCHING_BOOKMARKS_MESSAGE \u003d \"Here are your matching bookmarks\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private ArrayList\u003cBookmark\u003e bookmarks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(BookmarkList.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Constructs a BookmarkList object with an empty ArrayList to store Bookmark objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public BookmarkList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        this.bookmarks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Adds the given bookmark object to the bookmark list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param bookmark the bookmark to be added to the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public String addBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assert bookmark !\u003d null : \"Added bookmark should not be null!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.add(bookmark);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return \"Added bookmark: [\" + bookmark.getDescription() + \"] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                + bookmark.getUrl() + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns the number of bookmarks in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return the size of the bookmark list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return bookmarks.size();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns bookmark based on the index."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param index The index of the bookmark in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return The bookmark with the corresponding index in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of range."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws ZoomasterException if the bookmarkList is empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public Bookmark getBookmark(int index) throws IndexOutOfBoundsException, ZoomasterException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (bookmarks.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new  ZoomasterException(ZoomasterExceptionType.EMPTY_BOOKMARK_LIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return bookmarks.get(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns the bookmark list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return The bookmark list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public ArrayList\u003cBookmark\u003e getBookmarks() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return bookmarks;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Deletes the bookmark from the list. Use the method getBookmark to check if the bookmark exists."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param bookmark The bookmark to be deleted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws NullPointerException if the bookmark does not exist in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    //@@author Speedweener"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public String deleteBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assert bookmarks.contains(bookmark) : \"Bookmark to be deleted not in list!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.remove(bookmark);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return \"[\" + bookmark.getDescription() + \"] \" + bookmark.getUrl() + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns a string containing all the bookmarks from the list in a"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * fixed format to be printed on the user interface."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return The string message containing the matching bookmarks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public String showBookmarks() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String message \u003d SHOW_BOOKMARKS_MESSAGE + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (bookmarks.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            message \u003d message + BOOKMARK_LIST_IS_EMPTY + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            for (int i \u003d 0; i \u003c bookmarks.size(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                message \u003d message + \"  \" + (i + 1) + \".\" + bookmarks.get(i).getBookmarkAsString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return message + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns a string containing the details of the bookmarks from the list with matching module and description."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * The string is in a fixed format to be printed on the user interface."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param description The description to be searched."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return The string message containing the matching bookmarks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public String findBookmarks(String description) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assert !description.equals(\"\") : \"Description should not be empty!\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (bookmarks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            message \u003d BOOKMARK_LIST_IS_EMPTY + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            message \u003d getMatchingBookmarks(description.toUpperCase());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (!message.isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                message \u003d MATCHING_BOOKMARKS_MESSAGE + Ui.NEW_LINE + message;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                message \u003d NO_BOOKMARKS_CONTAIN_KEYWORD + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private String getMatchingBookmarks(String description) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (int i \u003d 0; i \u003c bookmarks.size(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (bookmarks.get(i).getDescription().toUpperCase().contains(description)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                message +\u003d (i + 1) + \".\" + bookmarks.get(i).getBookmarkAsString() + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Returns a string containing the information of the bookmarks from the list with matching description"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * and launches them accordingly."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param description The description to be searched."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return The string message containing the matching bookmarks."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public String launchBookmarks(String description) throws ZoomasterException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assert !description.equals(\"\") : \"Description should not be empty!\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (bookmarks.isEmpty()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_BOOKMARK_LIST);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            message \u003d launchMatchingBookmarks(description.toUpperCase());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (!message.isBlank()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                message \u003d LAUNCHED_THESE_BOOKMARKS + Ui.NEW_LINE + message;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                message \u003d NO_BOOKMARKS_CONTAIN_KEYWORD + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private String launchMatchingBookmarks(String description) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (int i \u003d 0; i \u003c bookmarks.size(); i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (bookmarks.get(i).getDescription().toUpperCase().contains(description)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    bookmarks.get(i).launch();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    message +\u003d (i + 1) + \".\" + bookmarks.get(i).getBookmarkAsString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    errorMessage +\u003d (i + 1) + \".\" + bookmarks.get(i).getBookmarkAsString();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (!errorMessage.isBlank()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            message +\u003d FAILED_TO_LAUNCH_THESE_BOOKMARKS + Ui.NEW_LINE + errorMessage;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return message + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    //@@author xingrong123"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Returns a string containing the information of all the bookmarks in the list and launches the bookmarks."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * The string also contains information of the bookmarks which failed to launch."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @return the string of all the bookmarks in the list."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String launchAllBookmarks() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (bookmarks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message \u003d BOOKMARK_LIST_IS_EMPTY + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message \u003d launchBookmarksFromList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (!message.startsWith(FAILED_TO_LAUNCH_THESE_BOOKMARKS)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message \u003d LAUNCHED_THESE_BOOKMARKS + Ui.NEW_LINE + message;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String launchBookmarksFromList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        for (int i \u003d 0; i \u003c bookmarks.size(); i++) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                bookmarks.get(i).launch();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message +\u003d (i + 1) + \".\" + bookmarks.get(i).getBookmarkAsString();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                errorMessage +\u003d (i + 1) + \".\" + bookmarks.get(i).getBookmarkAsString();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (!errorMessage.isBlank()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d FAILED_TO_LAUNCH_THESE_BOOKMARKS + Ui.NEW_LINE + errorMessage;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 42,
      "TYS0n1": 2,
      "Speedweener": 175
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/ChangeModeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * Executes the change mode functionality of the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "//@@author TYS0n1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "public class ChangeModeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static final String MODE_KW \u003d \"mode\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public int setToMode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Constructs a new ChangeModeCommand instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * It decodes the command received to find out the mode the user wants"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * the program to be in."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * If an invalid mode or error in the command occurs, it is set to 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param command The command sent by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public ChangeModeCommand(String command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        setToMode \u003d getModeFromCommand(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Executes ChangeModeCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param bookmarks BookmarkList of the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param timetable Timetable containing the lesson slots of the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param ui The User Interface used to send messages to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @throws ZoomasterException if an invalid mode is submitted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            throws ZoomasterException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (setToMode \u003d\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            Parser.programMode \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            ui.print(\"Changing to bookmark mode\" + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (setToMode \u003d\u003d 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            Parser.programMode \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            ui.print(\"Changing to timetable mode\" + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (setToMode \u003d\u003d 3) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            Parser.programMode \u003d 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            ui.print(\"Changing to planner mode\" + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_MODE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Decodes the command sent from the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Assert line catches when a non ChangeModeCommand compatible command has called this function."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Any input commands with less than equals length of 5 is an invalid input mode by default."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * For example \"mode \" is an invalid input as it has no mode input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Another example \"mode1\" is an invalid input too as mode command requires a space before it\u0027s"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * mode input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Any mode input not \"bookmark\", \"timetable\" or \"planner\" are invalid inputs. Inputs are not"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * case sensitive."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param input The input command from the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return outputData"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public int getModeFromCommand(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        int outputData;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        assert input.startsWith(ChangeModeCommand.MODE_KW) : \"input should always start with \\\"mode\\\"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        String modeData \u003d input.substring(5);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (modeData.toLowerCase().compareTo(\"bookmark\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            outputData \u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (modeData.toLowerCase().compareTo(\"timetable\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            outputData \u003d 2;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (modeData.toLowerCase().compareTo(\"planner\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            outputData \u003d 3;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            outputData \u003d 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return outputData;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 90
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String CLEAR_KW \u003d \"clear\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Constructs a new ShowBookmarkCommand instance."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public ClearCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ui.clearScreen();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 6,
      "Speedweener": 15
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": " * Represents the a command which executes a procedure."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    protected boolean isExitCommand \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Execution of command depends on which command subclass the command belongs to."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public abstract void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Returns true if the command is an ExitCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return isExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xingrong123": 21,
      "TYS0n1": 8
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * Represents the user command exit the Duke program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String EXIT_KW \u003d \"exit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Constructs a new ExitCommand instance and sets isExitCommand to true."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        isExitCommand \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Prints the exit screen before the program exits."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param bookmarks The list of bookmarks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param timetable The timetable."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ui.showExitScreen();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 23,
      "TYS0n1": 9
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.AddBookmarkCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.DeleteBookmarkCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.FindBookmarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.LaunchBookmarkCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.bookmark.ShowBookmarkCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.bookmark.EditBookmarkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.planner.LoadPlannerCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.planner.SavePlannerCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.settings.SetSettingsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.settings.ShowSettingsCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.AddSlotCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.DeleteSlotCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.ShowTimetableCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.EditSlotCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.LaunchModuleAndSlotBookmark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.planner.AddMeetingCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * Executes the help functionality of the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String HELP_KW \u003d \"help\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Constructs a new HelpCommand instance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Assert line catches when a non HelpCommand compatible command has triggered this constructor."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * It extracts a String, details and check if it is the name of a valid command in the current"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * program mode."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param command The command sent by the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws ZoomasterException If details is not a valid command in the current program mode."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public HelpCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assert command.startsWith(HELP_KW) : \"input should always start with \\\"help\\\"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        details \u003d command.substring(HELP_KW.length()).trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (!details.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (!isValidCommand(details)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, details);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Executes HelpCommand."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * If no command name is requested for help, it will print out all the command names available"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * in the current program mode."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * If a valid command name is requested for help, it will print out help information for the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * command specified."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param bookmarks BookmarkList of the program"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param timetable Timetable containing the lesson slots of the program"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param ui The User Interface used to send messages to the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (details.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            ui.printHelpMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            ui.printHelpMessage(details);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Checks if the command requested for help is a valid command in the current program mode."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param details The name of the command requested for help by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @return isValid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private boolean isValidCommand(String details) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        boolean isValid \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (details.compareToIgnoreCase(ClearCommand.CLEAR_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            || details.compareToIgnoreCase(ChangeModeCommand.MODE_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            || details.compareToIgnoreCase(ExitCommand.EXIT_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            || details.compareToIgnoreCase(LaunchNowCommand.LAUNCH_NOW_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            || details.compareToIgnoreCase(ShowSettingsCommand.SHOW_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            || details.compareToIgnoreCase(SetSettingsCommand.SET_KW) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            isValid \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (Parser.getProgramMode() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (details.compareToIgnoreCase(AddBookmarkCommand.ADD_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(DeleteBookmarkCommand.DEL_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(ShowBookmarkCommand.SHOW_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(FindBookmarkCommand.FIND_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(LaunchBookmarkCommand.LAUNCH_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(EditBookmarkCommand.EDIT_KW) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                isValid \u003d  true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (Parser.getProgramMode() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (details.compareToIgnoreCase(AddSlotCommand.ADD_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(DeleteSlotCommand.DEL_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(ShowTimetableCommand.SHOW_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(EditSlotCommand.EDIT_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(LaunchModuleAndSlotBookmark.LAUNCH_KW) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                isValid \u003d  true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (Parser.getProgramMode() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (details.compareToIgnoreCase(AddMeetingCommand.ADD_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(LoadPlannerCommand.LOAD_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(ShowTimetableCommand.SHOW_KW) \u003d\u003d 0"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    || details.compareToIgnoreCase(SavePlannerCommand.SAVE_KW) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                isValid \u003d  true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 25,
      "fchensan": 10,
      "Speedweener": 89
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/LaunchNowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "package seedu.zoomaster.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.slot.Day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": " * Represents the command to launch the bookmarks of the current ongoing class slot in the timetable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class LaunchNowCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String LAUNCH_NOW_KW \u003d \"launch now\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public LaunchNowCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        LocalTime currentTime \u003d LocalTime.now().plusMinutes(5);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cSlot\u003e slots \u003d timetable.getFullSlotList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        for (Slot slot : slots) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (slot.getStartTime().isBefore(currentTime) \u0026\u0026 slot.getEndTime().isAfter(currentTime)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                    \u0026\u0026 slot.getDay().compareToIgnoreCase(Day.getDayToday()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message \u003d slot.getBookmarkList().launchAllBookmarks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (message.isBlank()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message \u003d \"no lessons now.\" + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ui.print(message);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 43
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/Mode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fchensan"
        },
        "content": "package seedu.zoomaster.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fchensan"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    BOOKMARK,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    TIMETABLE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    PLANNER,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    SETTINGS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String modeString \u003d null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case BOOKMARK:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            modeString \u003d \"bookmark\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case TIMETABLE:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            modeString \u003d \"timetable\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case PLANNER:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            modeString \u003d \"planner\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case SETTINGS:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            modeString \u003d \"settings\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return modeString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fchensan": 30,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/bookmark/AddBookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.Bookmark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": " * Represents the command to add a bookmark."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class AddBookmarkCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String ADD_KW \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private final String url;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Constructs a new AddBookmarkCommand instance and stores the information of the bookmark given by the input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param command The user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException if input command format is invalid, if the description is empty or"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *     if the url is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public AddBookmarkCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert command.startsWith(ADD_KW) : \"input should always start with \\\"add\\\"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        command \u003d command.substring(AddBookmarkCommand.ADD_KW.length());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_COMMAND, ADD_KW);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (!command.startsWith(\" \")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cString\u003e descAndUrl \u003d Bookmark.extractDescriptionAndUrl(command.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        description \u003d descAndUrl.get(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        url \u003d descAndUrl.get(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Adds the bookmark to the bookmark list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param bookmarks The list of bookmarks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param timetable The list of slots."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Bookmark bookmark \u003d new Bookmark(description, url);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d bookmarks.addBookmark(bookmark);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ui.print(message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 42,
      "TYS0n1": 14
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/bookmark/DeleteBookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.Bookmark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": " * Represents the command to delete a bookmark from the bookmark list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "public class DeleteBookmarkCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String DEL_KW \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Constructs a new DeleteBookmarkCommand instance and stores the information of the bookmark given by the input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param command The user input command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws ZoomasterException thrown if input command is invalid or if the bookmark number is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public DeleteBookmarkCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assert command.startsWith(DEL_KW) : \"input should always start with \\\"delete\\\"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String details \u003d command.substring(DEL_KW.length());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (details.isBlank()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_COMMAND, DEL_KW);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (!details.startsWith(\" \")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            index \u003d Integer.parseInt(details.trim()) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.NON_INTEGER_INPUT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Deletes the bookmark in the bookmark list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param bookmarks The list of bookmarks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param timetable The list of slots."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws ZoomasterException if the bookmark number is invalid or if there is an error when saving the bookmark."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            Bookmark bookmark \u003d bookmarks.getBookmark(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            String message \u003d \"I\u0027ve deleted this bookmark!:\\n\" + bookmarks.deleteBookmark(bookmark);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            ui.print(message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.BOOKMARK_NUMBER_OUT_OF_BOUNDS, \"\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                    + bookmarks.getBookmarks().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 8,
      "Speedweener": 52
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/bookmark/EditBookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fchensan"
        },
        "content": "package seedu.zoomaster.command.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.bookmark.Bookmark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": "public class EditBookmarkCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String EDIT_KW \u003d \"edit\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String FIELD_KW_DESCRIPTION \u003d \"desc\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String FIELD_KW_URL \u003d \"url\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private int bookmarkIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String fieldToEdit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Constructs a new EditBookmarkCommand instance based on user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param command The command that the user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @throws ZoomasterException if the user inputs with invalid format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public EditBookmarkCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assert command.startsWith(EDIT_KW);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Pattern parser \u003d Pattern.compile("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                EDIT_KW + \" (?\u003cfieldToEdit\u003e[a-zA-Z]+)\\\\s+(?\u003cbookmarkIndex\u003e\\\\d+)\\\\s+(?\u003cnewValue\u003e[\\\\w/.:]+)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Matcher matcher \u003d parser.matcher(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_EDIT_INPUT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        bookmarkIndex \u003d Integer.parseInt(matcher.group(\"bookmarkIndex\")) - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        fieldToEdit \u003d matcher.group(\"fieldToEdit\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        newValue \u003d matcher.group(\"newValue\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Edit a bookmark\u0027s description or based on user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param bookmarks The list of bookmarks containing the bookmark to be editted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param timetable The list of slots."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @throws ZoomasterException if there is an error in user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Bookmark bookmark \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (bookmarks.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_BOOKMARK_LIST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            bookmark \u003d bookmarks.getBookmark(bookmarkIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.BOOKMARK_NUMBER_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                Integer.toString(bookmarks.getSize()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        switch (fieldToEdit) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case FIELD_KW_DESCRIPTION:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            bookmark.setDescription(newValue);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            message \u003d \"Bookmark description updated!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case FIELD_KW_URL:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            bookmark.setUrl(newValue);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            message \u003d \"Bookmark url updated!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            message \u003d \"Unrecognized field!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        ui.print(message + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fchensan": 88
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/bookmark/FindBookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "public class FindBookmarkCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String FIND_KW \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Constructs a new FindBookmarkCommand instance and gets the module and description to be searched."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * If only one term is entered (term meaning string without a space), method asserts"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * this to be the module and inserts an empty description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param command The command input by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws ZoomasterException if the input is unknown."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public FindBookmarkCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String details \u003d command.substring(FIND_KW.length());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (details.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_COMMAND, FIND_KW);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (!details.startsWith(\" \")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        description \u003d details.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Prints the bookmark with the matching keyword."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *  @param bookmarks The list of bookmarks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param timetable The list of slots."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String message \u003d bookmarks.findBookmarks(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ui.print(message);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 9,
      "Speedweener": 36
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/bookmark/LaunchBookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.Bookmark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "public class LaunchBookmarkCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String LAUNCH_KW \u003d \"launch\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    private int launchTypeFlag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Constructs a new LaunchBookmarkCommand instance and gets the index of the bookmark to launch."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Determines whether the launch command was input with an integer or string, and sets launchTypeFlag accordingly."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Integer (launchTypeFlag \u003d 1)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Strings (launchTypeFlag \u003d 2)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param command The command input by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws ZoomasterException if the input is unknown or if the bookmark number is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    //@@author Speedweener"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public LaunchBookmarkCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String details \u003d command.substring(LAUNCH_KW.length());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (details.isBlank()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_COMMAND, LAUNCH_KW);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (!details.startsWith(\" \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            index \u003d Integer.parseInt(details.trim()) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            launchTypeFlag \u003d 1; // (flag to launch bookmark at specified index)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            if (details.trim().contains(\" \")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            description \u003d details.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            launchTypeFlag \u003d 2; // (flag to launch bookmarks with matching description)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Launches the bookmark based on the launchTypeFlag previously determined in LaunchBookmarkCommand initialization."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param bookmarks The list of bookmarks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param timetable The list of slots."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * @throws ZoomasterException if the bookmark number is invalid or if there is an error launching the URL."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (launchTypeFlag \u003d\u003d 1) { // Launch based on index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                Bookmark bookmark \u003d bookmarks.getBookmark(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                String message \u003d \"Nice! I\u0027ve launched this bookmark!:\\n\" + bookmark.launch() + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                ui.print(message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.BOOKMARK_NUMBER_OUT_OF_BOUNDS, \"\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                        + bookmarks.getBookmarks().size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (launchTypeFlag \u003d\u003d 2) { // Launch based on matching module and description"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            String message \u003d bookmarks.launchBookmarks(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            ui.print(message);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 8,
      "Speedweener": 65
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/bookmark/ShowBookmarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "public class ShowBookmarkCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static final String SHOW_KW \u003d \"show\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     * Constructs a new ShowBookmarkCommand instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public ShowBookmarkCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ui.print(bookmarks.showBookmarks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 7,
      "Speedweener": 16
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/planner/AddMeetingCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.timetable.AddSlotCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "//@@author jusufnathanael"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "public class AddMeetingCommand extends AddSlotCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public static final String ADD_KW \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Constructs a new AddSlotCommand instance and stores the information of the slot given by the input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param command The user input command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @throws ZoomasterException if input command is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public AddMeetingCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Adds the slot to the slot list and saves the slots list in the text file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param bookmarks The list of bookmarks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param timetable The timetable"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @throws ZoomasterException Some exception // ADD MORE COMMENTS"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        super.execute(bookmarks, timetable, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Creates a new slot."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param command The add command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param module The module of the slot."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param timetable The planner timetable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @return Ui messages whether the adding process is successful or not."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @throws ZoomasterException Some exceptions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    protected String create(String command, Module module, Timetable timetable) throws ZoomasterException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        List\u003cString\u003e slotAndBookmark \u003d Arrays.asList(command.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (isAddModuleBookmark(slotAndBookmark)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            message \u003d addBookmarkToModule(module, slotAndBookmark);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            String lesson \u003d slotAndBookmark.get(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            String day \u003d slotAndBookmark.get(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            if (!Day.isDay(day)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIMETABLE_DAY, \"  invalid day\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            LocalTime startTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            LocalTime endTime;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                startTime \u003d LocalTime.parse(slotAndBookmark.get(2));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                endTime \u003d LocalTime.parse(slotAndBookmark.get(3));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIME_FORMAT, \"Invalid time format. (\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                        + slotAndBookmark.get(2) + \" \" + slotAndBookmark.get(3) + \") Please check format.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            Slot newSlot;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            List\u003cSlot\u003e slots \u003d timetable.getFullSlotList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            if (isAvailable(day, startTime, endTime, slots, timetable)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                newSlot \u003d new Slot(startTime, endTime, day, lesson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                module.addSlot(newSlot);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                message +\u003d  \"  \" + lesson + \" slot added\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                message +\u003d checkForAndAddBookmarkToSlot(slotAndBookmark, lesson, newSlot);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                message +\u003d  \"  \" + \"This slot is already filled.\" + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Checks if the slot can be added."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param day The day of the slot."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param startTime The start time of the slot."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param endTime The end time of the slot."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param slots The list of empty slots."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param localTimetable The planner timetable."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @return True if the slot can be added."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private boolean isAvailable(String day, LocalTime startTime, LocalTime endTime,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                                List\u003cSlot\u003e slots, Timetable localTimetable) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        for (Slot s: slots) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            if (s.getDay().equals(day) \u0026\u0026 s.getTitle().equals(\"\u003cempty slot\u003e\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    \u0026\u0026 s.getStartTime().compareTo(startTime) \u003c\u003d 0 \u0026\u0026 s.getEndTime().compareTo(endTime) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                updateEmptySlot(s, startTime, endTime, localTimetable);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Add the slot and update the list of empty slots."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param slot The new slot."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param startTime The start time of the slot."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param endTime The end time of the slot."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param localTimetable The planner timetable."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private void updateEmptySlot(Slot slot, LocalTime startTime, LocalTime endTime, Timetable localTimetable) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot2;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (slot.getStartTime().compareTo(startTime) !\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            slot1 \u003d new Slot(slot.getStartTime(), startTime, slot.getDay(), slot.getTitle());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            localTimetable.getModule(\"EMPTY\").addSlot(slot1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (slot.getEndTime().compareTo(endTime) !\u003d 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            slot2 \u003d new Slot(endTime, slot.getEndTime(), slot.getDay(), slot.getTitle());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            localTimetable.getModule(\"EMPTY\").addSlot(slot2);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        localTimetable.getModule(\"EMPTY\").removeSlot(slot);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 16,
      "jusufnathanael": 118
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/planner/LoadPlannerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.Zoomaster;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.slot.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "//@@author jusufnathanael"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "public class LoadPlannerCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public static final String LOAD_KW \u003d \"load\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private Storage\u003cTimetable\u003e storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public LoadPlannerCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (command.compareTo(LOAD_KW) !\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Loads the slots to the planner."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param bookmarks The list of bookmarks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param planner The timetable"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @throws ZoomasterException Some exception"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable planner, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        planner.clearAllModule();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        storage \u003d new Storage\u003c\u003e(Zoomaster.getJarFilepath() + \"./data/planner/\", Timetable.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            Timetable temp \u003d storage.loadPlanner();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            planner.addModule(initialiseEmptySlots(temp));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            ui.print(\"Planner loaded.\" + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            ui.print(\"Please insert a non-empty timetable to the planner folder.\" + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Initialises the empty slots for the empty timetable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param timetable The timetable that is initialised with the empty slots"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @return The module \"EMPTY\" that contains all the empty slots"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public Module initialiseEmptySlots(Timetable timetable) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        ArrayList\u003cArrayList\u003cInteger\u003e\u003e array \u003d new ArrayList\u003c\u003e(7);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            array.add(new ArrayList\u003c\u003e(Collections.nCopies(300, 0)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        ArrayList\u003cSlot\u003e slots \u003d new ArrayList\u003c\u003e(timetable.getFullSlotList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        for (Slot s: slots) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            markAsFull(array, s.getStartMinutes(), s.getEndMinutes(), s.getDay());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Module module \u003d new Module(\"EMPTY\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        generateEmptySlots(array, module);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Marks a 5-minutes slot as full."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param array An array that represents 5-minutes slots."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param start The start time of the slot."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param end The end time of the slot."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param day The day of the slot."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private static void markAsFull(ArrayList\u003cArrayList\u003cInteger\u003e\u003e array, int start, int end, String day) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        for (Day d: Day.values()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            if (d.toString().compareTo(day) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                for (int i \u003d start / 5; i \u003c Math.ceil((double) end / 5); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    array.get(count).set(i, 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Generates the empty slots and add it to the \"EMPTY\" module."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param array An array that represents 5-minutes slots."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param module The \"EMPTY\" module."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    private static void generateEmptySlots(ArrayList\u003cArrayList\u003cInteger\u003e\u003e array, Module module) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        for (Day d: Day.values()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            for (int i \u003d 0; i \u003c 287; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                if (array.get(count).get(i) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    int startHours \u003d (i * 5) / 60;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    int startMinutes \u003d (i * 5) % 60;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    LocalTime start \u003d Slot.convertIntToLocalTime(startHours % 288, startMinutes % 288);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    do {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                        i++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    } while (array.get(count).get(i) \u003d\u003d 0 \u0026\u0026 i \u003c 287);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    int endHours \u003d (i * 5) / 60;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    int endMinutes \u003d (i * 5) % 60;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    LocalTime end \u003d Slot.convertIntToLocalTime(endHours % 288, endMinutes % 288);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    module.addSlot(new Slot(start, end, d.toString(), \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 1,
      "TYS0n1": 15,
      "jusufnathanael": 102
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/planner/SavePlannerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "package seedu.zoomaster.command.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.Zoomaster;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "//@@author jusufnathanael"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "public class SavePlannerCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public static final String SAVE_KW \u003d \"save\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public SavePlannerCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (command.compareTo(SAVE_KW) !\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Adds the slot to the slot list and saves the slots list in the text file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param bookmarks The list of bookmarks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param planner The timetable"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @throws ZoomasterException Some exceptions"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable planner, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        File folder \u003d new File(Zoomaster.getJarFilepath() + \"./data/planner/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        ArrayList\u003cFile\u003e listOfFiles \u003d new ArrayList\u003c\u003e(Arrays.asList(folder.listFiles()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        for (File f: listOfFiles) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            Storage\u003cTimetable\u003e storage \u003d new Storage\u003c\u003e(f.getPath(), Timetable.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            Timetable timetableF \u003d storage.load();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            writeToFile(planner, timetableF);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            storage.writePlanner(timetableF, f);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        ui.print(\"Planner saved.\" + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * Writes the newly added meeting to each individual timetables."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param planner The planner timetable"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @param timetable The individual timetable"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     * @throws ZoomasterException Some exceptions"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    void writeToFile(Timetable planner, Timetable timetable) throws ZoomasterException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        for (Module m : planner.getFullModuleList()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            if (!m.getModuleCode().equals(\"EMPTY\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                if (timetable.moduleExists(m.getModuleCode())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    Module module \u003d timetable.getModule(m.getModuleCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    for (int i \u003d 0; i \u003c m.getSlotList().size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                        module.addSlot(m.getSlot(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                    timetable.addModule(m);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jusufnathanael": 78
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/settings/SetSettingsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fchensan"
        },
        "content": "package seedu.zoomaster.command.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.Zoomaster;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.settings.SettingsVariable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "public class SetSettingsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String SET_KW \u003d \"set\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String fieldName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Constructs a new SetSettingsCommand instance based on user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param command The user command input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @throws ZoomasterException if the user inputs in an invalid format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public SetSettingsCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(SET_KW + \"\\\\s+(?\u003cfieldName\u003e\\\\w+)\\\\s+(?\u003cnewValue\u003e\\\\w+)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_SETTING_INPUT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        fieldName \u003d matcher.group(\"fieldName\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        newValue \u003d matcher.group(\"newValue\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Changes one of the user settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param bookmarks The list of bookmarks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param timetable The list of slots."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @throws ZoomasterException if the user inputs an invalid setting option."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        SettingsVariable settingsVariable \u003d Zoomaster.userSettings.getSettingsVariable(fieldName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        settingsVariable.setChosenOption(newValue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        new ShowSettingsCommand().execute(bookmarks, timetable, ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        ui.print(\"Settings updated!\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fchensan": 56
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/settings/ShowSettingsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fchensan"
        },
        "content": "package seedu.zoomaster.command.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.Zoomaster;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.settings.SettingsVariable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.settings.UserSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": "public class ShowSettingsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String SHOW_KW \u003d \"showsettings\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Prints out the list of user settings."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param bookmarks The list of bookmarks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param timetable The list of slots."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @throws ZoomasterException if there is an error in user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        ui.print(generateSettingsListMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String generateSettingsListMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        SettingsVariable[] settingsVariables \u003d Zoomaster.userSettings.getVariables();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        for (SettingsVariable settingsVariable: settingsVariables) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            String lineHeader \u003d String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                    \"[%s] %s: \", settingsVariable.getFieldName(), settingsVariable.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            message.append(lineHeader);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            message.append(settingsVariable.getOptionsList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            message.append(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fchensan": 43
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/timetable/AddSlotCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.Bookmark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.slot.Day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": " * Represents the command add a module, slot, module bookmark or slot bookmark to the timetable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class AddSlotCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String ADD_KW \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    // ui messages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String ALREADY_EXISTS_MSG \u003d \" already exists\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String ADDED_MSG \u003d \" added\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String INCORRECT_SLOT_FORMAT_MSG \u003d \"incorrect format for slot: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String ADD_MOD_BOOKMARK_MSG \u003d \"  bookmark added to \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String SLOT_FORMAT_ERROR_MSG \u003d \". (please follow the format: add {MODULE} \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            + \"{DESCRIPTION} {DAY} {START_TIME} {END_TIME})\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String INVALID_DAY_MSG \u003d \"  Invalid day input: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String INVALID_TIME_FORMAT_MSG \u003d \"  Invalid time format for slot. (\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String SLOT_ALREADY_EXISTS_MSG \u003d \"  Slot already exists.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String INVALID_TIME_MSG \u003d \"  Invalid time for slot. (\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String TIME_CLASH_MSG \u003d \"  Slot clash. (\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String CHECK_TIMETABLE_MSG \u003d \" Please check timetable.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String SLOT_ADDED_MSG \u003d \" slot added\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String INVALID_COMMAND_FORMAT_MSG \u003d \"  Invalid command format.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String INVALID_SLOT_INDEX_MSG \u003d \"  Invalid slot index.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String SLOT_INDEX_OUT_OF_RANGE_MSG \u003d \"  Slot index out of range.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String ADD_SLOT_BOOKMARK_MSG \u003d \"    bookmark added to \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String INVALID_URL_FORMAT_MSG \u003d \"    Invalid url format. Please provide one valid url.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String INVALID_URL_FORMAT_FOR_SLOT_MSG \u003d \"invalid url format: \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String URL_FORMAT_MSG \u003d \"URL must start with either \u0027www.\u0027, \u0027http://\u0027 or \u0027https://\u0027\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String BOOKMARK_ADDED_TO_MODULE_MSG \u003d \"  bookmark added to module\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private List\u003cString\u003e commands;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Constructs a new AddSlotCommand instance and stores the information of the slot given by the input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param command The user input command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException if input command is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public AddSlotCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert command.startsWith(ADD_KW);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String details \u003d command.substring(ADD_KW.length());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (details.isBlank()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_COMMAND, ADD_KW);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (!details.startsWith(\" \")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String[] stringArray \u003d details.trim().split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleCode \u003d stringArray[0].toUpperCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (stringArray.length \u003e 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            commands \u003d Arrays.asList(stringArray[1].split(\",\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Adds modules, slots, module bookmarks and slot bookmarks into the timetable."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Supports one-shot-command when adding multiple multiple components to a module by using the separator \u0027,\u0027 to"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * separate the addition of each component."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param bookmarks The list of bookmarks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param timetable The timetable"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param ui The user interface"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException if the module code is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (timetable.moduleExists(moduleCode)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            module \u003d timetable.getModule(moduleCode);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d moduleCode + ALREADY_EXISTS_MSG + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (!isValidModule(moduleCode)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_MODULE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            module \u003d new Module(moduleCode);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            timetable.addModule(module);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d moduleCode + ADDED_MSG + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (commands !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            for (String command : commands) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message +\u003d createSlotAndBookmark(module, command.trim(), timetable);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ui.print(message);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    protected String createSlotAndBookmark(Module module, String command, Timetable timetable) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert module !\u003d null : \"module should not be null\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d create(command, module, timetable);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d e.getInfo() + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d INCORRECT_SLOT_FORMAT_MSG + command + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    protected String create(String command, Module module, Timetable timetable) throws ZoomasterException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cString\u003e slotAndBookmark \u003d Arrays.asList(command.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (isAddModuleBookmark(slotAndBookmark)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message \u003d addBookmarkToModule(module, slotAndBookmark);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (slotAndBookmark.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            Slot slot;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            slot \u003d retrieveSlotFromModule(module, slotAndBookmark);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            createBookmark(slotAndBookmark.get(1), slot.getTitle(), slot);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message \u003d ADD_MOD_BOOKMARK_MSG + moduleCode + \" \" + slot.getTitle() + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (slotAndBookmark.size() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            String lesson \u003d slotAndBookmark.get(0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            String day \u003d slotAndBookmark.get(1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            LocalTime startTime;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            LocalTime endTime;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (!Day.isDay(day)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIMETABLE_DAY,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                        INVALID_DAY_MSG + day + SLOT_FORMAT_ERROR_MSG);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                startTime \u003d LocalTime.parse(slotAndBookmark.get(2));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                endTime \u003d LocalTime.parse(slotAndBookmark.get(3));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIME_FORMAT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                        INVALID_TIME_FORMAT_MSG + slotAndBookmark.get(2)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                        + \" \" + slotAndBookmark.get(3) + \")\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            Slot newSlot;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (module.slotExists(lesson, day, startTime, endTime)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                newSlot \u003d module.getSlot(lesson, day, startTime, endTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message +\u003d SLOT_ALREADY_EXISTS_MSG + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                if (Timetable.isTimeAGreaterEqualsTimeB(startTime, endTime)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                    throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIME_FORMAT,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                            INVALID_TIME_MSG + slotAndBookmark.get(2) + \" \" + slotAndBookmark.get(3) + \")\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                } else if (timetable.isOverlapTimeSlot(day, startTime, endTime)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                    throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIME_FORMAT,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                            TIME_CLASH_MSG + slotAndBookmark.get(2) + \" \" + slotAndBookmark.get(3) + \")\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                            + CHECK_TIMETABLE_MSG);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                    newSlot \u003d new Slot(startTime, endTime, day, lesson);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                    module.addSlot(newSlot);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                    message +\u003d  \"  \" + lesson + SLOT_ADDED_MSG + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d checkForAndAddBookmarkToSlot(slotAndBookmark, lesson, newSlot);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message \u003d INVALID_COMMAND_FORMAT_MSG + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private Slot retrieveSlotFromModule(Module module, List\u003cString\u003e slotAndBookmark) throws ZoomasterException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            int index \u003d Integer.parseInt(slotAndBookmark.get(0)) - 1;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            slot \u003d module.getSlot(index);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.NON_INTEGER_INPUT, INVALID_SLOT_INDEX_MSG);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_SLOT_NUMBER, SLOT_INDEX_OUT_OF_RANGE_MSG);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return slot;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    protected String checkForAndAddBookmarkToSlot(List\u003cString\u003e slotAndBookmark, String lesson, Slot newSlot)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throws ZoomasterException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (slotAndBookmark.size() \u003d\u003d 5) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            createBookmark(slotAndBookmark.get(4), lesson, newSlot);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message \u003d ADD_SLOT_BOOKMARK_MSG + moduleCode + \" \" + lesson + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (slotAndBookmark.size() \u003e 5) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message \u003d INVALID_URL_FORMAT_MSG + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    protected String addBookmarkToModule(Module module, List\u003cString\u003e slotAndBookmark) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String description \u003d slotAndBookmark.get(0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String url \u003d slotAndBookmark.get(1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Bookmark bookmark \u003d new Bookmark(description, url);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        module.addBookmark(bookmark);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return BOOKMARK_ADDED_TO_MODULE_MSG + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    protected boolean isAddModuleBookmark(List\u003cString\u003e slotAndBookmark) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            int dummy \u003d Integer.parseInt(slotAndBookmark.get(0));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            return Bookmark.isUrlValid(slotAndBookmark.get(1)) \u0026\u0026 slotAndBookmark.size() \u003d\u003d 2;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private void createBookmark(String url, String lesson, Slot newSlot) throws ZoomasterException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (!Bookmark.isUrlValid(url)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_URL, INVALID_URL_FORMAT_FOR_SLOT_MSG + url"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                    + URL_FORMAT_MSG"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                    + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Bookmark bookmark \u003d new Bookmark(lesson, url);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        newSlot.addBookmark(bookmark);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Validates the module code with the list of modules moduleList."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param module The module code to be added."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * true if module exist in the list or list is null."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *     false if module does not exists in the list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static boolean isValidModule(String module) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (Module.getModuleList() \u003d\u003d null) { // If unable to get list of modules, always return true."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (Module.getModuleList().contains(module)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 226,
      "TYS0n1": 15
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/timetable/DeleteSlotCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class DeleteSlotCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String DEL_KW \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String DELETE_BOOKMARKS_MSG \u003d \"deleted bookmarks from \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String BOOKMARKS_KW \u003d \"bookmarks\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String DELETE_MODULE_MSG \u003d \"deleted module: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String DELETE_SLOT_MSG \u003d \"deleted \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final int INPUT_LIMIT \u003d 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final int MODULE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final int SECOND_INPUT \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final int BOOKMARK_INDEX \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static final String FROM \u003d \" from \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private Integer slotIndex \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private boolean deleteBookmarks \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Constructs a new DeleteSlotCommand instance and stores the information of the Slot given by the input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param command The user input command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException if details is blank, if there is no spacing after the command keyword or if"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *     the input after the module code is not the bookmarks keyword or a slot index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public DeleteSlotCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert command.startsWith(DEL_KW);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String details \u003d command.substring(DEL_KW.length());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (details.isBlank()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_COMMAND, DEL_KW);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (!details.startsWith(\" \")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String[] deleteCommands \u003d details.trim().split(\"\\\\s+\", INPUT_LIMIT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleCode \u003d deleteCommands[MODULE_INDEX];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            String bookmarksOrSlotCommand \u003d deleteCommands[SECOND_INPUT];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (bookmarksOrSlotCommand.trim().compareTo(BOOKMARKS_KW) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                deleteBookmarks \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                slotIndex \u003d Integer.parseInt(bookmarksOrSlotCommand) - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                if (deleteCommands[BOOKMARK_INDEX].trim().compareTo(BOOKMARKS_KW) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                    deleteBookmarks \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            // No slot index or delete bookmark keyword provided."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            // The application will proceed with deleting the module."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.NON_INTEGER_INPUT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Deletes the module, slot or their bookmarks depending on user input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param bookmarks The list of bookmarks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param timetable The timetable."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException if the module does not exist or the slot number provided is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (!timetable.moduleExists(moduleCode)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_MODULE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            Module module \u003d timetable.getModule(moduleCode);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (slotIndex \u003d\u003d null \u0026\u0026 !deleteBookmarks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                // delete module"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                timetable.deleteModule(module);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message +\u003d DELETE_MODULE_MSG + moduleCode + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } else if (slotIndex !\u003d null \u0026\u0026 !deleteBookmarks) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                // delete slot"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                Slot slot \u003d module.getSlot(slotIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                module.removeSlot(slot);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message +\u003d DELETE_SLOT_MSG + slot + FROM + moduleCode + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } else if (slotIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                // delete module bookmarks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                module.removeAllBookmarks();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message +\u003d DELETE_BOOKMARKS_MSG + moduleCode + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                // delete slot bookmarks"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                Slot slot \u003d module.getSlot(slotIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                slot.removeAllBookmarks();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message +\u003d DELETE_BOOKMARKS_MSG + slot.getDay() + \" \" + slot + FROM"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                        + moduleCode + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ui.print(message);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 96,
      "TYS0n1": 11
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/timetable/EditSlotCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.slot.Day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "public class EditSlotCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String EDIT_KW \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String FIELD_KW_MODULE \u003d \"module\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String FIELD_KW_TITLE \u003d \"title\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String FIELD_KW_TIME \u003d \"time\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String fieldToEdit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Creates a new EditSlotCommand based on user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param command The command input by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @throws ZoomasterException if the user inputs in an invalid format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public EditSlotCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assert command.startsWith(EDIT_KW);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        // details: \"NEW_MODULE_CODE\" or \"NEW_TITLE\" or \"NEW_DAY START_TIME END_TIME\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        details \u003d command.substring(EDIT_KW.length()).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (details.isBlank()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_COMMAND, EDIT_KW);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Pattern parser \u003d Pattern.compile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                \"(?\u003cfieldToEdit\u003e[a-zA-Z]+)\\\\s+(?\u003cdetails\u003e.+)\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Matcher matcher \u003d parser.matcher(details);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_EDIT_INPUT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        fieldToEdit \u003d matcher.group(\"fieldToEdit\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        details \u003d matcher.group(\"details\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Edits a slot\u0027s module, title, or time based on user input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param bookmarks The list of bookmarks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param timetable The list of slots."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param ui The user interface."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @throws ZoomasterException if there is an error in user input format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Pattern parser \u003d Pattern.compile("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                \"(?\u003cday\u003e[a-zA-Z]+)\\\\s+(?\u003cindexInDay\u003e\\\\d+)\\\\s+(?\u003cfirstArgument\u003e\\\\w+)\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                + \"(\\\\s+(?\u003cstartTime\u003e[\\\\w:]+)\\\\s+(?\u003cendTime\u003e[\\\\w:]+))?\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Matcher matcher \u003d parser.matcher(details);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_EDIT_INPUT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String day \u003d matcher.group(\"day\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        int indexInDay \u003d Integer.parseInt(matcher.group(\"indexInDay\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Slot slot;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        switch (fieldToEdit) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case FIELD_KW_MODULE:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            if (Module.isValidModule(matcher.group(\"firstArgument\").toUpperCase())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                timetable.moveSlotToAnotherModule(day, indexInDay, matcher.group(\"firstArgument\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                message \u003d \"Slot moved to \" + matcher.group(\"firstArgument\").toUpperCase();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.INVALID_MODULE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case FIELD_KW_TITLE:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            slot \u003d timetable.getSlotByIndexInDay(day, indexInDay);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            slot.setTitle(matcher.group(\"firstArgument\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            message \u003d \"Slot title changed to \" + matcher.group(\"firstArgument\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        case FIELD_KW_TIME:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                String firstArgument \u003d matcher.group(\"firstArgument\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                String startTime \u003d matcher.group(\"startTime\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                String endTime \u003d matcher.group(\"endTime\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            slot \u003d timetable.getSlotByIndexInDay(day, indexInDay);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            message \u003d changeSlotTime("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                    slot,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                    matcher.group(\"firstArgument\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                    matcher.group(\"startTime\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                    matcher.group(\"endTime\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                    timetable);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            message \u003d \"Unrecognized field!\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        ui.print(message + Ui.NEW_LINE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Change a slot\u0027s start and end time with the given user input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param slot The slot object with the day we want to change."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param startTimeInput The new start time as string."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param endTimeInput The new end time as string."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String changeSlotTime("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            Slot slot, String dayInput, String startTimeInput, String endTimeInput, Timetable timetable)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throws ZoomasterException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        LocalTime startTime;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        LocalTime endTime;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            startTime \u003d LocalTime.parse(startTimeInput);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            endTime \u003d LocalTime.parse(endTimeInput);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (DateTimeParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_EDIT_INPUT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (!Day.isDay(dayInput)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIMETABLE_DAY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Module slotModule \u003d timetable.getModuleContainingSlot(slot);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        slotModule.removeSlot(slot);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (timetable.isOverlapTimeSlot(dayInput, startTime, endTime)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            slotModule.addSlot(slot);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            return \"Timing clashes with another slot!\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        slotModule.addSlot(slot);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        slot.setDay(dayInput);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        slot.setStartTime(startTime);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        slot.setEndTime(endTime);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return \"Slot time changed to \" + dayInput + \" \" + startTimeInput + \" \" + endTimeInput;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 15,
      "fchensan": 151,
      "Speedweener": 2
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/timetable/LaunchModuleAndSlotBookmark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "package seedu.zoomaster.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class LaunchModuleAndSlotBookmark extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String LAUNCH_KW \u003d \"launch\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private List\u003cString\u003e  moduleAndSlotIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public LaunchModuleAndSlotBookmark(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert command.startsWith(LAUNCH_KW) : \"command should start with launch keyword\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String details \u003d command.substring(LAUNCH_KW.length());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (details.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_COMMAND, LAUNCH_KW);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (!details.startsWith(\" \")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleAndSlotIndex \u003d Arrays.asList(details.trim().split(\"\\\\s+\", 2));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String moduleCode \u003d moduleAndSlotIndex.get(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Integer slotIndex \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (moduleAndSlotIndex.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                slotIndex \u003d Integer.parseInt(moduleAndSlotIndex.get(1)) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.NON_INTEGER_INPUT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Module module;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (!timetable.moduleExists(moduleCode)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message \u003d \"module does not exist\" + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            module \u003d timetable.getModule(moduleCode);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (slotIndex \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message \u003d launchModuleBookmark(module);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                Slot slot \u003d module.getSlot(slotIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message \u003d launchSlotBookmark(slot);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ui.print(message);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String launchModuleBookmark(Module module) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d module.launchBookmarks();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String launchSlotBookmark(Slot slot) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        BookmarkList bookmarkList \u003d slot.getBookmarkList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d bookmarkList.launchAllBookmarks();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 70
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/command/timetable/ShowTimetableCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Day;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.SlotContainer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class ShowTimetableCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String SHOW_KW \u003d \"show\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private boolean showBookmarks \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String module \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Constructs a new ShowTimetableCommand instance."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Decodes if the user is requesting to print out the timetable lesson or"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * the details of a module or slot that has been added."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Also decodes which mode the timetable is to be printed out in: entire timetable, timetable of a day"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * or timetable today."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param command The command sent by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException if the input is invalid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public ShowTimetableCommand(String command) throws ZoomasterException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert command.startsWith(SHOW_KW) : \"command should start with show keyword\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (command.compareTo(SHOW_KW) \u003d\u003d 0) { // show timetable for all days"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            day \u003d \"ALL\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (command.charAt(SHOW_KW.length()) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            String details \u003d command.substring(SHOW_KW.length() + 1).trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (details.toLowerCase().compareToIgnoreCase(\"today\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                day \u003d Day.getDayToday();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } else if (Day.isDay(details)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                day \u003d Day.getDayFromCommand(details);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                getModuleInfo(details);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private void getModuleInfo(String details) throws ZoomasterException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String[] input \u003d details.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (input.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            module \u003d input[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input[1].compareTo(\"bookmarks\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            module \u003d input[0];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            showBookmarks \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.UNKNOWN_INPUT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Executes ShowTimetableCommand."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param bookmarks BookmarkList of the program."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param timetable Timetable containing the lesson slots of the program."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param ui The User Interface used to send messages to the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @throws ZoomasterException if the module is invalid, the timetable is empty or the day input is invalid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void execute(BookmarkList bookmarks, Timetable timetable, Ui ui) throws ZoomasterException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cModule\u003e modules \u003d timetable.getFullModuleList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (day !\u003d null) { // \"show\" and \"show day\" and \"show today\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            List\u003cSlot\u003e list \u003d new ArrayList\u003c\u003e(timetable.getFullSlotList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d getMessageLessonAtTime(modules, list, day);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (isShowModule()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (!timetable.moduleExists(module)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.INVALID_MODULE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            Module matchedModule \u003d timetable.getModule(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d getMessageForModule(matchedModule);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (isShowModuleBookmarks()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (!timetable.moduleExists(module)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                throw new ZoomasterException(ZoomasterExceptionType.INVALID_MODULE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            Module matchedModule \u003d timetable.getModule(module);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d matchedModule.getBookmarksToString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ui.print(message);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Builds a message string containing information of lesson slot(s) in the input day."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Lesson slot(s) are sorted by timing from 00:00 to 23:59"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param modules List of modules codes stored in the program."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param slots List of lesson slots stored in the program."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param day The input day."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return message.toString()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private String getMessageSlotsInADay(List\u003cModule\u003e modules, List\u003cSlot\u003e slots, String day) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        boolean hasSlotOnDay \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        boolean hasIndicatorOnDay \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (day.equals(Day.getDayToday())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            hasIndicatorOnDay \u003d true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ArrayList\u003cSlot\u003e thisDaySlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ArrayList\u003cString\u003e thisDayModuleCodesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        for (Slot s: slots) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            for (Module module : modules) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                if (module.slotExists(s) \u0026\u0026 s.getDay().equals(day)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    thisDaySlots.add(s);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    thisDayModuleCodesList.add(module.getModuleCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        SlotContainer slotContainer \u003d new SlotContainer(thisDaySlots, thisDayModuleCodesList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        SlotContainer sortedSlotContainer \u003d SlotContainer.sortSlotsByTime(slotContainer);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ArrayList\u003cSlot\u003e sortedSlots \u003d sortedSlotContainer.getSlotList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ArrayList\u003cString\u003e sortedModuleCodes \u003d sortedSlotContainer.getModuleCodesList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedSlots.size(); i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            if (hasLessonNow(sortedSlots.get(i)) \u0026\u0026 !sortedSlots.get(i).getTitle().equals(\"\u003cempty slot\u003e\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                message.append(getHighlighBoxUpperMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                message.append(i + 1).append(\". \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                        .append(sortedSlots.get(i).toString()).append(\" \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                        .append(sortedModuleCodes.get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                message.append(getHighlighBoxLowerMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                hasIndicatorOnDay \u003d false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                if (sortedSlots.get(i).getStartTime().isAfter(LocalTime.now())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                        \u0026\u0026 hasIndicatorOnDay) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    message.append(getIndicatorMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    hasIndicatorOnDay \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                message.append(i + 1).append(\". \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                        .append(sortedSlots.get(i).toString()).append(\" \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                        .append(sortedModuleCodes.get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            hasSlotOnDay \u003d true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (!hasSlotOnDay) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            message.append(\"No lessons\" + \"\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (hasIndicatorOnDay) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            message.append(getIndicatorMessage());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        message.append(\"\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Builds a message string containing information of lesson slot(s) in the entire timetable."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Lesson slot(s) are sorted by timing from 00:00 to 23:59"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param modules List of modules codes stored in the program."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param slots List of lesson slots stored in the program."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return message.toString()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private String getMessageTimetable(List\u003cModule\u003e modules, List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        StringBuilder message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        for (Day day: Day.values()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            message.append(day.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            message.append(getMessageSlotsInADay(modules, slots, day.toString()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Builds a message string of the timetable to be printed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Lesson slot(s) are sorted by timing from 00:00 to 23:59"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param modules List of modules codes stored in the program."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param slots List of lesson slots stored in the program."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param dayInput The input day."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return message"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @throws ZoomasterException if an timetable is empty or an invalid day is submitted."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private String getMessageLessonAtTime(List\u003cModule\u003e modules, List\u003cSlot\u003e slots,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                                          String dayInput) throws ZoomasterException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (slots.isEmpty()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_TIMETABLE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (dayInput \u003d\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIMETABLE_DAY);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else if (dayInput.compareTo(\"ALL\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            return getMessageTimetable(modules,slots);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        message +\u003d \"Lessons for \" + dayInput + \"\\n\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        message +\u003d getMessageSlotsInADay(modules, slots, dayInput);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private String getMessageForModule(Module module) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        List\u003cSlot\u003e slots \u003d module.getSlotList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (!slots.isEmpty()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            message +\u003d module.getModuleCode() + \"\\n\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            for (int i \u003d 0; i \u003c slots.size(); i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                Slot slot \u003d slots.get(i);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                String dayString \u003d (isShowModule() ? slot.getDay() + \" \" : \"\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                message +\u003d \"  \" + (i + 1) + \". \" + dayString + slot.toString() + \"\\n\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            message +\u003d \"no slots for \" + module.getModuleCode() + \"\\n\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Checks if there is an overlap with the input slot timing and the current system time."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param slot The selected slots to be tested."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return isOverlap"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static boolean hasLessonNow(Slot slot) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        boolean isOverlap \u003d false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        LocalTime timeNow \u003d LocalTime.now();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (slot.getStartTime().isBefore(timeNow) \u0026\u0026 slot.getEndTime().isAfter(timeNow)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                \u0026\u0026 Day.getDayToday().equals(slot.getDay())) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            isOverlap \u003d true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return isOverlap;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Returns an indicator with the current time."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return \"\\u001b[33m\" + currentTimeMessage + \"\\u001b[0m\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static String getIndicatorMessage() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        DateTimeFormatter hoursAndMinutes \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        String currentTimeMessage \u003d \"\u003c----\" + \"Current Time: \" + LocalTime.now().format(hoursAndMinutes)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                + \"----\u003e\" + \"\\n\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return \"\\u001b[33m\" + currentTimeMessage + \"\\u001b[0m\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Returns the upper highlighted box for lesson now indicator."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return \"\\u001b[32m\" + message + \"\\u001b[0m\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static String getHighlighBoxUpperMessage() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        String message \u003d \"[\u003d\u003d\u003d\u003d\" + \"Lesson now\" + \"\u003d\u003d\u003d\u003d]\" + \"\\n\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return \"\\u001b[32m\" + message + \"\\u001b[0m\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Returns the lower highlighted box for lesson now indicator."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return \"\\u001b[32m\" + message + \"\\u001b[0m\""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static String getHighlighBoxLowerMessage() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        String message \u003d \"[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d]\" + \"\\n\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return \"\\u001b[32m\" + message + \"\\u001b[0m\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private boolean isShowModuleBookmarks() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return module !\u003d null \u0026\u0026 showBookmarks;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private boolean isShowModule() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return module !\u003d null \u0026\u0026 !showBookmarks;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 78,
      "TYS0n1": 209
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/exception/ZoomasterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * The class DukeException is a subclass of Exception."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * It is thrown when an error specific to Duke occurs."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class ZoomasterException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private ZoomasterExceptionType zoomasterExceptionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String info;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Constructs a new DukeException instance by storing the given DukeExceptionType."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param zoomasterExceptionType The type of dukeException."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public ZoomasterException(ZoomasterExceptionType zoomasterExceptionType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        this.zoomasterExceptionType \u003d zoomasterExceptionType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Constructs a new DukeException instance by storing the given DukeExceptionType and message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param zoomasterExceptionType The type of dukeException."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @param info Additional information of the exception."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public ZoomasterException(ZoomasterExceptionType zoomasterExceptionType, String info) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        this.zoomasterExceptionType \u003d zoomasterExceptionType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        this.info \u003d info;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Returns the dukeExceptionType of the dukeException."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @return the dukeExceptionType."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public ZoomasterExceptionType getError() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return zoomasterExceptionType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 40,
      "TYS0n1": 6
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/exception/ZoomasterExceptionType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * Enumeration of all the types of DukeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "public enum ZoomasterExceptionType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    UNKNOWN_INPUT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    UNKNOWN_HELP_COMMAND,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    INVALID_MODE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    WRITE_FILE_ERROR,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    ERROR_LOADING_FILE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    INVALID_ADD_BOOKMARK_INPUT,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    EMPTY_BOOKMARK_LIST,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    EMPTY_COMMAND,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    NON_INTEGER_INPUT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    BOOKMARK_NUMBER_OUT_OF_BOUNDS,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    ZERO_SLOTS_IN_MODULE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    INVALID_URL,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    ERROR_LAUNCHING_URL,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    INVALID_MODULE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    INVALID_SLOT_NUMBER,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    INVALID_INDEX_IN_DAY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    INVALID_TIME_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    INVALID_SLOT_INPUT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    INVALID_EDIT_INPUT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    INVALID_TIMETABLE_DAY,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    EMPTY_TIMETABLE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    EMPTY_DAY,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    CONNECTION_ERROR,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    JSON_PARSE_ERROR,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    EMPTY_FOLDER,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    INVALID_SETTING_INPUT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    INVALID_SETTING_OPTION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    INVALID_SETTING_FIELD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 1,
      "TYS0n1": 27,
      "fchensan": 7,
      "Speedweener": 2,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/settings/SettingsVariable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fchensan"
        },
        "content": "package seedu.zoomaster.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fchensan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fchensan"
        },
        "content": " * Represents a setting that the user can set."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fchensan"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": " * @param \u003cT\u003e The object type of the options available to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fchensan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "public class SettingsVariable\u003cT\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String ON \u003d \"on\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String OFF \u003d \"off\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String fieldName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private T[] options;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private int chosenOptionIndex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public SettingsVariable(String fieldName, String description, T[] options) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        this.fieldName \u003d fieldName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        chosenOptionIndex \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public String getFieldName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return fieldName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public int getChosenOptionIndex() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return chosenOptionIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void setChosenOptionIndex(int chosenOptionIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        this.chosenOptionIndex \u003d chosenOptionIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public String getOptionsList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        StringBuilder optionsListString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        for (int i \u003d 0; i \u003c options.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            if (i \u003d\u003d chosenOptionIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                optionsListString.append(\"\u003c\u003c\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            optionsListString.append(options[i].toString().toLowerCase());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            if (i \u003d\u003d chosenOptionIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                optionsListString.append(\"\u003e\u003e\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            optionsListString.append(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return optionsListString.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void setChosenOption(String optionAsString) throws ZoomasterException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        for (int i \u003d 0; i \u003c options.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            if (options[i].toString().toLowerCase().equals(optionAsString)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                setChosenOptionIndex(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        throw new ZoomasterException(ZoomasterExceptionType.INVALID_SETTING_OPTION, optionAsString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public T getChosenOption() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return options[getChosenOptionIndex()];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fchensan": 77
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/settings/UserSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fchensan"
        },
        "content": "package seedu.zoomaster.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fchensan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fchensan"
        },
        "content": " * Stores the user\u0027s settings as a series of SettingsVariable instances."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fchensan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fchensan"
        },
        "content": "public class UserSettings {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String MODE_MAINMENU \u003d \"mainmenu\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String MODE_TIMETABLE \u003d \"timetable\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String MODE_BOOKMARK \u003d \"bookmark\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String DEFAULT_MODE_FIELD \u003d \"def_mode\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private static final String DEFAULT_MODE_DESC \u003d \"Default mode at start up\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private static final String[] DEFAULT_MODE_OPTIONS \u003d {MODE_MAINMENU, MODE_TIMETABLE, MODE_BOOKMARK};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public static final String AUTO_SAVE_FIELD \u003d \"autosave\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private static final String AUTO_SAVE_DESC \u003d \"Autosave after each command (if off, only save on exit)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private static final String[] AUTO_SAVE_OPTIONS \u003d {SettingsVariable.ON, SettingsVariable.OFF};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private SettingsVariable[] variables \u003d {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        new SettingsVariable\u003cString\u003e(DEFAULT_MODE_FIELD, DEFAULT_MODE_DESC, DEFAULT_MODE_OPTIONS),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        new SettingsVariable\u003cString\u003e(AUTO_SAVE_FIELD, AUTO_SAVE_DESC, AUTO_SAVE_OPTIONS),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public SettingsVariable[] getVariables() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return variables;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Go through the SettingsVariable list and retrieve the one with the given field name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param fieldName The field name of the SettingsVariable instance to be retrieved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @return A SettingsVariable instance from the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @throws ZoomasterException if no SettingsVariable instance is found with the given field name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public SettingsVariable getSettingsVariable(String fieldName) throws ZoomasterException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        for (SettingsVariable variable: variables) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            if (variable.getFieldName().equals(fieldName)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                return variable;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        throw new ZoomasterException(ZoomasterExceptionType.INVALID_SETTING_FIELD, fieldName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fchensan": 48
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/slot/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public enum Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    MON,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    TUE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    WED,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    THU,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    FRI,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    SAT,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    SUN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Returns String of today\u0027s day of the week."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * @return outputDay String of today\u0027s day of the week readable by Slot class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static String getDayToday() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String outputDay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert (LocalDate.now().getDayOfWeek().getValue() \u003c\u003d 7) \u0026\u0026 (LocalDate.now().getDayOfWeek().getValue() \u003e\u003d 1) :"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                \"LocalDate.now().getDayOfWeek().getValue() only returns value within range 1 to 7\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        switch (LocalDate.now().getDayOfWeek().getValue()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputDay \u003d MON.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputDay \u003d TUE.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputDay \u003d WED.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputDay \u003d THU.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputDay \u003d FRI.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputDay \u003d SAT.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputDay \u003d SUN.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return outputDay;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static String getDayFromCommand(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String outputData;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (input.compareToIgnoreCase(MON.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputData \u003d MON.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.compareToIgnoreCase(TUE.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputData \u003d TUE.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.compareToIgnoreCase(WED.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputData \u003d WED.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.compareToIgnoreCase(THU.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputData \u003d THU.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.compareToIgnoreCase(FRI.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputData \u003d FRI.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.compareToIgnoreCase(SAT.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputData \u003d SAT.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (input.compareToIgnoreCase(SUN.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputData \u003d SUN.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            outputData \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return outputData;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static boolean isDay(String input) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        boolean isDay \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (getDayFromCommand(input) !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            isDay \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return isDay;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static int getDayValue(String day) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        int value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (day.compareToIgnoreCase(MON.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            value \u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (day.compareToIgnoreCase(TUE.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            value \u003d 2;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (day.compareToIgnoreCase(WED.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            value \u003d 3;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (day.compareToIgnoreCase(THU.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            value \u003d 4;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (day.compareToIgnoreCase(FRI.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            value \u003d 5;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else if (day.compareToIgnoreCase(SAT.toString()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            value \u003d 6;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            value \u003d 7;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String day;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        switch (this) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case MON:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            day \u003d \"mon\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case TUE:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            day \u003d \"tue\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case WED:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            day \u003d \"wed\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case THU:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            day \u003d \"thu\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case FRI:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            day \u003d \"fri\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case SAT:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            day \u003d \"sat\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        case SUN:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            day \u003d \"sun\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 134
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/slot/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.Bookmark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String EMPTY_BOOKMARKLIST_MSG \u003d \"no bookmarks found in module\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public static final String NO_BOOKMARKS_IN_SLOT \u003d \"  no bookmarks found in slot\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private BookmarkList bookmarks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private List\u003cSlot\u003e slots;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static ArrayList\u003cString\u003e moduleList; //List of all NUS module codes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(Module.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public Module(String moduleCode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        slots.add(slot);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Collections.sort(slots, new Comparator\u003cSlot\u003e() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            public int compare(Slot s1, Slot s2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                return dayAndTimeComparator(s1, s2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private static int dayAndTimeComparator(Slot s1, Slot s2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        int compareValue \u003d Day.getDayValue(s1.getDay()) - Day.getDayValue(s2.getDay());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (compareValue \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            compareValue \u003d s1.getStartTime().compareTo(s2.getStartTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return compareValue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public boolean slotExists(String lesson, String day, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        for (Slot slot : slots) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (slot.match(lesson, day, startTime, endTime)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public boolean slotExists(Slot slot) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return slots.contains(slot);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public boolean isModule(String moduleCode) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        boolean isModule \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (this.moduleCode.compareToIgnoreCase(moduleCode) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            isModule \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return isModule;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void addBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        bookmarks.addBookmark(bookmark);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void removeSlot(Slot slot) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assert slots.contains(slot) : \"Use getSlot to get reference of slot to be deleted before calling this method\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        slots.remove(slot);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void removeAllBookmarks() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String launchBookmarks() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d bookmarks.launchAllBookmarks();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public Slot getSlot(String lesson, String day, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        for (Slot slot : slots) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (slot.match(lesson, day, startTime, endTime)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                return slot;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public Slot getSlot(int index) throws ZoomasterException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (slots.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.ZERO_SLOTS_IN_MODULE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            slot \u003d slots.get(index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_SLOT_NUMBER, \"\" + slots.size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return slot;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public List\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return slots;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String getBookmarksToString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cBookmark\u003e bookmarkList \u003d bookmarks.getBookmarks();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        for (Bookmark bookmark : bookmarkList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d bookmark.getBookmarkAsString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (!message.isBlank()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d Ui.NEW_LINE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        if (bookmarkList.isEmpty()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d EMPTY_BOOKMARKLIST_MSG + Ui.NEW_LINE + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        for (int i \u003d 0; i \u003c slots.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            Slot slot \u003d slots.get(i);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d (i + 1) + \". \" + slot.getDay() + \" \" + slot.toString() + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            List\u003cBookmark\u003e slotBookmarkList \u003d slot.getBookmarkList().getBookmarks();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            for (Bookmark bookmark : slotBookmarkList) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message +\u003d \"  \" + bookmark.getBookmarkAsString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (slotBookmarkList.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                message +\u003d NO_BOOKMARKS_IN_SLOT + Ui.NEW_LINE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            message +\u003d Ui.NEW_LINE;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    //@@author Speedweener"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static ArrayList\u003cString\u003e getModuleList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static void setModuleList(ArrayList\u003cString\u003e moduleList) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Module.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    public static boolean isValidModule(String module) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        if (moduleList \u003d\u003d null) { // If unable to get list of modules, always return true."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        } else if (moduleList.contains(module)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 139,
      "TYS0n1": 5,
      "fchensan": 2,
      "Speedweener": 19
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/slot/Slot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.Bookmark;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": "public class Slot {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private LocalTime startTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private BookmarkList bookmarks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public Slot(LocalTime startTimeInput, LocalTime endTimeInput, String dayInput, String titleInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        startTime \u003d startTimeInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        endTime \u003d endTimeInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        day \u003d dayInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        title \u003d titleInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public boolean match(String lesson, String day, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (title.compareToIgnoreCase(lesson) \u003d\u003d 0"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                \u0026\u0026 this.day.compareToIgnoreCase(day) \u003d\u003d 0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                \u0026\u0026 this.startTime.equals(startTime)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                \u0026\u0026 this.endTime.equals(endTime)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public BookmarkList getBookmarkList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return bookmarks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void removeAllBookmarks() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void addBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        bookmarks.addBookmark(bookmark);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void setStartTime(LocalTime timeInput) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        startTime \u003d timeInput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    //@@author jusufnathanael"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public int getStartMinutes() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        int hours \u003d Integer.parseInt(startTime.toString().substring(0,2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        int minutes \u003d Integer.parseInt(startTime.toString().substring(3));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return hours * 60 + minutes;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public void setEndTime(LocalTime timeInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        endTime \u003d timeInput;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public int getEndMinutes() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        int hours \u003d Integer.parseInt(endTime.toString().substring(0,2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        int minutes \u003d Integer.parseInt(endTime.toString().substring(3));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return hours * 60 + minutes;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public static LocalTime convertIntToLocalTime(int hours, int minutes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        String h \u003d String.valueOf(hours);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        String m \u003d String.valueOf(minutes);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (hours \u003c 10) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            h \u003d \"0\" + h;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        if (minutes \u003c 10) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            m \u003d \"0\" + m;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return LocalTime.parse(h + \":\" + m);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public void setDay(String dayInput) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        day \u003d dayInput;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public void setTitle(String titleInput) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        title \u003d titleInput;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return startTime.toString() + \"-\" + endTime.toString() + \" \" + title;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 7,
      "fchensan": 46,
      "jusufnathanael": 54
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/slot/SlotContainer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * Stores an ArrayList of Slots and Strings."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " * Used to help produce a sorted timetable of Slots and its associated module code."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "//@@author TYS0n1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "public class SlotContainer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private ArrayList\u003cSlot\u003e thisDaySlots;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    private ArrayList\u003cString\u003e thisDayModuleCodesList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Constructor of SlotContainer object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Initializes the ArrayLists to be stored in SlotContainer object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param slotsListInput The ArrayList of Slots to be stored in SlotContainer object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param moduleCodesListInput The ArrayList of Strings to be stored in SlotContainer object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public SlotContainer(ArrayList\u003cSlot\u003e slotsListInput, ArrayList\u003cString\u003e moduleCodesListInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        this.thisDaySlots \u003d slotsListInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        this.thisDayModuleCodesList \u003d moduleCodesListInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Returns the ArrayList of Slots stored in SlotContainer object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return thisDaySlots."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public ArrayList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return thisDaySlots;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Replaces the existing ArrayList of Slots stored in SlotContainer object with a new"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * ArrayList of Slots."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param slotsListInput The ArrayList of Slots replacing the existing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void setToSlotList(ArrayList\u003cSlot\u003e slotsListInput) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        thisDaySlots \u003d slotsListInput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Returns the ArrayList of Strings stored in SlotContainer object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return thisDayModuleCodesList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public ArrayList\u003cString\u003e getModuleCodesList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return thisDayModuleCodesList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Replaces the existing ArrayList of String stored in SlotContainer object with a new"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * ArrayList of String."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param moduleCodeListInput The ArrayList of Strings replacing the existing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void setModuleCodesList(ArrayList\u003cString\u003e moduleCodeListInput) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        thisDayModuleCodesList \u003d moduleCodeListInput;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * Sorts the timetable, ArrayList of Slots and The ArrayList of Strings of ModuleCodes"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * based on day of the week and 24 hour timing."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * It sorts the timetable day from monday and ends with sunday."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * It sorts the timetable timing from 00:00 to 23:59."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @param slotContainer The container containing the timetable to be sorted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     * @return new SlotContainer(sortedThisDaySlots, sortedThisDayModuleCodesList)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static SlotContainer sortSlotsByTime(SlotContainer slotContainer) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ArrayList\u003cSlot\u003e thisDaySlots \u003d slotContainer.getSlotList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ArrayList\u003cString\u003e thisDayModuleCodesList \u003d slotContainer.getModuleCodesList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ArrayList\u003cSlot\u003e sortedThisDaySlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ArrayList\u003cString\u003e sortedThisDayModuleCodesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        int indexEarliestTimeSlot;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        Slot earliestTimeSlot;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        while (thisDaySlots.size() !\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            earliestTimeSlot \u003d thisDaySlots.get(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            indexEarliestTimeSlot \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            for (int i \u003d 1; i \u003c thisDaySlots.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                if (earliestTimeSlot.getStartTime().isAfter(thisDaySlots.get(i).getStartTime())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    earliestTimeSlot \u003d thisDaySlots.get(i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    indexEarliestTimeSlot \u003d i;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            sortedThisDaySlots.add(thisDaySlots.get(indexEarliestTimeSlot));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            sortedThisDayModuleCodesList.add(thisDayModuleCodesList.get(indexEarliestTimeSlot));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            thisDaySlots.remove(indexEarliestTimeSlot);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            thisDayModuleCodesList.remove(indexEarliestTimeSlot);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return new SlotContainer(sortedThisDaySlots, sortedThisDayModuleCodesList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 99
    }
  },
  {
    "path": "src/main/java/seedu/zoomaster/slot/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    private List\u003cModule\u003e modules;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public Timetable() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public boolean moduleExists(String moduleCode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        boolean moduleExists \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            if (module.isModule(moduleCode)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                moduleExists \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return moduleExists;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public Module addModule(String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Module module \u003d new Module(moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public List\u003cSlot\u003e getFullSlotList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cSlot\u003e slotList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "            slotList.addAll(module.getSlotList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return slotList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    //@@author jusufnathanael"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public void clearAllModule() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        modules.removeAll(modules);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public List\u003cModule\u003e getFullModuleList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    public Module getModule(String moduleCode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Module module \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        for (Module mod : modules) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            if (mod.isModule(moduleCode)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "                module \u003d mod;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        assert module !\u003d null : \"module should not be null\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    //@@author fchensan"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public Module getModuleContainingSlot(Slot slot) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        for (Module module: modules) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            if (module.getSlotList().contains(slot)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                return module;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void deleteModule(Module module) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        modules.remove(module);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public boolean isOverlapTimeSlot(String day, LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        boolean isOverlap \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        List\u003cSlot\u003e slotList \u003d getFullSlotList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        for (Slot slot : slotList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            if (slot.getDay().equals(day)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                if ((isTimeAGreaterEqualsTimeB(startTime, slot.getEndTime())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                        \u0026\u0026 isTimeAGreaterEqualsTimeB(endTime, slot.getEndTime()))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                        || (isTimeAGreaterEqualsTimeB(slot.getStartTime(), startTime)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                        \u0026\u0026 isTimeAGreaterEqualsTimeB(slot.getStartTime(), endTime))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                isOverlap \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return isOverlap;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    //@@author TYS0n1"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static boolean isTimeAGreaterEqualsTimeB(LocalTime timeA, LocalTime timeB) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        boolean isGreaterEquals \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        if (timeA.isAfter(timeB) || timeA.equals(timeB)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            isGreaterEquals \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return isGreaterEquals;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    //@@author fchensan"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public Slot getSlotByIndexInDay(String day, int index) throws ZoomasterException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        ArrayList\u003cSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        ArrayList\u003cString\u003e moduleCodeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (!Day.isDay(day)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_TIMETABLE_DAY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        for (Module module: modules) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            for (Slot s: module.getSlotList()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                if (s.getDay().equals(day)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                    slots.add(s);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                    moduleCodeList.add(module.getModuleCode());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        SlotContainer slotContainer \u003d new SlotContainer(slots, moduleCodeList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        slotContainer \u003d SlotContainer.sortSlotsByTime(slotContainer);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        ArrayList\u003cSlot\u003e slotList \u003d slotContainer.getSlotList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (slotList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.EMPTY_DAY);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            return slotList.get(index - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throw new ZoomasterException(ZoomasterExceptionType.INVALID_INDEX_IN_DAY,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                Integer.toString(slotList.size()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * Move a slot to another module given a user input module code."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param dayOfSlot The day of slot to be moved."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param indexInDay The index of the slot within its day."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     * @param newModuleCode The module code where the slot will be moved to."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fchensan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    public void moveSlotToAnotherModule(String dayOfSlot, int indexInDay, String newModuleCode)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            throws ZoomasterException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Slot slot \u003d getSlotByIndexInDay(dayOfSlot, indexInDay);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        getModuleContainingSlot(slot).removeSlot(slot);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Module newModule;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        if (moduleExists(newModuleCode)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            newModule \u003d getModule(newModuleCode);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            newModule \u003d new Module(newModuleCode);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            addModule(newModule);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        newModule.addSlot(slot);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        return modules.isEmpty();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 36,
      "TYS0n1": 43,
      "jusufnathanael": 20,
      "fchensan": 73
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "package seedu.zoomaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void parseInvalidCommandThrowsUnknownInputException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"iNvAlidCOmmand\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e.getError());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException f \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"iNvAlidCOmmand\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, f.getError());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException g \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"iNvAlidCOmmand\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, g.getError());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void parseEmptyCommandThrowsUnknownInputException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e.getError());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException f \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, f.getError());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException g \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, g.getError());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void parseHelpCommandWithInvalidCommandThrowsUnknownHelpCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"helpextrawords\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException f \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"helpextrawords\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, f.getError());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException g \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"helpextrawords\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, g.getError());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void parseInvalidCommandsMode0ThrowsUnknownInputException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"add\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e.getError());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException f \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"delete\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, f.getError());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException g \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"show\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, g.getError());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException h \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"find\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, h.getError());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException i \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"launch\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, i.getError());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void parseInvalidCommandsMode1ThrowsUnknownInputException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"load\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e.getError());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void parseInvalidCommandsMode2ThrowsUnknownInputException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 2;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"find\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e.getError());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException f \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"load\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, f.getError());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void parseInvalidCommandsMode3ThrowsUnknownInputException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 3;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"find\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e.getError());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException f \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"delete\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, f.getError());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException h \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"find\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, h.getError());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException i \u003d assertThrows(ZoomasterException.class, () -\u003e Parser.parse(\"launch\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, i.getError());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void getProgramMode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Speedweener": 102
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "package seedu.zoomaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.bookmark.Bookmark;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.settings.UserSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void loadTimetableWithInvalidFilePath() throws ZoomasterException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Storage\u003cTimetable\u003e test \u003d new Storage\u003c\u003e(\"iNvAlIdPaThNaMe/data/timetable/\", Timetable.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertTrue(test.load() instanceof Timetable);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void loadBookmarkListWithInvalidFilePath() throws ZoomasterException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Storage\u003cBookmarkList\u003e test \u003d new Storage\u003c\u003e(\"iNvAlIdPaThNaMe/data/bookmark/\", BookmarkList.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertTrue(test.load() instanceof BookmarkList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void loadUserSettingsWithInvalidFilePath() throws ZoomasterException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Storage\u003cUserSettings\u003e test \u003d new Storage\u003c\u003e(\"iNvAlIdPaThNaMe/data/settings/\", UserSettings.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertTrue(test.load() instanceof UserSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void loadWithBaseClassThrowsErrorLoadingFileException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Storage\u003cBookmark\u003e test \u003d new Storage\u003c\u003e(\"iNvAlIdPaThNaMe/data/timetable/\", Bookmark.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e test.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.ERROR_LOADING_FILE, e.getError());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void getFiles() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void loadPlanner() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void saveNullObjectThrowsWriteFileErrorException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Storage\u003cTimetable\u003e test \u003d new Storage\u003c\u003e(\"/data/timetable/\", Timetable.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e test.save(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.WRITE_FILE_ERROR, e.getError());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void loadModuleListWithInvalidPathThrowsFileNotFoundException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Storage\u003cTimetable\u003e test \u003d new Storage\u003c\u003e(\"iNvAlIdPaThNaMe/data/timetable/\", Timetable.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e test.loadModuleList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Speedweener": 65
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/ZoomasterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "class ZoomasterTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    Zoomaster test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void defaultTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        test \u003d new Zoomaster(\"./data/bookmarks.txt\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                \"./data/timetable.txt\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "                \"./data/settings.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 12,
      "Speedweener": 1,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/bookmark/BookmarkListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class BookmarkListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    Bookmark bookmarkTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void initEachSlotTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        bookmarkTest \u003d new Bookmark(\"tutorial\", \"www.google.com\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void addBookmark_validInput_returnsExpectedMessage() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(\"Added bookmark: [tutorial] www.google.com\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                bookmarks.addBookmark(bookmarkTest));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void getBookmark_validIndex_returnsBookmark() throws IndexOutOfBoundsException, ZoomasterException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        bookmarks.addBookmark(bookmarkTest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(bookmarkTest, bookmarks.getBookmark(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void getBookmark_invalidIndex_throwsIndexOutOfBoundsException() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        bookmarks.addBookmark(bookmarkTest);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e bookmarks.getBookmark(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e bookmarks.getBookmark(-1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e bookmarks.getBookmark(2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Adds 4 valid bookmarks to the BookmarkList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Checks that size decreases to 4 after deletion."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     * Checks that bookmark at index 2 changes after deletion."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    //@@author Speedweener"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void deleteBookmark() throws IndexOutOfBoundsException, ZoomasterException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"CS2113T\", \"www.google.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"CS2113T\", \"www.yahoo.com\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"CS1010\", \"https://www.youtube.com/\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"GEH1049\", \"https://www.stackoverflow.com/\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(bookmarks.getSize(), 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(bookmarks.getBookmark(2).getBookmarkAsString(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                \"[CS1010] https://www.youtube.com/\" + System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.deleteBookmark(bookmarks.getBookmark(2));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(bookmarks.getSize(), 3);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(bookmarks.getBookmark(2).getBookmarkAsString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                \"[GEH1049] https://www.stackoverflow.com/\" + System.lineSeparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void showBookmark() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"CS2113T\", \"www.google.com\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"CS2113T\", \"www.yahoo.com\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(\"Here are the bookmarks in your list:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                + \"  \" + (1) + \".\" + \"[CS2113T] www.google.com\" + System.lineSeparator()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                + \"  \" + (2) + \".\" + \"[CS2113T] www.yahoo.com\" + System.lineSeparator() + System.lineSeparator(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                bookmarks.showBookmarks());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void findBookmark_matchingBookmark() throws IndexOutOfBoundsException, ZoomasterException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"CS2112T\", \"www.google.com\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"CS2113T\", \"www.yahoo.com\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(\"Here are your matching bookmarks\" + System.lineSeparator() + (2) + \".\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                        + bookmarks.getBookmark(1).getBookmarkAsString() + System.lineSeparator(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                bookmarks.findBookmarks(\"CS2113T\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void findBookmark_emptyList_returnsEmptyListMessage() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(\"Bookmark list is empty\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                bookmarks.findBookmarks(\"CS2113T\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void findBookmark_noMatchingKeyword_returnsNoMatchingBookmarkMessage() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"CS2112T\", \"www.google.com\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"CS2113T\", \"www.yahoo.com\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(\"No bookmarks contain the specified keyword!\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                bookmarks.findBookmarks(\"CS3113T\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void launchBookmark_matchingBookmark() throws IndexOutOfBoundsException, ZoomasterException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"tutorial\", \"www.google.com\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"lecture\", \"www.yahoo.com\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(\"Launched these bookmarks:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                + (2) + \".\" + bookmarks.getBookmark(1).getBookmarkAsString() + System.lineSeparator(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                bookmarks.launchBookmarks(\"lecture\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void launchBookmark_emptyBookmarkList_returnEmptyListMessage() throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e bookmarks.launchBookmarks(\"lecture\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.EMPTY_BOOKMARK_LIST, e.getError());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void launchBookmark_noMatchingBookmarks() throws ZoomasterException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"tutorial\", \"www.google.com\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"lecture\", \"www.yahoo.com\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String description \u003d \"NONMATCHINGTERM\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(\"No bookmarks contain the specified keyword!\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                bookmarks.launchBookmarks(description));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void launchBookmark_noEmptyList_throwsZoomasterException() throws ZoomasterException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        String description \u003d \"NONMATCHINGTERM\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e bookmarks.launchBookmarks(description));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.EMPTY_BOOKMARK_LIST, e.getError());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void launchAllBookmark_returnLaunchBookmarksMessage() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"tutorial\", \"www.google.com\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"lecture\", \"www.yahoo.com\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(\"Launched these bookmarks:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                        + \"1.[tutorial] www.google.com\" + System.lineSeparator()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                        + \"2.[lecture] www.yahoo.com\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                bookmarks.launchAllBookmarks());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void launchAllBookmark_emptyBookmarkList_returnEmptyListMessage() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(\"Bookmark list is empty\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "                bookmarks.launchAllBookmarks());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 41,
      "TYS0n1": 1,
      "Speedweener": 113
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/bookmark/BookmarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class BookmarkTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    Bookmark bookmarkTest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void initEachSlotTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        bookmarkTest \u003d new Bookmark(\"desc\", \"www.google.com\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void extractModuleDescriptionAndUrl_validInput_returnsDescAndUrl() throws ZoomasterException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // Valid url variation 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cString\u003e expectedUrlAndDescription \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        expectedUrlAndDescription.add(\"tutorial\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        expectedUrlAndDescription.add(\"www.google.com\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String input \u003d \"tutorial www.google.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(expectedUrlAndDescription, Bookmark.extractDescriptionAndUrl(input));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // Valid url variation 2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cString\u003e expectedUrlAndDescription2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        expectedUrlAndDescription2.add(\"tutorial\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        expectedUrlAndDescription2.add(\"http://www.google.com\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String input2 \u003d \"tutorial http://www.google.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(expectedUrlAndDescription2, Bookmark.extractDescriptionAndUrl(input2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // Valid url variation 2"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cString\u003e expectedUrlAndDescription3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        expectedUrlAndDescription3.add(\"tutorial\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        expectedUrlAndDescription3.add(\"https://www.google.com\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String input3 \u003d \"tutorial https://www.google.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(expectedUrlAndDescription3, Bookmark.extractDescriptionAndUrl(input3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // Multiple spaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        List\u003cString\u003e expectedUrlAndDescription4 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        expectedUrlAndDescription4.add(\"tutorial\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        expectedUrlAndDescription4.add(\"www.google.com\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String input4 \u003d \"tutorial         www.google.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(expectedUrlAndDescription4, Bookmark.extractDescriptionAndUrl(input4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void extractModuleDescriptionAndUrl_missingParameter_throwsZoomasterException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String missingDescription \u003d \"www.google.com\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                Bookmark.extractDescriptionAndUrl(missingDescription));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_ADD_BOOKMARK_INPUT, e.getError());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String missingUrl \u003d \"description\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e2 \u003d assertThrows(ZoomasterException.class, () -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                Bookmark.extractDescriptionAndUrl(missingUrl));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_ADD_BOOKMARK_INPUT, e2.getError());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void extractModuleDescriptionAndUrl_invalidUrl_throwsZoomasterException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String invalidUrl \u003d \"CS2113T google.com\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                Bookmark.extractDescriptionAndUrl(invalidUrl));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_URL, e.getError());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String additionalParameter \u003d \"description www.google.com additional_word\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e2 \u003d assertThrows(ZoomasterException.class, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                Bookmark.extractDescriptionAndUrl(additionalParameter));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_URL, e2.getError());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void launch() throws ZoomasterException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(\"  [desc] www.google.com\", bookmarkTest.launch());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void setUrl_invalidUrl_throwsZoomasterException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // missing \"www.\", \"http://\" or \"https://\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e bookmarkTest.setUrl(\"google.com\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_URL, e.getError());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // contains spacing"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e2 \u003d assertThrows(ZoomasterException.class, () -\u003e bookmarkTest.setUrl(\"www.google.com hi\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_URL, e2.getError());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void getBookmarkAsString_returnsDescriptionAndUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        String expectedString \u003d \"[desc] www.google.com\" + System.lineSeparator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(expectedString, bookmarkTest.getBookmarkAsString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 90,
      "TYS0n1": 12
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/ChangeModeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "public class ChangeModeCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testChangeToBookmarkMode() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        assertEquals(1, new ChangeModeCommand(\"mode bookmark\").setToMode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testChangeToTimetableMode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        assertEquals(2, new ChangeModeCommand(\"mode timetable\").setToMode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testInvalidModeInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        assertEquals(0, new ChangeModeCommand(\"mode abcd\").setToMode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testShortLenghtInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        assertEquals(0, new ChangeModeCommand(\"mode\").setToMode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 29,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "package seedu.zoomaster.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "//@@author Speedweener"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    List\u003cString\u003e modeZeroCommands \u003d new ArrayList\u003c\u003e(Arrays.asList(\"mode\",\"clear\",\"launch now\", \"showsettings\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            \"set\", \"exit\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    List\u003cString\u003e modeOneCommands \u003d  new ArrayList\u003c\u003e(Arrays.asList(\"add\", \"delete\", \"show\",\"find\",\"launch\", \"edit\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    List\u003cString\u003e modeTwoCommands \u003d  new ArrayList\u003c\u003e(Arrays.asList(\"add\", \"delete\", \"show\",\"edit\",\"launch\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    List\u003cString\u003e modeThreeCommands \u003d  new ArrayList\u003c\u003e(Arrays.asList(\"load\", \"add\", \"show\",\"save\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void validCommandsForEachMode() throws ZoomasterException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        List\u003cString\u003e totalModeOneCommands \u003d modeOneCommands;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        totalModeOneCommands.addAll(modeZeroCommands);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        List\u003cString\u003e totalModeTwoCommands \u003d modeTwoCommands;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        totalModeTwoCommands.addAll(modeZeroCommands);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        List\u003cString\u003e totalModeThreeCommands \u003d modeThreeCommands;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        totalModeThreeCommands.addAll(modeZeroCommands);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : modeZeroCommands) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            Command test \u003d new HelpCommand(\"help \" + command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : totalModeOneCommands) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            Command test \u003d new HelpCommand(\"help \" + command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : totalModeTwoCommands) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            Command test \u003d new HelpCommand(\"help \" + command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 3;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : totalModeThreeCommands) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            Command test \u003d new HelpCommand(\"help \" + command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void invalidDetailsModeZeroThrowsUnknownHelpCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help iNvalidCommand\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : modeOneCommands) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help\" + command));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : modeTwoCommands) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help\" + command));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : modeThreeCommands) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help\" + command));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void invalidDetailsModeOneThrowsUnknownHelpCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        List\u003cString\u003e nonModeOneCommands \u003d modeTwoCommands;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        nonModeOneCommands.addAll(modeThreeCommands);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        nonModeOneCommands.removeAll(modeOneCommands);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help iNvalidCommand\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : nonModeOneCommands) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help\" + command));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void invalidDetailsModeTwoThrowsUnknownHelpCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 2;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        List\u003cString\u003e nonModeTwoCommands \u003d modeOneCommands;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        nonModeTwoCommands.addAll(modeThreeCommands);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        nonModeTwoCommands.removeAll(modeTwoCommands);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help iNvalidCommand\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : nonModeTwoCommands) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help\" + command));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    void invalidDetailsModeThreeThrowsUnknownHelpCommandException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        Parser.programMode \u003d 3;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        List\u003cString\u003e nonModeThreeCommands \u003d modeOneCommands;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        nonModeThreeCommands.addAll(modeTwoCommands);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        nonModeThreeCommands.removeAll(modeThreeCommands);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help iNvalidCommand\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        for (String command : nonModeThreeCommands) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            e \u003d assertThrows(ZoomasterException.class, () -\u003e new HelpCommand(\"help\" + command));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "            assertEquals(ZoomasterExceptionType.UNKNOWN_HELP_COMMAND, e.getError());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Speedweener"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Speedweener"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Speedweener": 131
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/bookmark/AddBookmarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class AddBookmarkCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void constructor_invalidInput_throwsZoomasterException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e new AddBookmarkCommand(\"add\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.EMPTY_COMMAND, e.getError());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e2 \u003d assertThrows(ZoomasterException.class, () -\u003e new AddBookmarkCommand(\"addNo Space\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e2.getError());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e3 \u003d assertThrows(ZoomasterException.class, () -\u003e new AddBookmarkCommand(\"add noUrl\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_ADD_BOOKMARK_INPUT, e3.getError());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e4 \u003d assertThrows(ZoomasterException.class, () -\u003e new AddBookmarkCommand(\"add noDesc\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_ADD_BOOKMARK_INPUT, e4.getError());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e5 \u003d assertThrows(ZoomasterException.class, () -\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                new AddBookmarkCommand(\"add desc www.google.com extraWord\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_URL, e5.getError());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e6 \u003d assertThrows(ZoomasterException.class, () -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                new AddBookmarkCommand(\"add desc google.com\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_URL, e6.getError());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 30,
      "TYS0n1": 5
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/bookmark/DeleteBookmarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class DeleteBookmarkCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void constructor_invalidInput_throwsZoomasterException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e new DeleteBookmarkCommand(\"delete\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.EMPTY_COMMAND, e.getError());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e2 \u003d assertThrows(ZoomasterException.class, () -\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                new DeleteBookmarkCommand(\"deleteNo Space\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e2.getError());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e3 \u003d assertThrows(ZoomasterException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                new DeleteBookmarkCommand(\"delete notInt\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.NON_INTEGER_INPUT, e3.getError());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 22,
      "TYS0n1": 5
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/bookmark/EditBookmarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fchensan"
        },
        "content": "package seedu.zoomaster.command.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.bookmark.Bookmark;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fchensan"
        },
        "content": "class EditBookmarkCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    BookmarkList bookmarks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private void setupBookmarks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"luminus\", \"www.nus.edu.sg/luminus\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"google\", \"www.google.com\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        bookmarks.addBookmark(new Bookmark(\"youtube\", \"www.youtube.com\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    void constructor_invalidInput_throwsZoomasterException() throws ZoomasterException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        setupBookmarks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String input \u003d EditBookmarkCommand.EDIT_KW + \" desc\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertThrows(ZoomasterException.class, () -\u003e new EditBookmarkCommand(input));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    void execute_editDesc_changesSuccessfully() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        setupBookmarks();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String newDescription \u003d \"homepage\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String input \u003d EditBookmarkCommand.EDIT_KW + \" desc 2 \" + newDescription;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            EditBookmarkCommand command \u003d new EditBookmarkCommand(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            command.execute(bookmarks, timetable, ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            assertEquals(bookmarks.getBookmark(1).getDescription(), newDescription);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    void execute_editUrl_changesSuccessfully() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        setupBookmarks();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String newUrl \u003d \"www.yahoo.com\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String input \u003d EditBookmarkCommand.EDIT_KW + \" url 2 \" + newUrl;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            EditBookmarkCommand command \u003d new EditBookmarkCommand(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            command.execute(bookmarks, timetable, ui);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            assertEquals(bookmarks.getBookmark(1).getUrl(), newUrl);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fchensan": 66
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/planner/AddMeetingCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "package seedu.zoomaster.command.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "//@@author jusufnathanael"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "class AddMeetingCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    LoadPlannerCommand load \u003d new LoadPlannerCommand(\"load\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    AddMeetingCommandTest() throws ZoomasterException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    void testCreate() throws ZoomasterException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Module test \u003d new Module(\"EMPTY\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"12:00\"), \"mon\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"14:00\"), LocalTime.parse(\"23:55\"), \"mon\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"23:55\"), \"wed\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"23:55\"), \"fri\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"23:55\"), \"sat\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"23:55\"), \"sun\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"10:00\"), \"tue\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"11:00\"), LocalTime.parse(\"23:55\"), \"tue\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"09:30\"), \"thu\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"11:30\"), LocalTime.parse(\"23:55\"), \"thu\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Timetable result \u003d new Timetable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        result.addModule(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Timetable temp \u003d new Timetable();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        temp.addModule(\"CS1010\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        temp.getModule(\"CS1010\").addSlot(new Slot(LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\"), \"mon\", \"lec\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Timetable compare \u003d new Timetable();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        compare.addModule(load.initialiseEmptySlots(temp));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Module module1 \u003d new Module(\"CS3243\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Module module2 \u003d new Module(\"CS3244\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        String command1 \u003d \"tutorial tue 10:00 11:00\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        String command2 \u003d \"lecture thu 09:30 11:30\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        String command3 \u003d \"lecture mon 11:00 13:00\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        AddMeetingCommand add1 \u003d new AddMeetingCommand(\"add CS3243\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        add1.create(command1, module1, compare);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        AddMeetingCommand add2 \u003d new AddMeetingCommand(\"add CS3244\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        add2.create(command2, module2, compare);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        AddMeetingCommand add3 \u003d new AddMeetingCommand(\"add CS3244\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        add3.create(command3, module2, compare);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        assert (compare.getFullSlotList().toString().equals(result.getFullSlotList().toString()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jusufnathanael": 62
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/planner/LoadPlannerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "package seedu.zoomaster.command.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "//@@author jusufnathanael"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "class LoadPlannerCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    LoadPlannerCommand command \u003d new LoadPlannerCommand(\"load\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    LoadPlannerCommandTest() throws ZoomasterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    void testInitialiseEmptySlots() throws ZoomasterException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Timetable t \u003d new Timetable();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.addModule(\"CS1010\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.addModule(\"CS1231\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot1 \u003d new Slot(LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\"), \"mon\", \"lecture\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot2 \u003d new Slot(LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\"), \"tue\", \"consultation\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot3 \u003d new Slot(LocalTime.parse(\"09:30\"), LocalTime.parse(\"11:30\"), \"thu\", \"lecture\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.getModule(\"CS1010\").addSlot(slot1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.getModule(\"CS1010\").addSlot(slot2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.getModule(\"CS1231\").addSlot(slot3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Module test \u003d new Module(\"EMPTY\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"12:00\"), \"mon\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"14:00\"), LocalTime.parse(\"23:55\"), \"mon\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"10:00\"), \"tue\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"11:00\"), LocalTime.parse(\"23:55\"), \"tue\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"23:55\"), \"wed\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"09:30\"), \"thu\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"11:30\"), LocalTime.parse(\"23:55\"), \"thu\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"23:55\"), \"fri\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"23:55\"), \"sat\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        test.addSlot(new Slot(LocalTime.parse(\"00:00\"), LocalTime.parse(\"23:55\"), \"sun\", \"\u003cempty slot\u003e\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        assert (test.getSlotList().toString().equals(command.initialiseEmptySlots(t).getSlotList().toString()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jusufnathanael": 47
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/planner/SavePlannerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "package seedu.zoomaster.command.planner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "//@@author jusufnathanael"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "class SavePlannerCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    SavePlannerCommand save \u003d new SavePlannerCommand(\"save\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    LoadPlannerCommand load \u003d new LoadPlannerCommand(\"load\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    SavePlannerCommandTest() throws ZoomasterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    void testWriteToFile() throws ZoomasterException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Timetable t \u003d new Timetable();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.addModule(\"CS1010\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.addModule(\"CS1231\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot1 \u003d new Slot(LocalTime.parse(\"12:00\"), LocalTime.parse(\"14:00\"), \"mon\", \"lecture\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot2 \u003d new Slot(LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\"), \"tue\", \"consultation\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot3 \u003d new Slot(LocalTime.parse(\"09:30\"), LocalTime.parse(\"11:30\"), \"thu\", \"lecture\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.getModule(\"CS1010\").addSlot(slot1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.getModule(\"CS1010\").addSlot(slot2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        t.getModule(\"CS1231\").addSlot(slot3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Timetable result \u003d new Timetable();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        result.addModule(\"CS1010\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        result.addModule(\"CS1231\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        result.getModule(\"CS1010\").addSlot(slot1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        result.getModule(\"CS1010\").addSlot(slot2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        result.getModule(\"CS1231\").addSlot(slot3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Timetable planner \u003d new Timetable();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        planner.addModule(load.initialiseEmptySlots(t));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        planner.addModule(\"CS1010\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        planner.addModule(\"CS2040C\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        result.addModule(\"CS2040C\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot4 \u003d new Slot(LocalTime.parse(\"14:00\"), LocalTime.parse(\"16:00\"), \"fri\", \"tutorial\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        Slot slot5 \u003d new Slot(LocalTime.parse(\"16:00\"), LocalTime.parse(\"18:00\"), \"thu\", \"tutorial\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        planner.getModule(\"CS2040C\").addSlot(slot4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        planner.getModule(\"CS1010\").addSlot(slot5);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        result.getModule(\"CS2040C\").addSlot(slot4);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        result.getModule(\"CS1010\").addSlot(slot5);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        save.writeToFile(planner, t);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "        assert (t.getFullSlotList().toString().equals(result.getFullSlotList().toString()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jusufnathanael"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jusufnathanael": 59
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/timetable/AddSlotCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class AddSlotCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void constructor_invalidInput_throwsDukeException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // empty detail"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e new AddSlotCommand(\"add\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.EMPTY_COMMAND, e.getError());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // blank detail"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e2 \u003d assertThrows(ZoomasterException.class, () -\u003e new AddSlotCommand(\"add  \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.EMPTY_COMMAND, e2.getError());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // no whitespace"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e3 \u003d assertThrows(ZoomasterException.class, () -\u003e new AddSlotCommand(\"addCS2113T\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e3.getError());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 23,
      "TYS0n1": 4
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/timetable/DeleteSlotCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class DeleteSlotCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void constructor_invalidInput_throwsZoomasterException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e new DeleteSlotCommand(\"delete\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.EMPTY_COMMAND, e.getError());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e2 \u003d assertThrows(ZoomasterException.class, () -\u003e new DeleteSlotCommand(\"deleteNo Space\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.UNKNOWN_INPUT, e2.getError());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e3 \u003d assertThrows(ZoomasterException.class, () -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                new DeleteSlotCommand(\"delete CS2113T error\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.NON_INTEGER_INPUT, e3.getError());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 21,
      "TYS0n1": 4
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/timetable/EditSlotCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fchensan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fchensan"
        },
        "content": "//@@author fchensan"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fchensan"
        },
        "content": "class EditSlotCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private static final String DEFAULT_START_TIME \u003d \"10:00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private static final String DEFAULT_END_TIME \u003d \"12:00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private static final String DEFAULT_DAY \u003d \"fri\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private static final String DEFAULT_TITLE \u003d \"lecture\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    private static final String DEFAULT_MODULE_TITLE \u003d \"lecture\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    Timetable timetable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    BookmarkList bookmarks \u003d new BookmarkList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    void setupTimetable() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Module m1 \u003d new Module(DEFAULT_MODULE_TITLE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        m1.addSlot(new Slot(LocalTime.parse(DEFAULT_START_TIME),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                LocalTime.parse(DEFAULT_END_TIME),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                DEFAULT_DAY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fchensan"
        },
        "content": "                DEFAULT_TITLE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        timetable.addModule(m1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    void constructor_invalidInput_throwsZoomasterException() throws ZoomasterException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String input \u003d EditSlotCommand.EDIT_KW + \" mon 1 abcd abcd abcd\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        setupTimetable();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        EditSlotCommand command \u003d new EditSlotCommand(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertThrows(ZoomasterException.class, () -\u003e command.execute(bookmarks, timetable, ui));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    void execute_editModule_changesSuccessfully() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        setupTimetable();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String input \u003d EditSlotCommand.EDIT_KW + \" module fri 1 CS2113\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        EditSlotCommand command \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Slot s \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            command \u003d new EditSlotCommand(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            command.execute(bookmarks, timetable, ui);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            s \u003d timetable.getModule(\"CS2113\").getSlot(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getStartTime(), LocalTime.parse(DEFAULT_START_TIME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getEndTime(), LocalTime.parse(DEFAULT_END_TIME));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getDay(), DEFAULT_DAY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getTitle(), DEFAULT_TITLE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    void execute_editTitle_changesSuccessfully() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        setupTimetable();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String newTitle \u003d \"tutorial\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String input \u003d EditSlotCommand.EDIT_KW + \" title fri 1 \" + newTitle;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        EditSlotCommand command \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Slot s \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            command \u003d new EditSlotCommand(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            command.execute(bookmarks, timetable, ui);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            s \u003d timetable.getModule(DEFAULT_MODULE_TITLE).getSlot(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getStartTime(), LocalTime.parse(DEFAULT_START_TIME));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getEndTime(), LocalTime.parse(DEFAULT_END_TIME));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getDay(), DEFAULT_DAY);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getTitle(), newTitle);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    void execute_editTime_changesSuccessfully() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        setupTimetable();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String newDay \u003d \"wed\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String newStartTime \u003d \"15:00\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String newEndTime \u003d \"17:00\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        String input \u003d EditSlotCommand.EDIT_KW + \" time fri 1 \" + newDay + \" \" + newStartTime + \" \" + newEndTime;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        EditSlotCommand command \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        Slot s \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            command \u003d new EditSlotCommand(input);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            command.execute(bookmarks, timetable, ui);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            s \u003d timetable.getModule(DEFAULT_MODULE_TITLE).getSlot(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fchensan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getStartTime().toString(), newStartTime);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getEndTime().toString(), newEndTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getDay(), newDay);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fchensan"
        },
        "content": "        assertEquals(s.getTitle(), DEFAULT_TITLE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fchensan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fchensan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fchensan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 16,
      "fchensan": 111
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/command/timetable/ShowTimetableCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.command.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.bookmark.BookmarkList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import seedu.zoomaster.slot.Timetable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "public class ShowTimetableCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    static Timetable time1 \u003d new Timetable();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testShowAllSlots() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            setupTimetable();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testMondaySlots() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show mon\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            setupTimetable();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testTuesdaySlots() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show tue\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            setupTimetable();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testWednesdaySlots() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show wed\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            setupTimetable();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testThursdaySlots() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show thu\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            setupTimetable();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testFridaySlots() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show fri\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            setupTimetable();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testSatudaySlots() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show sat\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            setupTimetable();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testSundaySlots() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show sun\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            setupTimetable();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testInvalidSlots1() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(true, true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public void testInvalidSlots2() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        ShowTimetableCommand timetable;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            timetable \u003d new ShowTimetableCommand(\"show abc\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    public static void setupTimetable() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            AddSlotCommand addSlot1 \u003d new AddSlotCommand(\"add laj1201 tutorial_1 mon 08:00 10:00\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            addSlot1.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            AddSlotCommand addSlot2 \u003d new AddSlotCommand(\"add cs2101 tutorial_1 tue 10:00 12:00\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            addSlot2.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            AddSlotCommand addSlot3 \u003d new AddSlotCommand(\"add cg2271 lecture wed 09:00 11:00 \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            addSlot3.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            AddSlotCommand addSlot4 \u003d new AddSlotCommand(\"add laj1201 tutorial_2 thu 08:00 10:00 \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            addSlot4.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            AddSlotCommand addSlot5 \u003d new AddSlotCommand(\"add cg2271 lab fri 08:00 10:00 \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            addSlot5.execute(new BookmarkList(), time1, new Ui());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        } catch (ZoomasterException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "            assertEquals(false, true);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TYS0n1": 150,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/slot/DayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class DayTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void isDay_invalidDay_false() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(Day.isDay(\"monday\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(Day.isDay(\"mond\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(Day.isDay(\"invalid\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void isDay_validDay_true() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(Day.isDay(\"mon\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(Day.isDay(\"Tue\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(Day.isDay(\"WED\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void getDayFromCommand_validDayInputs_smallLetterAbbreviationOfDays() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(\"mon\", Day.getDayFromCommand(\"mon\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(\"tue\", Day.getDayFromCommand(\"Tue\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(\"wed\", Day.getDayFromCommand(\"WED\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void getDayFromCommand_invalidDayInputs_null() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertNull(Day.getDayFromCommand(\"monday\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertNull(Day.getDayFromCommand(\"hello\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertNull(Day.getDayFromCommand(\"mon \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 40
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/slot/ModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import seedu.zoomaster.exception.ZoomasterExceptionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class ModuleTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    Module moduleTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    Module moduleTest2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void initEachSlotTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest \u003d new Module(\"CS2113T\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest2 \u003d new Module(\"CS2101\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void addSlot_addSlotsWithDifferentDayAndStartTime_slotsOrderedAccordingToDayAndTime() throws ZoomasterException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot1 \u003d new Slot(LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\"), \"wed\", \"input1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot2 \u003d new Slot(LocalTime.parse(\"12:00\"), LocalTime.parse(\"13:00\"), \"wed\", \"input2\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot3 \u003d new Slot(LocalTime.parse(\"08:00\"), LocalTime.parse(\"09:00\"), \"wed\", \"input3\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot4 \u003d new Slot(LocalTime.parse(\"02:00\"), LocalTime.parse(\"03:00\"), \"fri\", \"input4\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot5 \u003d new Slot(LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\"), \"fri\", \"input5\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot6 \u003d new Slot(LocalTime.parse(\"15:00\"), LocalTime.parse(\"16:00\"), \"mon\", \"input6\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot7 \u003d new Slot(LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\"), \"mon\", \"input7\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // target slot"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest.addSlot(slot1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day later time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest.addSlot(slot2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day earlier time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest.addSlot(slot3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // later day earlier time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest.addSlot(slot4);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // later day same time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest.addSlot(slot5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // earlier day later time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest.addSlot(slot6);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // earlier day same time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest.addSlot(slot7);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // slots are ordered by day first then time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(slot7, moduleTest.getSlot(0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(slot6, moduleTest.getSlot(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(slot3, moduleTest.getSlot(2));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(slot1, moduleTest.getSlot(3));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(slot2, moduleTest.getSlot(4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(slot4, moduleTest.getSlot(5));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(slot5, moduleTest.getSlot(6));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void getSlot_emptyListOrInvalidIndex_throwsZoomasterException() throws ZoomasterException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e \u003d assertThrows(ZoomasterException.class, () -\u003e moduleTest.getSlot(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.ZERO_SLOTS_IN_MODULE, e.getError());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e2 \u003d assertThrows(ZoomasterException.class, () -\u003e moduleTest.getSlot(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.ZERO_SLOTS_IN_MODULE, e2.getError());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e3 \u003d assertThrows(ZoomasterException.class, () -\u003e moduleTest.getSlot(-1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.ZERO_SLOTS_IN_MODULE, e3.getError());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // non-empty list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        Slot slot1 \u003d new Slot(LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\"), \"wed\", \"input1\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest.addSlot(slot1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(slot1, moduleTest.getSlot(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e5 \u003d assertThrows(ZoomasterException.class, () -\u003e moduleTest.getSlot(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_SLOT_NUMBER, e5.getError());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        ZoomasterException e6 \u003d assertThrows(ZoomasterException.class, () -\u003e moduleTest.getSlot(-1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(ZoomasterExceptionType.INVALID_SLOT_NUMBER, e6.getError());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void getBookmarksToString_emptyList_returnsEmptyListMessage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(\"no bookmarks found in module\" + System.lineSeparator() + System.lineSeparator(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "                moduleTest.getBookmarksToString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 90
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/slot/SlotStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "public class SlotStub extends Slot {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public SlotStub() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        super(LocalTime.parse(\"11:00\"), LocalTime.parse(\"12:00\"), \"wed\", \"test\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return \"wed\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return LocalTime.parse(\"11:00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        return LocalTime.parse(\"12:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 26
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/slot/SlotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class SlotTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    Slot slotTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    Slot slotTest2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void initEachSlotTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        slotTest \u003d new Slot(LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\"), \"mon\", \"tutorial\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        slotTest2 \u003d new Slot(LocalTime.parse(\"10:30\"), LocalTime.parse(\"11:30\"), \"tue\", \"lecture\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void match_validDetails_returnsTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(slotTest.match(\"tutorial\", \"mon\", LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // different case for lesson"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(slotTest.match(\"TUTORIAL\", \"mon\", LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // different case for day"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(slotTest.match(\"tutorial\", \"MON\", LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void match_invalidDetails_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // different lesson"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(slotTest.match(\"lecture\", \"mon\", LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // different day"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(slotTest.match(\"tutorial\", \"tue\", LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // different start time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(slotTest.match(\"tutorial\", \"mon\", LocalTime.parse(\"09:00\"), LocalTime.parse(\"11:00\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // different end time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(slotTest.match(\"tutorial\", \"mon\", LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:11\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void getStartMinutes_returnCorrectValue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // only hours"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(600, slotTest.getStartMinutes());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // hours and minutes"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(630, slotTest2.getStartMinutes());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void getEndMinutes_returnCorrectValue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // only hours"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(660, slotTest.getEndMinutes());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // hours and minutes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(690, slotTest2.getEndMinutes());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void convertIntToLocalTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // hours \u003c 10, minutes \u003c 10"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(LocalTime.parse(\"09:09\"), Slot.convertIntToLocalTime(9, 9));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // hours \u003c 10, minutes \u003e\u003d 10"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(LocalTime.parse(\"09:10\"), Slot.convertIntToLocalTime(9, 10));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // hours \u003e\u003d 10, minutes \u003c 10"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(LocalTime.parse(\"10:09\"), Slot.convertIntToLocalTime(10, 9));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // hours \u003e\u003d 10, minutes \u003e\u003d 10"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(LocalTime.parse(\"10:10\"), Slot.convertIntToLocalTime(10, 10));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void toString_returnsCorrectFormat() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertEquals(\"10:00-11:00 tutorial\", slotTest.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 77,
      "TYS0n1": 9
    }
  },
  {
    "path": "src/test/java/seedu/zoomaster/slot/TimetableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "package seedu.zoomaster.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "//@@author xingrong123"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "class TimetableTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    Timetable timetableTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    Module moduleTest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    Slot slotTest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    public void initEachSlotTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest \u003d new Module(\"CS2113T\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        timetableTest \u003d new Timetable();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        slotTest \u003d new SlotStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void moduleExists_upperAndLowerCase_returnsTrue() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        timetableTest.addModule(moduleTest);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(timetableTest.moduleExists(\"CS2113T\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(timetableTest.moduleExists(\"cs2113t\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void moduleExists_mismatchModuleCode_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        timetableTest.addModule(moduleTest);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(timetableTest.moduleExists(\"CS2113\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    void isOverlapTimeSlotTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        timetableTest.addModule(moduleTest);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        moduleTest.addSlot(slotTest);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // return value of stub: day \u003d \"wed\", startTime \u003d 11:00, endTime \u003d 12:00"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // earlier day same time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(timetableTest.isOverlapTimeSlot(\"mon\", LocalTime.parse(\"11:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // later day same time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(timetableTest.isOverlapTimeSlot(\"fri\", LocalTime.parse(\"11:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day different time"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(timetableTest.isOverlapTimeSlot(\"wed\", LocalTime.parse(\"12:00\"), LocalTime.parse(\"15:00\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day start time of input \u003d\u003d end time of stub"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(timetableTest.isOverlapTimeSlot(\"wed\", LocalTime.parse(\"12:00\"), LocalTime.parse(\"13:00\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day start time of stub \u003d\u003d end time of input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertFalse(timetableTest.isOverlapTimeSlot(\"wed\", LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:00\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day same start and end time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(timetableTest.isOverlapTimeSlot(\"wed\", LocalTime.parse(\"11:00\"), LocalTime.parse(\"12:00\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day start time of input overlap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(timetableTest.isOverlapTimeSlot(\"wed\", LocalTime.parse(\"11:30\"), LocalTime.parse(\"13:00\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day end time of input overlap"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(timetableTest.isOverlapTimeSlot(\"wed\", LocalTime.parse(\"10:00\"), LocalTime.parse(\"11:30\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day start and end time of input in stub"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(timetableTest.isOverlapTimeSlot(\"wed\", LocalTime.parse(\"11:10\"), LocalTime.parse(\"11:50\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        // same day start and end time of stub in input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "        assertTrue(timetableTest.isOverlapTimeSlot(\"wed\", LocalTime.parse(\"10:00\"), LocalTime.parse(\"13:00\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xingrong123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 65
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "mode bookmark"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "show"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add description www.bookmark.com"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "show"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add description2 www.bookmark2.com"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "show"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "show"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "mode timetable"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add laj1201 tutorial_1 mon 08:00 10:00"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add geh1034 lecture mon 14:00 16:00"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add laj1201 lecture tue 14:00 16:00"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add cs2101 tutorial_1 tue 10:00 12:00"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add cg2271 lecture wed 09:00 11:00"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add cs2113t tutorial wed 11:00 12:00"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add laj1201 tutorial_2 thu 08:00 10:00"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add cg2271 tutorial thu 11:00 12:00"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add cg2271 lab fri 08:00 10:00"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add cs2101 tutorial_2 fri 10:00 12:00"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add cs2113t lecture fri 16:00 18:00"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "add 1111"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xingrong123"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TYS0n1"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "xingrong123": 16,
      "TYS0n1": 8
    }
  }
]
